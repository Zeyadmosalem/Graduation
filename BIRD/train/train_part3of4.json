[
    {
        "db_id": "disney",
        "question_en": "Provide the names of voice actors for the characters of films directed by Wolfgang Reitherman.",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';",
        "evidence_ar": "",
        "SQL": "SELECT T2.hero, T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T3.director = 'Wolfgang Reitherman'"
    },
    {
        "db_id": "disney",
        "question_en": "What genre of movie has Taran as the main character?",
        "question_ar": "",
        "evidence_en": "Taran is the main character of the movie which refers to hero = 'Taran';",
        "evidence_ar": "",
        "SQL": "SELECT T1.genre FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Taran'"
    },
    {
        "db_id": "disney",
        "question_en": "The main character Elsa is voiced by which actor and who is the director of the movie?",
        "question_ar": "",
        "evidence_en": "Elsa is the main character of the movie which refers to hero = 'Elsa'; voiced by which actor refers to voice-actor;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`voice-actor`, T3.director FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T2.movie_title = T3.name WHERE T2.hero = 'Elsa'"
    },
    {
        "db_id": "disney",
        "question_en": "Calculate the percentage of directors whose films grossed over $100 million.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(director where total_gross > 100000000), COUNT(director)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name"
    },
    {
        "db_id": "disney",
        "question_en": "Calculate the percentage of voice actors whose main character in the movie is in the Drama genre.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(voice-actor where genre = 'Drama'), COUNT(voice-actor)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Drama' THEN T3.`voice-actor` ELSE NULL END) AS REAL) * 100 / COUNT(T3.`voice-actor`) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN `voice-actors` AS T3 ON T3.movie = T1.movie_title"
    },
    {
        "db_id": "disney",
        "question_en": "Name the first movie released by Disney.",
        "question_ar": "",
        "evidence_en": "The first movie released refers to movie_title where substr(release_date, length(release_date) - 1, length(release_date)) asc limit 1;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) ASC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "How many movies were released by Disney between 2010 and 2016?",
        "question_ar": "",
        "evidence_en": "Movies refer to movie_title; released between 2010 and 2016 refers to substr(release_date, length(release_date) - 1, length(release_date)) between '10' and '16';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '10' AND '16'"
    },
    {
        "db_id": "disney",
        "question_en": "Who was the first ever Disney villain?",
        "question_ar": "",
        "evidence_en": "the first ever villian is villian that was released before all others in time which refers to substr(release_date, length(release_date) - 1, length(release_date)) desc limit 1;",
        "evidence_ar": "",
        "SQL": "SELECT villian FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "What is Disney's highest grossing action movie?",
        "question_ar": "",
        "evidence_en": "action movie refers to movie_title where genre = 'Action'; highest grossing movie refers to MAX(total_gross)",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Which actor voices Akela from The Jungle Book?",
        "question_ar": "",
        "evidence_en": "Akela refers character = 'Akela'; which actor voices refers to voice-actor;",
        "evidence_ar": "",
        "SQL": "SELECT `voice-actor` FROM `voice-actors` WHERE character = 'Akela'"
    },
    {
        "db_id": "disney",
        "question_en": "Determine Disney's total box office gross between 2010 and 2016.",
        "question_ar": "",
        "evidence_en": "between 2010 and 2016 refers to Year between 2010 and 2016;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Total) FROM revenue WHERE `Year` BETWEEN 2010 AND 2016"
    },
    {
        "db_id": "disney",
        "question_en": "Name the main character of Disney's most popular adventure movie based on its inflation-adjusted gross.",
        "question_ar": "",
        "evidence_en": "adventure movie refers to genre = 'Adventure'; the main character of the movie refers to hero; most popular movie based on its inflation-adjusted gross refers to where MAX(inflation_adjusted_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Adventure' ORDER BY CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Name the director of Disney's lowest grossing movie.",
        "question_ar": "",
        "evidence_en": "lowest grossing movie refers to movie_title where MIN(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) ASC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Find out what proportion of total revenue Walt Disney Parks and Resorts received in 2010.",
        "question_ar": "",
        "evidence_en": "DIVIDE(Walt Disney Parks and Resorts where year = 2010), SUM(year = 2010) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(`Walt Disney Parks and Resorts`) / SUM(Total) * 100 FROM revenue WHERE year = 2010"
    },
    {
        "db_id": "disney",
        "question_en": "Determine the average gross for Disney's PG-13-rated action movies.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(total_gross where genre = 'Action' and MPAA_rating = 'PG-13'), COUNT(movie_title where genre = 'Action' and MPAA_rating = 'PG-13'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) / COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'PG-13'"
    },
    {
        "db_id": "disney",
        "question_en": "How many voice-actors were involved in the Bambi movie?",
        "question_ar": "",
        "evidence_en": "Bambi is the name of the movie which refers to movie = 'Bambi';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT 'voice-actor') FROM `voice-actors` WHERE movie = 'Bambi'"
    },
    {
        "db_id": "disney",
        "question_en": "Find the estimated inflation rate that was used to adjust the 1995 box office revenue for Disney's films.",
        "question_ar": "",
        "evidence_en": "DIVIDE(inflation_adjusted_gross, total_gross) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) = '1995';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) / SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995' GROUP BY SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995'"
    },
    {
        "db_id": "disney",
        "question_en": "What is the difference in the current gross of Cars and its sequel, Cars 2? Which movie is more popular?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(inflation_adjusted_gross where movie_title = 'Cars', inflation_adjusted_gross where movie_title = 'Cars 2'); more popular movie refers to movie_title where MAX(inflation_adjusted_gross);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN movie_title = 'Cars' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END), SUM(CASE WHEN movie_title = 'Cars 2' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) FROM movies_total_gross"
    },
    {
        "db_id": "disney",
        "question_en": "Name the most recent movie directed by Chris Buck. Which of his movies was more successful in terms of grossing? Use the current gross for comparison.",
        "question_ar": "",
        "evidence_en": "Chris Buck refers to director = 'Chris Buck'; the most recent movie refers to movie_title where MAX(release_date); current gross refers to inflation_adjusted_gross; more successful movie refers to MAX(inflation_adjusted_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'"
    },
    {
        "db_id": "disney",
        "question_en": "Name actors who voiced more than five Disney characters.",
        "question_ar": "",
        "evidence_en": "Actors who voiced refer to voice-actor;",
        "evidence_ar": "",
        "SQL": "SELECT 'voice-actor' FROM `voice-actors` GROUP BY 'voice-actor' HAVING COUNT(movie) > 5"
    },
    {
        "db_id": "disney",
        "question_en": "Name the top 5 highest-grossing Disney movies adjusted for inflation. Identify the percentage they contributed to the total of Disney's current gross.",
        "question_ar": "",
        "evidence_en": "The top 5 highest-grossing movies adjusted for inflation refer to MAX(inflation_adjusted_gross)LIMIT 5; DIVIDE(SUM(MAX(inflation_adjusted_gross LIMIT 5)), SUM(inflation_adjusted_gross)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) > 1236035515 THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) * 100 / SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross"
    },
    {
        "db_id": "disney",
        "question_en": "Among all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(movie_title where director = 'Gary Trousdale' and total_gross > 100000000), COUNT(movie_title where director = 'Gary Trousdale')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many current legislators do not have an account on ballotpedia.org ?",
        "question_ar": "",
        "evidence_en": "do not have an account on ballotpedia.org refers to ballotpedia_id IS NULL OR ballotpedia_id = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the official full names of all the current legislators who do not have an account on C-SPAN's video website.",
        "question_ar": "",
        "evidence_en": "legislators who do not have an account refers to cspan_id IS NULL OR cspan_id = ''",
        "evidence_ar": "",
        "SQL": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''"
    },
    {
        "db_id": "legislator",
        "question_en": "How many current legislators were born after the year 1960?",
        "question_ar": "",
        "evidence_en": "born after the year 1960 refers to birthday_bio > '1960-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide_id) FROM current WHERE birthday_bio >= '1961-01-01'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the current female legislators, how many of them have not been registered in Federal Election Commission data?",
        "question_ar": "",
        "evidence_en": "have not been registered refers to fec_id IS NULL; female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE (fec_id IS NULL OR fec_id = '') AND gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the google entity ID of current legislator Sherrod Brown?",
        "question_ar": "",
        "evidence_en": "Sherrod Brown is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown'"
    },
    {
        "db_id": "legislator",
        "question_en": "Which current legislator is older, Sherrod Brown or Maria Cantwell?",
        "question_ar": "",
        "evidence_en": "older refers to MAX(birthday_bio); 'Sherrod Brown' and 'Maria Cantwell' are official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT official_full_name FROM current WHERE official_full_name = 'Sherrod Brown' OR official_full_name = 'Maria Cantwell' ORDER BY birthday_bio LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the username of the current official Facebook presence of current legislator Todd Young?",
        "question_ar": "",
        "evidence_en": "Todd Young is an official_full_name; username of current official Facebook presences refers to facebook;",
        "evidence_ar": "",
        "SQL": "SELECT T1.facebook FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Todd Young'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many current legislators do not have an account on instagram?",
        "question_ar": "",
        "evidence_en": "do not have an account on instagram refers to instagram is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "To which current legislator does twitter ID234128524 belong? Please give his or her full official name.",
        "question_ar": "",
        "evidence_en": "full official name refers to official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.twitter_id = 234128524"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the current official YouTube usernames of all the current female legislators.",
        "question_ar": "",
        "evidence_en": "official YouTube usernames refers to youtube; female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T2.youtube FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the username of the current official Facebook presence of the oldest current legislator?",
        "question_ar": "",
        "evidence_en": "username of the official Facebook refers to facebook; the oldest refers to MAX(birthday_bio)",
        "evidence_ar": "",
        "SQL": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either?",
        "question_ar": "",
        "evidence_en": "do not have accounts on OpenSecrets.org refers to opensecrets_ID is NULL OR opensecrets_id = ''; do not have instagram accounts refers to instagram is null",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS count FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.opensecrets_id IS NULL OR T2.opensecrets_id = ''"
    },
    {
        "db_id": "legislator",
        "question_en": "Current legislator Roger F. Wicker has not been a representative for how many terms?",
        "question_ar": "",
        "evidence_en": "Roger F. Wicker is an official_full_name; not a representative refers to district IS NULL OR district = ''",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''"
    },
    {
        "db_id": "legislator",
        "question_en": "For how many terms has current legislator Sherrod Brown served?",
        "question_ar": "",
        "evidence_en": "Sherrod Brown is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown'"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the official full names of all the current legislators who were once a senator during his or her terms.",
        "question_ar": "",
        "evidence_en": "once a senator during term refers to state_rank IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT T2.official_full_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5?",
        "question_ar": "",
        "evidence_en": "Sherrod Brown is an full official name; started on 1993/1/5 refers to start = '1993-01-05';",
        "evidence_ar": "",
        "SQL": "SELECT T1.state FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the female current legislators, how many of them have served for more than 4 terms?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; served for more than 4 terms refers to COUNT(bioguide > 4)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 )"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the current legislators who have served for more than 6 terms, how many of them were born after 1960?",
        "question_ar": "",
        "evidence_en": "served for more than 6 terms refers to COUNT(bioguide > 6); born after 1960 refers to birthday_bio > = '1960-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio >= '1960-01-01' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 6 )"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the average number of terms for a current female legislator?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; calculation refers to DIVIDE(COUNT(bioguide WHERE gender_bio = 'F'), COUNT(bioguide_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the current legislators whose religion is Roman Catholic, what is the percentage of the ones without an instagram account?",
        "question_ar": "",
        "evidence_en": "religion is Roman Catholic refers to religion_bio = 'Roman Catholic'; calculation = MULTIPLY(DIVIDE(COUNT(instagram is null), COUNT(bioguide_id)), 1.0)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.religion_bio = 'Roman Catholic'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many males were members of the current legislators?",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many current legislators chose Republican as their political party?",
        "question_ar": "",
        "evidence_en": "chose Republican as their political party refers to party = 'Republican'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `current-terms` WHERE party = 'Republican'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many legislators have an Instagram account?",
        "question_ar": "",
        "evidence_en": "have an Instagram account refers to instagram is NOT null and instagram <>''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `social-media` WHERE instagram IS NOT NULL AND instagram <> ''"
    },
    {
        "db_id": "legislator",
        "question_en": "How many females were members of the past legislators?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM historical WHERE gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many male legislators are Roman Catholic?",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M'; Roman Catholic is a religion_bio",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Roman Catholic' AND gender_bio = 'M'"
    },
    {
        "db_id": "legislator",
        "question_en": "What type of political party Sherrod Brown has in 2005?",
        "question_ar": "",
        "evidence_en": "political party refers to party; Sherrod Brown is an official_full_name; official_full_name refers to first_name, last_name; 2005 refers to start = 2005",
        "evidence_ar": "",
        "SQL": "SELECT T1.party FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Sherrod' AND T2.last_name = 'Brown' AND T1.start LIKE '%2005%'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full name of all the senior senators in year 2013.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; senior refers to state_rank = 'senior'; senators refers to type = 'sen'; 2013 refers to start LIKE '2013%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.official_full_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank = 'senior' AND T1.type = 'sen' AND T1.start LIKE '2013%'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the current official Youtube username of Chris Van Hollen?",
        "question_ar": "",
        "evidence_en": "Youtube username refers to youtube; Chris Van Hollen is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.youtube FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many official social media does Mark Warner have?",
        "question_ar": "",
        "evidence_en": "official social media refers to facebook is not null, instagram is not null, twitter is not null, youtube is not null; Mark Warner is an official_full_name; official_full_name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.facebook IS NOT NULL THEN 1 END + CASE WHEN T1.instagram IS NOT NULL THEN 1 END + CASE WHEN T1.twitter IS NOT NULL THEN 1 END + CASE WHEN T1.youtube IS NOT NULL THEN 1 END AS COUNTSOCIAL FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Mark' AND T2.last_name = 'Warner'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the last name of all current legislators who live in California.",
        "question_ar": "",
        "evidence_en": "California refers to state = 'CA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'CA' GROUP BY T1.last_name"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full name of all current female senators.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; female refers to gender_bio = 'F'; senators refers to type = 'sen'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.type = 'sen' AND T2.gender_bio = 'F' GROUP BY T2.ballotpedia_id"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the numeric ID of Chris Van Hollen on GovTrack.us?",
        "question_ar": "",
        "evidence_en": "Chris Van Hollen is an official_full_name; numeric ID on GovTrack.us refers to govtrack",
        "evidence_ar": "",
        "SQL": "SELECT T2.govtrack FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the current official Twitter handle of Roger F. Wicker?",
        "question_ar": "",
        "evidence_en": "Twitter handle refers to twitter; Roger F. Wicker is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.twitter FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Roger F. Wicker'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full name of all past legislators that chose Pro-Administration as their political party in year 1791.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; chose Pro-Administration as their political party refers to party = 'Pro-Administration'; 1791 refers to start < = 1791 AND END > = 1791",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND CAST(T2.start AS DATE) <= 1791 AND CAST(T2.END AS DATE) >= 1791"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the full name of all current female legislators that chose Republican as their political party.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; official_full_name refers to first_name, last_name; female refers to gender_bio = 'F'; chose Republican as their political party refers to party = 'Republican'; current legislators refers to END > Date()",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.END > DATE() GROUP BY T1.bioguide_id"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the district number that Chris Van Hollen serving?",
        "question_ar": "",
        "evidence_en": "Chris Van Hollen is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.district FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district"
    },
    {
        "db_id": "legislator",
        "question_en": "How many times did Richard Durbin become a legislator in district 20?",
        "question_ar": "",
        "evidence_en": "Richard Durbin is an official_full_name;  official_full_name refers to first_name, last_name; district 20 refers to district = 20",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.district = 20 THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Richard' AND T1.last_name = 'Durbin'"
    },
    {
        "db_id": "legislator",
        "question_en": "Calculate the average number of current male legislators who chose Democrat from 2000 until 2021.",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M'; legislators who chose Democrat refers to party = 'Democrat'; from 2000 until 2021 refers to start > = 2000 AND END < = 2021; calculation = DIVIDE(COUNT(bioguide_id), 22)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.bioguide_id) AS REAL) / 22 FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND CAST(T2.start AS DATE) >= 2000 AND CAST(T2.END AS DATE) <= 2021 AND T2.party = 'Democrat'"
    },
    {
        "db_id": "legislator",
        "question_en": "Calculate the percentage of the total number of current female legislators and past female legislators. State which one has the highest value.",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; calculation = MULTIPLY(DIVIDE(COUNT(current.gender_bio = 'F' THEN current.bioguide_id)), (COUNT(historical.gender_bio = 'F' then historical.bioguide_id)), 1.0); the highest value refers to MAX(calculation)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id ELSE NULL END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id ELSE NULL END) FROM historical ) FROM current"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the YouTube ID of the channel 'RepWassermanSchultz.'",
        "question_ar": "",
        "evidence_en": "RepWassermanSchultz refers to youtube",
        "evidence_ar": "",
        "SQL": "SELECT youtube_id FROM `social-media` WHERE youtube = 'RepWassermanSchultz'"
    },
    {
        "db_id": "legislator",
        "question_en": "What are the Facebook, Twitter and YouTube usernames of Adam Kinzinger?",
        "question_ar": "",
        "evidence_en": "Facebook, Twitter and YouTube usernames refers to facebook, twitter, youtube; Adam Kinzinger is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Adam Kinzinger'"
    },
    {
        "db_id": "legislator",
        "question_en": "Which party does Christopher Henderson Clark belong to?",
        "question_ar": "",
        "evidence_en": "Christopher Henderson Clark is full name; full name refers to first_name, middle_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.party FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name OR T2.middle_name OR T2.last_name = 'ChristopherHendersonClark'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the official full names of 10 legislators who have a YouTube account but no Instagram account.",
        "question_ar": "",
        "evidence_en": "have a YouTube account but no Instagram account refers to facebook is not null and (instagram is null or instagram = '')",
        "evidence_ar": "",
        "SQL": "SELECT T2.official_full_name FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.facebook IS NOT NULL AND (T1.instagram IS NULL OR T1.instagram = '') LIMIT 10"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the official full names of legislators representing Virginia.",
        "question_ar": "",
        "evidence_en": "Virginia refers to state = 'VA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name"
    },
    {
        "db_id": "legislator",
        "question_en": "Which historical legislators are members of the National Greenbacker party? Write their first and last names.",
        "question_ar": "",
        "evidence_en": "members of the National Greenbacker party refers to party = 'National Greenbacker'; first and last names refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'National Greenbacker'"
    },
    {
        "db_id": "legislator",
        "question_en": "Which legislator has the YouTube channel 'RoskamIL06?' Write the official full name.",
        "question_ar": "",
        "evidence_en": "YouTube channel 'RoskamIL06' refers to youtube = 'RoskamIL06';",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'RoskamIL06'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full names of 10 legislators who only have a Facebook account.",
        "question_ar": "",
        "evidence_en": "full names refers to official_full_name; only have a Facebook account refers to youtube is NULL or youtube = '', instagram is NULL or instagram = '', twitter is NULL or twitter = '', facebook is not NULL and facebook = ''",
        "evidence_ar": "",
        "SQL": "SELECT T2.official_full_name FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE (T1.youtube IS NULL OR T1.youtube = '') AND (T1.instagram IS NULL OR T1.instagram = '') AND (T1.twitter IS NULL OR T1.twitter = '') AND T1.facebook IS NOT NULL AND T1.facebook != ''"
    },
    {
        "db_id": "legislator",
        "question_en": "Write the full names of junior ranked Republicans.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; junior refers to state_rank = 'junior'; Republicans refers to party = 'Republican'",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T2.state_rank = 'junior' GROUP BY T1.official_full_name"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the contact URL of Claire McCaskill?",
        "question_ar": "",
        "evidence_en": "contact URL refers to contact_form; Claire McCaskill is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.contact_form FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Claire McCaskill' GROUP BY T2.contact_form"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the Wikipedia IDs of historical legislators who are Readjuster Democrats.",
        "question_ar": "",
        "evidence_en": "Readjuster Democrats refers to party = 'Readjuster Democrat'",
        "evidence_ar": "",
        "SQL": "SELECT T2.wikipedia_id FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Readjuster Democrat'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full names of Republican legislators who have a nickname.",
        "question_ar": "",
        "evidence_en": "full names refers to official_full_name; Republican refers to party = 'Republican'; nickname refers to nickname_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.nickname_name IS NOT NULL GROUP BY T1.official_full_name"
    },
    {
        "db_id": "legislator",
        "question_en": "Which state did Veronica Grace Boland represent and which party is she affiliated?",
        "question_ar": "",
        "evidence_en": "Veronica Grace Boland is a full name; full name refers to first_name, middle_name, last_name; party affiliated refers to party",
        "evidence_ar": "",
        "SQL": "SELECT T2.state, T2.party FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name OR T1.middle_name OR T1.last_name = 'VeronicaGraceBoland'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many historical legislators were born in 1973?",
        "question_ar": "",
        "evidence_en": "born in 1973 refers to birthday_bio = 1973",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM historical WHERE CAST(birthday_bio AS date) = 1973"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the ratio of males and females among historical legislators?",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M'; female refers to gender_bio = 'F'; calculation = DIVIDE(COUNT(gender_bio = 'M' THEN bioguide_id), COUNT(gender_bio = 'F' THEN bioguide_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the legislators who will end in 2009, how many are from the Republican party?",
        "question_ar": "",
        "evidence_en": "the legislators who will end in 2009 refers to END 2009; from the Republican party refers to party = 'Republican'",
        "evidence_ar": "",
        "SQL": "SELECT `END`, party FROM `current-terms` WHERE STRFTIME('%Y', `END`) = '2009' AND party = 'Republican'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the official full names and genders of legislators who have Collins as their last name.",
        "question_ar": "",
        "evidence_en": "genders refers to gender_bio; Collins is a last_name",
        "evidence_ar": "",
        "SQL": "SELECT official_full_name, gender_bio FROM current WHERE last_name = 'Collins'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many percent of senators were from class 1?",
        "question_ar": "",
        "evidence_en": "senator refers to type = 'sen'; class 1 refers to class = 1; calculation = MULTIPLY(DIVIDE(COUNT(class = 1 then bioguide), COUNT(bioguide)), 1.0)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `historical-terms` WHERE type = 'sen'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the current legislators' official full names who are from the Independent party.",
        "question_ar": "",
        "evidence_en": "Independent party refers to party = 'Independent'",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name"
    },
    {
        "db_id": "legislator",
        "question_en": "How many years had Jr. John Conyers served in total?",
        "question_ar": "",
        "evidence_en": "Jr. John Conyers is an official_full_name; years served refers to SUM(SUBTRACT(END, start))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'"
    },
    {
        "db_id": "legislator",
        "question_en": "How old was Jr. F. James Sensenbrenner when he first started as a legislator?",
        "question_ar": "",
        "evidence_en": "Jr. F. James Sensenbrenner is an official_full_name; How old refers to SUBTRACT(MIN(start), birthday_bio)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(MIN(T2.start) - T1.birthday_bio AS DATE) AS AGE FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'F. James Sensenbrenner, Jr.'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full names, religions, and parties of legislators who have served in Maine.",
        "question_ar": "",
        "evidence_en": "full names refers to official_full_name; religion refers to religion_bio; Maine refers to state = \"ME\"",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name, T2.relation, T2.party FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' GROUP BY T1.official_full_name, T2.relation, T2.party"
    },
    {
        "db_id": "legislator",
        "question_en": "Among legislators who have an Instagram account, list down their full names and nicknames who have a Thomas ID of less than 1000.",
        "question_ar": "",
        "evidence_en": "have an Instagram account refers to instagram is not null; full names refers to official_full_name; nicknames refers to nickname_name; Thomas ID of less than 1000 refers to thomas_id < 1000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000"
    },
    {
        "db_id": "legislator",
        "question_en": "When was the last serving date of Matt Salmon?",
        "question_ar": "",
        "evidence_en": "Matt Salmon is an official_full_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.END FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Matt Salmon'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the legislators who have served in the U.S. House, provide the party and the state of the legislators who were born in 1738.",
        "question_ar": "",
        "evidence_en": "have served in the U.S. House refers to house_history_id IS NOT NULL; born in 1738 refers to birthday_bio = 1738",
        "evidence_ar": "",
        "SQL": "SELECT T1.party, T1.state FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the IDs and full names of legislators from the Liberal Republican party.",
        "question_ar": "",
        "evidence_en": "full_name refers to first_name, last_name; from the Liberal Republican party refers to party = 'Liberal Republican'",
        "evidence_ar": "",
        "SQL": "SELECT T2.bioguide_id, T2.first_name, T2.last_name FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Liberal Republican'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the legislators who started a term on 2nd December 1793, how many of them were males?",
        "question_ar": "",
        "evidence_en": "started a term on 2nd December 1793 refers to start = '1793-12-02'; male refers to gender_bio = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.bioguide_id) FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND T2.start = '1793-12-02'"
    },
    {
        "db_id": "legislator",
        "question_en": "Compare the number of legislators who started the term in 1875 and 2005.",
        "question_ar": "",
        "evidence_en": "started the term in 1875 refers to start LIKE '1875%'; started the term in 2005 refers to start LIKE '2005%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN `current-terms`.start LIKE '2005%' THEN 1 ELSE 0 END) - ( SELECT SUM(CASE WHEN start LIKE '1875%' THEN 1 ELSE 0 END) FROM `historical-terms` ) FROM `current-terms`"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full names, Twitter IDs, and YouTube IDs of legislators who have Richard as their first name.",
        "question_ar": "",
        "evidence_en": "full names refers to official_full_name; Richard as their first name refers to first_name = 'Richard'",
        "evidence_ar": "",
        "SQL": "SELECT T2.official_full_name, T1.twitter_id, T1.youtube_id FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Richard'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the start date, end date, and party of Pearl Peden Oldfield.",
        "question_ar": "",
        "evidence_en": "start date refers to start; end date refers to end date; Pearl Peden Oldfield refers to official_full_name; official_full_name refers to first_name, middle_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.start, T2.`end`, T2.party FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Pearl' AND T1.middle_name = 'Peden' AND T1.last_name = 'Oldfield'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the birthday of Amy Klobuchar?",
        "question_ar": "",
        "evidence_en": "birthday refers to birthday_bio; Amy Klobuchar refers to full name; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many legislators have not been registered in Federal Election Commission data?",
        "question_ar": "",
        "evidence_en": "have not been registered in Federal Election Commission data refers to fec_id is null OR fec_id = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE fec_id IS NULL OR fec_id = ''"
    },
    {
        "db_id": "legislator",
        "question_en": "State the number of female legislators in the list.",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the full name of legislators who have accounts on OpenSecrets.org.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the middle name of the legislator whose birthday was on 8/24/1956?",
        "question_ar": "",
        "evidence_en": "birthday was on 8/24/1956 refers to birthday_bio = '1956-08-24'",
        "evidence_ar": "",
        "SQL": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many legislators hold the title \"Majority Leader\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide) FROM `current-terms` WHERE title = 'Majority Leader'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the title of legislator whose birthday on 2/20/1942?",
        "question_ar": "",
        "evidence_en": "birthday on 2/20/1942 refers to birthday_bio = '1942-02-20'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the gender of the legislator whose address at 317 Russell Senate Office Building Washington DC 20510?",
        "question_ar": "",
        "evidence_en": "gender refers to gender_bio",
        "evidence_ar": "",
        "SQL": "SELECT T1.gender_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '317 Russell Senate Office Building Washington DC 20510'"
    },
    {
        "db_id": "legislator",
        "question_en": "List out the first name of legislators who are senior Senator.",
        "question_ar": "",
        "evidence_en": "senior refers to state_rank = 'senior'; only senator has this value 'senior'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state_rank = 'senior' GROUP BY T1.first_name"
    },
    {
        "db_id": "legislator",
        "question_en": "Among male legislators, state number of the legislators who are not the senator.",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = M; not the senator refers to class IS NULL OR class = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.state) FROM ( SELECT T2.state FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND (T2.class IS NULL OR T2.class = '') GROUP BY T2.state ) T3"
    },
    {
        "db_id": "legislator",
        "question_en": "Calculate the percentage of legislators who are Senator and were born in 1964.",
        "question_ar": "",
        "evidence_en": "are senator refers to class IS NOT NULL; born in 1964 refers to birthday_bio = 1964; calculation = MULTIPLY(DIVIDE(COUNT(class IS NOT NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'"
    },
    {
        "db_id": "legislator",
        "question_en": "Calculate the percentage of legislators who are not Senator and were born before 1975.",
        "question_ar": "",
        "evidence_en": "not Senator refers to class is NULL; born before 1975 refers to birthday_bio < = 1975; calculation = MULTIPLY(DIVIDE(COUNT(class IS NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the twitter name of the legislator whose birthday was on 5/27/1946?",
        "question_ar": "",
        "evidence_en": "birthday on 5/27/1946 refers to birthday_bio = '1946-05-27'",
        "evidence_ar": "",
        "SQL": "SELECT T2.twitter FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.birthday_bio = '1946-05-27'"
    },
    {
        "db_id": "legislator",
        "question_en": "State the opensecrets_id of the legislator whose YouTube name is Bluetkemeyer.",
        "question_ar": "",
        "evidence_en": "Bluetkemeyer refers to youtube",
        "evidence_ar": "",
        "SQL": "SELECT T1.opensecrets_id FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'BLuetkemeyer'"
    },
    {
        "db_id": "legislator",
        "question_en": "Mention the username of Facebook of Ralph Abraham.",
        "question_ar": "",
        "evidence_en": "username of Facebook refers to facebook; Ralph Abraham is an official_full_name; official_full_name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.first_name = 'Ralph' AND T1.last_name = 'Abraham'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the first name of the legislator whose address at 1005 Longworth HOB; Washington DC 20515-1408?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '1005 Longworth HOB Washington DC 20515-1408' GROUP BY T1.first_name"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the Instagram name of the legislator whose birthday was on 8/24/1952?",
        "question_ar": "",
        "evidence_en": "Instagram name refers to instagram; birthday on 8/24/1952 refers to birthday_bio = '1952-08-24'",
        "evidence_ar": "",
        "SQL": "SELECT T1.instagram FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.birthday_bio = '1952-08-24'"
    },
    {
        "db_id": "legislator",
        "question_en": "State number of legislators who are not the senator among female legislators.",
        "question_ar": "",
        "evidence_en": "not the senator refers to class IS NULL OR class = ''; female refers to gender_bio = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND (T2.class IS NULL OR T2.class = '')"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the religion of the legislator whose YouTube name is MaxineWaters.",
        "question_ar": "",
        "evidence_en": "MaxineWaters relates to youtube",
        "evidence_ar": "",
        "SQL": "SELECT T2.religion_bio FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.youtube = 'MaxineWaters'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many minority leaders have not been registered in Federal Election Commission data?",
        "question_ar": "",
        "evidence_en": "minority leaders is a title; have not been registered in Federal Election Commission data refers to fec_id IS NULL OR fec_id = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.title = 'Minority Leader' AND (T1.fec_id IS NULL OR T1.fec_id = '')"
    },
    {
        "db_id": "legislator",
        "question_en": "How many of the legislators are male?",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the facebook ID of the facebook account named \"RepWilson\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT facebook_id FROM `social-media` WHERE facebook = 'RepWilson'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the total number of legislators with \"John\" as their first name?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE first_name = 'John'"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the district numbers with an Anti-Administration party.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT district FROM `historical-terms` WHERE party = 'Anti-Administration' GROUP BY district"
    },
    {
        "db_id": "legislator",
        "question_en": "List the full name of legislators whose born in 1960.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; born in 1960 refers to birthday_bio like '1960%';",
        "evidence_ar": "",
        "SQL": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the google entity ID of Benjamin Hawkins?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT google_entity_id_id FROM historical WHERE first_name = 'Benjamin' AND last_name = 'Hawkins'"
    },
    {
        "db_id": "legislator",
        "question_en": "Who is the Pro-Administration senator that runs from March 4, 1789 to December 31, 1791?",
        "question_ar": "",
        "evidence_en": "Pro-Administration refers to party = 'Pro-Administration'; senator refers to type = 'sen'; runs from March 4, 1789 refers to start = '1789-03-04'; runs to refers to end = '1791-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND T2.start = '1789-03-04' AND T2.end = '1791-12-31'"
    },
    {
        "db_id": "legislator",
        "question_en": "What are the first and last name of the representatives of the house in district 9?",
        "question_ar": "",
        "evidence_en": "representatives refers to type = 'rep';",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.district = 9"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the full name of the legislators with an independent party.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name"
    },
    {
        "db_id": "legislator",
        "question_en": "List down the open secrets and thomas ID of the democrat senators of New Jersey.",
        "question_ar": "",
        "evidence_en": "open secrets refers to opensecrets_id; democrat refers to party = democrat; senators refers to type = 'sen'; New Jersey refers to state = 'NJ';",
        "evidence_ar": "",
        "SQL": "SELECT T1.opensecrets_id, T1.thomas_id FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NJ' GROUP BY T1.opensecrets_id, T1.thomas_id"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the google entity ID of the senators in New York.",
        "question_ar": "",
        "evidence_en": "google entity ID refers to google_entity_id_id; senators refers to type = 'sen'; New York refers to state = 'NY';",
        "evidence_ar": "",
        "SQL": "SELECT T1.google_entity_id_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NY'"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the religion of the legislator with RSS url of http://www.corker.senate.gov/public/index.cfm/rss/feed.",
        "question_ar": "",
        "evidence_en": "religion refers to religion_bio;",
        "evidence_ar": "",
        "SQL": "SELECT T1.religion_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed' GROUP BY T1.religion_bio"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the party of the legislator named Susan M. Collins?",
        "question_ar": "",
        "evidence_en": "legislator's name refers to offical_full_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.party FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Susan M. Collins' GROUP BY T2.party"
    },
    {
        "db_id": "legislator",
        "question_en": "List down the district number of the representative of the house named Jonathan Grout.",
        "question_ar": "",
        "evidence_en": "district number refers to district; representative of the house refers to type = 'rep';",
        "evidence_ar": "",
        "SQL": "SELECT T2.district FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.last_name = 'Grout' AND T1.first_name = 'Jonathan' AND T2.type = 'rep'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the party and state of the legislator that has an open secrets ID of N00003689 and thomas ID of 186?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the full name and birth date of the legislator with a contact form of http://www.brown.senate.gov/contact/.",
        "question_ar": "",
        "evidence_en": "full name refers to official_full_name; birth date refers to birthday_bio;",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name, T1.birthday_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.contact_form = 'http://www.brown.senate.gov/contact/'"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the state and type of term of the legislator with the google entity ID of kg:/m/02pyzk.",
        "question_ar": "",
        "evidence_en": "type of term refers to type; google entity ID refers to google_entity_id_id; google_entity_id_id = 'kg:/m/02pyzk';",
        "evidence_ar": "",
        "SQL": "SELECT T2.state, T2.type FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.google_entity_id_id = 'kg:/m/02pyzk'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the type and end date of the term of the legislator named John Vining.",
        "question_ar": "",
        "evidence_en": "end date of the term refers to end;",
        "evidence_ar": "",
        "SQL": "SELECT T2.type, T2.end FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'John' AND T1.last_name = 'Vining'"
    },
    {
        "db_id": "legislator",
        "question_en": "Find the difference between the number of female senators and representatives born between 1930 to 1970.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(type = 'sen' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970'), SUM(type = 'rep' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970')); female refers to gender_bio = 'F'; senators refers to type = 'sen'; representatives refers to type = 'rep'; born between 1930 to 1970 strftime('%Y', birthday_bio) between '1930' and '1970';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'rep' THEN 1 ELSE 0 END) FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND strftime('%Y', T1.birthday_bio) BETWEEN '1930' AND '1970'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the male legislators born between 1955 to 1965, what is the percentage of the legislators with an independent party?",
        "question_ar": "",
        "evidence_en": "male refers to gender_bio = 'M'; born between 1955 to 1965 refers to strftime('%Y', birthday_bio) between '1955' and '1965'; percentage = MULTIPLY(DIVIDE(SUM(party = 'Independent' WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965'), COUNT(party WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965')), 100.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND strftime('%Y', T1.birthday_bio) BETWEEN '1955' AND '1965'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the name of the legislator with the ID of W000059?",
        "question_ar": "",
        "evidence_en": "name of the legislator = first_name, last_name; ID of W000059 refers to bioguide_id = 'W000059';",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM historical WHERE bioguide_id = 'W000059'"
    },
    {
        "db_id": "legislator",
        "question_en": "Does Thomas Carnes have an account on ballotpedia.org?",
        "question_ar": "",
        "evidence_en": "if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is null then Thomas Carnes doesn't have an account on ballotpedia.org; if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is NOT null then Thomas Carnes have an account on ballotpedia.org;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN ballotpedia_id IS NULL THEN 'doesn''t have' ELSE 'have' END AS HaveorNot FROM historical WHERE first_name = 'Thomas' AND last_name = 'Carnes'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many legislators were born in 1736?",
        "question_ar": "",
        "evidence_en": "born in 1736 refers to birthday_bio like '1736%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide_id) FROM historical WHERE birthday_bio LIKE '1736%'"
    },
    {
        "db_id": "legislator",
        "question_en": "Which legislators are woman?",
        "question_ar": "",
        "evidence_en": "woman refers to gender_bio = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many districts are in Idaho?",
        "question_ar": "",
        "evidence_en": "Idaho refers to state = 'ID';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(district) FROM `current-terms` WHERE state = 'ID'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many legislators are not senator?",
        "question_ar": "",
        "evidence_en": "not senator refers to class is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide) FROM `current-terms` WHERE class IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the ratio between male and female legislators?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(gender_bio = 'M'),  SUM(gender_bio = 'F')); male refers to gender_bio = 'M'; female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical"
    },
    {
        "db_id": "legislator",
        "question_en": "Calculate the percentage of famous_legislatorss.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(wikipedia_id is not null), (bioguide_id)), 100.0); famous legislators refers to wikipedia_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN wikipedia_id IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bioguide_id) FROM historical"
    },
    {
        "db_id": "legislator",
        "question_en": "Which legislators do not have instagram account?",
        "question_ar": "",
        "evidence_en": "do not have instagram account refers to instagram is null;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.instagram IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "List all the representatives in 1789 along with the districts and state.",
        "question_ar": "",
        "evidence_en": "representatives refers to type = 'rep'; in 1789 refers to start like '1789%';",
        "evidence_ar": "",
        "SQL": "SELECT T2.district, T2.state FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1789%'"
    },
    {
        "db_id": "legislator",
        "question_en": "State all the district that Benjamin Contee has served before.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.district FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T1.last_name = 'Contee'"
    },
    {
        "db_id": "legislator",
        "question_en": "State the address of Amy Klobuchar at the term of 4th of January 2001.",
        "question_ar": "",
        "evidence_en": "at the term of 4th of January 2001 refers to start = '2001-04-01';",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Amy' AND T1.last_name = 'Klobuchar' AND T2.start = '2001-04-01'"
    },
    {
        "db_id": "legislator",
        "question_en": "List all the junior senators in 1997.",
        "question_ar": "",
        "evidence_en": "junior senators refers to state_rank = 'junior'; in 1997 refers to start like '1997%';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1997%' AND T2.state_rank = 'junior'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many female legislators become representatives for California in 2015?",
        "question_ar": "",
        "evidence_en": "female legislators refers to gender_bio = 'F'; representatives refers to type = 'rep'; for California refers to state = 'CA'; in 2015 refers to the year of start date is '2015';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE STRFTIME('%Y', T2.start) = '2015' AND T2.state = 'CA' AND T1.gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the Twitter ID of Emanuel Cleaver?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.twitter_id FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Emanuel' AND T2.last_name = 'Cleaver'"
    },
    {
        "db_id": "legislator",
        "question_en": "State all the Facebook ID for current legislators under the democrat party.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.facebook_id FROM `current-terms` AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide = T2.bioguide WHERE T1.party = 'Democrat' GROUP BY T2.facebook_id"
    },
    {
        "db_id": "legislator",
        "question_en": "Which historical female legislator that have their term ended on the 3rd of March 1791?",
        "question_ar": "",
        "evidence_en": "female legislator refers to gender_bio = 'F'; term ended on the 3rd of March 1791 refers to end = '1791-03-03';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.end = '1791-03-03' AND T1.gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "List all the Jewish current legislators that had served in Florida.",
        "question_ar": "",
        "evidence_en": "Jewish refers to religion_bio = 'Jewish'; in Florida refers to state = 'FL';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Jewish' AND T2.state = 'FL' GROUP BY T1.first_name, T1.last_name"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the ratio between famous current legislators and famous historical legislators?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(COUNT(current.bioguide_id WHERE current.wikipedia_id is not null), COUNT(historical.bioguide_id WHERE historical.wikipedia_id is not null)); famous current legislators refers to current.wikipedia_id is not null; famous historical legislators refers to historical.wikipedia_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current"
    },
    {
        "db_id": "legislator",
        "question_en": "Based on the number of current legislators, calculate the percentage of legislators that served in 21st-Century.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(strftime('%Y', start) between '2000' and '2017'), COUNT(bioguide_id)), 100.0); 1st-Century refers to strftime('%Y', T2.start) between '2000' and '2017';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN strftime('%Y', T2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide"
    },
    {
        "db_id": "legislator",
        "question_en": "How many Catholic legislators do not have an account on ballotpedia.org?",
        "question_ar": "",
        "evidence_en": "Catholic refers to religion_bio = 'Catholic'; do not have an account on ballotpedia.org refers to ballotpedia_id is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "How many class 1 senators belong to the Republican party?",
        "question_ar": "",
        "evidence_en": "senators refers to type = 'sen';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(bioguide) FROM `current-terms` WHERE class = 1 AND party = 'Republican'"
    },
    {
        "db_id": "legislator",
        "question_en": "What are the full names of the non-google female entity legislators that have not been registered in Federal Election Commission data?",
        "question_ar": "",
        "evidence_en": "full names = first_name, last_name; non-google entity refers to google_entity_id_id is null; female refers to gender_bio = 'F'; have not been registered in Federal Election Commission data refers to fec_id is null;",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F' AND google_entity_id_id IS NULL AND fec_id IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "In California, how many representatives ended their term in 1995?",
        "question_ar": "",
        "evidence_en": "California refers to state = 'CA'; representatives refers to type = 'rep'; ended the term in 1995 refers to end like '1995%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `current-terms` WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the full name of the oldest legislator?",
        "question_ar": "",
        "evidence_en": "full name = first_name, last_name; oldest legislator refers to MIN(birthday_bio);",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019?",
        "question_ar": "",
        "evidence_en": "ids refers to bioguide; representatives refers to type = 'rep'; ended the term on 1/3/2019 refers to end = '2019-01-03';",
        "evidence_ar": "",
        "SQL": "SELECT bioguide FROM `current-terms` WHERE type = 'rep' AND party = 'Democrat' AND end = '2019-01-03' AND district = 13"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the official Twitter handle of Jason Lewis?",
        "question_ar": "",
        "evidence_en": "official Twitter handle refers to twitter;",
        "evidence_ar": "",
        "SQL": "SELECT T2.twitter FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Jason Lewis'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the Independent senators that started their term in 2011 and onwards, what are the official full names of the senators that caucused with the Democrat?",
        "question_ar": "",
        "evidence_en": "Independent refers to party = 'Independent'; senators refers to type = 'sen'; started the term in 2011 and onwards refers to strftime('%Y', start) > = '2011'; caucused with the Democrat refers to caucus = 'Democrat';",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' AND strftime('%Y', T2.start) >= '2011' AND T2.type = 'sen' AND T2.caucus = 'Democrat'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many Jewish legislators do not have facebook?",
        "question_ar": "",
        "evidence_en": "Jewish legislators refers to religion_bio = 'Jewish'; do not have facebook refers to facebook is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3"
    },
    {
        "db_id": "legislator",
        "question_en": "Which party has the highest number of legislators who are Baptist?",
        "question_ar": "",
        "evidence_en": "party that has the highest number of legislators refers to MAX(COUNT(party)); Baptist refers to religion_bio = 'Baptist';",
        "evidence_ar": "",
        "SQL": "SELECT T2.party FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "List the official full names of all the legislators who have facebook, instagram, twitter and youtube accounts.",
        "question_ar": "",
        "evidence_en": "have facebook, instagram, twitter and youtube accounts refers to 'facebook' is not null AND 'instagram' is not null AND 'twitter' is not null AND 'youtube' is not null;",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "How many districts did John Conyers, Jr. serve in total?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.district) FROM ( SELECT T2.district FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.' GROUP BY T2.district ) T3"
    },
    {
        "db_id": "legislator",
        "question_en": "What are the Wikipedia page names of all the anti-administration senators?",
        "question_ar": "",
        "evidence_en": "Wikipedia page names refers to wikipedia_id; anti-administration refers to party = 'Anti-Administration'; senators refers to type = 'sen';",
        "evidence_ar": "",
        "SQL": "SELECT T1.wikipedia_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.party = 'Anti-Administration'"
    },
    {
        "db_id": "legislator",
        "question_en": "List the official full names of all the legislators that served 13 district for 26 consecutive years.",
        "question_ar": "",
        "evidence_en": "served only one district for 26 consecutive years refers to SUBTRACT(SUM(cast(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 26",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 26 THEN T1.official_full_name END FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.district HAVING COUNT(T1.official_full_name) = 13"
    },
    {
        "db_id": "legislator",
        "question_en": "How many Federalist representatives are there whose first names are Benjamin?",
        "question_ar": "",
        "evidence_en": "Federalist refers to party = 'Federalist'; representatives refers to type = 'rep';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T"
    },
    {
        "db_id": "legislator",
        "question_en": "How many female representatives served in the state of California for at least 10 years?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; served for at least 10 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) > 10;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.`end`) AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the party of the oldest legislator?",
        "question_ar": "",
        "evidence_en": "oldest legislator refers to MIN(birthday_bio);",
        "evidence_ar": "",
        "SQL": "SELECT T1.party FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide ORDER BY T2.birthday_bio LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "Who is the Lutheran representative that served in the state of Ohio for 14 years before becoming a senator?",
        "question_ar": "",
        "evidence_en": "Lutheran refers to religion_bio = 'Lutheran'; representative refers to type = 'rep'; served for 14 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 14;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 14 THEN official_full_name END FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Lutheran' AND T2.state = 'OH' AND T2.type = 'rep'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the current legislators born after the year 1960, how many of them are not google entities?",
        "question_ar": "",
        "evidence_en": "born after the year 1960 refers to strftime('%Y', birthday_bio) > '1960'; not google entities refers to google_entity_id_id is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the official full names of all the current legislators who have served in the U.S. House.",
        "question_ar": "",
        "evidence_en": "have served in the U.S. House refers to house_history_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT official_full_name FROM current WHERE house_history_id IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "How many current legislators have both accounts on both VoteView.com and maplight.org?",
        "question_ar": "",
        "evidence_en": "have both accounts on both VoteView.com and maplight.org refers to icpsr_id is not null AND maplight_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the current female legislators, how many of them have attended in Senate roll call votes?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; have attended in Senate roll call votes refers to lis_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(lis_id) FROM current WHERE gender_bio = 'F' AND lis_id IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the religion of current legislator Sherrod Brown?",
        "question_ar": "",
        "evidence_en": "religion refers to religion_bio;",
        "evidence_ar": "",
        "SQL": "SELECT religion_bio FROM current WHERE official_full_name = 'Sherrod Brown'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the religion with the most occurrrence of the current legislators?",
        "question_ar": "",
        "evidence_en": "religion with the most occurrrence of the current legislators refers to MAX(count(religion_bio));",
        "evidence_ar": "",
        "SQL": "SELECT religion_bio FROM current GROUP BY religion_bio ORDER BY COUNT(religion_bio) DESC LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the current official Instagram handle of current legislator Bob Corker?",
        "question_ar": "",
        "evidence_en": "official Instagram handle refers to instagram;",
        "evidence_ar": "",
        "SQL": "SELECT T2.instagram FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Bob Corker'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the current legislators who have accounts on both http://thomas.gov, how many of them have accounts on instagram?",
        "question_ar": "",
        "evidence_en": "have accounts on both http://thomas.gov refers to thomas_id is NOT null; have accounts on instagram refers to instagram is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.thomas_id IS NOT NULL AND T2.instagram IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the username of the current official Facebook presence of all the current legislators that are famous or impact.",
        "question_ar": "",
        "evidence_en": "username of the current official Facebook presence of the legislators refers to facebook; legislators that are famous or impact refers to wikipedia_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL GROUP BY T2.facebook"
    },
    {
        "db_id": "legislator",
        "question_en": "For how many terms have the oldest current legislator served?",
        "question_ar": "",
        "evidence_en": "oldest legislator refers to MIN(birthday_bio);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )"
    },
    {
        "db_id": "legislator",
        "question_en": "What was current legislator Sherrod Brown's Washington, D.C. office phone number during his term starting on 2013/1/3?",
        "question_ar": "",
        "evidence_en": "Washington, DC office phone number refers to phone; terms starting on 2013/1/3 refers to start = '2013-01-03';",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Sherrod Brown' AND T1.start = '2013-01-03'"
    },
    {
        "db_id": "legislator",
        "question_en": "Current legislator Sherrod Brown has been in the Democrat party during how many terms that he has served?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.party = 'Democrat'"
    },
    {
        "db_id": "legislator",
        "question_en": "Please list the full official names of all the current legislators who served the term that started on 2013/1/3.",
        "question_ar": "",
        "evidence_en": "term that started on 2013/1/3 refers to start = '2013-01-03';",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03'"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the current legislators who served the term starting on 2013/1/3, how many of them are female?",
        "question_ar": "",
        "evidence_en": "term starting on 2013/1/3 refers to start = '2013-01-03; female refers to gender_bio = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03' AND T1.gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the full official name of the current legislator that has served for the most number of terms?",
        "question_ar": "",
        "evidence_en": "served for the most number of terms refers to MAX(COUNT(bioguide));",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.bioguide ORDER BY COUNT(T2.bioguide) DESC LIMIT 1"
    },
    {
        "db_id": "legislator",
        "question_en": "For how many terms has current legislator Sherrod Brown served as a representative for district no.13?",
        "question_ar": "",
        "evidence_en": "district no. 13 refers to district = 13;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.district = 13"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the official full name of the current legislator whose current official Facebook presence is \"senjoniernst\"?",
        "question_ar": "",
        "evidence_en": "current official Facebook presence is \"senjoniernst\" refers to facebook = 'senjoniernst';",
        "evidence_ar": "",
        "SQL": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook = 'senjoniernst'"
    },
    {
        "db_id": "legislator",
        "question_en": "Which current legislator has served for more terms, Sherrod Brown or Maria Cantwell?",
        "question_ar": "",
        "evidence_en": "if sum(official_full_name = 'Maria Cantwell') > sum(official_full_name = 'Sherrod Brown') then Maria Cantwell has served for more term than Sherrod Brown; if sum(official_full_name = 'Sherrod Brown') > sum(official_full_name = 'Maria Cantwell'), then Sherrod Brown has served for more terms than Maria Cantwell;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T1.official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell' ELSE 'Sherrod Brown' END FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide"
    },
    {
        "db_id": "legislator",
        "question_en": "Among all the current legislators who have served for more than 4 terms, what is the percentage of them being female?",
        "question_ar": "",
        "evidence_en": "have served for more than 4 years refers to count(bioguide) > 4; percentage = MULTIPLY(DIVIDE(SUM(gender_bio = 'F'), count(bioguide)), 100.0); female refers to gender_bio = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bioguide) FROM ( SELECT T2.bioguide, T1.gender_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 ) T3"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the average number of terms served for a current legislator that's famous or impact?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(bioguide), COUNT(bioguide_id)); legislator that's famous or impact refers to wikipedia_id is not null;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL"
    },
    {
        "db_id": "legislator",
        "question_en": "How many of the legislators are female?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the total number of senators New Jersey have?",
        "question_ar": "",
        "evidence_en": "senators refers to type = 'rep'; New Jersey refers to state = 'NJ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(type) FROM `historical-terms` WHERE state = 'NJ' AND type = 'rep'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the address of the legislator with the contact form of http://www.carper.senate.gov/contact/.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT address FROM `current-terms` WHERE contact_form = 'http://www.carper.senate.gov/contact/'"
    },
    {
        "db_id": "legislator",
        "question_en": "Provide the Instagram username of the legislator named Benjamin Hawkins.",
        "question_ar": "",
        "evidence_en": "Instagram username refers to instagram;",
        "evidence_ar": "",
        "SQL": "SELECT T1.instagram FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Benjamin' AND T2.last_name = 'Hawkins'"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the alphanumeric ID of the Catholic legislators in Nebraska.",
        "question_ar": "",
        "evidence_en": "alphanumeric ID refers to bioguide; Catholic legislators refers to religion_bio = 'Catholic'; Nebraska refers to state = 'NE';",
        "evidence_ar": "",
        "SQL": "SELECT T1.bioguide FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.religion_bio = 'Catholic' AND T1.state = 'NE'"
    },
    {
        "db_id": "legislator",
        "question_en": "List down the MapLight ID of the representatives in Maine.",
        "question_ar": "",
        "evidence_en": "representatives refers to type = 'rep'; Maine refers to state = 'ME';",
        "evidence_ar": "",
        "SQL": "SELECT T1.maplight_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'ME' GROUP BY T1.maplight_id"
    },
    {
        "db_id": "legislator",
        "question_en": "Give the type and start date of the term of the legislator born on November 26, 1727.",
        "question_ar": "",
        "evidence_en": "start date of the term refers to start; born on November 26, 1727 refers to birthday_bio = '1727-11-26';",
        "evidence_ar": "",
        "SQL": "SELECT T2.type, T2.start FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1727-11-26'"
    },
    {
        "db_id": "legislator",
        "question_en": "What is the contact form of the legislator named Rick Crawford?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.contact_form FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'"
    },
    {
        "db_id": "legislator",
        "question_en": "How many female representatives are there in Michigan?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; Michigan refers to state = 'MI';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'MI' AND T1.gender_bio = 'F' GROUP BY T1.bioguide_id ) T"
    },
    {
        "db_id": "legislator",
        "question_en": "Among the female legislators, what is the percentage of the senators in Maine?",
        "question_ar": "",
        "evidence_en": "female refers to gender_bio = 'F'; percentage = MULTIPLY(DIVIDE(SUM(type = 'sen'), COUNT(type)), 100.0); senators refers to type = 'sen'; Maine refers to state = 'ME';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' AND T1.gender_bio = 'F'"
    },
    {
        "db_id": "olympics",
        "question_en": "Please list the names of all the Olympic games that John Aalberg has taken part in.",
        "question_ar": "",
        "evidence_en": "name of the Olympic games refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'"
    },
    {
        "db_id": "olympics",
        "question_en": "What was the name of the Olympic game that John Aalberg took part in when he was 31?",
        "question_ar": "",
        "evidence_en": "when he was 31 refers to age = 31; name of the Olympic games refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T2.age = 31"
    },
    {
        "db_id": "olympics",
        "question_en": "When John Aalberg took part in the 1994 Winter Olympic Game, how old was he?",
        "question_ar": "",
        "evidence_en": "how old was he refers to age; 1994 Winter refers to games_name = '1994 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T1.games_name = '1994 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Olympic competitors are from Finland?",
        "question_ar": "",
        "evidence_en": "competitors refer to person_id; from Finland refers to region_name = 'Finland';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Finland'"
    },
    {
        "db_id": "olympics",
        "question_en": "Please list the names of all the Olympic competitors from Finland.",
        "question_ar": "",
        "evidence_en": "names of competitors refer to full_name; from Finland refers to region_name = 'Finland';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'"
    },
    {
        "db_id": "olympics",
        "question_en": "The Olympic competitor John Aalberg is from which region?",
        "question_ar": "",
        "evidence_en": "from which region refers to region_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the NOC code of the region where the tallest male Olympic competitor is from?",
        "question_ar": "",
        "evidence_en": "NOC code of the region refers to noc; male refers to gender = 'M'; the tallest refers to MAX(height);",
        "evidence_ar": "",
        "SQL": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Among all the Olympic competitors from Finland, how many of them are female?",
        "question_ar": "",
        "evidence_en": "competitors from Finland refer to id where region_name = 'Finland'; female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which city was the 1992 Summer Olympic Games held?",
        "question_ar": "",
        "evidence_en": "In which city refers to city_name; 1992 Summer Olympic Games refer to games_name = '1992 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "Please list the names of the Olympic games that were held in London.",
        "question_ar": "",
        "evidence_en": "held in London refers to city_name = 'London';",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which year did London hold its earliest Olympic game?",
        "question_ar": "",
        "evidence_en": "In which year refers to games_year; London refers to city_name = 'London'; earliest Olympic game refers to MIN(games_year);",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "For how many times has London held the Olympic games?",
        "question_ar": "",
        "evidence_en": "London refers to city_name = 'London'; how many times refer to COUNT(games_id);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average height of the male Olympic competitors from Finland?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(height), COUNT(id)) where region_name = 'Finland' and gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(id where region_name = 'Finland'), COUNT(id)) as percentage where games_name = '1994 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '1994 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which sport does the event \"Shooting Women's Trap\" belong to?",
        "question_ar": "",
        "evidence_en": "sport refers to sport_name; event \"Shooting Women's Trap\" refers to event_name = 'Shooting Women''s Trap';",
        "evidence_ar": "",
        "SQL": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Shooting Women%s Trap'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which city was the host of 1936 Winter Olympic Games?",
        "question_ar": "",
        "evidence_en": "Which city refers to city_name; 1936 Winter Olympic refers to games_name = '1936 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Olympic Games has London hosted?",
        "question_ar": "",
        "evidence_en": "London refers to city_name = 'London';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'"
    },
    {
        "db_id": "olympics",
        "question_en": "Tell the number of swimming related events.",
        "question_ar": "",
        "evidence_en": "swimming refers to sport_name = 'Swimming';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Swimming'"
    },
    {
        "db_id": "olympics",
        "question_en": "For Peter Kohnke, show the name of his/her region.",
        "question_ar": "",
        "evidence_en": "name of his/her region refers to region_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.",
        "question_ar": "",
        "evidence_en": "id of the game refers to games_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'"
    },
    {
        "db_id": "olympics",
        "question_en": "Show the name of the sport with the most events.",
        "question_ar": "",
        "evidence_en": "name of the sport with the most events refers to sport_name where MAX(COUNT(id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.sport_name ORDER BY COUNT(T2.event_name) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Give the name of the tallest athlete from Sweden.",
        "question_ar": "",
        "evidence_en": "the tallest athlete refers to id where MAX(height); from Sweden refers to region_name = 'Sweden'; name refers to full_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Sweden' ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes in the database are from Guatemala?",
        "question_ar": "",
        "evidence_en": "from Guatemala refers to region_name = 'Guatemala';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Guatemala'"
    },
    {
        "db_id": "olympics",
        "question_en": "Who has participated in the most Olympic Games in the database?",
        "question_ar": "",
        "evidence_en": "Who refers to full_name; participated in the most Olympic Games refers to MAX(COUNT(games_id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Show the name of the competitor id 90991.",
        "question_ar": "",
        "evidence_en": "name of the competitor refers to full_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 90991"
    },
    {
        "db_id": "olympics",
        "question_en": "How many competitor ids does Martina Kohlov have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the bmi of the competitor id 147420.",
        "question_ar": "",
        "evidence_en": "DIVIDE(weight), MULTIPLY(height, height) where id = 147420;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.weight AS REAL) / (T1.height * T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 147420"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of male athletes from Estonia?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Estonia'"
    },
    {
        "db_id": "olympics",
        "question_en": "Who is the youngest person who participated in the Olympics?",
        "question_ar": "",
        "evidence_en": "Who is the youngest person refers to full_name where MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many 24 years old competitors competed in Men's Basketball?",
        "question_ar": "",
        "evidence_en": "24 years old competitors refer to id where age = 24; Men's Basketball refers to event_name = 'Basketball Men''s Basketball';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball' AND T2.age = 24"
    },
    {
        "db_id": "olympics",
        "question_en": "What are the names of the events under Art Competitions?",
        "question_ar": "",
        "evidence_en": "Art Competitions refer to sport_name = 'Art Competitions'; names of events refers to event_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Art Competitions'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many gold medals does Henk Jan Zwolle have?",
        "question_ar": "",
        "evidence_en": "gold medals refer to medal_name = 'Gold';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Henk Jan Zwolle' AND T4.medal_name = 'Gold'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the event where competitors received the most gold medals?",
        "question_ar": "",
        "evidence_en": "received the most gold medals refers to MAX(COUNT(medal_name = 'Gold'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T3.medal_name = 'Gold' GROUP BY T2.id ORDER BY COUNT(T1.event_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes are from Australia?",
        "question_ar": "",
        "evidence_en": "from Australia refer region_name = 'Australia';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Australia'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which cities hosted at least 3 Olympic games?",
        "question_ar": "",
        "evidence_en": "cities refer to city_name; hosted at least 3 Olympic games refers to COUNT(games_id) > = 3;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.id HAVING COUNT(T1.games_id) >= 3"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Summer games were held in Stockholm?",
        "question_ar": "",
        "evidence_en": "Summer games refer to id where season = 'Summer'; in Stockholm refers to city_name = 'Stockholm';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region do most of the athletes are from?",
        "question_ar": "",
        "evidence_en": "region refers to region_name; most of the athletes refer to MAX(COUNT(person_id));",
        "evidence_ar": "",
        "SQL": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Where was the first Olympic game held?",
        "question_ar": "",
        "evidence_en": "Where it was held refers to city_name; the first Olympic game refers to id where MIN(games_year);",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id ORDER BY T3.games_year LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the game in which the oldest Olympian has ever participated?",
        "question_ar": "",
        "evidence_en": "the oldest Olympian refers to id where MAX(age); name of the game refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes competed in the 1992 Summer Olympics?",
        "question_ar": "",
        "evidence_en": "1992 Summer Olympics refer to games_name = '1928 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Olympic events did Michael Phelps II join in total? Find the percentage of the events where he won a gold medal.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(event_id where medal_name = 'Gold'), COUNT(event_id)) as percentage where full_name = 'Michael Fred Phelps, II';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.event_id) , CAST(COUNT(CASE WHEN T4.id = '1' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T4.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Michael Fred Phelps, II'"
    },
    {
        "db_id": "olympics",
        "question_en": "In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games.",
        "question_ar": "",
        "evidence_en": "the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));",
        "evidence_ar": "",
        "SQL": "SELECT P1 , ( SELECT MAX(P2) - MIN(P2) FROM ( SELECT COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1 ) FROM ( SELECT T1.season AS P1, COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What age of the competitors is the most numerous?",
        "question_ar": "",
        "evidence_en": "age is the most numerous refers to age where MAX(COUNT(person_id));",
        "evidence_ar": "",
        "SQL": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "In which cities beginning with the letter M have the Olympic Games been held?",
        "question_ar": "",
        "evidence_en": "cities beginning with the letter M refer to city_name LIKE 'M%';",
        "evidence_ar": "",
        "SQL": "SELECT city_name FROM city WHERE city_name LIKE 'M%'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which cities were the 1976 winter and summer games held?",
        "question_ar": "",
        "evidence_en": "cities refer to city_name; 1976 winter and summer games refer to games_name IN ('1976 Winter', '1976 Summer');",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')"
    },
    {
        "db_id": "olympics",
        "question_en": "What was the medal that Coleen Dufresne got?",
        "question_ar": "",
        "evidence_en": "What medal refers to medal_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.medal_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Coleen Dufresne (-Stewner)'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the competitor who has won the most medals?",
        "question_ar": "",
        "evidence_en": "name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Where is competitor Estelle Nze Minko from?",
        "question_ar": "",
        "evidence_en": "Where competitor is from refers to region_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Estelle Nze Minko'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of all the sports Chin Eei Hui has competed in?",
        "question_ar": "",
        "evidence_en": "name of the sport refers to sport_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the oldest person who participated in the Olympic Games?",
        "question_ar": "",
        "evidence_en": "the oldest person refers to person_id where MAX(age); name refers to full_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "In which Olympic Games have the largest number of women participation?",
        "question_ar": "",
        "evidence_en": "the largest number of women participation refers to MAX(COUNT(gender = 'F')); In which Olympic Games refer to games_year;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'F' GROUP BY T1.games_name ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many males from Belgium have participated in an Olympic Games?",
        "question_ar": "",
        "evidence_en": "males refer to gender = 'M'; Belgium refers to region_name = 'Belgium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many persons participated in the Sapporo Olympics?",
        "question_ar": "",
        "evidence_en": "the Sapporo Olympics refer to games_id where city_name = 'Sapporo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which Olympic Games has Morten Aleksander Djupvik participated?",
        "question_ar": "",
        "evidence_en": "In which Olympic Games refer to games_year;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Morten Aleksander Djupvik'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many persons in total have participated in 12 meter Mixed Sailing competitions?",
        "question_ar": "",
        "evidence_en": "12 meter Mixed Sailing competitions refer to event_name = 'Sailing Mixed 12 metres';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN sport AS T3 ON T2.sport_id = T3.id WHERE T2.event_name = 'Sailing Mixed 12 metres'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many different events are there of Modern Pentathlon?",
        "question_ar": "",
        "evidence_en": "Modern Pentathlon refers to sport_name = 'Modern Pentathlon';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Modern Pentathlon'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the percentage of women who have participated in Equestrianism Mixed Three-Day Event, Individual.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(person_id where gender = 'F), COUNT(person_id)) as percentage where event_name = 'Equestrianism Mixed Three-Day Event, Individual';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T4.event_name = 'Equestrianism Mixed Three-Day Event, Individual'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the average age of the persons who participated in the 1992 Summer Games.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(age), COUNT(person_id)) where games_name = '1992 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1992 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "List out years that only have summer games.",
        "question_ar": "",
        "evidence_en": "years refer to games_year; only have summer games refer to games_year where COUNT(games_name) = 1 and season = 'Summer';",
        "evidence_ar": "",
        "SQL": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Olympics games were held during the 90s?",
        "question_ar": "",
        "evidence_en": "games refer to id; during the 90s refers to games_year BETWEEN 1990 AND 1999;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(games_year) FROM games WHERE games_year BETWEEN '1990' AND '1999'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes participated in the 2014 Winter Olympics?",
        "question_ar": "",
        "evidence_en": "athletes refer to person_id; 2014 Winter Olympics refer to games_name = '2014 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes from region 151 have won a medal?",
        "question_ar": "",
        "evidence_en": "athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athlete from China participate in the 2016 Summer Olympics?",
        "question_ar": "",
        "evidence_en": "athletes from China refer to person_id where region_name = 'China'; the 2016 Summer Olympics refer to games_name = '2016 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '2016 Summer' AND T5.region_name = 'China'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many gold medals were given to the winners in the Ice Hockey Men's Ice Hockey event?",
        "question_ar": "",
        "evidence_en": "gold medals given to the winners refer to competitor_id where medal_name = 'Gold'; Ice Hockey Men's Ice Hockey refers to event_name = 'Ice Hockey Men''s Ice Hockey';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.competitor_id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id WHERE T1.event_name LIKE 'Ice Hockey Men%s Ice Hockey' AND T2.medal_id = 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region has the highest medal number?",
        "question_ar": "",
        "evidence_en": "region refers to region_name; the highest medal number refers to MAX(COUNT(medal_id <> 4));",
        "evidence_ar": "",
        "SQL": "SELECT T5.region_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.id != 4 GROUP BY T5.region_name ORDER BY COUNT(T2.competitor_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "List out all the gold medalist winners in cycling sport.",
        "question_ar": "",
        "evidence_en": "gold medalist winners refer to full_name where medal_name = 'Gold'; cycling sport refers to sport_name = 'Cycling';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1"
    },
    {
        "db_id": "olympics",
        "question_en": "List out all the medals won by Lee Chong Wei.",
        "question_ar": "",
        "evidence_en": "medals refer to medal_id where medal_id <> 4;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Lee Chong Wei' AND T2.medal_id <> 4"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2002 Winter' AND T2.age < 20"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the ratio male to female athletes in the 2012 Summer Olympic?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(gender = 'M'), COUNT(gender = 'F')) where games_name = '2012 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which summer Olympic have the highest and lowest number of participants?",
        "question_ar": "",
        "evidence_en": "the highest number of participants refers to MAX(COUNT(person_id)); the lowest number of participants refers to MIN(COUNT(person_id)); Which summer Olympic refers to games_name where season = 'Summer';",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) DESC LIMIT 1 ) AS HIGHEST , ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) LIMIT 1 ) AS LOWEST"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes from Malaysia have won a medal?",
        "question_ar": "",
        "evidence_en": "Malaysia refers to region_name = 'Malaysia'; athletes won a medal refer to competitor_id where medal_id <> 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games?",
        "question_ar": "",
        "evidence_en": "fall into overweight BMI category refers to DIVIDE(weight), MULTIPLY(height, height) < 30; Canoeing refers to a sport name; the 2008 Summer games refer to games_name = '2008 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T5.id) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id INNER JOIN games AS T6 ON T4.games_id = T6.id WHERE T1.sport_name = 'Canoeing' AND T6.games_name = '2008 Summer' AND T5.weight * 10000.0 / (T5.height * T5.height) BETWEEN 25.0 AND 30"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average height of male athletes playing basketball sport?",
        "question_ar": "",
        "evidence_en": "AVG(height) where sport_name = 'Basketball' and event_name = 'Basketball Men''s';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many female athletes are from the Philippines?",
        "question_ar": "",
        "evidence_en": "female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region is Yao Ming from?",
        "question_ar": "",
        "evidence_en": "region refers to region_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'"
    },
    {
        "db_id": "olympics",
        "question_en": "At what age did Michael Fred Phelps, II join the Olympics?",
        "question_ar": "",
        "evidence_en": "At what age join the Olympics refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Michael Fred Phelps, II' ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes are there in the region where Clara Hughes is from?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(person_id) FROM person_region WHERE region_id = ( SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Clara Hughes' )"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?",
        "question_ar": "",
        "evidence_en": "Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T1.full_name = 'Ian James Thorpe' AND T4.event_name LIKE 'Swimming Men%s 200 metres Freestyle'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many times was Larysa Semenivna Latynina (Diriy-) declared as champion in Gymnastics Women's Individual All-Around?",
        "question_ar": "",
        "evidence_en": "Gymnastics Women's Individual All-Around refers to event_name = 'Gymnastics Women''s Individual All-Around'; declared as champion refers to medal_name = 'Gold' or medal_id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Larysa Semenivna Latynina (Diriy-)' AND T1.event_name LIKE 'Gymnastics Women%s Individual All-Around' AND T2.medal_id = 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What are the names of the cities where Carl Lewis Borack competed?",
        "question_ar": "",
        "evidence_en": "name of the cities refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'Carl Lewis Borack'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Olympic games were held in London?",
        "question_ar": "",
        "evidence_en": "London refers to city_name = 'London';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which city was the 1992 Summer Olympic held?",
        "question_ar": "",
        "evidence_en": "city refers to city_name; 1992 Summer Olympic refers to games_name = '1992 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes over the age of 59 competed in the 2016 Summer Olympics?",
        "question_ar": "",
        "evidence_en": "over the age of 59 refers to age > 59; the 2016 Summer Olympics refer to games_name = '2016 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2016 Summer' AND T2.age > 59"
    },
    {
        "db_id": "olympics",
        "question_en": "Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors?",
        "question_ar": "",
        "evidence_en": "Los Angeles refers to city_name = 'Lost Angeles'; the Olympic game refers to games_name; the most number of competitors refers to MAX(COUNT(games_name));",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "How many 10-year old athletes participated in the Gymnastics Men's Parallel Bars, Teams event?",
        "question_ar": "",
        "evidence_en": "10-year old athletes refer to competitor_id where age = 10; Gymnastics Men's Parallel Bars, Teams refer to event_name = 'Gymnastics Men''s Parallel Bars, Teams';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Gymnastics Men%s Parallel Bars, Teams' AND T2.age = 10"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average age of the athletes from the United States of America who competed in the 2016 Summer Olympics?",
        "question_ar": "",
        "evidence_en": "AVG(age) where games_name = '2016 Summer' and region_name = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region does the NOC code \"COL\" stand for?",
        "question_ar": "",
        "evidence_en": "region refers to region_name; NOC code \"COL\" refers to noc = 'COL';",
        "evidence_ar": "",
        "SQL": "SELECT region_name FROM noc_region WHERE noc = 'COL'"
    },
    {
        "db_id": "olympics",
        "question_en": "State the name of sport id 19.",
        "question_ar": "",
        "evidence_en": "name of sport refers to sport_name",
        "evidence_ar": "",
        "SQL": "SELECT sport_name FROM sport WHERE id = 19"
    },
    {
        "db_id": "olympics",
        "question_en": "Give the id of the event \"Shooting Mixed Skeet\".",
        "question_ar": "",
        "evidence_en": "\"Shooting Mixed Skeet\" refers to event_name = 'Shooting Mixed Skeet';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet'"
    },
    {
        "db_id": "olympics",
        "question_en": "Provide hockey's sport id.",
        "question_ar": "",
        "evidence_en": "hockey's sport refers to sport_name = 'hockey';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM sport WHERE sport_name = 'Hockey'"
    },
    {
        "db_id": "olympics",
        "question_en": "Tell the weight of Dagfinn Sverre Aarskog.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the id of Rio de Janeiro?",
        "question_ar": "",
        "evidence_en": "Rio de Janeiro refers to city_name = 'Rio de Janeiro';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM city WHERE city_name = 'Rio de Janeiro'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many people have won the gold medal of the event \"Rowing Women's Coxed Eights\"?",
        "question_ar": "",
        "evidence_en": "won the gold medal refers to medal_name = 'Gold'; event \"Rowing Women's Coxed Eights\" refers to event_name = 'Rowing Women''s Coxed Eights';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T2.event_name LIKE 'Rowing Women%s Coxed Eights' AND T3.medal_name = 'Gold'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many kinds of events belong to the sport of cycling?",
        "question_ar": "",
        "evidence_en": "kinds of events refer to event_name; sport of cycling refers to sport_name = 'Cycling';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is Vijay Singh Chauhan's region name?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'"
    },
    {
        "db_id": "olympics",
        "question_en": "When did Roma host the Olympic Games?",
        "question_ar": "",
        "evidence_en": "Roma refers to city_name = 'Roma'; When host refers to games_year;",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Roma'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many 20 years old athletes were there in the 1984 Summer Olympic Games?",
        "question_ar": "",
        "evidence_en": "20 years old athletes refer to person_id where age = 20; 1984 Summer Olympic Games refer to games_name = '1984 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age = 20"
    },
    {
        "db_id": "olympics",
        "question_en": "How many games has Prithipal Singh participated in?",
        "question_ar": "",
        "evidence_en": "games refer to games_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'"
    },
    {
        "db_id": "olympics",
        "question_en": "State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old.",
        "question_ar": "",
        "evidence_en": "the 1984 Summer Olympic Games refer to games_name = '1984 Summer'; athletes more than 50 years old refer to person_id where age > 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age > 50"
    },
    {
        "db_id": "olympics",
        "question_en": "How many kinds of events does athletics have?",
        "question_ar": "",
        "evidence_en": "kinds of events refer to event_name; athletics refer to sport_name = 'Athletics';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Athletics'"
    },
    {
        "db_id": "olympics",
        "question_en": "Who is the heaviest athlete from Russia?",
        "question_ar": "",
        "evidence_en": "the heaviest athlete refers to full_name where MAX(weight); from Russia refers to region_name = 'Russia';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Russia' ORDER BY T3.weight DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Give the height of the tallest athlete from Portugal.",
        "question_ar": "",
        "evidence_en": "the tallest athlete refers to id where MAX(height); from Portugal refers to region_name = 'Portugal';",
        "evidence_ar": "",
        "SQL": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Tell the host city of the 1968 Winter Olympic Games.",
        "question_ar": "",
        "evidence_en": "host city refers to city_name; the 1968 Winter Olympic Games refer to games_name = '1968 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1968 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region has the most athletes?",
        "question_ar": "",
        "evidence_en": "region refers to region_name; the most athletes refer to MAX(COUNT(region_name));",
        "evidence_ar": "",
        "SQL": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of athletes from Vanuatu who are taller than 175?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(id where height > 175), COUNT(id)) as percentage where region_name = 'Vanuatu';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.height > 175 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Vanuatu'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the average weight of male athletes from Tonga.",
        "question_ar": "",
        "evidence_en": "AVG(weight) where region_name = 'Tonga' and gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.weight) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Tonga' AND T3.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "Where was the 1920 Summer held?",
        "question_ar": "",
        "evidence_en": "where it was held refers to city_name; the 1920 Summer refers to games_name = '1920 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1920 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "From 1900 to 1992, how many games did London host?",
        "question_ar": "",
        "evidence_en": "From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Summer games are there that were held in Paris?",
        "question_ar": "",
        "evidence_en": "Summer games refer to games_id where season = 'Summer'; Paris refers to city_name = 'Paris';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris' AND T3.season = 'Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "Please list all game names that were held in Los Angeles.",
        "question_ar": "",
        "evidence_en": "Los Angeles refers to city_name = 'Los Angeles';",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Los Angeles'"
    },
    {
        "db_id": "olympics",
        "question_en": "Which city hosted the most games?",
        "question_ar": "",
        "evidence_en": "Which city refers to city_name; the most games refer to MAX(COUNT(city_name));",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the game name that was held in Beijing in 2008?",
        "question_ar": "",
        "evidence_en": "Beijing refers to city_name = 'Beijing'; in 2008 refers to games_year = '2008';",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of champions at the age of over 30?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(competitor_id where age > 30), COUNT(competitor_id))as percentage where medal_id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1"
    },
    {
        "db_id": "olympics",
        "question_en": "At which age did A Lamusi participate in 2012 Summer?",
        "question_ar": "",
        "evidence_en": "2012 Summer refers to games_name = '2012 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer' AND T3.full_name = 'A Lamusi'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many competitors were there who participated in 2000 Summer with age 31?",
        "question_ar": "",
        "evidence_en": "in 2000 Summer refers to games_name = '2000 Summer'; age = 31",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2000 Summer' AND T2.age = 31"
    },
    {
        "db_id": "olympics",
        "question_en": "How many male competitors were there who participated in 1948 Summer?",
        "question_ar": "",
        "evidence_en": "male competitors refers to id where gender = 'M'; in 1948 Summer refers to games_name = '1948 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "Please list all competitors' names who participated in 1936 Summer.",
        "question_ar": "",
        "evidence_en": "competitors' names refer to full_name; in 1936 Summer refers to games_name = '1936 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "Who is the youngest competitor that participated in 2014 Winter?",
        "question_ar": "",
        "evidence_en": "the youngest competitor refers to full_name where MIN(age); in 2014 Winter refers to games_name = '2014 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average age of competitors who participated in 1988 Winter?",
        "question_ar": "",
        "evidence_en": "AVG(age) where games_name = '1988 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(person_id where gender = 'F' and height > 170), COUNT(person_id)) as percentage where games_year = 1988;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' AND T3.height > 170 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 1988"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the sport name of \"Cross Country Skiing Men's 10/15 kilometres Pursuit\" event?",
        "question_ar": "",
        "evidence_en": "\"Cross Country Skiing Men's 10/15 kilometres Pursuit\" refers to event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';",
        "evidence_ar": "",
        "SQL": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Cross Country Skiing Men%s 10/15 kilometres Pursuit'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of people whose age greater than 24 and participate in winter season?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(season = 'Winter' and age > 24), COUNT(person_id)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.age > 24 AND T1.season = 'Winter' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the region id of Christine Jacoba Aaftink?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Christine Jacoba Aaftink'"
    },
    {
        "db_id": "olympics",
        "question_en": "Mention the height of people who belong to region id 7.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7"
    },
    {
        "db_id": "olympics",
        "question_en": "State the name of the city that held game id 3.",
        "question_ar": "",
        "evidence_en": "name of city refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T1.games_id = 3"
    },
    {
        "db_id": "olympics",
        "question_en": "What are the id of the games held in London?",
        "question_ar": "",
        "evidence_en": "London refers to city_name = 'London';",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many people who are below 30 and participated in the summer season?",
        "question_ar": "",
        "evidence_en": "people who are below 30 refer to person_id where age < 30; the summer season refers to season = 'Summer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30"
    },
    {
        "db_id": "olympics",
        "question_en": "List out the name of the game that the people participated in games id 13.",
        "question_ar": "",
        "evidence_en": "name of games refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average age of the people who participated in the winter season?",
        "question_ar": "",
        "evidence_en": "AVG(age) where season = 'Winter';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the percentage of the people who are under 35 and participated in the summer season?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(age < 35) / COUNT(person_id)) as percentage where season = 'Summer';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.age < 35 THEN 1 END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "State the event name of Basketball.",
        "question_ar": "",
        "evidence_en": "basketball refers to sport_name = 'Basketball';",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of medal that competitor id 9 obtained?",
        "question_ar": "",
        "evidence_en": "name of medal refers to medal_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9"
    },
    {
        "db_id": "olympics",
        "question_en": "List out the id of event that achieve the gold medal.",
        "question_ar": "",
        "evidence_en": "the gold medal refers to medal_name = 'Gold';",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_id FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T1.medal_name = 'Gold'"
    },
    {
        "db_id": "olympics",
        "question_en": "Who is the heaviest athlete?",
        "question_ar": "",
        "evidence_en": "Who refers to full_name; the heaviest refers to MAX(weight);",
        "evidence_ar": "",
        "SQL": "SELECT full_name FROM person ORDER BY weight DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Which city were the Olympic games held in 1992?",
        "question_ar": "",
        "evidence_en": "city refers to city_name; in 1992 refers to games_year = 1992;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_year = 1992"
    },
    {
        "db_id": "olympics",
        "question_en": "Which region is the majority of the athletes from?",
        "question_ar": "",
        "evidence_en": "region refers to region_name; the majority of the athletes from refer to MAX(COUNT(region_name));",
        "evidence_ar": "",
        "SQL": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the oldest competitor?",
        "question_ar": "",
        "evidence_en": "name refers to full_name; the oldest refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Which sport did John Aalberg participate in?",
        "question_ar": "",
        "evidence_en": "sport refers to sport_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'John Aalberg'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many Belgian men have competed in an Olympic Games?",
        "question_ar": "",
        "evidence_en": "Belgian men refer to gender = 'M' where region_name = 'Belgium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many athletes took part in the Olympic games held in Barcelona?",
        "question_ar": "",
        "evidence_en": "Barcelona refers to city_name = 'Barcelona';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Barcelona'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many different football events are there?",
        "question_ar": "",
        "evidence_en": "events refer to event_name; football refers to sport_name = 'Football';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Football'"
    },
    {
        "db_id": "olympics",
        "question_en": "What were the cities in which John Aalberg competed?",
        "question_ar": "",
        "evidence_en": "cities refer to city_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'"
    },
    {
        "db_id": "olympics",
        "question_en": "In Barcelona, how many Olympic games were held?",
        "question_ar": "",
        "evidence_en": "Barcelona refers to city_name = 'Barcelona';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Barcelona'"
    },
    {
        "db_id": "olympics",
        "question_en": "How many competitors over the age of 30 participated in the 1992 Winter Olympics?",
        "question_ar": "",
        "evidence_en": "competitors over the age of 30 refer to person_id where age > 30; the 1992 Winter Olympics refers to games_name = '1992 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1992 Winter' AND T2.age > 30"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the Olympic game with the most competitors held in Barcelona?",
        "question_ar": "",
        "evidence_en": "Barcelona refers to city_name = 'Barcelona'; the most competitors refer to MAX(COUNT(games_name)); name of game refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "List the name of competitors from Argentina.",
        "question_ar": "",
        "evidence_en": "name refers to full_name; Argentina refers to region_name = 'Argentina';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Argentina'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012?",
        "question_ar": "",
        "evidence_en": "AVG(age) where games_name = '2012 Summer' and region_name = 'Argentina';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2012 Summer' AND T4.region_name = 'Argentina'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the percentage of bronze medals won by men's basketball players.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(competitor_id where medal_name = 'Bronze'), COUNT(competitor_id)) as percentage where event_name = 'Basketball Men''s Basketball';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'"
    },
    {
        "db_id": "olympics",
        "question_en": "List the name of the games that Georgios Abaris participated.",
        "question_ar": "",
        "evidence_en": "name of games refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Georgios Abaris'"
    },
    {
        "db_id": "olympics",
        "question_en": "Provide the name of competitors from Greece.",
        "question_ar": "",
        "evidence_en": "name refers to full_name; Greece refers to region_name = 'Greece';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'"
    },
    {
        "db_id": "olympics",
        "question_en": "Calculate the average age of the competitors who participated in the 1924 Winter.",
        "question_ar": "",
        "evidence_en": "AVG(age) where games_name = '1924 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1924 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the NOC code of the region of the competitors weighted 77 kg?",
        "question_ar": "",
        "evidence_en": "NOC code refers to noc; competitors weighted 77 kg refer to person_id where weight = 77;",
        "evidence_ar": "",
        "SQL": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77"
    },
    {
        "db_id": "olympics",
        "question_en": "List the names of the games held in Paris.",
        "question_ar": "",
        "evidence_en": "Paris refers to city_name = 'Paris'; names of games refers to games_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'"
    },
    {
        "db_id": "olympics",
        "question_en": "Provide the competitors' names who joined the 2000 Summer.",
        "question_ar": "",
        "evidence_en": "the competitors' names refer to full_name; the 2000 Summer refers to games_name = '2000 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2000 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which city was the game held where the oldest competitor participated?",
        "question_ar": "",
        "evidence_en": "in which city refers to city_name; the oldest refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT T4.city_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the name of the youngest competitor?",
        "question_ar": "",
        "evidence_en": "name refers to full_name; the youngest refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "List down the games ID of games held in Tokyo.",
        "question_ar": "",
        "evidence_en": "Tokyo refers to city_name = 'Tokyo';",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Tokyo'"
    },
    {
        "db_id": "olympics",
        "question_en": "Give the NOC code and region name of the heaviest competitor.",
        "question_ar": "",
        "evidence_en": "NOC code refers to noc; the heaviest refers to MAX(weight);",
        "evidence_ar": "",
        "SQL": "SELECT T1.noc, T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id ORDER BY T3.weight DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "In what year and season did Sohail Abbas compete?",
        "question_ar": "",
        "evidence_en": "year refers to games_year;",
        "evidence_ar": "",
        "SQL": "SELECT T1.games_year, T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Sohail Abbas'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the average weight of the competitors who won a silver medal?",
        "question_ar": "",
        "evidence_en": "AVG(weight) where medal_name = 'Silver';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.weight) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Silver'"
    },
    {
        "db_id": "olympics",
        "question_en": "In which city the 2004 Summer was held?",
        "question_ar": "",
        "evidence_en": "in which city refers to city_name; the 2004 Summer refers to games_name = '2004 Summer';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'"
    },
    {
        "db_id": "olympics",
        "question_en": "What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated?",
        "question_ar": "",
        "evidence_en": "competitor who weighted 73 kg and 180 cm tall refers to person_id where height = 180 and weight = 73;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.height = 180 AND T3.weight = 73"
    },
    {
        "db_id": "olympics",
        "question_en": "Provide the names of competitors who received a gold medal.",
        "question_ar": "",
        "evidence_en": "names of competitors refer to full_name; gold medal refers to medal_name = 'Gold';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'"
    },
    {
        "db_id": "olympics",
        "question_en": "Compute the average height of competitors whose age ranges from 22 to 28.",
        "question_ar": "",
        "evidence_en": "AVG(height) where age BETWEEN 22 AND 28;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age BETWEEN 22 AND 28"
    },
    {
        "db_id": "olympics",
        "question_en": "How many female competitors were from Iran?",
        "question_ar": "",
        "evidence_en": "female competitors refer to person_id where gender = 'F'; from Iran refers to region_name = 'Iran';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Iran' AND T3.gender = 'F'"
    },
    {
        "db_id": "olympics",
        "question_en": "Provide the age of the tallest competitor.",
        "question_ar": "",
        "evidence_en": "the tallest refers to MAX(height);",
        "evidence_ar": "",
        "SQL": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "db_id": "olympics",
        "question_en": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24"
    },
    {
        "db_id": "olympics",
        "question_en": "In the 2014 Winter game, what is the percentage of competitors who age 28 years old?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.age = 28 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'"
    },
    {
        "db_id": "olympics",
        "question_en": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.",
        "question_ar": "",
        "evidence_en": "males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87"
    },
    {
        "db_id": "address",
        "question_en": "What is the total number of households in Arecibo county?",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; total number of households refer to sum(households)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.households) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'"
    },
    {
        "db_id": "address",
        "question_en": "Which residential area in Arecibo county has the highest average house value? Please give its zip_code.",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; highest average house value refers to Max(avg_house_value)",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.avg_house_value DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Please list the numbers of males in all the residential areas in Arecibo county.",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; number of males refers to Sum(male_population)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'"
    },
    {
        "db_id": "address",
        "question_en": "Among all the residential areas in Delaware, how many of them implement daylight saving?",
        "question_ar": "",
        "evidence_en": "\"Delaware\" is a county; implement daylight savings refers to daylight_saving = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'"
    },
    {
        "db_id": "address",
        "question_en": "Among all the residential areas in Arecibo county, what is the zip_code of the one with the highest white population?",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; highest white population refers to Max(white_population)",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.white_population DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "In which county is the residential area with the highest average income per household located?",
        "question_ar": "",
        "evidence_en": "highest average income per household refers to Max(avg_income_per_household)",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Please list the names of all the counties with at least one residential area that implements daylight saving.",
        "question_ar": "",
        "evidence_en": "implements daylight savings refers to daylight_savings = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.daylight_savings = 'Yes'"
    },
    {
        "db_id": "address",
        "question_en": "Please list the zip_codes of all the residential areas in Huntingdon county with over 30 employees.",
        "question_ar": "",
        "evidence_en": "over 30 employees refers to employee > 30; 'HUNTINGDON' is the county",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'HUNTINGDON' AND T1.employees > 30"
    },
    {
        "db_id": "address",
        "question_en": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".",
        "question_ar": "",
        "evidence_en": "\"URB San Joaquin\" is the bad_alias",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'"
    },
    {
        "db_id": "address",
        "question_en": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?",
        "question_ar": "",
        "evidence_en": "\"Internal Revenue Service\" is the bad_alias; in Eastern time zone refers to time_zone = 'Eastern'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'"
    },
    {
        "db_id": "address",
        "question_en": "What is the bad alias of the residential area with the highest average house value?",
        "question_ar": "",
        "evidence_en": "highest average house value refers to Max(avg_house_value)",
        "evidence_ar": "",
        "SQL": "SELECT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Please list the bad alias of all the residential areas with a median female age of over 32.",
        "question_ar": "",
        "evidence_en": "median female age of over 32 refers to median_female_age > 32",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.female_median_age > 32"
    },
    {
        "db_id": "address",
        "question_en": "What is the highest gender ratio of the residential areas in Arecibo county?",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; highest gender ration refers to Max(Divide (male_population, female_population))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.male_population AS REAL) / T1.female_population FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' AND T1.female_population <> 0 ORDER BY 1 DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "What is the average median female age of all the residential areas in the Arecibo county?",
        "question_ar": "",
        "evidence_en": "\"ARECIBO\" is the county; average median female age = Divide (Sum(median_female_age), Count(country))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.female_median_age) / COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'"
    },
    {
        "db_id": "address",
        "question_en": "What is the area code of the city with the female median age over 32 years old?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN ZIP_Data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.female_median_age > 32 GROUP BY T1.area_code"
    },
    {
        "db_id": "address",
        "question_en": "What is the alias of the city called Hartford?",
        "question_ar": "",
        "evidence_en": "\"Hartford\" is the city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'Hartford'"
    },
    {
        "db_id": "address",
        "question_en": "How many counties are there in Alabama?",
        "question_ar": "",
        "evidence_en": "\"Alabama\" is the name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Alabama'"
    },
    {
        "db_id": "address",
        "question_en": "How many post offices are there in New York?",
        "question_ar": "",
        "evidence_en": "\"New York\" refers to state = 'NY' and name = 'New York'; 'Post Office' is the type",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'NY' AND T2.type = 'Post Office'"
    },
    {
        "db_id": "address",
        "question_en": "What are the precise locations of the cities with an area code of 787?",
        "question_ar": "",
        "evidence_en": "precise location refers to latitude, longitude",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = '787' GROUP BY T2.latitude, T2.longitude"
    },
    {
        "db_id": "address",
        "question_en": "In California, how many delivery receptacles are there in the community post office that has the highest number of delivery receptacles?",
        "question_ar": "",
        "evidence_en": "in California refers to name = 'California' and state = 'CA'; 'Community Post Office' is the Type",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'CA' AND T2.type LIKE '%Community Post Office%' AND T1.name = 'California' AND T2.state = 'CA'"
    },
    {
        "db_id": "address",
        "question_en": "In which county can you find the city with the highest number of females?",
        "question_ar": "",
        "evidence_en": "highest number of females refers to Max(female_population)",
        "evidence_ar": "",
        "SQL": "SELECT T4.county FROM zip_data AS T3 INNER JOIN country AS T4 ON T3.zip_code = T4.zip_code GROUP BY T4.county ORDER BY T3.female_population DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "What are the names of the states whose postal point is not affiliated with any organization?",
        "question_ar": "",
        "evidence_en": "postal point is not affiliated with any organization refers to division is null",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.division IS NULL"
    },
    {
        "db_id": "address",
        "question_en": "What is the difference in the most populated city of Allentown-Bethlehem-Easton, PA-NJ in 2020 against its population in 2010?",
        "question_ar": "",
        "evidence_en": "\"Allentown-Bethlehem-Easton, PA-NJ\" is the CBSA_name; most populated city refers to Max(population_2020); difference = Subtract (population_2020, population_2011)",
        "evidence_ar": "",
        "SQL": "SELECT T1.population_2020 - T1.population_2010 AS result_data FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' ORDER BY T1.population_2020 DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "List all the zip codes in the county of New Castle in Delaware.",
        "question_ar": "",
        "evidence_en": "\"NEW CASTLE\" is the county; 'Delaware' is the name of state",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T2.county = 'NEW CASTLE' AND T1.name = 'Delaware'"
    },
    {
        "db_id": "address",
        "question_en": "How many representatives are there in the state with the highest monthly benefit payments for retired workers?",
        "question_ar": "",
        "evidence_en": "state with highest monthly benefits payment for retired workers refers to Max(monthly_benefits_retired_workers)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "In the state where Lisa Murkowski is the representative, how many cities have zero employees?",
        "question_ar": "",
        "evidence_en": "zero employee refers to employees = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.city) FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.first_name = 'Murkowski' AND T1.last_name = 'Lisa' AND T3.employees = 0"
    },
    {
        "db_id": "address",
        "question_en": "What are the top 3 states with the highest Asian population? List the full names of all the representatives in the said states.",
        "question_ar": "",
        "evidence_en": "city with highest asian population refers to Max(Sum(asian_population)); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT t.state, T1.first_name, T1.last_name FROM zip_data AS T INNER JOIN congress AS T1 ON t.state = T1.abbreviation GROUP BY t.state ORDER BY SUM(t.asian_population) DESC LIMIT 3"
    },
    {
        "db_id": "address",
        "question_en": "Which state is Outagamie County in? Give the full name of the state.",
        "question_ar": "",
        "evidence_en": "\"OUTAGAMIE\" is the county",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.county = 'OUTAGAMIE'"
    },
    {
        "db_id": "address",
        "question_en": "What party does the area with the zip code 91701 belong to?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.party FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T3.zip_code = 91701 GROUP BY T1.party"
    },
    {
        "db_id": "address",
        "question_en": "How many males are there in New Haven County's residential areas?",
        "question_ar": "",
        "evidence_en": "\"NEW HAVEN\" is the county; male refers to male_population",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'NEW HAVEN'"
    },
    {
        "db_id": "address",
        "question_en": "Show the alias for the county at coordinate (18.090875, -66.867756).",
        "question_ar": "",
        "evidence_en": "coordinates refers to latitude, longitude; latitude = '18.090875; longitude = '-66.867756'",
        "evidence_ar": "",
        "SQL": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756"
    },
    {
        "db_id": "address",
        "question_en": "For the city with the most elders, what's its area code?",
        "question_ar": "",
        "evidence_en": "city with most elders refers to Max(over_65)",
        "evidence_ar": "",
        "SQL": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "For the county represented by Thompson Bennie G, how many bad aliases does it have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.bad_alias) FROM zip_congress AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T1.district = T3.cognress_rep_id WHERE T3.first_name = 'Thompson' AND T3.last_name = 'Bennie G'"
    },
    {
        "db_id": "address",
        "question_en": "Give the location coordinates of the city with area code 636.",
        "question_ar": "",
        "evidence_en": "location coordinate refers to (latitude, longitude)",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 636"
    },
    {
        "db_id": "address",
        "question_en": "Show the zip code of the county represented by Buchanan Vernon.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Buchanan' AND T1.last_name = 'Vernon'"
    },
    {
        "db_id": "address",
        "question_en": "Which state is area code 878 in? Give the name of the state.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 878"
    },
    {
        "db_id": "address",
        "question_en": "How many counties are there in Virginia State?",
        "question_ar": "",
        "evidence_en": "\"Virginia\" is the state",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virginia'"
    },
    {
        "db_id": "address",
        "question_en": "Give the name and the position of the cbsa officer from the area with the zip code 45503.",
        "question_ar": "",
        "evidence_en": "position refers to latitude, longitude",
        "evidence_ar": "",
        "SQL": "SELECT T1.CBSA_name, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.zip_code = 45503 GROUP BY T1.CBSA_name, T2.latitude, T2.longitude"
    },
    {
        "db_id": "address",
        "question_en": "Tell the name of the county which is represented by Hartzler Vicky.",
        "question_ar": "",
        "evidence_en": "name of county refers to county",
        "evidence_ar": "",
        "SQL": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the average male median age of all the residential areas in Windham county.",
        "question_ar": "",
        "evidence_en": "average male median age refers to Divide (Sum(male_median_age), Count(county)); 'WINDHAM' is the county",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.male_median_age) / COUNT(T2.median_age) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WINDHAM'"
    },
    {
        "db_id": "address",
        "question_en": "For the county where DeSantis Ron is from, what is the average female median age?",
        "question_ar": "",
        "evidence_en": "average female median age refers to Divide (Sum(female_median_age), Count(county))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'"
    },
    {
        "db_id": "address",
        "question_en": "What is the area code of Bishopville, SC?",
        "question_ar": "",
        "evidence_en": "\"Bishopville\" is the city; 'SC' is the state",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Bishopville' AND T2.state = 'SC'"
    },
    {
        "db_id": "address",
        "question_en": "Name the bad alias of Geneva, AL.",
        "question_ar": "",
        "evidence_en": "\"Geneva\" is the city; 'AL' is the state",
        "evidence_ar": "",
        "SQL": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Geneva' AND T2.state = 'AL'"
    },
    {
        "db_id": "address",
        "question_en": "Which city and state has the bad alias of Lawrenceville?",
        "question_ar": "",
        "evidence_en": "\"Lawrenceville\" is the bad_alias",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Lawrenceville' GROUP BY T2.city, T2.state"
    },
    {
        "db_id": "address",
        "question_en": "Name both the alias and the bad alias of zip code 38015.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.alias, T2.bad_alias FROM alias AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 38015"
    },
    {
        "db_id": "address",
        "question_en": "What is the zip code of the district represented by Steven A King?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'King' AND T1.last_name = 'Steven A'"
    },
    {
        "db_id": "address",
        "question_en": "What is the CBSA name and type in York, ME?",
        "question_ar": "",
        "evidence_en": "\"York\" is the city; 'ME' is the state; type refers to CBSA_type",
        "evidence_ar": "",
        "SQL": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'York' AND T2.state = 'ME'"
    },
    {
        "db_id": "address",
        "question_en": "List 10 cities with a median age over 40. Include their zip codes and area codes.",
        "question_ar": "",
        "evidence_en": "median age over 40 refers to median_age > 40",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T2.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.median_age >= 40 LIMIT 10"
    },
    {
        "db_id": "address",
        "question_en": "Name the county that has the bad alias of Druid Hills.",
        "question_ar": "",
        "evidence_en": "\"Druid Hills\" is the bad_alias",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM avoid AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Druid Hills'"
    },
    {
        "db_id": "address",
        "question_en": "What is the area code of Phillips county in Montana?",
        "question_ar": "",
        "evidence_en": "\"PHILLIPS\" is the county; 'Montana' is the name of state",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN state AS T3 ON T2.state = T3.abbreviation WHERE T2.county = 'PHILLIPS' AND T3.name = 'Montana'"
    },
    {
        "db_id": "address",
        "question_en": "Which district has the largest land area in Wisconsin? Write the full name of the congress representative and include the postal codes.",
        "question_ar": "",
        "evidence_en": "\"Wisconsin\" is the state; largest land area refers to Max(land_area); full name refers to first_name, last_name; postal code refers to zip_code",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T1.first_name, T1.last_name FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Wisconsin' ORDER BY T1.land_area DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "How many states are in the central time zone? Write their full names.",
        "question_ar": "",
        "evidence_en": "central time zone refers to time_zone = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'"
    },
    {
        "db_id": "address",
        "question_en": "Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency.",
        "question_ar": "",
        "evidence_en": "\"Lexington-Fayette, KY\" is the CBSA_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10"
    },
    {
        "db_id": "address",
        "question_en": "What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats.",
        "question_ar": "",
        "evidence_en": "\"Democrats\" and \"Republicans\" refers to party = 'Democrat\" and party = 'Republican'; percentage ratio = Multiply (Divide (Count(party = 'Democrat\"), Count(party = 'Republican')), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the ratio between the number of representatives in Alabama and the number of representatives in Illinois.",
        "question_ar": "",
        "evidence_en": "\"Alabama\" and \"Illinois\" are both state; Ratio = Divide (Count(state = 'Alabama'), Count(state = 'Illinois'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN state = 'Alabama' THEN cognress_rep_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN state = 'Illinois' THEN cognress_rep_id ELSE NULL END) FROM congress"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the average of 2020's population in each zip code.",
        "question_ar": "",
        "evidence_en": "average of 2020 population in each zip code refers to Divide (Sum(population_2020), Count(zip_code))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(population_2020) AS REAL) / COUNT(zip_code) FROM zip_data"
    },
    {
        "db_id": "address",
        "question_en": "State the male population for all zip code which were under the Berlin, NH CBSA.",
        "question_ar": "",
        "evidence_en": "\"Berlin, NH\" is the CBSA_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.male_population FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Berlin, NH' GROUP BY T2.male_population"
    },
    {
        "db_id": "address",
        "question_en": "Which CBSAs have more than 10 zip codes?",
        "question_ar": "",
        "evidence_en": "has more than 10 zip codes refers to CBSA where count(CBSA) > 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA GROUP BY T1.CBSA HAVING COUNT(T2.zip_code) > 10"
    },
    {
        "db_id": "address",
        "question_en": "List all the bad alias for zip codes in Puerto Rico.",
        "question_ar": "",
        "evidence_en": "\"Puerto Rico\" refers to state = 'PR'",
        "evidence_ar": "",
        "SQL": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'"
    },
    {
        "db_id": "address",
        "question_en": "What is the longitude and latitude for the district represented by Grayson Alan?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.latitude, T1.longitude FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Grayson' AND T3.last_name = 'Alan'"
    },
    {
        "db_id": "address",
        "question_en": "What is the state for area code of 787?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787"
    },
    {
        "db_id": "address",
        "question_en": "List all representatives of districts which have more than 30 000 population in 2020.",
        "question_ar": "",
        "evidence_en": "more than 30000 population in 2020 refers to population_2020 > 30000; representative refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name"
    },
    {
        "db_id": "address",
        "question_en": "Which zip code in Massachusetts that have more than 1 area code?",
        "question_ar": "",
        "evidence_en": "\"Massachusetts\" is the state; zip code more than 1 area code refers to Count (zip_code) > 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'MA' GROUP BY T1.zip_code HAVING COUNT(T1.area_code) > 1"
    },
    {
        "db_id": "address",
        "question_en": "State the county for Arecibo City.",
        "question_ar": "",
        "evidence_en": "\"Arecibo\" is the city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arecibo'"
    },
    {
        "db_id": "address",
        "question_en": "How many zip codes are under Barre, VT?",
        "question_ar": "",
        "evidence_en": "\"Barre, VT\" is the CBSA_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Barre, VT'"
    },
    {
        "db_id": "address",
        "question_en": "Among the zip code under Saint Croix county, which zip code has the biggest land area?",
        "question_ar": "",
        "evidence_en": "biggest land area refers to Max(land_area); \"SAINT CROIX\" is the county",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX' ORDER BY T2.land_area DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the difference between the 2020 population and the 2010 population for the districts represented by Griffin Tim.",
        "question_ar": "",
        "evidence_en": "difference = Subtract (population_2020, population_2010)",
        "evidence_ar": "",
        "SQL": "SELECT T1.population_2020 - T1.population_2010 FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Griffin' AND T3.last_name = 'Tim'"
    },
    {
        "db_id": "address",
        "question_en": "Based on the population in 2020, calculate the percentage for the population of Asian in the zip code where the CBSA was Atmore, AL.",
        "question_ar": "",
        "evidence_en": "\"Atmore, AL\" is CBSA_name; percentage = Divide(asian_population, population_2020) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.asian_population AS REAL) * 100 / T2.population_2010 FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Atmore, AL'"
    },
    {
        "db_id": "address",
        "question_en": "Among the cities with an area code 939, which city has the highest Asian population?",
        "question_ar": "",
        "evidence_en": "highest asian population refers to Max(asian_population)",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Give the name of the country and state of the city with elevation of 1039.",
        "question_ar": "",
        "evidence_en": "elevation of 1039 refers to elevation = 1039",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name, T2.state FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.elevation = 1039"
    },
    {
        "db_id": "address",
        "question_en": "Provide the alias and elevation of the city with zip code 1028.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.alias, T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1028"
    },
    {
        "db_id": "address",
        "question_en": "What is the area code of the city with the largest land area?",
        "question_ar": "",
        "evidence_en": "largest land area refers to Max(land_area)",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "Give the area code of the city with the white population ranging between 1700 to 2000.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.white_population BETWEEN 1700 AND 2000"
    },
    {
        "db_id": "address",
        "question_en": "What is the Asian population in the city with the alias Leeds?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'"
    },
    {
        "db_id": "address",
        "question_en": "List down the area code and country of the city named Savoy.",
        "question_ar": "",
        "evidence_en": "Savoy is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code, T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T3.city = 'Savoy'"
    },
    {
        "db_id": "address",
        "question_en": "What are the alias of the cities with 0 population in 2010?",
        "question_ar": "",
        "evidence_en": "with 0 population in 2010 refers to population_2010 = 0;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0"
    },
    {
        "db_id": "address",
        "question_en": "Among the cities with area code 608, how many cities implement daylight savings?",
        "question_ar": "",
        "evidence_en": "implement daylight savings refers to daylight_savings = 'Yes';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the average elevation of the cities with alias Amherst.",
        "question_ar": "",
        "evidence_en": "AVG(elevation) where alias = 'Amherst';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.elevation) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Amherst'"
    },
    {
        "db_id": "address",
        "question_en": "What is the country and state of the city named Dalton?",
        "question_ar": "",
        "evidence_en": "Dalton is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.city = 'Dalton' GROUP BY T2.county"
    },
    {
        "db_id": "address",
        "question_en": "Give at least five alias of cities with a postal point of post office.",
        "question_ar": "",
        "evidence_en": "postal point of post office refers to type = 'Post Office';",
        "evidence_ar": "",
        "SQL": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Post Office' LIMIT 5"
    },
    {
        "db_id": "address",
        "question_en": "What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(COUNT(type = 'P.O. Box Only'), COUNT(type = 'Post Office')) where area_code = 787;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787"
    },
    {
        "db_id": "address",
        "question_en": "Among the cities belonging to the country named Arroyo, calculate the percentage of increase in the population in these cities from 2010 to 2020.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(SUM(population_2020)), SUM(population_2010)), SUM(population_2010) as percentage where county = 'ARROYO';",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(T2.population_2020) - SUM(T2.population_2010)) AS REAL) * 100 / SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arroyo'"
    },
    {
        "db_id": "address",
        "question_en": "Among the postal points in Texas, provide the zip codes and cities of postal points which have total beneficiaries of above 10000.",
        "question_ar": "",
        "evidence_en": "Texas is the name of the state, in which name = 'Texas'; total beneficiaries of above 10000 refer to total_beneficiaries > 10000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T2.city FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Texas' AND T2.total_beneficiaries > 10000"
    },
    {
        "db_id": "address",
        "question_en": "Among the postal points in the District of Columbia, how many of them have an area with above 20000 black population?",
        "question_ar": "",
        "evidence_en": "District of Columbia refers to county = 'DISTRICT OF COLUMBIA'; postal points refer to zip_code; area with above 20000 black population refers to black_population > 20000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000"
    },
    {
        "db_id": "address",
        "question_en": "Provide the city where zip code 19019 is located and the alias of that city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019"
    },
    {
        "db_id": "address",
        "question_en": "List the bad alias of the postal point located in Camuy.",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; Camuy is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Camuy'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.",
        "question_ar": "",
        "evidence_en": "representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Among the daylight savings areas in the Midwest region, how many postal points are there in Illinois?",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; the daylight savings areas refer to daylight_savings = 'Yes'; Illinois is the name of the state, in which name = 'Illinois';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Illinois' AND T2.daylight_savings = 'Yes' AND T2.region = 'Midwest'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the countries and the zip codes in the Virgin Islands.",
        "question_ar": "",
        "evidence_en": "the Virgin Islands refer to state where name = 'Virgin Islands';",
        "evidence_ar": "",
        "SQL": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and the alias of Greeneville.",
        "question_ar": "",
        "evidence_en": "Greeneville is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Greeneville'"
    },
    {
        "db_id": "address",
        "question_en": "Compare the numbers of postal points under Smith Adrian and Heck Joe.",
        "question_ar": "",
        "evidence_en": "COUNT(zip_code where first_name = 'Smith' and last_name = 'Adrian') > COUNT(zip_code where first_name = 'Heck' and last_name = 'Joe');",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(CASE WHEN T1.first_name = 'Smith' AND T1.last_name = 'Adrian' THEN T2.zip_code ELSE NULL END) > COUNT(CASE WHEN T1.first_name = 'Heck' AND T1.last_name = 'Joe' THEN T2.zip_code ELSE NULL END) THEN 'Smith Adrian>Heck Joe' ELSE 'Smith Adrian<=Heck Joe' END AS COMPARE FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and CBSA officers of the postal point in Oxford.",
        "question_ar": "",
        "evidence_en": "CBSA officers refer to CBSA_name; postal point refers to zip_code; Oxford is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Oxford'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and their affiliated organization for the postal point under Kingsport-Bristol, TN-VA.",
        "question_ar": "",
        "evidence_en": "postal point under Kingsport-Bristol, TN-VA refers to zip_code where CBSA_name = 'Kingsport-Bristol, TN-VA'; affiliated organization refers to organization from CBSA;",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and the congress representatives' names of the postal points which are affiliated with Readers Digest.",
        "question_ar": "",
        "evidence_en": "representative's full names refer to first_name, last_name; postal points affiliated with Readers Digest refer to zip_code where organization = 'Readers Digest';",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.organization = 'Readers Digest'"
    },
    {
        "db_id": "address",
        "question_en": "Among the postal points in California, calculate the percentage of them in post office types.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(zip_code where type = 'Post Office'), COUNT(zip_code)) as percentage where name = 'California';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'California'"
    },
    {
        "db_id": "address",
        "question_en": "What are the zip code for the Senate house?",
        "question_ar": "",
        "evidence_en": "House of Repsentatives can stand for senate house",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code"
    },
    {
        "db_id": "address",
        "question_en": "Which city has the most bad aliases?",
        "question_ar": "",
        "evidence_en": "the most bad aliases refer to MAX(COUNT(bad_alias));",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.bad_alias ORDER BY COUNT(T1.zip_code) DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "List all the counties in Georgia.",
        "question_ar": "",
        "evidence_en": "Georgia is the name of the state, in which name = 'Georgia';",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Georgia' GROUP BY T2.county"
    },
    {
        "db_id": "address",
        "question_en": "List all the locations of postal points with the area code \"410\".",
        "question_ar": "",
        "evidence_en": "latitude and longitude coordinates can be used to identify the location; postal points refer to zip_code;",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410"
    },
    {
        "db_id": "address",
        "question_en": "What is the name of the CBSA of the city with the highest average house value?",
        "question_ar": "",
        "evidence_en": "the highest average house value refers to avg_house_value;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "What are the bad aliases of the postal points from East Setauket?",
        "question_ar": "",
        "evidence_en": "East Setauket is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'East Setauket'"
    },
    {
        "db_id": "address",
        "question_en": "What was the population of Wilcox County in 2010?",
        "question_ar": "",
        "evidence_en": "population of Wilcox County in 2010 refers to SUM(population_2010) where county = 'WILCOX';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WILCOX'"
    },
    {
        "db_id": "address",
        "question_en": "What is the code of the area with the largest Asian population?",
        "question_ar": "",
        "evidence_en": "the code of the area refers to area_code; area with the largest Asian population refers to MAX(asian_population);",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "List all the cities with micro CBSA.",
        "question_ar": "",
        "evidence_en": "micro CBSA refers to CBSA_type = 'Micro';",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Micro'"
    },
    {
        "db_id": "address",
        "question_en": "What is the name of the state with the most counties?",
        "question_ar": "",
        "evidence_en": "the most counties refer to MAX(COUNT(county));",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state GROUP BY T2.state ORDER BY COUNT(T2.county) DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "What is the number of households in the \"FL-10\" district?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.district = 'FL-10' THEN 1 ELSE 0 END) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code"
    },
    {
        "db_id": "address",
        "question_en": "What is the average household income in the city known as \"Danzig\"?",
        "question_ar": "",
        "evidence_en": "average household income refers to avg_income_per_household; city known as \"Danzig\" refers to bad_alias = 'Danzig';",
        "evidence_ar": "",
        "SQL": "SELECT T2.avg_income_per_household FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Danzig'"
    },
    {
        "db_id": "address",
        "question_en": "What are the states with an above-average female population?",
        "question_ar": "",
        "evidence_en": "above-average female population refers to female_population > DIVIDE(SUM(female_population), COUNT(state));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.state FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T2.female_population > ( SELECT AVG(female_population) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "What percentage of households are in \"Coroyell\" out of its state?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(households where county = 'CORYELL'), SUM(households)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.county = 'CORYELL' THEN T2.households ELSE 0 END) AS REAL) * 100 / SUM(T2.households) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code"
    },
    {
        "db_id": "address",
        "question_en": "What is the name and the position of the CBSA officer in the city of Cabo Rojo?",
        "question_ar": "",
        "evidence_en": "name of the CBSA officer refers to CBSA_name; position of the CBSA officer refers to CBSA_type;",
        "evidence_ar": "",
        "SQL": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Cabo Rojo' GROUP BY T1.CBSA_name, T1.CBSA_type"
    },
    {
        "db_id": "address",
        "question_en": "Indicate the country name of the city Las Marias.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Las Marias'"
    },
    {
        "db_id": "address",
        "question_en": "How many cities does congressman Pierluisi Pedro represent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Pierluisi' AND T3.last_name = 'Pedro'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the names of bad aliases in the city of Aguadilla.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Aguadilla'"
    },
    {
        "db_id": "address",
        "question_en": "Indicate the name of the congressman represent in Guanica.",
        "question_ar": "",
        "evidence_en": "name of congressman implies full name which refers to first_name, last_name; Guanica is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Guanica'"
    },
    {
        "db_id": "address",
        "question_en": "Which state has the most bad aliases?",
        "question_ar": "",
        "evidence_en": "the most bad aliases refer to MAX(COUNT(bad_alias));",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.state ORDER BY COUNT(T1.bad_alias) DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "What is the difference in the number of bad alias between Aguada city and Aguadilla city?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(COUNT(bad_alias where city = 'Aguada'), COUNT(bad_alias where city = 'Aguadilla'));",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.city = 'Aguada' THEN T1.bad_alias ELSE NULL END) - COUNT(CASE WHEN T2.city = 'Aguadilla' THEN T1.bad_alias ELSE NULL END) AS DIFFERENCE FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code"
    },
    {
        "db_id": "address",
        "question_en": "Which state has greater than 50 CBSA officers of metro type?",
        "question_ar": "",
        "evidence_en": "greater than 50 CBSA officers of metro type refers to COUNT(CBSA_type = 'Metro') > 50;",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Metro' GROUP BY T2.state HAVING COUNT(T1.CBSA_type) > 50"
    },
    {
        "db_id": "address",
        "question_en": "Provide the population of Arecibo in 2020.",
        "question_ar": "",
        "evidence_en": "population of Arecibo in 2020 refers to SUM(population_2020) where county = 'ARECIBO';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.population_2020) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'ARECIBO'"
    },
    {
        "db_id": "address",
        "question_en": "Indicate the name of the country with a population greater than 10000 in 2010.",
        "question_ar": "",
        "evidence_en": "population greater than 10000 in 2010 refers to population_2010 > 10000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 > 10000"
    },
    {
        "db_id": "address",
        "question_en": "Name the country with the largest number of households in a residential area.",
        "question_ar": "",
        "evidence_en": "the largest number of households refers to MAX(households);",
        "evidence_ar": "",
        "SQL": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the percentage of households in residential areas of countries over 10000.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(households > 10000), SUM(households)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.households > 10000 THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code"
    },
    {
        "db_id": "address",
        "question_en": "Among the types of postal points in Saint Croix, what percentage of postal points is the post office?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(type = 'Post Office' ), COUNT(type)) as percentage where county = 'SAINT CROIX';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'"
    },
    {
        "db_id": "address",
        "question_en": "Among the area code 787, list the country of the cities with a postal point type of unique postal office.",
        "question_ar": "",
        "evidence_en": "postal point type of unique postal office refers to type = 'Unique Post Office';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T1.area_code = '787' AND T3.type = 'Unique Post Office'"
    },
    {
        "db_id": "address",
        "question_en": "What is the elevation of the city with the alias East Longmeadow?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'East Longmeadow'"
    },
    {
        "db_id": "address",
        "question_en": "In cities that do not implement daylight savings, what is the total number of cities?",
        "question_ar": "",
        "evidence_en": "do not implement daylight savings refers to daylight_savings = 'No';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.area_code) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.daylight_savings = 'No'"
    },
    {
        "db_id": "address",
        "question_en": "Give the country and area code of the city with zip code 1116.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.county, T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1116"
    },
    {
        "db_id": "address",
        "question_en": "Among the cities with alias St Thomas, provide the type of postal point for each city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'"
    },
    {
        "db_id": "address",
        "question_en": "List down the names of the cities belonging to Noble, Oklahoma.",
        "question_ar": "",
        "evidence_en": "the county of Noble is located in the state of Oklahoma;",
        "evidence_ar": "",
        "SQL": "SELECT T3.city FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Oklahoma' AND T2.county = 'NOBLE'"
    },
    {
        "db_id": "address",
        "question_en": "Among the listed cities, provide the area code of the city with the largest water area.",
        "question_ar": "",
        "evidence_en": "the largest water area refers to MAX(water_area);",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.water_area = ( SELECT MAX(water_area) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "Provide the alias of the city with the highest population in year 2020.",
        "question_ar": "",
        "evidence_en": "the highest population in year 2020 refers to MAX(population_2020);",
        "evidence_ar": "",
        "SQL": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 = ( SELECT MAX(population_2020) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "What is the elevation of the city belonging to Hampden, Massachusetts?",
        "question_ar": "",
        "evidence_en": "the county of Hampden is located in the state of Massachusetts.",
        "evidence_ar": "",
        "SQL": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation"
    },
    {
        "db_id": "address",
        "question_en": "List the area code of the city with the highest Hispanic population.",
        "question_ar": "",
        "evidence_en": "the highest Hispanic population refers to MAX(hispanic_population);",
        "evidence_ar": "",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "Give the alias of the cities with an Asian population of 7.",
        "question_ar": "",
        "evidence_en": "Asian population of 7 refers to asian_population = 7;",
        "evidence_ar": "",
        "SQL": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.asian_population = 7"
    },
    {
        "db_id": "address",
        "question_en": "What is the average of the white population in the cities with area code 920?",
        "question_ar": "",
        "evidence_en": "AVG(white_population) where area_code = 920;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.white_population) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 920"
    },
    {
        "db_id": "address",
        "question_en": "Among the cities with alias Ponce, what is the percentage of cities with a country level FIPS code of less than 20?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(county_fips < 20), COUNT(county_fips)) as percentage where alias = 'Ponce';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.county_fips < 20 THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Ponce'"
    },
    {
        "db_id": "address",
        "question_en": "List down the country of the cities with a population greater than 97% of the average population of all countries in 2020.",
        "question_ar": "",
        "evidence_en": "population_2020 > MULTIPLY(0.97, AVG(population_2020));",
        "evidence_ar": "",
        "SQL": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 > 0.97 * ( SELECT AVG(population_2020) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "Count the number of postal points in the district represented by Kirkpatrick Ann.",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Kirkpatrick' AND T1.last_name = 'Ann'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and coordinates of the postal points under Allentown-Bethlehem-Easton, PA-NJ.",
        "question_ar": "",
        "evidence_en": "coordinates refer to latitude and longitude; under Allentown-Bethlehem-Easton, PA-NJ refers to CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';",
        "evidence_ar": "",
        "SQL": "SELECT T2.zip_code, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes, cities, and locations of the postal points that have Shared Reshipper as a bad alias.",
        "question_ar": "",
        "evidence_en": "latitude and longitude coordinates can be used to identify the location;",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code, T2.city, T2.latitude, T2.longitude FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Shared Reshipper'"
    },
    {
        "db_id": "address",
        "question_en": "Who are the congress representatives of the postal points in Garfield?",
        "question_ar": "",
        "evidence_en": "Who are the congress representatives refer to first_name, last_name; Garfield is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Garfield'"
    },
    {
        "db_id": "address",
        "question_en": "Count the number of postal points under New York-Newark-Jersey City, NY-NJ-PA.",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; under New York-Newark-Jersey City, NY-NJ-PA refers to CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA'"
    },
    {
        "db_id": "address",
        "question_en": "How many postal points are there under the congress representative in Puerto Rico?",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; Puerto Rico refers to state = 'Puerto Rico';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'"
    },
    {
        "db_id": "address",
        "question_en": "Describe the number of postal points and the countries in West Virginia.",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; West Virginia is the name of the state, in which name = 'West Virginia';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.zip_code), COUNT(DISTINCT T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'West Virginia'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the zip codes and area codes of the postal points with the community post office type at the elevation above 6000.",
        "question_ar": "",
        "evidence_en": "community post office type refers to type = 'Community Post Office'; elevation above 6000 refers to elevation > 6000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Community Post Office ' AND T2.elevation > 6000"
    },
    {
        "db_id": "address",
        "question_en": "How many postal points are there under the congress representative from the House of Representatives in Mississippi?",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; Mississippi is the name of the state, in which name = 'Mississippi';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Mississippi'"
    },
    {
        "db_id": "address",
        "question_en": "Provide the congress representatives' IDs of the postal points in East Springfield.",
        "question_ar": "",
        "evidence_en": "congress representatives' IDs refer to CID; East Springfield is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T2.district FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'East Springfield'"
    },
    {
        "db_id": "address",
        "question_en": "Who is the CBSA officer of the post point in the area with the highest number of employees?",
        "question_ar": "",
        "evidence_en": "CBSA officer refers to CBSA_name; the highest number of employees refers to MAX(employees);",
        "evidence_ar": "",
        "SQL": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )"
    },
    {
        "db_id": "address",
        "question_en": "How many postal points with unique post office types are there in Ohio?",
        "question_ar": "",
        "evidence_en": "postal points refer to zip_code; unique post office types refer to type = 'Unique Post Office'; Ohio is the name of the state, in which name = 'Ohio';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Ohio' AND T2.type = 'Unique Post Office'"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the average number of beneficiaries per postal point in Guam.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(total_beneficiaries), COUNT(zip_code)) where name = 'Guam';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'"
    },
    {
        "db_id": "address",
        "question_en": "Calculate the percentage of congress representatives from the Democrat party. Among them, how many postal points are in the Hawaii state?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(party = 'Democrat'), COUNT(congress_rep_id)) as percentage; postal points refer to zip_code; state = 'Hawaii';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.party = 'Democrat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), SUM(CASE WHEN T1.state = 'Hawaii' THEN 1 ELSE 0 END) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the name of the root beer brand that has the longest history?",
        "question_ar": "",
        "evidence_en": "name of the root beer brand refers to BrandName; longest history refers to MIN(FirstBrewedYear);",
        "evidence_ar": "",
        "SQL": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many breweries are located in North America?",
        "question_ar": "",
        "evidence_en": "North America refers to country = 'United States'; North America is the name of continent where country = 'United States' is located;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE Country = 'United States'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please list the names of all the root beer brands that are advertised on facebook.",
        "question_ar": "",
        "evidence_en": "name of the root beer brand refers to BrandName; advertised on facebook refers to FacebookPage IS not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the name of the root beer brand with the lowest unit profit available to wholesalers?",
        "question_ar": "",
        "evidence_en": "name of the root beer brand refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));",
        "evidence_ar": "",
        "SQL": "SELECT BrandName FROM rootbeerbrand ORDER BY CurrentRetailPrice - WholesaleCost LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the description of the root beer brand A&W?",
        "question_ar": "",
        "evidence_en": "A&W refers to BrandName = 'A&W';",
        "evidence_ar": "",
        "SQL": "SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "In which city is the brewery AJ Stephans Beverages located?",
        "question_ar": "",
        "evidence_en": "AJ Stephans refers to BreweryName = 'AJ Stephans Beverages';",
        "evidence_ar": "",
        "SQL": "SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions had Frank-Paul Santangelo made in July, 2014?",
        "question_ar": "",
        "evidence_en": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the transactions made in July, 2014, how many of them were made by a male customer?",
        "question_ar": "",
        "evidence_en": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07'; male customer refers to Gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?",
        "question_ar": "",
        "evidence_en": "users permit the company to send regular emails to them refers to subscribedtoemaillist = 'TRUE'; Visa card refers to creditcardtype = 'Visa'; in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the full name of the customer that had made the most transactions in August, 2014?",
        "question_ar": "",
        "evidence_en": "full name = First, Last; made the most transactions refers to MAX(COUNT(TransactionID)); in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m', T2.TransactionDate) = '2014-08' GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7.",
        "question_ar": "",
        "evidence_en": "brands of the root beer refers to BrandName; purchased on 2014/7/7 refers to transactiondate = '2014-07-07';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.BrandName FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans?",
        "question_ar": "",
        "evidence_en": "on 2014/7/7 refers to transactiondate = '2014-07-07'; in cans refers to containertype = 'Can';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07' AND T3.ContainerType = 'Can'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many root beers of the Bulldog were purchased in August, 2014?",
        "question_ar": "",
        "evidence_en": "Bulldog refers to BrandName = 'Bulldog'; purchased in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages.",
        "question_ar": "",
        "evidence_en": "full name = First, Last; customers who have purchased at least one root beer refers to CustomerID > = 1; produced by AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?",
        "question_ar": "",
        "evidence_en": "do not advertise on Twitter refers to twitter IS NULL; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7?",
        "question_ar": "",
        "evidence_en": "number of the credit card refers to CreditCardNumber; on 2014/7/7 refers to TransactionDate = '2014-07-07';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among all the root beers purchased by Frank-Paul Santangelo, how many of them were non-sweetened?",
        "question_ar": "",
        "evidence_en": "non-sweetened refers to honey = 'FALSE' AND artificialsweetener = 'FALSE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T4.ArtificialSweetener = 'FALSE' AND T4.Honey = 'FALSE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please list the dates on which a male customer has purchased more than 3 root beers.",
        "question_ar": "",
        "evidence_en": "dates of purchase refers to TransactionDate; male customer refers to Gender = 'M'; purchased more than 3 root beers refers to COUNT(CustomerID) > 3;",
        "evidence_ar": "",
        "SQL": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' GROUP BY T2.TransactionDate HAVING COUNT(T2.CustomerID) > 3"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average number of root beers of the brand A&W sold in a day in August, 2014?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(COUNT(RootBeerID WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08')), 31); A&W refers to BrandName = 'A&W'; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.BrandID) AS REAL) / 31 FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'A&W'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages?",
        "question_ar": "",
        "evidence_en": "sold in 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014'; percentage = DIVIDE(MULTIPLY(SUM(BreweryName = 'AJ Stephans Beverages'), 1.0), COUNT(RootBeerID)) WHERE SUBSTR(TransactionDate, 1, 4) = '2014'; AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Tell the number of reviews given by James House.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'James' AND T1.Last = 'House'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Show the credit card number of Lisa Ling.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Lisa' AND T1.Last = 'Ling'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "State the coordinate of Sac State American River Courtyard.",
        "question_ar": "",
        "evidence_en": "coordinate = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Provide the name of the location where transaction no.100885 happened.",
        "question_ar": "",
        "evidence_en": "name of the location refers to LocationName; transaction no. refers to TransactionID; TransactionID = 100885;",
        "evidence_ar": "",
        "SQL": "SELECT T2.LocationName FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which city does the customer who finished transaction no.103545 live in?",
        "question_ar": "",
        "evidence_en": "transaction no. refers to TransactionID; TransactionID = 103545;",
        "evidence_ar": "",
        "SQL": "SELECT T1.City FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = 103545"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the phone number of the customer who owns the credit card of number 6011179359005380?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which customer has the most reviews? State the full name.",
        "question_ar": "",
        "evidence_en": "customer that has the most reviews refers to MAX(COUNT(CustomerID)); full name = First, Last;",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "For the customer who leaves the review content of \"Tastes like Australia.\", when was his/her first purchase date?",
        "question_ar": "",
        "evidence_en": "review content of \"Tastes like Australia.\" refers to Review = 'Tastes like Australia.';",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "When did Natalie Dorris buy her first root beer?",
        "question_ar": "",
        "evidence_en": "when a customer bought their first root beer refers to FirstPurchaseDate;",
        "evidence_ar": "",
        "SQL": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Natalie' AND T1.Last = 'Dorris' ORDER BY T2.TransactionDate LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "For the root beer brand with the most 5 star ratings, what is the name of the brewery?",
        "question_ar": "",
        "evidence_en": "most 5 star ratings refers to MAX(COUNT(StarRating = 5)); name of the brewery refers to BreweryName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.BreweryName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T1.BrandID ORDER BY COUNT(T2.StarRating) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "For the customer who gave a 3 star rating to Frostie brand on 2014/4/24, did the user permit the company to send regular emails to him/her?",
        "question_ar": "",
        "evidence_en": "3 star rating refers to StarRating = 3; Frostie refers to  BrandName = 'Frostie'; if SubscribedToEmailList = 'TRUE', it means the user permit the company to send regular emails to him/her; if SubscribedToEmailList = FALSE', it means the user did not permit the company to send regular emails to him/her; rating on 2014/4/24 refers to ReviewDate = '2014-04-24';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.SubscribedToEmailList LIKE 'TRUE' THEN 'YES' ELSE 'NO' END AS result FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T2.StarRating = 3 AND T3.BrandName = 'Frostie' AND T2.ReviewDate = '2014-04-24'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "For the root beer brand which got the review with the content of \"The quintessential dessert root beer. No ice cream required.\", what is the current retail price of the root beer?",
        "question_ar": "",
        "evidence_en": "review with the content of \"The quintessential dessert root beer. No ice cream required.\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';",
        "evidence_ar": "",
        "SQL": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the percentage of 5 star ratings River City brand root beer get?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE StarRating = 5), COUNT(BrandID) WHERE BrandName = 'River City'), 1.0); 5 star ratings refers to StarRating = 5; River City refers to BrandName = 'River City';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.StarRating = 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.StarRating) FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'River City'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average number of reviews of all the root beer brands from \"CA\" State?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(CustomerID), COUNT(BrandID) WHERE state = CA); \n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(*) AS REAL) / COUNT(DISTINCT T1.BrandID) AS avgreview FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.State = 'CA'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many female customers permit the company to send regular emails to them?",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; customer permits the company to send regular emails to them refers to SubscribedToEmailList = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the name of the brand of the beer with the shortest brewed history?",
        "question_ar": "",
        "evidence_en": "name of the brand of the beer refers to BrandName; shortest brewed history refers to MAX(FirstBrewedYear);",
        "evidence_ar": "",
        "SQL": "SELECT BrandName FROM rootbeerbrand ORDER BY FirstBrewedYear DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What are the full names of the first top 10 customers?",
        "question_ar": "",
        "evidence_en": "full name = First Last; first top 10 customers refers to MIN(FirstPurchaseDate) LIMIT 10;",
        "evidence_ar": "",
        "SQL": "SELECT First, Last FROM customers ORDER BY FirstPurchaseDate LIMIT 10"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many breweries are there in Australia?",
        "question_ar": "",
        "evidence_en": "Australia refers to Country = 'Australia';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BreweryName) FROM rootbeerbrand WHERE Country = 'Australia'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many customers are named Charles in Sacramento?",
        "question_ar": "",
        "evidence_en": "Sacramento refers to City = 'Sacramento';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM customers WHERE First = 'Charles' AND City = 'Sacramento'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions were paid through MasterCard in 2014?",
        "question_ar": "",
        "evidence_en": "MasterCard refers to CreditCardType = 'MasterCard'; in 2014 refers to TransactionDate > = '2014-01-01' AND TransactionDate < = '2014-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TransactionID) FROM `transaction` WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brand of root beer did Jayne Collins give the lowest rating?",
        "question_ar": "",
        "evidence_en": "brand of root beer refers to BrandName; lowest rating refers to MIN(StarRating);",
        "evidence_ar": "",
        "SQL": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Jayne' AND T1.Last = 'Collins' AND T2.StarRating = 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many sweet bottled root beers that do not contain cane sugar were purchased in 2015 through the selling company located in Sac State American River Courtyard?",
        "question_ar": "",
        "evidence_en": "sweet refers to Honey = 'TRUE'; bottled refers to ContainerType = 'Bottle'; do not contain cane sugar refers to CaneSugar = 'FALSE'; in 2015 refers to PurchaseDate < = '2015-12-31'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brewery does the most purchased root beer in 2016 belong to?",
        "question_ar": "",
        "evidence_en": "most purchased root beer refers to MAX(COUNT(BrandID)); in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What are the full names of the customer who gave River City a 5-star?",
        "question_ar": "",
        "evidence_en": "full name = First, Last; River City refers to BrandName = 'River City'; 5-star refers to StarRating = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T3.BrandName = 'River City' AND T2.StarRating = 5"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many root beers did Tom Hanks purchase between 2015 to 2016?",
        "question_ar": "",
        "evidence_en": "between 2015 to 2016 refers to TransactionDate > = '2015-01-01' AND TransactionDate < '2016-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RootBeerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Tom' AND T1.Last = 'Hanks' AND T2.TransactionDate BETWEEN '2015-01-01' AND '2016-12-31'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brand of root beer was highly rated by customers?",
        "question_ar": "",
        "evidence_en": "brand of root beer refers to BrandName; highly rated refers to MAX(COUNT(StarRating = 5));",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many Henry Weinhard's were bought by Nicholas Sparks?",
        "question_ar": "",
        "evidence_en": "Henry Weinhard's refers to BrandName = 'Henry Weinhard''s';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Nicholas' AND T1.Last = 'Sparks' AND T4.BrandName LIKE 'Henry Weinhard%s'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases?",
        "question_ar": "",
        "evidence_en": "do not advertise on Facebook and Twitter refers to FacebookPage IS NULL AND Twitter IS NULL; highest number of purchases refers to MAX(COUNT(BrandID));",
        "evidence_ar": "",
        "SQL": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Between Sac State Union and Sac State American River Courtyard, which location sold the most Dog n Suds root beer?",
        "question_ar": "",
        "evidence_en": "Between Sac State Union and Sac State American River Courtyard refers to LocationName IN('Sac State American River Courtyard', 'Sac State Union'); Dog n Suds refers to BrandName = 'Dog n Suds'; sold the most root beer refers to MAX(COUNT(BrandID));",
        "evidence_ar": "",
        "SQL": "SELECT T3.LocationName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Dog n Suds' AND T3.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') GROUP BY T1.LocationID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many canned A&W were purchased in 2016?",
        "question_ar": "",
        "evidence_en": "canned refers to ContainerType = 'Can'; A&W refers to BrandName = 'A&W'; in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can' AND T2.BrandName = 'A&W' AND T1.PurchaseDate LIKE '2016%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise location of Sac State Union?",
        "question_ar": "",
        "evidence_en": "precise location = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What are the brands of the root beers that received 5-star ratings from no less than 5 customers?",
        "question_ar": "",
        "evidence_en": "brand of the root beer refers to BrandName; 5-star ratings refers to StarRating = 5; no less than 5 customers refers to COUNT(CustomerID) > = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016.",
        "question_ar": "",
        "evidence_en": "brand of root beer refers to BrandName; produced by Dr Pepper Snapple Group refers to BreweryName = 'Dr Pepper Snapple Group'; percentage of purchases = MULTIPLY(DIVIDE(SUM(BrandID WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31'), COUNT(BrandID) WHERE BreweryName = 'Dr Pepper Snapple Group'), 1.0); between 2014 to 2016 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31;",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName , CAST(SUM(CASE WHEN T2.PurchaseDate >= '2014-01-01' AND T2.PurchaseDate <= '2016-12-31' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.BrandID) AS purchase FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BreweryName = 'Dr Pepper Snapple Group' GROUP BY T2.BrandID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brand of root beer has the lowest unit profit available to wholesalers? Indicate the ID of the customer that has the highest number of purchases of the said brand.",
        "question_ar": "",
        "evidence_en": "brand of root beer refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost)); ID of the customer refers to CustomerID; highest number of purchases refers to MAX(COUNT(CustomerID));",
        "evidence_ar": "",
        "SQL": "SELECT T3.BrandName, T2.CustomerID FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost, COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List the full name and phone number of male customers from Fair Oaks who are subscribed to the email list.",
        "question_ar": "",
        "evidence_en": "full name = First, Last; male customers refers to Gender = 'M'; Fair Oaks refers to City = 'Fair Oaks'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT First, Last, PhoneNumber FROM customers WHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the root beer purchased in 2014, what percentage were sold in cans?",
        "question_ar": "",
        "evidence_en": "in 2014 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'; percentage = MULTIPLY(DIVIDE(SUM(ContainerType = 'Can'), COUNT(RootBeerID) WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'), 1.0); in cans refers to ContainerType = 'Can';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Give the name of the brands that brewed their first drink between 1996 and 2000 in the descending order of the date brewed.",
        "question_ar": "",
        "evidence_en": "name of the brands refers to BrandName; between 1996 and 2000 refers to FirstBrewedYear > = 1996 AND FirstBrewedYear < = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear BETWEEN '1996' AND '2000' ORDER BY FirstBrewedYear DESC"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Find the brand Id of the root beer which has the most number of customers who gave 1-star ratings.",
        "question_ar": "",
        "evidence_en": "most number of customers who gave 1-star ratings refers to MAX(COUNT(StarRating = 1)); 1-star ratings refers to StarRating = 1;",
        "evidence_ar": "",
        "SQL": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the transactions, what percentage is done by using a visa card?",
        "question_ar": "",
        "evidence_en": "visa card refers to CreditCardType = 'Visa'; percentage = MULTIPLY(DIVIDE(SUM(CreditCardType = 'Visa'), COUNT(TransactionID)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN CreditCardType = 'Visa' THEN TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(TransactionID) FROM `transaction`"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many brands of root beers are available in cans and contain corn syrup and artificial sweeteners?",
        "question_ar": "",
        "evidence_en": "available in cans refers to AvailableInCans = 'TRUE'; contain corn syrup refers to CornSyrup = 'TRUE'; contain artificial sweeteners refers to ArtificialSweetener = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Calculate the percentage of sales done at Sac State American River Courtyard.",
        "question_ar": "",
        "evidence_en": "percentage =   MULTIPLY(DIVIDE(SUM(LocationName = 'Sac State American River Courtyard'), COUNT(LocationID)), 1.0); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.TransactionID) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "On average how many caffeinated root beers are sold a day?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(RootBeerID WHERE Caffeinated = 'TRUE'), COUNT(PurchaseDate)); caffeinated refers to Caffeinated = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.RootBeerID) AS REAL) / COUNT(DISTINCT T2.PurchaseDate) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN `transaction` AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.Caffeinated = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Find the root beer with the most and least amount of profit per unit and list the container types in which these root beers are sold.",
        "question_ar": "",
        "evidence_en": "most amount of profit per unit refers to MAX(SUBTRACT(CurrentRetailPrice, WholesaleCost)); least amount of profit per unit refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));",
        "evidence_ar": "",
        "SQL": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average cost of root beers purchased for more than 2 dollars and sold in bottles?",
        "question_ar": "",
        "evidence_en": "average cost = DIVIDE(SUM(PurchasePrice > 2), COUNT(RootBeerID) WHERE PurchasePrice > 2); more than 2 dollars refers to PurchasePrice > 2; in bottles refers to ContainerType = 'Bottle';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.PurchasePrice) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T1.ContainerType = 'Bottle' AND T2.PurchasePrice > 2"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the root beers sold in bottles, how many are sold at the location 38.559615, -121.42243?",
        "question_ar": "",
        "evidence_en": "in bottles refers to ContainerType = 'Bottle';  location 38.559615, -121.42243 refers to latitude = 38.559615 AND longitude = -121.42243;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T4.BrandID) FROM `transaction` AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID INNER JOIN rootbeer AS T4 ON T1.RootBeerID = T4.RootBeerID WHERE T2.Latitude = 38.559615 AND T2.Longitude = -121.42243 AND T4.ContainerType = 'Bottle'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the customers not subscribed to the mailing list, what percentage has given three or more stars in a review?",
        "question_ar": "",
        "evidence_en": "not subscribed to the mailing list refers to SubscribedToEmailList = 'FALSE'; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE StarRating > 3), COUNT(CustomerID) WHERE SubscribedToEmailList = 'FALSE'), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.StarRating > 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'FALSE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which root beer got the most five stars in 2012? Give the brand name of this beer.",
        "question_ar": "",
        "evidence_en": "most five stars refers to MAX(COUNT(StarRating = 5)); in 2012 refers to FirstBrewedYear = 2012;",
        "evidence_ar": "",
        "SQL": "SELECT T3.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.StarRating = 5 AND strftime('%Y', T2.ReviewDate) = '2012' GROUP BY T1.BrandID ORDER BY COUNT(T2.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "In the female customers, how many bought root beer that contains artificial sweetener?",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; contains artificial sweetener refers to ArtificialSweetener = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.Gender = 'F' AND T4.ArtificialSweetener = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Calculate the difference between the number of root beers sold that use cane sugar and corn syrup.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(CaneSugar = 'TRUE'), SUM(CornSyrup = 'TRUE')); use cane sugar refers to CaneSugar = 'TRUE'; corn syrup refers to CornSyrup = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T3.CaneSugar = 'TRUE' THEN T1.BrandID ELSE NULL END) - COUNT(CASE WHEN T3.CornSyrup = 'TRUE' THEN T1.BrandID ELSE NULL END) AS DIFFERENCE FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brewery brewed the most sold root beer in 2015?",
        "question_ar": "",
        "evidence_en": "brewery refers to BreweryName; most sold root beer refers to MAX(COUNT(BrandID)); in 2015 refers to TransactionDate > = '2015-01-01' AND TransactionDate < = '2015-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT T3.BreweryName FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2015%' GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Among the male customers in Sacramento, what percentage bought Dominion root beer in 2013?",
        "question_ar": "",
        "evidence_en": "male customers refers to Gender = 'M'; Sacramento refers to City = 'Sacramento'; percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE BrandName = 'Dominion'), COUNT(BrandID) WHERE City = 'Sacramento'), 1.0); Dominion refers to BrandName = 'Dominion'; in 2013 refers to TransactionDate > = 2013-01-01 AND TransactionDate < 2014-01-01;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.BrandName = 'Dominion' THEN T1.CustomerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.City = 'Sacramento' AND T1.Gender = 'M' AND T2.TransactionDate LIKE '2014%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the difference in the average number of sales per day of root beer brands that contain honey and that don’t contain honey.",
        "question_ar": "",
        "evidence_en": "difference in the average = SUBTRACT(DIVIDE(MULTIPLY(SUM(Honey = 'TRUE'), 1.0), COUNT(TransactionDate)), DIVIDE(MULTIPLY(SUM(Honey = 'FALSE'), 1.0), COUNT(TransactionDate))); contain honey refers to Honey = 'TRUE'; don’t contain honey refers to Honey = 'FALSE'",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T1.Honey = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) - (CAST(SUM(CASE WHEN T1.Honey <> 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN `transaction` AS T3 ON T2.RootBeerID = T3.RootBeerID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Find and list the full name and email of the customers who used American Express cards in Sac State Union.",
        "question_ar": "",
        "evidence_en": "full name = First, Last; American Express cards refers to CreditCardType = 'American Express'; Sac State Union refers to LocationName = 'Sac State Union';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.First, T1.Last, T1.Email FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State Union' AND T2.CreditCardType = 'American Express'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "In the reviews of September 2014. Which brand of beers obtained the highest star ratings?",
        "question_ar": "",
        "evidence_en": "September 2014 refers to ReviewDate LIKE '2014-09%'; brand of beers refers to BrandName; highest star ratings refers to MAX(StarRating);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2014-09-01' AND '2014-09-30'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise location of all paying customers with American Express?",
        "question_ar": "",
        "evidence_en": "precise location refers to Latitude, Longitude; American Express refers to CreditCardType = 'American Express';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Latitude, T2.Longitude FROM `transaction` AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.CreditCardType = 'American Express'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many Folsom customers prefer to pay with Visa?",
        "question_ar": "",
        "evidence_en": "Folsom refers to City = 'Folsom'; Visa refers to CreditCardType = 'Visa';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "From which cities are the customers who gave 5 stars in their reviews in November 2012?",
        "question_ar": "",
        "evidence_en": "5 stars refers to StarRating = 5; in November 2012 refers to ReviewDate LIKE '2012-11%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.City FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2012-11-01' AND '2012-11-30'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What brands of beer has Peg Winchester consumed?",
        "question_ar": "",
        "evidence_en": "brands of beer refers to BrandName;",
        "evidence_ar": "",
        "SQL": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Peg' AND T1.Last = 'Winchester'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What brand of beer has been the worst rated most times?",
        "question_ar": "",
        "evidence_en": "brand of beer refers to BrandName; worst rated most times refers to MAX(COUNT(StarRating = 1));",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 GROUP BY T1.BrandName ORDER BY COUNT(T1.BrandName) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What credit card is the most used in the purchase of non-alcoholic beer?",
        "question_ar": "",
        "evidence_en": "credit card that is the most used refers to MAX(COUNT(CreditCardType)); non-alcoholic beer refers to Alcoholic = 'FALSE';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreditCardType FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T3.Alcoholic = 'FALSE' GROUP BY T2.CreditCardType ORDER BY COUNT(T2.CreditCardType) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the name of all the customers who have ever given a 5-star review?",
        "question_ar": "",
        "evidence_en": "name of the customer = First, Last; 5-star review refers to StarRating = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5"
    },
    {
        "db_id": "beer_factory",
        "question_en": "At what latitude is the Thomas Kemper brand beer consumed the most?",
        "question_ar": "",
        "evidence_en": "Thomas Kemper refers to BrandName = 'Thomas Kemper';  latitude the beer is consumed the most refers to MAX(COUNT(Latitude));",
        "evidence_ar": "",
        "SQL": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What star rating is the most common for beers containing corn syrup?",
        "question_ar": "",
        "evidence_en": "most common refers to MAX(COUNT(StarRating)); containing corn syrup refers to CornSyrup = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise location of zip code 95819?",
        "question_ar": "",
        "evidence_en": "precise location = Latitude, Longitude;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ZipCode = 95819"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What brands of beers are manufactured at coordinates 38,566,129, -121,426,432?",
        "question_ar": "",
        "evidence_en": "coordinates 38,566,129, -121,426,432 refers to Latitude = 38.566129 AND Longitude = -121.426432;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T3.Latitude = '38.566129' AND T3.Longitude = '-121.426432'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average unit profit for wholesalers of canned beers?",
        "question_ar": "",
        "evidence_en": "average unit profit = DIVIDE(SUM(SUBTRACT(CurrentRetailPrice, WholesaleCost)), COUNT(ContainerType = 'Can')); canned beers refers to ContainerType = 'Can';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.CurrentRetailPrice - T2.WholesaleCost) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What percentage of customers who paid with a Discover Credit Card gave a 3-star rating?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE StarRating = 3), COUNT(CustomerID) WHERE CreditCardType = 'Discover'), 100); Discover Credit Card refers to CreditCardType = 'Discover'; 3-star rating refers to StarRating = 3;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.StarRating = 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardType = 'Discover'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List the brand IDs of the beers whose star rating is more than 3.",
        "question_ar": "",
        "evidence_en": "star rating is more than 3 refers to StarRating > 3;",
        "evidence_ar": "",
        "SQL": "SELECT BrandID FROM rootbeerreview WHERE StarRating > 3"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015?",
        "question_ar": "",
        "evidence_en": "bottle root beer refers to ContainerType = 'Bottle'; purchased between 4/3/2015 and 10/26/2015 refers to PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BrandID) FROM rootbeer WHERE ContainerType = 'Bottle' AND PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the full name of the customer who gave a 5-star rating and commented \"The quintessential dessert root beer. No ice cream required\" on his review?",
        "question_ar": "",
        "evidence_en": "full name = First, Last; 5-star rating refers to StarRating = 5; commented \"The quintessential dessert root beer. No ice cream required\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.Review = 'The quintessential dessert root beer. No ice cream required.'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Tally the email addresses and phone numbers of customers from Sacramento who gave a star rating of more than 3 in 2014.",
        "question_ar": "",
        "evidence_en": "email addresses refers to Email; Sacramento refers to City = 'Sacramento'; star rating of more than 3 refers to StarRating > 3; in 2014 refers to ReviewDate LIKE '2014%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Email, T1.PhoneNumber FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating > 3 AND T1.City = 'Sacramento' AND T2.ReviewDate BETWEEN '2014-01-01' AND '2014-12-31'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many female mailing list subscribers from Sacramento gave a 4-star rating between 1/3/2016 and 10/26/2016?",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; mailing list subscribers refers to SubscribedToEmailList = 'TRUE'; Elk Grove refers to City = 'Sacramento'; 4-star rating refers to StarRating = 4; between 1/3/2016 and 10/26/2016 refers to ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 4 AND T1.City = 'Sacramento' AND T1.Gender = 'F' AND T1.SubscribedToEmailList = 'TRUE' AND T2.ReviewDate BETWEEN '2013-01-03' AND '2013-10-26'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015.",
        "question_ar": "",
        "evidence_en": "canned root beer refers to ContainerType = 'Can'; purchased before 6/6/2015 refers to PurchaseDate < '2015-06-06';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.BreweryName, T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate < '2015-06-06' AND T1.ContainerType = 'Can'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List the brand names of bottled root beer whose first brewing year is no later than 1930.",
        "question_ar": "",
        "evidence_en": "bottled root beer refers to ContainerType = 'Bottle'; first brewing year is no later than 1930 refers to FirstBrewedYear < 1930;",
        "evidence_ar": "",
        "SQL": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FirstBrewedYear < '1930-01-01' AND T1.ContainerType = 'Bottle' ORDER BY T2.FirstBrewedYear LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many times did Anna Himes use her Mastercard when paying between 12/25/2014 and 5/20/2016 ?",
        "question_ar": "",
        "evidence_en": "Mastercard refers to CreditCardType = 'MasterCard'; between 12/25/2014 and 5/20/2016 refers to TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Anna' AND T1.Last = 'Himes' AND T2.CreditCardType = 'MasterCard' AND T2.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015?",
        "question_ar": "",
        "evidence_en": "average star rating = AVG(StarRating); female customers refers to Gender = 'F; from 1/25/2015 to 3/10/2015 refers to ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.BrandID = 10018 AND T1.Gender = 'F' AND T2.ReviewDate BETWEEN '2013-01-25' AND '2015-03-10'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the brand name of the root beer that gained a 1-star rating from customer ID 331115 while saying, \"Yuk, more like licorice soda\"?",
        "question_ar": "",
        "evidence_en": "1-star rating refers to StarRating = 1; saying, \"Yuk, more like licorice soda\" refers to Review = 'Yuk, more like licorice soda.';",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Calculate the total purchases made by customers using their Visa credit cards in the Sac State American River Courtyard between 6/3/2014 and 11/27/2015.",
        "question_ar": "",
        "evidence_en": "total purchases = SUM(PurchasePrice); Visa credit card refers to CreditCardType = 'Visa'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; between 6/3/2014 and 11/27/2015 refers to TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.PurchasePrice) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'Visa' AND T1.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions were made in Sac State Union using the American Express credit card in 2014?",
        "question_ar": "",
        "evidence_en": "Sac State Union refers to LocationName = 'Sac State Union'; American Express credit card refers to CreditCardType = 'American Express'; in 2014 refers to TransactionDate LIKE '2014%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise coordinate of Sac State Union?",
        "question_ar": "",
        "evidence_en": "precise coordinate = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What did the customer say in his or her review of Bulldog root beer on 7/26/2013?",
        "question_ar": "",
        "evidence_en": "Bulldog refers to BrandName = 'Bulldog'; on 7/26/2013 refers to ReviewDate = '2013-07-26';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Review FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'Bulldog' AND T2.ReviewDate = '2013-07-26'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List down the brand names of root beer that gained a 5-star rating from a customer's review in 2013. Calculate the unit profit available to wholesalers for each brand.",
        "question_ar": "",
        "evidence_en": "5-star rating refers to StarRating = 5; in 2013 refers to ReviewDate LIKE '2013%'; unit profit available to wholesalers = SUBTRACT(CurrentRetailPrice, WholesaleCost);",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName, T1.CurrentRetailPrice - T1.WholesaleCost AS result FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2013-01-01' AND '2013-12-31'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Give me the full name of the first customer, and tell me how long ago he or she wrote his or her first review since making his or her first purchase.",
        "question_ar": "",
        "evidence_en": "full name = First, Last; how long ago = SUBTRACT(ReviewDate, FirstPurchaseDate);",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last , strftime('%J', ReviewDate) - strftime('%J', FirstPurchaseDate) AS TIMEAGO FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the credit card type used by Kenneth Walton?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the container type, brand name and star rating for root beer ID 10054?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List out the root beers bought by Tim Ocel and Dawn Childress.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.RootBeerID FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T2.CustomerID = T1.CustomerID WHERE (T1.First = 'Tim' AND T1.Last = 'Ocel') OR (T1.First = 'Dawn' AND T1.Last = 'Childress')"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's.",
        "question_ar": "",
        "evidence_en": "Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's refers to BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');",
        "evidence_ar": "",
        "SQL": "SELECT T1.RootBeerID FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T2.BrandID = T1.BrandID WHERE T2.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s')"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many bottles of beer have been bought by Jim Breech?",
        "question_ar": "",
        "evidence_en": "bottles refers to ContainerType = 'Bottle';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.ContainerType) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T2.CustomerID = T1.CustomerID INNER JOIN rootbeer AS T3 ON T3.RootBeerID = T2.RootBeerID WHERE T3.ContainerType = 'Bottle' AND T1.First = 'Jim' AND T1.Last = 'Breech'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions have been made to purchase a root beer brand from California?",
        "question_ar": "",
        "evidence_en": "California refers to State = 'CA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.RootBeerID) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN `transaction` AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.State = 'CA'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the average review given by a subscriber?",
        "question_ar": "",
        "evidence_en": "average review = AVG(StarRating); subscriber refers to SubscribedToEmailList = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the amount difference between the bottles of root beer sold from Louisiana and Missouri?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(COUNT(ContainerType = 'Bottle' WHERE State = 'LA'), COUNT(ContainerType = 'Bottle' State = 'MO')); bottles refers to ContainerType = 'Bottle'; Louisiana refers to State = 'LA'; Missouri refers to State = 'MO';",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.State = 'LA' AND T1.ContainerType = 'Bottle' ) - ( SELECT COUNT(T3.BrandID) FROM rootbeer AS T3 INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.State = 'MO' AND T3.ContainerType = 'Bottle' ) AS DIFFERENCE"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the transaction ratio being made at Sac State American River Courtyard and Sac State Union?",
        "question_ar": "",
        "evidence_en": "transaction ratio = DIVIDE(SUM(TransactionID WHERE LocationName = 'Sac State American River Courtyard'), SUM(TransactionID WHERE LocationName = 'Sac State Union')); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Sac State Union refers to LocationName = 'Sac State Union';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN T1.TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN T2.LocationName = 'Sac State Union' THEN T1.TransactionID ELSE NULL END) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List out the name of the top 10 spenders and what credit card type are they using.",
        "question_ar": "",
        "evidence_en": "top 10 spenders refers to MAX(PurchasePrice) LIMIT 10;",
        "evidence_ar": "",
        "SQL": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.PurchasePrice) DESC LIMIT 10"
    },
    {
        "db_id": "beer_factory",
        "question_en": "List out root beer brand that is not caffeinated and not containing cane sugar. What is the total amount sold for this products?",
        "question_ar": "",
        "evidence_en": "root beer brand refers to BrandName; not caffeinated refers to Caffeinated = 'FALSE'; not containing cane sugar refers to CaneSugar = 'FALSE'; total amount sold = SUM(PurchasePrice);",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName, SUM(T3.PurchasePrice) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN `transaction` AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.CaneSugar = 'FALSE' AND T1.Caffeinated = 'FALSE' GROUP BY T1.BrandName"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which of the root beer brand have the lowest purchase?",
        "question_ar": "",
        "evidence_en": "root beer brand refers to BrandName; lowest purchase refers to MIN(COUNT(BrandID));",
        "evidence_ar": "",
        "SQL": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the best seller root beer brand and what is the average star rating for this root beer?",
        "question_ar": "",
        "evidence_en": "best seller root beer refers to MAX(COUNT(BrandID)); average star rating = AVG(StarRating);",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandID, AVG(T1.StarRating) FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the percentage difference of River City sale compare to Frostie?",
        "question_ar": "",
        "evidence_en": "percentage difference = (DIVIDE(MULTIPLY(SUBTRACT(SUM(PurchasePrice WHERE BrandName = 'River City'), SUM(PurchasePrice WHERE BrandName = 'Frostie')), 100), SUM(PurchasePrice WHERE BrandName = 'Frostie'))); River City refers to BrandName = 'River City'; Frostie refers to BrandName = 'Frostie';",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T3.BrandName = 'River City' THEN T2.PurchasePrice ELSE 0 END) - SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please name all of the cities in California.",
        "question_ar": "",
        "evidence_en": "California refers to State = 'CA';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT City FROM customers WHERE State = 'CA'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the percentage of female customers who subscribed to the email list?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE Gender = 'F'), COUNT(CustomerID) WHERE SubscribedToEmailList = 'TRUE'), 1.0); female refers to Gender = 'F'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which type of card did Dick Ruthven use to pay for all of his transactions?",
        "question_ar": "",
        "evidence_en": "type of card refers to CreditCardType;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions were made at Sac State Union?",
        "question_ar": "",
        "evidence_en": "Sac State Union refers to LocationName = 'Sac State Union';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many stars did Urijah Faber rate for Frostie?",
        "question_ar": "",
        "evidence_en": "stars refers to StarRating; Frostie refers to BrandName = 'Frostie';",
        "evidence_ar": "",
        "SQL": "SELECT T2.StarRating FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Urijah' AND T1.Last = 'Faber' AND T3.BrandName = 'Frostie'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brand has the lowest star rating with a \"Too spicy!\" review?",
        "question_ar": "",
        "evidence_en": "lowest star rating refers to MIN(StarRating); \"Too spicy!\" review refers to Review = 'Too Spicy!';",
        "evidence_ar": "",
        "SQL": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 AND T2.Review = 'Too Spicy!'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many purchases were made at Sac State American River Courtyard using Master Card?",
        "question_ar": "",
        "evidence_en": "Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Master Card refers to CreditCardType = 'MasterCard';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'MasterCard'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which brand in 2012 has the lowest star rating and contains cane sugar as well as honey?",
        "question_ar": "",
        "evidence_en": "brand refers to BrandName; in 2012 refers to ReviewDate LIKE '2012%'; lowest star rating refers to MIN(StarRating); contains cane sugar as well as honey refers to CaneSugar = 'TRUE' AND Honey = 'TRUE';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CaneSugar = 'TRUE' AND T1.Honey = 'TRUE' AND T2.StarRating = 1 AND T2.ReviewDate LIKE '2012%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise location of the place where Tommy Kono made a purchase in 2014?",
        "question_ar": "",
        "evidence_en": "precise location = Latitude, Longitude; in 2014 refers to TransactionDate LIKE '2014%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Latitude, T1.Longitude FROM geolocation AS T1 INNER JOIN `transaction` AS T2 ON T2.LocationID = T1.LocationID INNER JOIN customers AS T3 ON T3.CustomerID = T2.CustomerID WHERE T3.First = 'Tommy' AND T3.Last = 'Kono' AND T2.TransactionDate LIKE '2014%'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the email address of the customer who made a purchase in transaction 100016?",
        "question_ar": "",
        "evidence_en": "email address refers to Email; transaction 100016 refers to TransactionID = 100016;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Email FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "How many transactions were made to purchase a bottle of beer using American Express?",
        "question_ar": "",
        "evidence_en": "bottle of beer refers to ContainerType = 'Bottle'; American Express refers to CreditCardType = 'American Express';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.RootBeerID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID WHERE T1.ContainerType = 'Bottle' AND T2.CreditCardType = 'American Express'"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Which location sold more bottles of beer?",
        "question_ar": "",
        "evidence_en": "location refers to LocationName; bottle of beer refers to ContainerType = 'Bottle'; location that sold more bottles of beer refers to MAX(COUNT(LocationID WHERE ContainerType = 'Bottle'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.LocationName FROM rootbeer AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ContainerType = 'Bottle' GROUP BY T2.LocationID ORDER BY COUNT(T1.LocationID) DESC LIMIT 1"
    },
    {
        "db_id": "beer_factory",
        "question_en": "Please name any three root beer brands that have the highest market evaluation and acceptance.",
        "question_ar": "",
        "evidence_en": "root beer brands refers to BrandName; highest market evaluation and acceptance refers to MAX(COUNT(StarRating = 5));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3"
    },
    {
        "db_id": "beer_factory",
        "question_en": "What is the precise location of the Sac State American River Courtyard?",
        "question_ar": "",
        "evidence_en": "precise location = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'"
    },
    {
        "db_id": "sales",
        "question_en": "How many sales ids are there for customer id 80?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80"
    },
    {
        "db_id": "sales",
        "question_en": "Count the total quantity for sales from id 1 to 10.",
        "question_ar": "",
        "evidence_en": "sales from id 1 to 10 refers to SalesID BETWEEN 1 AND 10;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Quantity) FROM Sales WHERE SalesID BETWEEN 1 AND 10"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the average quantity per sales from sales id 20 to 30.",
        "question_ar": "",
        "evidence_en": "average quantity = AVG(Quantity); SalesID BETWEEN 20 AND 30;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Quantity) FROM Sales WHERE SalesID BETWEEN 20 AND 30"
    },
    {
        "db_id": "sales",
        "question_en": "List down the product id for products with the highest quantity.",
        "question_ar": "",
        "evidence_en": "highest quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT ProductID FROM Sales WHERE Quantity = ( SELECT MAX(Quantity) FROM Sales )"
    },
    {
        "db_id": "sales",
        "question_en": "How many product ids have the lowest price?",
        "question_ar": "",
        "evidence_en": "lowest price refers to MIN(Price);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT ProductID) FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )"
    },
    {
        "db_id": "sales",
        "question_en": "List down product names of free gifts.",
        "question_ar": "",
        "evidence_en": "free gifts refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Products WHERE Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "List down the product name for products from id 1 to 10.",
        "question_ar": "",
        "evidence_en": "products from id 1 to 10 refers to ProductID BETWEEN 1 AND 10;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10"
    },
    {
        "db_id": "sales",
        "question_en": "What is the name of the product with the lowest quantity?",
        "question_ar": "",
        "evidence_en": "lowest quantity refers to MIN(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "How many customer ids have purchased Hex Nut 9?",
        "question_ar": "",
        "evidence_en": "Hex Nut 9' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 9'"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total sales ids that were sales of Flat Washer 8.",
        "question_ar": "",
        "evidence_en": "Flat Washer 8' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Flat Washer 8'"
    },
    {
        "db_id": "sales",
        "question_en": "List down all of the product names that were placed by sales person with id 10.",
        "question_ar": "",
        "evidence_en": "id refers to SalesPersonID; SalesPersonID = 10",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 10"
    },
    {
        "db_id": "sales",
        "question_en": "List down the first name of customers who placed order for product id 1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.ProductID = 1"
    },
    {
        "db_id": "sales",
        "question_en": "What is the last name of the customer who placed an order for sales id 178?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178"
    },
    {
        "db_id": "sales",
        "question_en": "List down product ids that were purchased by customers called Abby.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'"
    },
    {
        "db_id": "sales",
        "question_en": "Write down all of the product ids that were placed by Meander.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ProductID FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T1.FirstName = 'Meander'"
    },
    {
        "db_id": "sales",
        "question_en": "What is the last name of sales person for sales id 100?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.SalesID = 100"
    },
    {
        "db_id": "sales",
        "question_en": "What is the first name of employee who handled sales for customer called Abigail?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'"
    },
    {
        "db_id": "sales",
        "question_en": "How many free gifts have customer with id 11782 received?",
        "question_ar": "",
        "evidence_en": "free gifts refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID = 11782 AND T1.Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "What is the full name of customers who dealt with sales person with id 5?",
        "question_ar": "",
        "evidence_en": "full name = FirstName, MiddleInitial, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 5"
    },
    {
        "db_id": "sales",
        "question_en": "List down all of the sales IDs for sales handled by sales people with first name starting with alphabet \"s\".",
        "question_ar": "",
        "evidence_en": "first name starting with alphabet \"s\" refers to FirstName LIKE 's%';",
        "evidence_ar": "",
        "SQL": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE SUBSTR(T2.FirstName, 1, 1) = 's'"
    },
    {
        "db_id": "sales",
        "question_en": "Among customers with IDs from 1 to 100, what is the highest price of products they purchased?",
        "question_ar": "",
        "evidence_en": "IDs from 1 to 100 refers to CustomerID BETWEEN 1 AND 100 ; highest price refers to MAX(Price);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID BETWEEN 1 AND 100 ORDER BY T1.Price DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Among customers with the last name of Valdez, who purchased the highest quantity?",
        "question_ar": "",
        "evidence_en": "highest quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Sum up the number sales ids handled by employees called Morningstar, Heather and Dean.",
        "question_ar": "",
        "evidence_en": "SUM = ADD(SUM(SalesID WHERE FirstName = 'Morningstar'), SUM(SalesID WHERE FirstName = 'Heather'), SUM(SalesID WHERE FirstName = 'Dean'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.FirstName = 'Morningstar', 1, 0)) + SUM(IIF(T2.FirstName = 'Heather', 1, 0)) + SUM(IIF(T2.FirstName = 'Dean', 1, 0)) AS num FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID"
    },
    {
        "db_id": "sales",
        "question_en": "Has Alex purchased product with id 498?",
        "question_ar": "",
        "evidence_en": "WHEN ProductID = 498 AND FirstName = 'Alex' means that Alex purchased a product; WHEN ProductID = 498 AND FirstName NOT 'Alex' means Alex has not purchased a product;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T1.ProductID = 498, 'YES', 'NO') FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Alex'"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total price of products purchased by Adam.",
        "question_ar": "",
        "evidence_en": "total price = SUM(MULTIPLY(Price, Quantity));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.Price * T2.quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Adam'"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total price for products from id 400 to 500.",
        "question_ar": "",
        "evidence_en": "total price = SUM(MULTIPLY(Price, Quantity)); from id 400 to 500 refers to ProductID BETWEEN 400 AND 500;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID BETWEEN 400 AND 500"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total quantity of products with name starting with alphabet \"c\".",
        "question_ar": "",
        "evidence_en": "name starting with alphabet \"c\" refers to Name LIKE 'C%';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Name, 1, 1) = 'C'"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total quantity of products purchased by customer called Adrian.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Adam'"
    },
    {
        "db_id": "sales",
        "question_en": "List the product ID of the top five products, by descending order, in terms of price.",
        "question_ar": "",
        "evidence_en": "top 5 products in terms of Price refers to MAX(Price) LIMIT 5;",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5"
    },
    {
        "db_id": "sales",
        "question_en": "Among the products, how many of them are freebies?",
        "question_ar": "",
        "evidence_en": "freebies refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "Write down the name of products whose sale quantity is more than 950.",
        "question_ar": "",
        "evidence_en": "quantity is more than 950 refers to Quantity > 950;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950"
    },
    {
        "db_id": "sales",
        "question_en": "What is the full name of employee who sold 1000 units?",
        "question_ar": "",
        "evidence_en": "full name of employee = FirstName, MiddleInitial, LastName; units refers to quantity; Quantity = 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T1.Quantity = 1000"
    },
    {
        "db_id": "sales",
        "question_en": "Tally the product name and quantity of the first ten sales.",
        "question_ar": "",
        "evidence_en": "first ten sales refers to SalesID BETWEEN 1 AND 10;",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, T2.Quantity FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.SalesID BETWEEN 1 AND 10"
    },
    {
        "db_id": "sales",
        "question_en": "What is the total sales amount for Reflector?",
        "question_ar": "",
        "evidence_en": "total sales amount = SUM(MULTIPLY(Price, Quantity)); 'Reflector' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'"
    },
    {
        "db_id": "sales",
        "question_en": "What is the best selling colour for HL Mountain Frame, 42?",
        "question_ar": "",
        "evidence_en": "best selling colour refers to name of product with higher total sales; SUM(SalesID WHERE Name = 'HL Mountain Frame - Silver, 42') > SUM(Name = 'HL Mountain Frame - Black, 42') means Silver is the best selling colour, otherwise Black is the best seling colour;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(IIF(T1.Name = 'HL Mountain Frame - Silver, 42', T2.SalesID, 0)) - SUM(IIF(T1.Name = 'HL Mountain Frame - Black, 42', T2.SalesID, 0)) > 0, 'Silver', 'Black') FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "sales",
        "question_en": "What is the difference in price between HL Mountain Frame - Black, 42 and LL Mountain Frame - Black, 42?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT((Price WHERE Name = 'HL Mountain Frame - Black, 42'), (Price WHERE Name = 'HL Mountain Frame - Black, 42'));",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42' ) - ( SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42' ) AS num"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total number of sales closed by Michel E. DeFrance?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T2.FirstName = 'Michel' AND T2.MiddleInitial = 'e' AND T2.LastName = 'DeFrance'"
    },
    {
        "db_id": "sales",
        "question_en": "What is the average number of customers per sales person?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(CustomerID), COUNT(EmployeeID));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.CustomerID) AS REAL) / COUNT(T3.EmployeeID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID"
    },
    {
        "db_id": "sales",
        "question_en": "Among all customers handled by Innes E. del Castillo, how many have purchased Short-Sleeve Classic Jersey, L?",
        "question_ar": "",
        "evidence_en": "Short-Sleeve Classic Jersey, L' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T3.FirstName = 'Innes' AND T3.LastName = 'del Castillo' AND T1.Name = 'Short-Sleeve Classic Jersey, L' AND T3.MiddleInitial = 'e'"
    },
    {
        "db_id": "sales",
        "question_en": "Name the sales person who helped Elizabeth A. White to purchase Road-250 Black, 48.",
        "question_ar": "",
        "evidence_en": "name of the sales person = FirstName, MiddleInitial, LastName; 'Road-250 Black, 48' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'"
    },
    {
        "db_id": "sales",
        "question_en": "How many sales people managed to sell Headlights - Weatherproof?",
        "question_ar": "",
        "evidence_en": "Headlights - Weatherproof' is name of product",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Headlights - Weatherproof'"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the revenue produced through sales of HL Road Frame - Red, 56.",
        "question_ar": "",
        "evidence_en": "revenue = MULTIPLY(SUM(Quantity, Price)); 'HL Road Frame - Red, 56' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Road Frame - Red, 56'"
    },
    {
        "db_id": "sales",
        "question_en": "How many sales transactions were given by the customer named Joe L. Lopez?",
        "question_ar": "",
        "evidence_en": "sales transactions refers to SalesID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Joe' AND T2.MiddleInitial = 'L' AND T2.LastName = 'Lopez'"
    },
    {
        "db_id": "sales",
        "question_en": "Name the customers who received 'Touring Rim' as a free gift.",
        "question_ar": "",
        "evidence_en": "name of the customer = FirstName, MiddleInitial, LastName; 'Touring Rim' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Touring Rim' AND T3.Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "Find the number of customers handled by each of the sales people.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Sales GROUP BY SalesPersonID"
    },
    {
        "db_id": "sales",
        "question_en": "How many sales people are handling all the customers?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees"
    },
    {
        "db_id": "sales",
        "question_en": "Identify the name of the sales person with employee ID 7.",
        "question_ar": "",
        "evidence_en": "name of the sales person = FirstName, MiddleInitial, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, MiddleInitial, LastName FROM Employees WHERE EmployeeID = 7"
    },
    {
        "db_id": "sales",
        "question_en": "Name the most expensive and the least expensive products available, excluding free gifts.",
        "question_ar": "",
        "evidence_en": "most expensive product refers to MAX(Price); least expensive product refers to MIN(Price); excluding free gifts refers to not including Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Products WHERE Price IN (( SELECT MAX(Price) FROM Products ), ( SELECT MIN(Price) FROM Products ))"
    },
    {
        "db_id": "sales",
        "question_en": "Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer?",
        "question_ar": "",
        "evidence_en": "ML Bottom Bracket' is name of product; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE FirstName = 'Albert' AND MiddleInitial = 'I' AND LastName = 'Ringer'), COUNT(CustomerID)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer', 1, 0)) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'"
    },
    {
        "db_id": "sales",
        "question_en": "How many customers have the first name Abigail?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Abigail'"
    },
    {
        "db_id": "sales",
        "question_en": "Indicate the quantity of Blade products sold.",
        "question_ar": "",
        "evidence_en": "Blade' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Quantity FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Blade'"
    },
    {
        "db_id": "sales",
        "question_en": "Give the full name of the employee who has sold the most quantity.",
        "question_ar": "",
        "evidence_en": "full name of the employee = FirstName, LastName; most quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "List the full name of the customer who purchased the most quantity of products.",
        "question_ar": "",
        "evidence_en": "full name of the customer = FirstName, LastName; most quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "What is the name of the product that is most sold by sale person id 20?",
        "question_ar": "",
        "evidence_en": "most sold refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "List the first names of employees with trading quantity for more than 500.",
        "question_ar": "",
        "evidence_en": "trading quantity for more than 500 refers to Quantity > 500;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500"
    },
    {
        "db_id": "sales",
        "question_en": "List the first names of customers who have purchased products from sale person id 1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total trading quantity of Abraham sold to Aaron Alexander.",
        "question_ar": "",
        "evidence_en": "total trading quantity = SUM(Quantity WHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T2.SalesPersonID = 1 AND T1.FirstName = 'Aaron' AND T1.LastName = 'Alexander' AND T3.FirstName = 'Abraham'"
    },
    {
        "db_id": "sales",
        "question_en": "List the full names of customers who have purchased products in quantity over 600.",
        "question_ar": "",
        "evidence_en": "full names of customers = FirstName, LastName; quantity over 600 refers to quantity > 600;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600"
    },
    {
        "db_id": "sales",
        "question_en": "Among the customers whose first name is Cameron, who bought the product in the most quantity?",
        "question_ar": "",
        "evidence_en": "most quantity refers to MAX(Quantity); who refers to FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Cameron' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Please provide sales ID for products named Hex Nut with a price greater than 100.",
        "question_ar": "",
        "evidence_en": "price greater than 100 refers to price > 100;",
        "evidence_ar": "",
        "SQL": "SELECT T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Hex Nut%' AND T1.Price > 100"
    },
    {
        "db_id": "sales",
        "question_en": "Identify customer IDs who bought products priced from 1000 to 2000.",
        "question_ar": "",
        "evidence_en": "priced from 1000 to 2000 refers to Price BETWEEN 1000 AND 2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the total quantity of products that are gifts.",
        "question_ar": "",
        "evidence_en": "total quantity = SUM(Quantity); gifts refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the quantity percentage of the gift products in the total trading quantity.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Price = 0), SUM(Quantity)), 1.0); gift products refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "sales",
        "question_en": "Calculate the percentage of sold blades in the total number of transactions.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Name = 'Blade'), SUM(Quantity)), 1.0); 'blades' refers to name of product;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "sales",
        "question_en": "How many of the employees have the last name \"Ringer\" ?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(LastName) FROM Employees WHERE LastName = 'Ringer'"
    },
    {
        "db_id": "sales",
        "question_en": "Among the products with product ID lower than 15, how many of them costs 10 and below?",
        "question_ar": "",
        "evidence_en": "product ID lower than 15 refers to ProductID < 15; costs 10 and below refers to Price; Price < = 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Products WHERE ProductID < 15 AND Price <= 10"
    },
    {
        "db_id": "sales",
        "question_en": "Give the product's name brought by Aaron Alexander.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'"
    },
    {
        "db_id": "sales",
        "question_en": "Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500.",
        "question_ar": "",
        "evidence_en": "highest prices refers to MAX(Price); quantity ranges from 400 to 500 refers to Quantity BETWEEN 400 AND 500;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductID, T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity BETWEEN 400 AND 500 ORDER BY T1.Price DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Among customers named Kate, who has the highest quantity?",
        "question_ar": "",
        "evidence_en": "highest quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Kate' ORDER BY T1.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Among the products that have price ranges from 100 to 150, what is the customer ID and sales ID of the product with a quantity lower than 25?",
        "question_ar": "",
        "evidence_en": "price ranges from 100 to 150 refers to Price BETWEEN 100 AND 150; quantity lower than 25 refers to Quantity < 25;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID, T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 100 AND 150 AND T2.Quantity < 25"
    },
    {
        "db_id": "sales",
        "question_en": "List the quantity and price of the product bought by Abigail Henderson.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Quantity, T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Abigail' AND T3.LastName = 'Henderson'"
    },
    {
        "db_id": "sales",
        "question_en": "In sales with a quantity of 60, how many of them have a price not greater than 500?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500"
    },
    {
        "db_id": "sales",
        "question_en": "In customers with the first name of Erica, how many of them bought a quantity below 200?",
        "question_ar": "",
        "evidence_en": "quantity below 200 refers to quantity < 200;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200"
    },
    {
        "db_id": "sales",
        "question_en": "Among products bought by Kathryn Ashe, what is the name of the product with the highest quantity?",
        "question_ar": "",
        "evidence_en": "highest quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Kathryn' AND T3.LastName = 'Ashe' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "What is the price and quantity of the product named Seat Tube?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Price, T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Seat Tube'"
    },
    {
        "db_id": "sales",
        "question_en": "What is the price and name of the product bought by Erica Xu?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'"
    },
    {
        "db_id": "sales",
        "question_en": "List the sales ID of the product with a quantity of 590 and named \"External Lock Washer 7\".",
        "question_ar": "",
        "evidence_en": "External Lock Washer 7' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590"
    },
    {
        "db_id": "sales",
        "question_en": "In sales ID between 30 and 40, who is the customer that bought a total quantity of 403?",
        "question_ar": "",
        "evidence_en": "who refers to FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity = 403 AND T1.SalesID BETWEEN 30 AND 40"
    },
    {
        "db_id": "sales",
        "question_en": "List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.",
        "question_ar": "",
        "evidence_en": "quantity greater than 90% of the average quantity = Quantity > MULTIPLY(AVG(Quantity), 0.9);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9"
    },
    {
        "db_id": "sales",
        "question_en": "Among the sales ID ranges from 1 to 200, what is the percentage of the products with a price ranging from 200 to 300?",
        "question_ar": "",
        "evidence_en": "sales ID ranges from 1 to 200 refers to SalesID between 1 and 200; percentage = MULTIPLY(DIVIDE(SUM(Price between 200 and 300), COUNT(Price)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Price BETWEEN 200 AND 300, 1, 0)) AS REAL) * 100 / COUNT(T2.Price) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesID BETWEEN 1 AND 200"
    },
    {
        "db_id": "sales",
        "question_en": "What is the name of the most expensive product?",
        "question_ar": "",
        "evidence_en": "most expensive product refers to MAX(Price);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )"
    },
    {
        "db_id": "sales",
        "question_en": "How many customers are named Madison?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Madison'"
    },
    {
        "db_id": "sales",
        "question_en": "How many types of \"HL Touring Frames\" are there?",
        "question_ar": "",
        "evidence_en": "types of HL Touring Frames refers to Name like '%HL Touring Frame%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Products WHERE Name LIKE '%HL Touring Frame%'"
    },
    {
        "db_id": "sales",
        "question_en": "How many customers share the most common last name?",
        "question_ar": "",
        "evidence_en": "most common last name refers to MAX(COUNT(LastName));",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers GROUP BY LastName ORDER BY COUNT(LastName) DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "How many free or gift products are there?",
        "question_ar": "",
        "evidence_en": "free gift refers to Price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0"
    },
    {
        "db_id": "sales",
        "question_en": "What is the name of the sales person who handled the highest number of sales?",
        "question_ar": "",
        "evidence_en": "name of the sales person = FirstName, MiddleInitial, LastName; highest number of sales refers to MAX(COUNT(SalesID));",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T2.SalesPersonID = T1.EmployeeID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "What is the full name of the customer who purchased the highest amount of total price in a single purchase?",
        "question_ar": "",
        "evidence_en": "full name of the customer = FirstName, MiddleInitial, LastName; highest amount of total price refers to MAX(MULTIPLY(Quantity, Price));",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T1.SalesID, T1.Quantity, T3.Price, FirstName, MiddleInitial, LastName ORDER BY T1.Quantity * T3.Price DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "How many \"Mountain-500 Black 42\" were sold in total?",
        "question_ar": "",
        "evidence_en": "Mountain-500 Black 42' is name of product; sold in total = SUM(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain-500 Black, 42'"
    },
    {
        "db_id": "sales",
        "question_en": "How much is the total amount of sales handled by Heather McBadden?",
        "question_ar": "",
        "evidence_en": "total amount of sales = SUM(MULTIPLY(Quantity, Price));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'"
    },
    {
        "db_id": "sales",
        "question_en": "How many \"Mountain-100 Silver, 38\" were sold by Stearns MacFeather?",
        "question_ar": "",
        "evidence_en": "Mountain-100 Silver, 38' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Stearns' AND T1.LastName = 'MacFeather' AND T3.Name = 'Mountain-100 Silver, 38'"
    },
    {
        "db_id": "sales",
        "question_en": "How many type of products did Dalton M. Coleman purchase?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Dalton' AND T1.MiddleInitial = 'M' AND T1.LastName = 'Coleman'"
    },
    {
        "db_id": "sales",
        "question_en": "What are the full names of the top 3 employees who handled the highest number of sales?",
        "question_ar": "",
        "evidence_en": "full names of employees = FirstName, MiddleInitital, LastName; highest number of sales refers to MAX(COUNT(SalesID));",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3"
    },
    {
        "db_id": "sales",
        "question_en": "Among the \"Mountain-500 Black\" product types, which type was purchased the most?",
        "question_ar": "",
        "evidence_en": "Mountain-500 Black product types refers to Name like 'Mountain-500 Black%'; purchased the most refers to MAX(SUM(Quantity));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Mountain-500 Black%' GROUP BY T2.Quantity, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "How many employees sold \"ML Road Frame-W - Yellow, 40\"?",
        "question_ar": "",
        "evidence_en": "ML Road Frame-W - Yellow, 40' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'"
    },
    {
        "db_id": "sales",
        "question_en": "How many chainring bolts were sold under sales ID 551971?",
        "question_ar": "",
        "evidence_en": "Chainring Bolts' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971"
    },
    {
        "db_id": "sales",
        "question_en": "How many employees sold over 20,000 quantities of \"Touring-2000 Blue, 50\"?",
        "question_ar": "",
        "evidence_en": "over 20,000 quantities refers to Quantity > 20000; 'Touring-2000 Blue, 50' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT SUM(Quantity) FROM Sales WHERE ProductID IN ( SELECT ProductID FROM Products WHERE Name = 'Touring-2000 Blue, 50' ) GROUP BY Quantity, SalesPersonID HAVING SUM(Quantity) > 20000 )"
    },
    {
        "db_id": "sales",
        "question_en": "What is the total cost of all the \"Road-650, Red, 60\" products that Abraham E. Bennet sold?",
        "question_ar": "",
        "evidence_en": "total cost = SUM(MULTIPLY(Quantity, Price)); 'Road-650, Red, 60' is name of product;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Abraham' AND T1.MiddleInitial = 'e' AND T1.LastName = 'Bennet' AND T3.Name = 'Road-650 Red, 60'"
    },
    {
        "db_id": "sales",
        "question_en": "Which product has the highest total amount of quantity sold? Calculate its overall total price.",
        "question_ar": "",
        "evidence_en": "highest total amount of quantity refers to MAX(Quantity); overall total price = SUM(MULTIPLY(Quantity, Price));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "List the first name of all the customers whose last name is Chen.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Chen'"
    },
    {
        "db_id": "sales",
        "question_en": "Among the employee names, what is the most common middle initial?",
        "question_ar": "",
        "evidence_en": "most common middle initial refers to MAX(COUNT(MiddleInitial));",
        "evidence_ar": "",
        "SQL": "SELECT MiddleInitial FROM Employees GROUP BY MiddleInitial ORDER BY COUNT(MiddleInitial) DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "What is the average price of products that cost between 100 and 200?",
        "question_ar": "",
        "evidence_en": "average price = DIVIDE(SUM(Price, COUNT(Price))); cost refers to Price; Price BETWEEN 100 AND 200;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Price) FROM Products WHERE Price BETWEEN 100 AND 200"
    },
    {
        "db_id": "sales",
        "question_en": "Find and list the full name of customers who bought products above-average quantity.",
        "question_ar": "",
        "evidence_en": "full name of the customer = FirstName, MiddleInitial, LastName; above-average quantity = Quantity > AVG(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Quantity HAVING T1.Quantity > ( SELECT AVG(Quantity) FROM Sales )"
    },
    {
        "db_id": "sales",
        "question_en": "Give the full name of the customer who bought the most amount of products.",
        "question_ar": "",
        "evidence_en": "full name of the customer = FirstName, MiddleInitial, LastName; most amount of products refers to MAX(MULTIPLY(Quantity, Price));",
        "evidence_ar": "",
        "SQL": "SELECT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID ORDER BY T2.Quantity * T1.Price DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Of the employees who sold Blade, who has the most amount of sales?",
        "question_ar": "",
        "evidence_en": "Blade' is name of product; most amount of sales refers to MAX(MULTIPLY(Quantity, Price));",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID ORDER BY T2.Quantity * T3.Price DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "List the full name of customers who spend more than 50,000 in descending order the amount spend.",
        "question_ar": "",
        "evidence_en": "full name of the customer = FirstName, MiddleInitial, LastName; more than 50,000 in the amount refers to MULTIPLY(Quantity, Price) > 50000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000"
    },
    {
        "db_id": "sales",
        "question_en": "Name the product that sold the most quantity.",
        "question_ar": "",
        "evidence_en": "most quantity refers to MAX(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "sales",
        "question_en": "Find and list the products that sold below the average quantity.",
        "question_ar": "",
        "evidence_en": "below the average quantity refers to Quantity < AVG(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity < ( SELECT AVG(Quantity) FROM Sales )"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes do not have correct data for the year in which it appeared first?",
        "question_ar": "",
        "evidence_en": "do not have correct data refers to first_appeared < 1851 or first_appeared > 2012;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Dish WHERE first_appeared < 1851 OR first_appeared > 2012"
    },
    {
        "db_id": "menu",
        "question_en": "Which dish lasted longer, Anchovies or Fresh lobsters in every style?",
        "question_ar": "",
        "evidence_en": "if (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Anchovies') > (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Fresh lobsters in every style'), it means 'Anchovies' lasted longer; if (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Fresh lobsters in every style') > (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Anchovies') it means 'Fresh lobsters in every style' last longer;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN name = 'Anchovies' THEN last_appeared - first_appeared ELSE 0 END) - SUM(CASE WHEN name = 'Fresh lobsters in every style' THEN last_appeared - first_appeared ELSE 0 END) > 0 THEN 'Anchovies' ELSE 'Fresh lobsters in every style' END FROM Dish WHERE name IN ('Fresh lobsters in every style', 'Anchovies')"
    },
    {
        "db_id": "menu",
        "question_en": "Among all the dishes that were once free, what is the name of the dish that had appeared on most menus?",
        "question_ar": "",
        "evidence_en": "dishes that were once free refers to lowest_price = 0; appeared on most menus refers to MAX(menus_appeared);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus with the name \"Waldorf Astoria\" have 4 pages?",
        "question_ar": "",
        "evidence_en": "4 pages refers to page_count = 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4"
    },
    {
        "db_id": "menu",
        "question_en": "What is the name of the dish that appeared on the upper left corner on menu page no. 1389?",
        "question_ar": "",
        "evidence_en": "appeared on the upper left corner on menu refers to xpos < 0.25 AND ypos < 0.25; menu page no. refers to menu_page_id; menu_page_id = 1389;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.menu_page_id = 1389 AND T2.xpos < 0.25 AND T2.ypos < 0.25"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the prices of the dish \"Clear green turtle\" on every menu page it appeared on.",
        "question_ar": "",
        "evidence_en": "Clear green turtle is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'"
    },
    {
        "db_id": "menu",
        "question_en": "Among all the menu pages with the appearance of the dish \"Clear green turtle\", how many of them have the dish at a stable price?",
        "question_ar": "",
        "evidence_en": "Clear green turtle is a name of dish; stable price refers to highest_price is null;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "What is the highest price of the dish \"Clear green turtle\" on a menu page?",
        "question_ar": "",
        "evidence_en": "highest price refers to MAX(Price); Clear green turtle is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the IDs of all the menus in which the dish \"Clear green turtle\" had appeared.",
        "question_ar": "",
        "evidence_en": "Clear green turtle is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T1.menu_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them used the dollar as their currency?",
        "question_ar": "",
        "evidence_en": "Clear green turtle is a name of dish; dollar as currency refers to currency = 'Dollars';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.currency = 'Dollars' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them did not support taking out or booking in advance?",
        "question_ar": "",
        "evidence_en": "Clear green turtle is a name of dish; not support taking out or booking in advance refers to call_number is null;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T4.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.call_number IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the names of all the dishes that appeared on the menu \"Zentral Theater Terrace\".",
        "question_ar": "",
        "evidence_en": "Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace'"
    },
    {
        "db_id": "menu",
        "question_en": "Which dish has the highest price on the menu \"Zentral Theater Terrace\"? Please give its name.",
        "question_ar": "",
        "evidence_en": "highest price refers to MAX(Price); Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes are there on the menu \"Zentral Theater Terrace\"?",
        "question_ar": "",
        "evidence_en": "Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.name = 'Zentral Theater Terrace' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes are there in total in the menus with the name \"Waldorf Astoria\"?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.name = 'Waldorf Astoria' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the IDs of the menus that are DIYs of the restaurant and have the dish \"Clear green turtle\".",
        "question_ar": "",
        "evidence_en": "IDs of the menus refers to menu_id; menus that are DIYs of the restaurant refers to sponsor is null; Clear green turtle is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.menu_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle' AND T3.sponsor IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "What is the average page number of the menus that have the dish \"Clear green turtle\"?",
        "question_ar": "",
        "evidence_en": "average page number = AVG(page_number); Clear green turtle is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.page_number) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'"
    },
    {
        "db_id": "menu",
        "question_en": "What is the average price of the dishes on the menu \"Zentral Theater Terrace\"?",
        "question_ar": "",
        "evidence_en": "average price = AVG(price); Zentral Theater Terrace refers to menu;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.price) / COUNT(T1.price) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T3.name = 'Zentral Theater Terrace'"
    },
    {
        "db_id": "menu",
        "question_en": "How many menu items were created on 28th March 2011?",
        "question_ar": "",
        "evidence_en": "created on 28th March 2011 refers to created_at like '2011-03-28%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM MenuItem WHERE created_at LIKE '2011-03-28%'"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes are included in the menu page ID 144?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM MenuItem WHERE menu_page_id = 144"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus were used in Dutcher House?",
        "question_ar": "",
        "evidence_en": "Dutcher House refers to location = 'Dutcher House';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE location = 'Dutcher House'"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes appeared on a menu more than once?",
        "question_ar": "",
        "evidence_en": "appeared on a menu more than once refers to times_appeared > menus_appeared;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus were created for steamship?",
        "question_ar": "",
        "evidence_en": "steamship refers to venue = 'STEAMSHIP';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP'"
    },
    {
        "db_id": "menu",
        "question_en": "How many pages were there on the menu created on 17th November 1898?",
        "question_ar": "",
        "evidence_en": "created on 17th November 1898 refers to date = '1898-11-17';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.date = '1898-11-17' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id"
    },
    {
        "db_id": "menu",
        "question_en": "Name the dishes that were on the menu page ID 174.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 174"
    },
    {
        "db_id": "menu",
        "question_en": "List the names and menu page IDs of the dishes that first appeared in 1861.",
        "question_ar": "",
        "evidence_en": "first appeared in 1861 refers to first_appeared = 1861;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.dish_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.first_appeared = 1861"
    },
    {
        "db_id": "menu",
        "question_en": "Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011.",
        "question_ar": "",
        "evidence_en": "highest prices of the dishes refers to MAX(price); created on 23rd May 2011 refers to created_at like '2011-05-23%';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.created_at LIKE '2011-05-23%' ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "List the dishes included on page number 30 with the least in full height.",
        "question_ar": "",
        "evidence_en": "least in full height refers to MIN(full_height);",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.page_number = 30 ORDER BY T1.full_height DESC, T1.full_height ASC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Provide the page IDs and name of the menu which had the highest page count.",
        "question_ar": "",
        "evidence_en": "page IDs refers to page_number; highest page count refers to MAX(page_count);",
        "evidence_ar": "",
        "SQL": "SELECT T1.page_number, T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T2.page_count DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "On the menu with the most dishes, how many dishes were there on its second page?",
        "question_ar": "",
        "evidence_en": "menu with the most dishes refers to menu.id with MAX(dish_count); second page refers to page_number = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.dish_id) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.page_number = 2 GROUP BY T3.name ORDER BY T3.dish_count DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Provide the numbers of the menu item which includes Fresh lobsters in every style and location where that dish was used on a menu.",
        "question_ar": "",
        "evidence_en": "Fresh lobsters in every style' is a name of dish; location where the dish was used on a menu = (xpos, ypos);",
        "evidence_ar": "",
        "SQL": "SELECT T2.menu_id, T1.xpos, T1.ypos FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Fresh lobsters in every style'"
    },
    {
        "db_id": "menu",
        "question_en": "List the dishes that appeared at the left upper corner of the CHAS.BRADLEY'S OYSTER & DINING ROOM\"s sponsored menu.",
        "question_ar": "",
        "evidence_en": "appeared at the left upper corner refers to xpos < 0.25 and ypos < 0.25; CHAS.BRADLEY'S OYSTER & DINING ROOM refers to sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM';",
        "evidence_ar": "",
        "SQL": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND T1.xpos < 0.25 AND T1.ypos < 0.25"
    },
    {
        "db_id": "menu",
        "question_en": "Provide the sponsor and event of the menu which includes Cerealine with Milk.",
        "question_ar": "",
        "evidence_en": "Cerealine with Milk is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T3.name, T3.event FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Cerealine with Milk'"
    },
    {
        "db_id": "menu",
        "question_en": "How many percent of Bluefish dishes are located at the center of the menu page?",
        "question_ar": "",
        "evidence_en": "percent = MULTIPLY(DIVIDE(SUM(xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75), COUNT(id)), 1.0); Bluefish is a sub name of dish; located at the center of the menu page refers to xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.xpos BETWEEN 0.25 AND 0.75 AND T2.ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name LIKE '%BLuefish%'"
    },
    {
        "db_id": "menu",
        "question_en": "Who is the sponsor of menu with ID 12463?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT sponsor FROM Menu WHERE id = 12463"
    },
    {
        "db_id": "menu",
        "question_en": "What is the event sponsored by the Republican House?",
        "question_ar": "",
        "evidence_en": "sponsored by the Republican House refers to sponsor = 'REPUBLICAN HOUSE';",
        "evidence_ar": "",
        "SQL": "SELECT event FROM Menu WHERE sponsor = 'REPUBLICAN HOUSE'"
    },
    {
        "db_id": "menu",
        "question_en": "Where is the place that menu with ID 12472 was created for?",
        "question_ar": "",
        "evidence_en": "place refers to location;",
        "evidence_ar": "",
        "SQL": "SELECT location FROM Menu WHERE id = 12472"
    },
    {
        "db_id": "menu",
        "question_en": "Please describe the menu sponsored by Noviomagus physically.",
        "question_ar": "",
        "evidence_en": "describe the menu physically refers to physical_description; sponsored by Noviomagus refers to sponsor = 'Noviomagus';",
        "evidence_ar": "",
        "SQL": "SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus'"
    },
    {
        "db_id": "menu",
        "question_en": "What is the occasion for menu with ID 12463?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT occasion FROM Menu WHERE id = 12463"
    },
    {
        "db_id": "menu",
        "question_en": "List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.",
        "question_ar": "",
        "evidence_en": "sponsored by Norddeutscher Lloyd Bremen refers to sponsor = 'Norddeutscher Lloyd Bremen';",
        "evidence_ar": "",
        "SQL": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'"
    },
    {
        "db_id": "menu",
        "question_en": "List down the menu page IDs for menu sponsored by Occidental & Oriental?",
        "question_ar": "",
        "evidence_en": "menu page IDs refers to MenuPage.id; sponsored by Occidental & Oriental refers to sponsor = 'Occidental & Oriental';",
        "evidence_ar": "",
        "SQL": "SELECT T2.id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.sponsor = 'Occidental & Oriental'"
    },
    {
        "db_id": "menu",
        "question_en": "List down the image IDs for menu located at Manhattan Hotel.",
        "question_ar": "",
        "evidence_en": "located at Manhattan Hotel refers to location = 'Manhattan Hotel';",
        "evidence_ar": "",
        "SQL": "SELECT T1.image_id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.location = 'Manhattan Hotel'"
    },
    {
        "db_id": "menu",
        "question_en": "State the full height and width for menu called \"El Fuerte Del Palmar\".",
        "question_ar": "",
        "evidence_en": "width refers to full_width; El Fuerte Del Palmar is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'El Fuerte Del Palmar'"
    },
    {
        "db_id": "menu",
        "question_en": "Is \"c02c9a3b-6881-7080-e040-e00a180631aa\" the uuid for menu called \"The Biltmore\"?",
        "question_ar": "",
        "evidence_en": "if 'c02c9a3b-6881-7080-e040-e00a180631aa' can be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is the uuid for the menu called The Biltmore; if 'c02c9a3b-6881-7080-e040-e00a180631aa' can not be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is not the uuid for the menu called The Biltmore; The Biltmore is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' THEN 'yes' ELSE 'no' END AS yn FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'The Biltmore' AND T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'"
    },
    {
        "db_id": "menu",
        "question_en": "State the name of menu with the longest full height.",
        "question_ar": "",
        "evidence_en": "longest full height refers to MAX(full_height);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "What is the page count for menu with page ID of 130?",
        "question_ar": "",
        "evidence_en": "page ID of 130 refers MenuPage.id = 130;",
        "evidence_ar": "",
        "SQL": "SELECT T1.page_count FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.id = 130"
    },
    {
        "db_id": "menu",
        "question_en": "How much is the price of menu with image ID 4000009194?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T3.price FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T2.image_id = 4000009194"
    },
    {
        "db_id": "menu",
        "question_en": "List down the page numbers for menu with dishes on the right upper corner.",
        "question_ar": "",
        "evidence_en": "on the right upper corner refers to xpos > 0.75 AND ypos < 0.25;",
        "evidence_ar": "",
        "SQL": "SELECT T2.page_number FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T3.xpos > 0.75 AND T3.ypos < 0.25"
    },
    {
        "db_id": "menu",
        "question_en": "List down the name of dishes from menu created in April.",
        "question_ar": "",
        "evidence_en": "created in April refers to SUBSTR(created_at, 7, 1) = '4';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE SUBSTR(T1.created_at, 7, 1) = '4'"
    },
    {
        "db_id": "menu",
        "question_en": "List down name of dishes from menu with menu page ID 1389.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 1389"
    },
    {
        "db_id": "menu",
        "question_en": "What is the highest price of dishes with menu item ID 1 to 5?",
        "question_ar": "",
        "evidence_en": "highest price refers to MAX(price); menu item ID 1 to 5 refers to MenuItem.id BETWEEN 1 AND 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.id BETWEEN 1 AND 5 ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "List down the name of dishes that were positioned on the left upper corner.",
        "question_ar": "",
        "evidence_en": "positioned on the left upper corner refers to xpos < 0.25 AND ypos < 0.25;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.xpos < 0.25 AND T2.ypos < 0.25"
    },
    {
        "db_id": "menu",
        "question_en": "Calculate the total dish count for menu with uuid of \"510d47e4-2958-a3d9-e040-e00a18064a99\" & \"510d47e4-295a-a3d9-e040-e00a18064a99\".",
        "question_ar": "",
        "evidence_en": "total dish count for uuid of '510d47e4-2958-a3d9-e040-e00a18064a99' = SUM(dish_count WHERE uuid = '510d47e4-2958-a3d9-e040-e00a18064a99'); total dish count for uuid of '510d47e4-295a-a3d9-e040-e00a18064a99 = SUM(dish_count WHERE uuid = '510d47e4-295a-a3d9-e040-e00a18064a99');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.uuid = '510d47e4-2958-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) - SUM(CASE WHEN T2.uuid = '510d47e4-295a-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id"
    },
    {
        "db_id": "menu",
        "question_en": "Calculate the total price of items for menu with ID 12882.",
        "question_ar": "",
        "evidence_en": "total price = SUM(price);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.price) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882"
    },
    {
        "db_id": "menu",
        "question_en": "List the top five dishes, by descending order, in terms of highest price.",
        "question_ar": "",
        "evidence_en": "highest price refers to MAX(highest_price);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Dish ORDER BY highest_price DESC LIMIT 5"
    },
    {
        "db_id": "menu",
        "question_en": "Among the dishes, how many of them are for free?",
        "question_ar": "",
        "evidence_en": "free refers to lowest_price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Dish WHERE lowest_price = 0"
    },
    {
        "db_id": "menu",
        "question_en": "What dishes made their first and last appearances in 1855 and 1900, respectively?",
        "question_ar": "",
        "evidence_en": "first appearance in 1855 refers to first_appeared = 1855; last appearance in 1900 refers to last_appeared = 1900;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900"
    },
    {
        "db_id": "menu",
        "question_en": "Write down the top ten menus with the highest dish count.",
        "question_ar": "",
        "evidence_en": "highest dish count refers to MAX(dish_count);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Menu GROUP BY name ORDER BY dish_count DESC LIMIT 10"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes appear in the right upper corner of the menu page?",
        "question_ar": "",
        "evidence_en": "appear in the right upper corner of the menu page refers to xpos > 0.75 and ypos < 0.25;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T1.dish_id = T2.id WHERE T1.xpos > 0.75 AND T1.ypos < 0.25"
    },
    {
        "db_id": "menu",
        "question_en": "How long has the \"Clear Green Turtle\" dish appeared on the menu, and tell me when its latest update was?",
        "question_ar": "",
        "evidence_en": "Clear Green Turtle is a name of dish; how long a dish appeared on the menu = SUBTRACT(last_appeared, first_appeared); latest update refers to latest updated_at;",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_appeared - T1.first_appeared, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'"
    },
    {
        "db_id": "menu",
        "question_en": "Tally the dishes that have appeared on the menu for more than 100 years.",
        "question_ar": "",
        "evidence_en": "appeared on the menu for more than 100 years = SUBTRACT(last_appeared, first_appeared) > 100;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared > 100"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes have appeared on the menu in less than 5 years?",
        "question_ar": "",
        "evidence_en": "appeared on the menu in less than 5 years = SUBTRACT(last_appeared, first_appeared) < 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared < 5"
    },
    {
        "db_id": "menu",
        "question_en": "Give me the name and menu price of dishes that were free.",
        "question_ar": "",
        "evidence_en": "dishes that were free refers to lowest_price = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.price FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.lowest_price = 0"
    },
    {
        "db_id": "menu",
        "question_en": "How much does the dish on page 2 of menu ID 12474 cost?",
        "question_ar": "",
        "evidence_en": "page 2 refers to page_number = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T1.price FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T2.id = T1.menu_page_id WHERE T2.menu_id = 12474 AND T2.page_number = 2"
    },
    {
        "db_id": "menu",
        "question_en": "Among the dishes, how many of them were created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC.",
        "question_ar": "",
        "evidence_en": "created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC refers to created_at between '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id"
    },
    {
        "db_id": "menu",
        "question_en": "Who are the sponsors of the menu whose image full height is more than 10000 mm?",
        "question_ar": "",
        "evidence_en": "image full height is more than 10000 mm refers to full_height > 10000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.sponsor FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T1.full_height = 10000"
    },
    {
        "db_id": "menu",
        "question_en": "Write down the image ID, full height, and full width of the menu that were used in the \"100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER\" event.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.image_id, T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER'"
    },
    {
        "db_id": "menu",
        "question_en": "Under what events was the menu page's full width less than 2000 mm?",
        "question_ar": "",
        "evidence_en": "full width less than 2000 mm refers to full_width < 2000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.event FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width = 2000"
    },
    {
        "db_id": "menu",
        "question_en": "Name the dishes that cost 180,000.",
        "question_ar": "",
        "evidence_en": "cost 180,000 refers to price = 180000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.price = 180000"
    },
    {
        "db_id": "menu",
        "question_en": "What is the position coordinate on the page menu of the \"Small Hominy\" dish and how long did it appear?",
        "question_ar": "",
        "evidence_en": "position coordinate = xpos, ypos; Small Hominy is a name of dish; how long it appear = SUBTRACT(last_appeared, first_appeared);",
        "evidence_ar": "",
        "SQL": "SELECT T2.xpos, T2.ypos, T1.last_appeared - T1.first_appeared FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Small Hominy'"
    },
    {
        "db_id": "menu",
        "question_en": "Calculate the image area of the page menu for the dish named \"Baked Stuffed Mullet & Sauce Pomard\". Please include the page number and image ID.",
        "question_ar": "",
        "evidence_en": "image area = MULTIPLY(full_height, full_width);",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_height * T1.full_width, T1.page_number, T1.image_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Baked Stuffed Mullet & Sauce Pomard'"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes appeared more than once on a menu?",
        "question_ar": "",
        "evidence_en": "appeared more than once on a menu refers to times_appeared > menus_appeared;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Dish WHERE times_appeared > Dish.menus_appeared"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus sponsored by Krogs Fiske Restaurant were created in April 2015?",
        "question_ar": "",
        "evidence_en": "sponsored by Krogs Fiske Restaurant refers to sponsor = 'Krogs Fiskerestaurant'; created in April 2015 refers to date like '2015-04%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE date LIKE '2015-04%' AND sponsor = 'Krogs Fiskerestaurant'"
    },
    {
        "db_id": "menu",
        "question_en": "Which dish has the longest history?",
        "question_ar": "",
        "evidence_en": "longest history refers to MAX(SUBTRACT(last_appeared, first_appeared));",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Dish ORDER BY last_appeared - Dish.first_appeared DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "On 1887-07-21, what was the event that lead to the creation of menu id 21380?",
        "question_ar": "",
        "evidence_en": "On 1887-07-21 refers to date = '1887-07-21';",
        "evidence_ar": "",
        "SQL": "SELECT event FROM Menu WHERE date = '1887-07-21' AND id = 21380"
    },
    {
        "db_id": "menu",
        "question_en": "How many pages are there in the \"Emil Kuehn\" menu?",
        "question_ar": "",
        "evidence_en": "Emil Kuehn is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Emil Kuehn' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus include puree of split peas aux croutons?",
        "question_ar": "",
        "evidence_en": "puree of split peas aux croutons is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Puree of split peas aux croutons' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id"
    },
    {
        "db_id": "menu",
        "question_en": "What are the names of the dishes with a stable price that were created in April of 2011?",
        "question_ar": "",
        "evidence_en": "dishes with a stable price refers to highest_price is null; created in April of 2011 refers to SUBSTR(created_at,1,4) = '2011' and SUBSTR(created_at, 7, 1) = '4';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE SUBSTR(T2.created_at, 1, 4) = '2011' AND SUBSTR(T2.created_at, 7, 1) = '4' AND T1.highest_price IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "What is the name of the menu with the highest number of pages?",
        "question_ar": "",
        "evidence_en": "highest number of pages refers to MAX(COUNT(page_number));",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Provide the menu page ids of all the menu that includes mashed potatoes.",
        "question_ar": "",
        "evidence_en": "mashed potatoes is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.menu_page_id FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Mashed potatoes'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus sponsored by Pacific Mail Steamship Company, how many menus have no more than 2 pages?",
        "question_ar": "",
        "evidence_en": "sponsored by Pacific Mail Steamship Company refers to sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'; no more than 2 pages refers to COUNT(page_number) < = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' GROUP BY T2.menu_id HAVING COUNT(T2.page_number) <= 2"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus that include milk, what is the menu page id of the menu that has the highest price?",
        "question_ar": "",
        "evidence_en": "milk is a name of dish; highest price refers to MAX(price);",
        "evidence_ar": "",
        "SQL": "SELECT T1.menu_page_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.name = 'Milk' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "What is the menu id of the menu sponsored by Occidental and Oriental Steamship Company with the highest number of pages?",
        "question_ar": "",
        "evidence_en": "sponsored by Occidental and Oriental Steamship Company refers to sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'; highest number of pages refers to MAX(COUNT(page_number));",
        "evidence_ar": "",
        "SQL": "SELECT T2.menu_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "List the positions of the dish \"breaded veal cutlet with peas\" on every menu where it appeared.",
        "question_ar": "",
        "evidence_en": "positions = xpos, ypos; breaded veal cutlet with peas is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.xpos, T2.ypos FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'breaded veal cutlet with peas'"
    },
    {
        "db_id": "menu",
        "question_en": "What are the names of the dishes shown in the lower right corner of menu page 48706?",
        "question_ar": "",
        "evidence_en": "shown in the lower right corner refers to xpos > 0.75 AND ypos > 0.75;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.xpos > 0.75 AND T1.ypos > 0.75 AND T1.menu_page_id = 48706"
    },
    {
        "db_id": "menu",
        "question_en": "What are the names of the dishes in the menu sponsored by The Society of Cumberland that was created for the 19th reunion at Grand Pacific Hotel in Chicago, Illinois?",
        "question_ar": "",
        "evidence_en": "sponsored by The Society of Cumberland refers to sponsor = 'THE SOCIETY OF THE CUMBERLAND'; created for the 19th reunion refers to event = '19NTH REUNION'; Grand Pacific Hotel in Chicago, Illinois refers to place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';",
        "evidence_ar": "",
        "SQL": "SELECT T4.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id INNER JOIN Dish AS T4 ON T3.dish_id = T4.id WHERE T1.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND T1.event = '19NTH REUNION' AND T1.place = 'GRAND PACIFIC HOTEL,CHICAGO,ILL'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus that include baked apples with cream, who is the sponsor of the menu with the highest price?",
        "question_ar": "",
        "evidence_en": "baked apples with cream is a name of dish; highest price refers to MAX(price);",
        "evidence_ar": "",
        "SQL": "SELECT T4.sponsor FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id INNER JOIN Menu AS T4 ON T4.id = T1.menu_id WHERE T3.name = 'Baked apples with cream' AND T3.id = 107 ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "What is the average number of dishes per menu in the Souper de Luxe menus? Identify what is the name of the dish that appeared the most in all of its menus.",
        "question_ar": "",
        "evidence_en": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(menu_page_id)); Souper de Luxe is a name of menu; dish that appeared the most in all of its menus refers to MAX(COUNT(dish_id));",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*), T1.dish_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Souper de Luxe' GROUP BY T3.id ORDER BY COUNT(T1.dish_id) DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the IDs of all the menus that are DIYs of the restaurant.",
        "question_ar": "",
        "evidence_en": "menus that are DIYs of the restaurant refers to sponsor is null;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM Menu WHERE sponsor IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "How many menus were created for lunch?",
        "question_ar": "",
        "evidence_en": "created for lunch refers to event = 'LUNCH';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus with over 10 pages, how many of them have over 20 dishes?",
        "question_ar": "",
        "evidence_en": "menus with over 10 pages refers to page_count > 10; over 20 dishes refers to dish_count > 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE page_count > 10 AND dish_count > 20"
    },
    {
        "db_id": "menu",
        "question_en": "What is the ID of the menu with the most number of dishes?",
        "question_ar": "",
        "evidence_en": "most number of dishes refers to MAX(COUNT(dish_count));",
        "evidence_ar": "",
        "SQL": "SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes are there on the menu \"Zentral Theater Terrace\"?",
        "question_ar": "",
        "evidence_en": "Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE name = 'Zentral Theater Terrace'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menus that did not support taking out or booking in advance, how many of them were created before 1950?",
        "question_ar": "",
        "evidence_en": "did not support taking out or booking in advance refers to call_number is null; created before 1950 refers to strftime('%Y', date) < '1950';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950'"
    },
    {
        "db_id": "menu",
        "question_en": "What is the image ID of page 1 of the menu \"Zentral Theater Terrace\"?",
        "question_ar": "",
        "evidence_en": "page 1 refers to page_number = 1; Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1"
    },
    {
        "db_id": "menu",
        "question_en": "To which menu does the menu page image ID5189412 belong? Please give its name.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412"
    },
    {
        "db_id": "menu",
        "question_en": "Which menu page has a bigger width, page 1 of \"Zentral Theater Terrace\" or page 1 of \"Young's Hotel\"?",
        "question_ar": "",
        "evidence_en": "if SUM(full_width where page_number = 1 AND menu.name = 'Zentral Theater Terrace') > SUM(full_width where page_number = 1 AND menu.name = 'Young''s Hotel'), it means Zentral Theater Terrace menu page is bigger than Young's Hotel; if SUM(full_width WHERE page_number = 1 AND menu.name = 'Young''s Hotel') < SUM(full_width WHERE page_number = 1 AND menu.name = 'Zentral Theater Terrace'), it means Young's Hotel menu page is bigger than Zentral Theater Terrace;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T1.name = 'Zentral Theater Terrace' THEN T2.full_width ELSE 0 END) - SUM(CASE WHEN T1.name = 'Young''s Hotel' THEN T2.full_width ELSE 0 END) > 0 THEN 'Zentral Theater Terrace' ELSE 'Young''s Hotel' END FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id"
    },
    {
        "db_id": "menu",
        "question_en": "Which menu page of \"Ritz Carlton\" has the biggest height?",
        "question_ar": "",
        "evidence_en": "Ritz Carlton is a name of menu; biggest height refers to MAX(full_height);",
        "evidence_ar": "",
        "SQL": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'Ritz Carlton' ORDER BY T1.full_height DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menu pages of \"Ritz Carlton\", how many of them have a width of over 1000?",
        "question_ar": "",
        "evidence_en": "Ritz Carlton is a name of menu; width of over 2490 refers to full_width > 1000;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Ritz Carlton' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width > 1000"
    },
    {
        "db_id": "menu",
        "question_en": "How many dishes are there on page 1 of menu ID12882?",
        "question_ar": "",
        "evidence_en": "page 1 refers to page_number = 1;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.page_number = 1 THEN 1 ELSE 0 END) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the names of all the dishes on page 1 of menu ID12882.",
        "question_ar": "",
        "evidence_en": "page 1 refers to page_number = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.menu_id = 12882 AND T1.page_number = 1"
    },
    {
        "db_id": "menu",
        "question_en": "Please list the page numbers of all the menu pages on which the dish \"Chicken gumbo\" had appeared.",
        "question_ar": "",
        "evidence_en": "Chicken gumbo is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo'"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menu pages on which the dish \"Chicken gumbo\" had appeared, what is the menu ID of the one with the biggest width?",
        "question_ar": "",
        "evidence_en": "Chicken gumbo is a name of dish; biggest width refers to MAX(full_width);",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo' ORDER BY T1.full_width DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "For how many times had the dish \"Chicken gumbo\" appeared on a menu page?",
        "question_ar": "",
        "evidence_en": "Chicken gumbo is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Chicken gumbo' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id"
    },
    {
        "db_id": "menu",
        "question_en": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?",
        "question_ar": "",
        "evidence_en": "Paysanne Soup is a name of dish; stable price refers to highest_price is null;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL"
    },
    {
        "db_id": "menu",
        "question_en": "What is the highest price of the dish \"Chicken gumbo\" on a menu page?",
        "question_ar": "",
        "evidence_en": "highest price refers to MAX(price); Chicken gumbo is a name of dish;",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Chicken gumbo' ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "menu",
        "question_en": "How much space does page 1 of the menu \"Zentral Theater Terrace\" cover?",
        "question_ar": "",
        "evidence_en": "how much space = MULTIPLY(full_height, full_width); Zentral Theater Terrace is a name of menu;",
        "evidence_ar": "",
        "SQL": "SELECT T2.full_height * T2.full_width FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1"
    },
    {
        "db_id": "menu",
        "question_en": "What is the average number of dishes per menu page of menu ID12882?",
        "question_ar": "",
        "evidence_en": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(page_count));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(dish_id) AS REAL) / COUNT(T3.page_count) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.menu_id = 12882"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were ordered by S K L Enterprises Inc in 2017?",
        "question_ar": "",
        "evidence_en": "\"S K L Enterprises Inc\" is the cust_name; in 2017 refers to Cast(ship_date AS DATE) = 2017",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND STRFTIME('%Y', T2.ship_date) = '2017'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the total number of pounds being transported for S K L Enterprises Inc?",
        "question_ar": "",
        "evidence_en": "\"S K L Enterprises Inc\" is the cust_name; total number of pounds refers to Sum(weight)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc?",
        "question_ar": "",
        "evidence_en": "\"S K L Enterprises Inc\" is the cust_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND T3.first_name = 'Sue' AND T3.last_name = 'Newell'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were ordered by a customer in Florida?",
        "question_ar": "",
        "evidence_en": "customer in Florida refers to state = 'FL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.cust_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.state = 'FL'"
    },
    {
        "db_id": "shipping",
        "question_en": "Please list the IDs of all the shipments made by a retailer customer.",
        "question_ar": "",
        "evidence_en": "\"retailer\" is the cust_type;  IDs of shipments refers to ship_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.ship_id FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'retailer'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000?",
        "question_ar": "",
        "evidence_en": "shipment in 2017 refers to Cast(ship_date AS DATE) = 2017; annual revenue of over 30000000 refers to annual_revenue > 30000000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments in 2017 were done by Sue Newell?",
        "question_ar": "",
        "evidence_en": "in 2017 refers to Cast(ship_date AS DATE) = 2017",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the full name of the driver that has done the most shipments in 2017?",
        "question_ar": "",
        "evidence_en": "driver refers to driver_id; full name refers to first_name, last_name; in 2017 refers to Cast(ship_date AS DATE) = 2017; Most shipment refers to Max(Sum(weight))",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments in 2017, how many of them have the destination in New Jersey?",
        "question_ar": "",
        "evidence_en": "in 2017 refers to Cast(ship_date AS DATE) = 2017; 'New Jersey' is the state",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.state = 'New Jersey'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the maximum weight being transported to New York during a single shipment?",
        "question_ar": "",
        "evidence_en": "\"New York\" is the city_name; maximum weight refers to Max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'New York'"
    },
    {
        "db_id": "shipping",
        "question_en": "How much more pounds in total were transported to New York than to Chicago?",
        "question_ar": "",
        "evidence_en": "\"New York\" and \"Chicago\" are both city_name; more pounds in total refers to Subtract (Sum(weight where city_name = 'New York'), Sum(weight where city_name = 'Chicago'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.city_name = 'New York' THEN T1.weight ELSE 0 END) - SUM(CASE WHEN T2.city_name = 'Chicago' THEN T1.weight ELSE 0 END) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id"
    },
    {
        "db_id": "shipping",
        "question_en": "Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.",
        "question_ar": "",
        "evidence_en": "\"S K L Enterprises Inc\" is the cust_name; destination cities refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the average weight of the goods being transported on a single shipment ordered by S K L Enterprises Inc?",
        "question_ar": "",
        "evidence_en": "\"S K L Enterprises Inc\" is the cust_name; average = Divide (Sum(weight), Count(ship_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among all the shipments to Florida, what is the percentage of the shipment to Jacksonville?",
        "question_ar": "",
        "evidence_en": "\"Florida\" is the state; \"Jacksonville\" is city_name;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.city_name = 'Jacksonville' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'Florida'"
    },
    {
        "db_id": "shipping",
        "question_en": "State the headquarter of the truck which completed shipment no.1045.",
        "question_ar": "",
        "evidence_en": "shipment no. 1045 refers to ship_id = 1045; headquarter refers to if make = 'Peterbit', then 'Texax(TX)', if make = 'Mack', then 'North Carolina (NC)'; if make = 'Kenworth', then 'Washington (WA)'",
        "evidence_ar": "",
        "SQL": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = 1045"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were delivered by the oldest truck model?",
        "question_ar": "",
        "evidence_en": "oldest truck model refers to Min(model_year)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Who was the customer of shipment no.1275? Give the customer's name.",
        "question_ar": "",
        "evidence_en": "shipment no. 1275 refers to ship_id = 1275; customer name refers to cust_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'"
    },
    {
        "db_id": "shipping",
        "question_en": "Where was the destination city of shipment no.1701?",
        "question_ar": "",
        "evidence_en": "shipment no. 1701 refers to ship_id = 1701; destination city refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'"
    },
    {
        "db_id": "shipping",
        "question_en": "Give the name of the driver of shipment no.1021.",
        "question_ar": "",
        "evidence_en": "shipment no. 1021 refers to ship_id = 1021; name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1021'"
    },
    {
        "db_id": "shipping",
        "question_en": "Tell the name of the driver who received the shipment on 2017/11/5.",
        "question_ar": "",
        "evidence_en": "shipment on 2017/11/5 refers to ship_date = '2017-11/05'; name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2017-11-05'"
    },
    {
        "db_id": "shipping",
        "question_en": "Show the population of the city which was the destination of shipment no.1398.",
        "question_ar": "",
        "evidence_en": "shipment no. 1398 refers to ship_id = 1398",
        "evidence_ar": "",
        "SQL": "SELECT T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1398'"
    },
    {
        "db_id": "shipping",
        "question_en": "Provide the ship date of the first shipment to customers in South Carolina.",
        "question_ar": "",
        "evidence_en": "\"South Carolina\" refers to state = 'SC'; first shipment refers to Min(ship_date)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.ship_date) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'SC'"
    },
    {
        "db_id": "shipping",
        "question_en": "For the shipment received by Leszek Kieltyka on 2017/9/25, what was its weight?",
        "question_ar": "",
        "evidence_en": "on 2017/9/25 refers to ship_date = '2017-09-25'",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Leszek' AND T2.last_name = 'Kieltyka' AND T1.ship_date = '2017-09-25'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the area of the destination city of shipment No.1346?",
        "question_ar": "",
        "evidence_en": "shipment no. 1346 refers to ship_id = 1346",
        "evidence_ar": "",
        "SQL": "SELECT T2.area FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1346'"
    },
    {
        "db_id": "shipping",
        "question_en": "Provide the weight of the shipment to U-haul Center Of N Syracuse on 2016/9/21.",
        "question_ar": "",
        "evidence_en": "\"U-haul Center Of N Syracuse\" is the cust_name; on 2016/9/21 refers to ship_date = '2016/09/21'",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'U-haul Center Of N Syracuse' AND T1.ship_date = '2016-09-21'"
    },
    {
        "db_id": "shipping",
        "question_en": "Who was the driver of truck no.3 on 2016/9/19? Tell the full name.",
        "question_ar": "",
        "evidence_en": "truck no. 3 refers to truck_id = 3; on 2016/9/19 refers to ship_date = '2016-09-19'; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.truck_id = '3' AND T2.ship_date = '2016-09-19'"
    },
    {
        "db_id": "shipping",
        "question_en": "Calculate the population density of the city as the destination of shipment no.1369.",
        "question_ar": "",
        "evidence_en": "shipment no. 1369 refers to ship_id = 1369; population density refers to Divide (area, population)",
        "evidence_ar": "",
        "SQL": "SELECT T2.area / T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1369'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the average number of shipments done by the Kenworth trucks?",
        "question_ar": "",
        "evidence_en": "\"Kenworth\" is the make of truck; average = Divide (Count(ship_id where make = 'Kenworth'), Count(truck_id where make = 'Kenworth))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many pounds did Sue Newell transport during her first shipment?",
        "question_ar": "",
        "evidence_en": "first shipment refers to Min(ship_date); pounds refers to weight",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell' ORDER BY T1.ship_date ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "To whom did the company transport its heaviest shipment?",
        "question_ar": "",
        "evidence_en": "heaviest shipment refers to Max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the full name of the driver who transported the first shipment of the company?",
        "question_ar": "",
        "evidence_en": "first shipment of the company refers to Min(ship_date); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.ship_date ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "In total, how many shipments were transported to Olympic Camper Sales Inc?",
        "question_ar": "",
        "evidence_en": "\"Olympic Camper Sales Inc\" is the cust_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'Olympic Camper Sales Inc'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?",
        "question_ar": "",
        "evidence_en": "\"New York\" is the city_name; 'Harry's Hot Rod Auto & Truck Accessories' is the cust_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.city_name = 'New York' AND T1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the top 5 heaviest shipments, how many shipments were transported via Mack?",
        "question_ar": "",
        "evidence_en": "heaviest shipment refers to Max(weight); via Mack refers to make = 'Mack'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ship_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack' ORDER BY T2.weight DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the full name of the driver who delivered the most shipments to the least populated city?",
        "question_ar": "",
        "evidence_en": "least populated city refers to Min(population); fullname refers to first_name, last_name; most shipment refers to driver_id where Max(Count (ship_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id GROUP BY T1.first_name, T1.last_name, T3.population HAVING T3.population = MAX(T3.population) ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments with weight of no more than 1,000 pounds were shipped by the oldest truck?",
        "question_ar": "",
        "evidence_en": "weight of no more than 1000 pounds refers to weight < 1000; oldest truck refers to Min (model_year)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.weight < 1000 ORDER BY T1.model_year ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "How much is the annual revenue of the customer with the most number of shipments?",
        "question_ar": "",
        "evidence_en": "customer with the most number of shipment refers to cust_id where Max(Count(ship_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_id ORDER BY COUNT(T1.cust_id) DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments for Downey, how many shipments were shipped to California in 2016?",
        "question_ar": "",
        "evidence_en": "\"Downey\" is the city_name; 'California' is the state, whose abbreviation is CA; in 2016 refers to year(ship_date) = 2016,",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.city_name = 'Downey' AND STRFTIME('%Y', T1.ship_date) = '2016' AND T3.state = 'CA'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments did Holger Nohr transport to North Las Vegas overall?",
        "question_ar": "",
        "evidence_en": "\"North Las Vegas\" is the city_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.first_name = 'Holger' AND T1.last_name = 'Nohr' AND T3.city_name = 'North Las Vegas'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were shipped to the most densely populated city?",
        "question_ar": "",
        "evidence_en": "most densely populated city refers to Max(Divide(area, population))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area / T2.population DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Determine the percentage of manufacturers who are from Texas among all of Lorenzo's customers.",
        "question_ar": "",
        "evidence_en": "\"Texas\" refers to state = 'TX'; 'manufacturer' is the cust_type; percentage = Divide (Count(cust_id where state = 'TX'), Count(cust_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN cust_type = 'manufacturer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer WHERE state = 'TX'"
    },
    {
        "db_id": "shipping",
        "question_en": "Identify the total weight of shipments transported to San Mateo, California, in 2016.",
        "question_ar": "",
        "evidence_en": "\"San Mateo\" is the city_name; in 2016 refers to Cast(ship_date as DATE) = 2016",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'"
    },
    {
        "db_id": "shipping",
        "question_en": "Identify the total weight of shipments transported in 2016 by the newest Peterbilt.",
        "question_ar": "",
        "evidence_en": "transported in 2016 refers to CAST(ship_date as DATE) = 2016; 'Peterbilt' is the make; newest refers to Max(model_year)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Peterbilt' AND STRFTIME('%Y', T2.ship_date) = '2016' ORDER BY T1.model_year DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment.",
        "question_ar": "",
        "evidence_en": "\"Boston\" is the city_name; maximum weight refers to Max(weight); customer refers to cust_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight, T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Boston' ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Where was shipment no. 1002 headed?",
        "question_ar": "",
        "evidence_en": "shipment no. 1002 refers to ship_id = 1002; where shipment was headed refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the average shipment weight carried by the oldest Mack?",
        "question_ar": "",
        "evidence_en": "\"Mack\" is the make; oldest refers to Min(model_year); average shipment weight refers to AVG(weight)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack'"
    },
    {
        "db_id": "shipping",
        "question_en": "Identify the full name of the driver who delivered a shipment to the city of New York in February 2016.",
        "question_ar": "",
        "evidence_en": "\"New York\" is the city_name; in February 2016 refers to ship_date LIKE '2016-02%'; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'"
    },
    {
        "db_id": "shipping",
        "question_en": "Name the customer who sent the shipment to Oak Park.",
        "question_ar": "",
        "evidence_en": "\"Oak Park\" is the city_name; customer name refers to cust_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'"
    },
    {
        "db_id": "shipping",
        "question_en": "Determine the number of shipments delivered by Andrea Simons to Huntsville in 2016.",
        "question_ar": "",
        "evidence_en": "\"Huntsville\" is the city_name; in 2016 refers to Cast(ship_date AS DATE) = 2016; number of shipment refers to Count(ship_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T3.first_name = 'Andrea' AND T3.last_name = 'Simons' AND T2.city_name = 'Huntsville' AND STRFTIME('%Y', T1.ship_date) = '2016'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments does each driver deliver per month on average?",
        "question_ar": "",
        "evidence_en": "shipment data was for 24 months in 2016 and 2017 respectively; deliver per month on average refers to Divide(Count(ship_id), Multiply (24, Count(driver_id)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(*) AS REAL) / (12 * COUNT(T2.driver_id)) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id"
    },
    {
        "db_id": "shipping",
        "question_en": "Among all shipments placed by Sunguard Window Tinting & Truck Accessories in 2017, identify the percentage of shipments whose weight exceeded 10,000 pounds.",
        "question_ar": "",
        "evidence_en": "\"Sunguard Window Tinting & Truck Accessories\" is the cust_name; weight exceed 10,000 pounds refers to weight > = 10000; in 2017 refers to Cast(ship_date AS DATE) = 2017; percentage = Divide (Sum(weight > = 10000), Sum(weight)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.weight >= 10000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'Sunguard Window Tinting & Truck Accessories' AND STRFTIME('%Y', T1.ship_date) = '2017'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among all shipments delivered by Sue Newel, identify the percentage of shipments that were placed by Autoware Inc.",
        "question_ar": "",
        "evidence_en": "\"Autoware Inc\" is the cust_name; percentage = Divide (Count(ship_id where cust_name = 'Autoware Inc'), Count(ship_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.cust_name = 'Autoware Inc' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many cities which belong to New Jersey have transported weight greater than 20000?",
        "question_ar": "",
        "evidence_en": "\"New Jersey\" is the state; transported weight greater than 20000 refers to Sum(weight) > 20000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.city_id AS CITYID FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'New Jersey' GROUP BY T2.city_id HAVING SUM(T1.weight) > 20000 )"
    },
    {
        "db_id": "shipping",
        "question_en": "How many cities whose polulation is larger than 50000 pounds have shipment in 2017?",
        "question_ar": "",
        "evidence_en": "population is larger than 50000 refers to population > 50000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'"
    },
    {
        "db_id": "shipping",
        "question_en": "State the weight of shipments transported by Peterbilt.",
        "question_ar": "",
        "evidence_en": "\"Peterbilt\" is the make",
        "evidence_ar": "",
        "SQL": "SELECT T2.weight FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE make = 'Peterbilt'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the model year of the truck used in shipment id 1003?",
        "question_ar": "",
        "evidence_en": "shipment id 1003 refers to ship_id = 1003",
        "evidence_ar": "",
        "SQL": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1003'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the brand of truck used in shipment id 1011?",
        "question_ar": "",
        "evidence_en": "shipment id 1011 refers to ship_id = 1011; brand of truck refers to make",
        "evidence_ar": "",
        "SQL": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the first name of the driver who transported shipment id 1028?",
        "question_ar": "",
        "evidence_en": "shipment id 1028 refers to ship_id = 1028",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028"
    },
    {
        "db_id": "shipping",
        "question_en": "List out the state of driver who transported the shipment id 1055.",
        "question_ar": "",
        "evidence_en": "shipment id 1055 refers to ship_id = 1055",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'"
    },
    {
        "db_id": "shipping",
        "question_en": "State the address of drivers who transported the shipment with weight greater than 50000 pounds.",
        "question_ar": "",
        "evidence_en": "shipment with weight greater than 50000 pounds refers to Sum(weight) > 50000",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 50000"
    },
    {
        "db_id": "shipping",
        "question_en": "Give the full name of driver who transported the items on 3/2/2016.",
        "question_ar": "",
        "evidence_en": "on 3/2/2016 refers to ship_date = '2016-02-03'; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-03-02'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the average annual revenue of customers who have shipment weight of less than 65000 pounds?",
        "question_ar": "",
        "evidence_en": "weight of less than 65000 pounds refers to weight < 65000; average annual revenue refers to AVG(annual_revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.annual_revenue) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.weight < 65000"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the percentage of wholesaler customers who have shipment weight of not greater than 70000 pounds?",
        "question_ar": "",
        "evidence_en": "\"wholesaler\" is the cust_type; weight of not greater than 70000 pounds refers to weight < 70000; percentage = Divide (Count(cust_id where weight < 70000), Count(cust_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.weight < 70000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'wholesaler'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the last name of driver who transported shipment id 1088?",
        "question_ar": "",
        "evidence_en": "shipment id 1088 refers to ship_id = 1088",
        "evidence_ar": "",
        "SQL": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'"
    },
    {
        "db_id": "shipping",
        "question_en": "Give the phone of drivers who transported shipment weight of greater than 20000 pounds.",
        "question_ar": "",
        "evidence_en": "shipment weight of greater than 20000 pounds refers to Sum(weight) > 20000",
        "evidence_ar": "",
        "SQL": "SELECT T2.phone FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 20000"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the brand and model of truck used in shipment id 1055?",
        "question_ar": "",
        "evidence_en": "shipment id 1055 refers to ship_id = 1055; brand refers to make; model refers to model_year",
        "evidence_ar": "",
        "SQL": "SELECT T1.make, T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1055'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many trucks were manufactured in year 2009?",
        "question_ar": "",
        "evidence_en": "manufactured in year 2009 refers to model_year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(truck_id) FROM truck WHERE model_year = 2009"
    },
    {
        "db_id": "shipping",
        "question_en": "How many customers are manufacturer?",
        "question_ar": "",
        "evidence_en": "\"manufacturer\" is the cust_type",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer WHERE cust_type = 'manufacturer'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many customers who live in California that are retailers?",
        "question_ar": "",
        "evidence_en": "\"retailer\" is the cust_type; live in California refers to state = 'CA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer WHERE cust_type = 'retailer' AND state = 'CA'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many cities are in Connecticut?",
        "question_ar": "",
        "evidence_en": "\"Connecticut\" is the state",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM city WHERE state = 'Connecticut'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the most populated city in California?",
        "question_ar": "",
        "evidence_en": "in California refers to state = 'CA'; most populated city refers to Max(population)",
        "evidence_ar": "",
        "SQL": "SELECT city_name FROM city WHERE state = 'California' AND population = ( SELECT MAX(population) FROM city WHERE state = 'California' )"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the annual revenue of Klett & Sons Repair?",
        "question_ar": "",
        "evidence_en": "\"Klett & Sons Repair\" is the cust_name",
        "evidence_ar": "",
        "SQL": "SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair'"
    },
    {
        "db_id": "shipping",
        "question_en": "Who is the driver that transported the lightest weight of shipment? Provide the full name of the driver.",
        "question_ar": "",
        "evidence_en": "lightest weight refers to Min(weight); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.weight ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were shipped to customers living in California in year 2016?",
        "question_ar": "",
        "evidence_en": "living in California refers to state = 'CA'; in year 2016 refers to CAST(ship_date AS DATE) = 2016",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) AS per FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2016' AND T1.state = 'CA'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the brand of the truck that is used to ship by Zachery Hicks?",
        "question_ar": "",
        "evidence_en": "brand of truck refers to make",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'"
    },
    {
        "db_id": "shipping",
        "question_en": "List all the name of the customers that received a shipment in February 2017.",
        "question_ar": "",
        "evidence_en": "shipment in February 2017 refers to ship_date LIKE '2017-02-%'; name of customer refers to cust_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'"
    },
    {
        "db_id": "shipping",
        "question_en": "Provide the brand of the truck and the name of the driver that transported goods in Klett & Sons Repair.",
        "question_ar": "",
        "evidence_en": "\"Klett & Sons Repair\" is the cust_name; brand of truck refers to make; name of driver refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.make, T4.first_name, T4.last_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN truck AS T3 ON T3.truck_id = T2.truck_id INNER JOIN driver AS T4 ON T4.driver_id = T2.driver_id WHERE T1.cust_name = 'Klett & Sons Repair'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the shipment ID of the heaviest shipment that Zachery Hicks transported?",
        "question_ar": "",
        "evidence_en": "shipment ID refers to ship_id; heaviest shipment refers to Max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments did Zachery Hicks transport goods to New York in the year 2016?",
        "question_ar": "",
        "evidence_en": "\"New York\" is the city_name; in 2016 refers to CAST(ship_date AS DATE) = 2016",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND STRFTIME('%Y', T2.ship_date) = '2016'"
    },
    {
        "db_id": "shipping",
        "question_en": "Which headquarter's truck has the highest shipments in year 2016?",
        "question_ar": "",
        "evidence_en": "in 2016 refers to CAST(ship_date AS DATE) = 2016; make = 'Peterbilt' means headquarter is 'Texas (TX)', make = 'Mack' means headquarter is 'North Carolina (NC)', make = 'Kenworth' means headquarter is 'Washington (WA)'; highest shipment refers to MAX(COUNT(ship_id))",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.make = 'Peterbilt' THEN 'Texas (TX)' WHEN T2.make = 'Mack' THEN 'North Carolina (NC)' WHEN T2.make = 'Kenworth' THEN 'Washington (WA)' END AS \"result\" FROM shipment AS T1 INNER JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE CAST(T1.ship_date AS DATE) = 2016 GROUP BY T2.make ORDER BY COUNT(T1.ship_id) DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were shipped to the least populated city in California?",
        "question_ar": "",
        "evidence_en": "\"California\" is the state; least populated city refers to Min(population)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "In which city did the heaviest shipment transported?",
        "question_ar": "",
        "evidence_en": "heaviest shipment refers to Max(weight); city refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "List all the cities where Zachery Hicks transported goods.",
        "question_ar": "",
        "evidence_en": "city refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.city_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks'"
    },
    {
        "db_id": "shipping",
        "question_en": "Calculate the average number of shipments that Zachery Hicks shipped in year 2017.",
        "question_ar": "",
        "evidence_en": "in year 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count(ship_id where first_name = 'Zachery' AND last_name = 'Hicks'), Count(ship_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.ship_id ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017'"
    },
    {
        "db_id": "shipping",
        "question_en": "Calculate the percentage of the weight of goods being transported by Zachery Hicks to California in year 2016.",
        "question_ar": "",
        "evidence_en": "\"California\" is the state; in 2016 refers to CAST (ship_date AS DATE) = 2016; percentage = Divide (Sum(weight where first_name = 'Zachery' AND last_name = 'Hicks'), Sum(weight)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.weight ELSE 0 END) AS REAL) * 100 / SUM(T1.weight) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2016'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were shipped by the driver named Zachary Hicks?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.driver_id = 23"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the ship ID of shipments shipped to the city with the largest area?",
        "question_ar": "",
        "evidence_en": "city with largest area refers to Max(area)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "List the drivers who shipped the shipments to the least populated city.",
        "question_ar": "",
        "evidence_en": "least populated city refers to Min(population); name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id ORDER BY T2.population ASC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments shipped to Cicero, Illinois, how many shipments weighed between 9,000 to 15,000?",
        "question_ar": "",
        "evidence_en": "\"Cicero\" is the city; 'Illinois' is the state",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'Cicero' AND T2.state = 'Illinois' AND T1.weight BETWEEN 9000 AND 15000"
    },
    {
        "db_id": "shipping",
        "question_en": "What model year of truck delivered the ship ID 1233?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California?",
        "question_ar": "",
        "evidence_en": "\"7052 Carroll Road\" is the address of customer; 'San Diego' is the city; 'California' is the state",
        "evidence_ar": "",
        "SQL": "SELECT T3.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.address = '7052 Carroll Road' AND T2.city = 'San Diego' AND T2.state = 'CA'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments delivered by Maria Craft, how many shipments were delivered in 2017?",
        "question_ar": "",
        "evidence_en": "delivered in 2017 refers to Cast(ship_date AS DATE) = 2017",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Maria' AND T2.last_name = 'Craft' AND STRFTIME('%Y', T1.ship_date) = '2017'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the truck's model year used to ship the ship ID 1245?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1245'"
    },
    {
        "db_id": "shipping",
        "question_en": "Where does the driver of ship ID 1127 live?",
        "question_ar": "",
        "evidence_en": "live refers to address",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1127'"
    },
    {
        "db_id": "shipping",
        "question_en": "Give the annual revenue of the customer of ship ID 1047.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the weight of the shipment delivered by Andrea Simons on March 7, 2016?",
        "question_ar": "",
        "evidence_en": "on March 7, 2016 refers to ship_date = '2016-03-07'",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Andrea' AND T2.last_name = 'Simons' AND T1.ship_date = '2016-03-07'"
    },
    {
        "db_id": "shipping",
        "question_en": "Provide the destination city of the shipment shipped by January 16, 2017.",
        "question_ar": "",
        "evidence_en": "January 16, 2017 refers to ship_date = '2017-01-16'; city refers to city_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_date = '2017-01-16'"
    },
    {
        "db_id": "shipping",
        "question_en": "How many shipments were delivered to a customer from New York?",
        "question_ar": "",
        "evidence_en": "\"New York\" refers to state = 'NY'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'NY'"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the name of the customer of ship ID 1147?",
        "question_ar": "",
        "evidence_en": "name of customer refers to cust_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'"
    },
    {
        "db_id": "shipping",
        "question_en": "List the ship ID of shipments shipped to the most populated city.",
        "question_ar": "",
        "evidence_en": "most populated city refers to Max(population)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1"
    },
    {
        "db_id": "shipping",
        "question_en": "List the driver's name of the shipment shipped on February 22, 2016.",
        "question_ar": "",
        "evidence_en": "on February 22, 2016 refers to ship_date = '2016-02-22'; driver's name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-02-22'"
    },
    {
        "db_id": "shipping",
        "question_en": "List the weight of the customer's shipment with annual revenue of 39448581.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.annual_revenue = 39448581"
    },
    {
        "db_id": "shipping",
        "question_en": "What is the customer's address for the shipment with ship ID 1117?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'"
    },
    {
        "db_id": "shipping",
        "question_en": "Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?",
        "question_ar": "",
        "evidence_en": "\"Texas\" refers to state = 'TX'; shipped in 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count (ship_id where CAST(ship_date AS DATE) = 2017), Count (ship_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.ship_date) = '2017' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'"
    },
    {
        "db_id": "shipping",
        "question_en": "Calculate the difference between the number of shipments shipped by the truck with the model year 2005 and model year 2006.",
        "question_ar": "",
        "evidence_en": "\"2005\" and \"2006\" are both model_year of truck; difference = Subtract (Count (ship_id where model_year = 2005), Count(ship_id where model_year = 2006))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.model_year = '2005' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.model_year = '2006' THEN 1 ELSE 0 END) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id"
    },
    {
        "db_id": "shipping",
        "question_en": "List the driver's name of the shipment with a weight greater than 95% of the average weight of all shipments.",
        "question_ar": "",
        "evidence_en": "weight greater than 95% of average weight refers to weight > Multiply (AVG(weight), 0.95); driver name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.weight * 100 > ( SELECT 95 * AVG(weight) FROM shipment )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Name the longest Catalan language Wikipedia page title and state the number of different words in this page.",
        "question_ar": "",
        "evidence_en": "longest title refers to max(length(title))",
        "evidence_ar": "",
        "SQL": "SELECT title, words FROM pages WHERE title = ( SELECT MAX(LENGTH(title)) FROM pages )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List all the Catalan language wikipedia page title with less than 10 number of different words in these pages.",
        "question_ar": "",
        "evidence_en": "less than 10 number of different words refers to words < 10",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE words < 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List the page number for Catalan language wikipedia pages containing the word 'Art' in the page title.",
        "question_ar": "",
        "evidence_en": "containing the word 'Art' refers to title LIKE '% Art %'",
        "evidence_ar": "",
        "SQL": "SELECT page FROM pages WHERE title LIKE 'Art%' OR title LIKE '%Art%' OR title LIKE '%Art'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of Catalan language wikipedia page with revision page id '16203226'?",
        "question_ar": "",
        "evidence_en": "revision page id '16203226' refers to revision = 16203226",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE revision = 16203226"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700.",
        "question_ar": "",
        "evidence_en": "from revision page id 106600 to 106700 refers to revision BETWEEN 106600 AND 106700",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE revision BETWEEN 106600 AND 106700"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many Catalan language wikipedia pages have between 1000 to 2000 number of different words?",
        "question_ar": "",
        "evidence_en": "between 1000 to 2000 number of different words refers to words BETWEEN 1000 AND 2000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(pid) FROM pages WHERE words BETWEEN 1000 AND 2000"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List the page id of wikipedia about Catalan language which have the appearance of the word 'decimal'?",
        "question_ar": "",
        "evidence_en": "have the appearance of 'decimal' refers to word = 'decimal'",
        "evidence_ar": "",
        "SQL": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'decimal'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the most occurrences within the same page of wikipedia about Catalan language?",
        "question_ar": "",
        "evidence_en": "most occurrences refers to max(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT T1.word FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = ( SELECT MAX(occurrences) FROM pages_words )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List all the first words of the biwords pair where the second word is 'antic'.",
        "question_ar": "",
        "evidence_en": "first words refer to w1st.word; second word is 'antic' refers to w2nd.word = 'antic'",
        "evidence_ar": "",
        "SQL": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w2nd = ( SELECT wid FROM words WHERE word = 'antic' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Show all the title of pages and number of occurences for each page where the word 'quipu' appears.",
        "question_ar": "",
        "evidence_en": "word 'quipu' appears refers to word = 'quipu'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'quipu'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the average number of the word occurrences in which ‘system’ appeared as the first word in the pair.",
        "question_ar": "",
        "evidence_en": "average word occurrences = divide(sum(occurrences), count(occurrences)); ‘system’ appeared as the first word refers to w1st = 'system'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the total pages of Wikipedia in Catalan language?",
        "question_ar": "",
        "evidence_en": "total pages refers to sum(pages); Catalan language refers to lang = 'ca'",
        "evidence_ar": "",
        "SQL": "SELECT pages FROM langs WHERE lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "In the Catalan language, which biwords pair appeared the most in this language/page?",
        "question_ar": "",
        "evidence_en": "biwords pair refers to w1st.word w2nd.word; appeared the most refers to max(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the word id of the catalan language that was repeated no more than 10 times in the said language?",
        "question_ar": "",
        "evidence_en": "word id refers to wid; repeated no more than 10 times refers to occurrences < = 10",
        "evidence_ar": "",
        "SQL": "SELECT wid FROM langs_words WHERE occurrences <= 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of the Catalan language Wikipedia page that has the highest number of different words?",
        "question_ar": "",
        "evidence_en": "highest number of different words refers to max(words)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the wikipedia page id of Arqueozoologia?",
        "question_ar": "",
        "evidence_en": "page id refers to pid; Arqueozoologia refers to title = 'Arqueozoologia'",
        "evidence_ar": "",
        "SQL": "SELECT page FROM pages WHERE title = 'Arqueozoologia'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared.",
        "question_ar": "",
        "evidence_en": "Abadia refers to title = 'Abadia'; word id refers to wid; the highest amount of times refers to max(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT T2.wid, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Abadia' ORDER BY T2.occurrences DESC LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What are the titles of the top 5 Catalan language Wikipedia page with the least number of different words? Indicate each title's word id that has appeared the most in the said pages.",
        "question_ar": "",
        "evidence_en": "least number of different words refers to min(words); word id refers to wid; appeared the most refers to max(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid ORDER BY T1.words LIMIT 5"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times did the word pair \"i\" and \"a\" appeared in the Cataln language/page?",
        "question_ar": "",
        "evidence_en": "times appeared refers to occurrences; word pair \"i\" and \"a\" refers to w1st.word = 'i' w2st.word = 'a'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What are the word pairs that occured only twice?",
        "question_ar": "",
        "evidence_en": "word pair refers to w1st.word w2nd.word; occured only twice refers to occurrences = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 2"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured.",
        "question_ar": "",
        "evidence_en": "word pair refers to w1st.word w2nd.word; occurred the highest amount of times refers to max(occurrences); Addicio refers to title = 'Addicio'; times occurred refer to occurrences",
        "evidence_ar": "",
        "SQL": "SELECT T3.w1st, T3.w2nd, T3.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN biwords AS T3 ON T2.wid = T3.w1st OR T2.wid = T3.w2nd WHERE T1.title = 'Addicio' ORDER BY T3.occurrences DESC LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the total word of title \"Adam\" and \"Acampada\"?",
        "question_ar": "",
        "evidence_en": "total word refers to sum(words); title \"Adam\" and \"Acampada\" refers to title IN('Adam','Acampada')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(words) FROM pages WHERE title IN ('Adam', 'Acampada')"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the revision page ID of title \"Aigua dolÃ§a\"?",
        "question_ar": "",
        "evidence_en": "title \"Aigua dolÃ§a\" refers to title LIKE 'Aigua dolÃ§a%'",
        "evidence_ar": "",
        "SQL": "SELECT revision FROM pages WHERE title = 'Aigua dolÃ§a'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of corpus with most words?",
        "question_ar": "",
        "evidence_en": "most words refers to max(words)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the average words of the 10 fewest words title?",
        "question_ar": "",
        "evidence_en": "average words = avg(words); 10 fewest words refers to words > = 10",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN words >= 10 THEN words ELSE 0 END) AS REAL) / SUM(CASE WHEN words >= 10 THEN 1 ELSE 0 END) FROM pages"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Among the title with single digit word count, list down 5 revision page ID of these titles.",
        "question_ar": "",
        "evidence_en": "single digit word count refers to words < 10",
        "evidence_ar": "",
        "SQL": "SELECT revision FROM pages WHERE words < 10 LIMIT 5"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List down the page id of titles start with alphabet \"b\".",
        "question_ar": "",
        "evidence_en": "start with alphabet \"b\" refers to title LIKE 'b%'",
        "evidence_ar": "",
        "SQL": "SELECT pid FROM pages WHERE title LIKE 'b%'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of corpus where word \"desena\" appear?",
        "question_ar": "",
        "evidence_en": "This is not",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'desena'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the word id for title \"Sometent\"?",
        "question_ar": "",
        "evidence_en": "word id refers to wid",
        "evidence_ar": "",
        "SQL": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Sometent'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Is word id \"88\" the word id for title \"Animals\"?",
        "question_ar": "",
        "evidence_en": "word id \"88\" refers to wid = 88",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(T1.pid) > 0 THEN 'YES' ELSE 'NO' END AS YORN FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid = 88 AND T1.title = 'Animals'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What are the occurance of word \"del\" in title \"Any anomalÃ­stic\"?",
        "question_ar": "",
        "evidence_en": "This is not",
        "evidence_ar": "",
        "SQL": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'del' AND T3.title = 'Any anomalÃ­stic'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "State one biword pair with occurence of 4.",
        "question_ar": "",
        "evidence_en": "biword pair refers to w1st.word w2nd.word; occurrence of 4 refers to occurrences = 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 4 LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What are the total occurence of words that paired with \"nombre\"?",
        "question_ar": "",
        "evidence_en": "total occurrence refers to sum(occurrences); paired with \"nombre\" refers to w1st.word = \"nombre\" or w2nd.word = \"nombre\"",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st IN (( SELECT wid FROM words WHERE word = 'nombre' ) OR T2.w2nd IN ( SELECT wid FROM words WHERE word = 'nombre' ))"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What are the words that were paired with \"John\", list down 10 of them.",
        "question_ar": "",
        "evidence_en": "pair with \"John\" refers to w1st.word = \"John\" or w2nd.word = \"John\"",
        "evidence_ar": "",
        "SQL": "SELECT w2nd FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'john' ) LIMIT 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List down the revision page id of titles where \"fresc\" appears.",
        "question_ar": "",
        "evidence_en": "page id refers to pid; \"fresc\" refers to word = 'fresc'",
        "evidence_ar": "",
        "SQL": "SELECT T3.revision FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'fresc'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List down the words with word id from 1 to 10 and write down a paired word for each of them.",
        "question_ar": "",
        "evidence_en": "word id from 1 to 10 refers to wid BETWEEN 1 AND 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 LEFT JOIN biwords AS T2 ON T1.wid = T2.w1st LEFT JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.wid <= 10 GROUP BY T1.wid"
    },
    {
        "db_id": "language_corpus",
        "question_en": "For corpus title \"Atomium\", pick 3 words appear in the title and calculate the total occurence of these words.",
        "question_ar": "",
        "evidence_en": "total occurrences refers to sum(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT T1.word, T1.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.pid = ( SELECT pid FROM pages WHERE title = 'Atomium' ) LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Indicate which is the word that is repeated the most times.",
        "question_ar": "",
        "evidence_en": "repeated the most times refer to MAX(occurrences);",
        "evidence_ar": "",
        "SQL": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Indicate the page id of Wikipedia about Catalan language of all the pages that have a numeric value in their title.",
        "question_ar": "",
        "evidence_en": "the page id of Wikipedia refers to pid; numeric value contains only numbers, LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%';",
        "evidence_ar": "",
        "SQL": "SELECT pid, title FROM pages WHERE title LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of the page that has the fewest words?",
        "question_ar": "",
        "evidence_en": "has the fewest words refers to MIN(COUNT(words));",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE title = ( SELECT MIN(words) FROM pages )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the pair of words that is repeated the most times? Identify them by their ID.",
        "question_ar": "",
        "evidence_en": "repeated the most times refer to MAX(occurrences); pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;",
        "evidence_ar": "",
        "SQL": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many total occurrences are there in the three-letter words?",
        "question_ar": "",
        "evidence_en": "three-letter words are words composed of exactly three letters;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(occurrences) FROM words WHERE LENGTH(word) = 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the average number of different words that appear on all pages whose title begins with A.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(words WHERE title = 'A%'), COUNT(words WHERE title = 'A%')) as percentage; A is a letter;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(words) FROM pages WHERE title LIKE 'A%'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the average number of repetitions in the pairs of words in which the first word id is number 34.",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the first word id number 34 refers to w1st = 34; repetition refers to occurrences or times this pair appears; DIVIDE(SUM(occurrences where w1st = 34), COUNT(occurrences where w1st = 34));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN w1st = 34 THEN 1 ELSE 0 END) AS REAL) / COUNT(w1st) FROM biwords"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the percentage of pages that have 1500 different words.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(pages WHERE words = 1500), COUNT(pages)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN words = 1500 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(page) FROM pages WHERE words > 300 LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the percentage of times that the same word appears in a pair.",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the same word appears in a pair refers to w1st = w2nd; times refers to occurrences; DIVIDE(COUNT(occurrences where w1st = w2nd), COUNT(occurrences)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN w1st = w2nd THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(w1st) FROM biwords"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Indicate the title of all the pages in which the word comunitat appears.",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'comunitat'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Indicate on how many different pages the word ripoll appears.",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT T3.page FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'ripoll'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many words are repeated on the Llista de conflictes armats page?",
        "question_ar": "",
        "evidence_en": "title = 'Llista de conflictes armats'; How many repeated refers to occurrences;",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE title = 'Llista de conflictes armats' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Indicate if there is any pair formed by the words fukunaga and d'egees.",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;  w1st = word = 'fukunaga' or w2nd = word = 'fukunaga'; w1st = word = 'd'egees'or w2nd = word = 'd'egees';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the average of repetitions in the pages that have a total of 100 different words.",
        "question_ar": "",
        "evidence_en": "Repetition refers to occurrences; 100 different words refers to words = 100; DIVIDE(SUM(occurrences where words = 100), COUNT(page where words = 100)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.page) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 100"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which Wikipedia page number does the Catalan language's name, Acampada, appear on?",
        "question_ar": "",
        "evidence_en": "Wikipedia page number refers to page; title = 'Acampada';",
        "evidence_ar": "",
        "SQL": "SELECT page FROM pages WHERE title = 'Acampada'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list any three Wikipedia pages with more than 300 words.",
        "question_ar": "",
        "evidence_en": "more than 300 words refers to words > 300;  list any three means limit 3; Wikipedia pages refers to page;",
        "evidence_ar": "",
        "SQL": "SELECT page FROM pages WHERE words > 300 LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times did the word number 8 appear?",
        "question_ar": "",
        "evidence_en": "word number 8 refers to wid = 8; How many times refer to occurrences;",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM words WHERE wid = 8"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the top three most frequently occurring words and their ids.",
        "question_ar": "",
        "evidence_en": "most frequently occurring words refer to MAX(occurrences); id refers to wid;",
        "evidence_ar": "",
        "SQL": "SELECT word, wid FROM words ORDER BY occurrences DESC LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How frequently did the words 1 and 25 appear together?",
        "question_ar": "",
        "evidence_en": "How frequently refers to occurrences;  word 1 refers to wid = 1; word 25 refers to wid = 25; appear together means pair, which is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;  w1st or w2nd = wid = 1; w1st or w2nd = wid = 25;",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What number of words are there on revision page 27457362?",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT words FROM pages WHERE revision = 27457362"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the percentage of words in the Catalan language that have a repetition of more than 16,000 times?",
        "question_ar": "",
        "evidence_en": "words in the Catalan language refers lid = 1; repetition of more than 16,000 times refers to occurrences > 16000; DIVIDE(COUNT(words where lid = 1 and occurrences > 16000), COUNT(words where lid = 1)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN occurrences > 16000 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM langs_words"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which Wikipedia page number has the highest number of words in the Catalan language?",
        "question_ar": "",
        "evidence_en": "Wikipedia page number refers to page;  the highest number of words in the Catalan language refers to MAX(lid = 1);",
        "evidence_ar": "",
        "SQL": "SELECT page FROM pages WHERE words = ( SELECT MAX(words) FROM pages )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What proportion of a pair of words in the Catalan language have been repeated less than 80 times?",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; in the Catalan language refers to lid; repeated less than 80 times refers to occurrences < 80; DIVIDE(COUNT(lid where occurrences < 80), COUNT(lid)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many Catalan-language Wikipedia pages are there overall?",
        "question_ar": "",
        "evidence_en": "Catalan-language refers to lang = 'ca';",
        "evidence_ar": "",
        "SQL": "SELECT pages FROM langs WHERE lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list any three Wikipedia pages that are written in Catalan, together with their titles and revision page numbers.",
        "question_ar": "",
        "evidence_en": "in Catalan means in Catalan-language and refers to lid = 1; revision page numbers refer to revision;",
        "evidence_ar": "",
        "SQL": "SELECT title, revision FROM pages WHERE lid = 1 LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the language of the pair of words numbered 1 and 616?",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 616;",
        "evidence_ar": "",
        "SQL": "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times does the Catalan word \"nombre\" repeat itself?",
        "question_ar": "",
        "evidence_en": "the Catalan means Catalan language and refers to lid = 1; How many times repeat refers to occurrences;",
        "evidence_ar": "",
        "SQL": "SELECT T1.occurrences FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T2.word = 'nombre'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the second word in the pair of words number 1 and 8968?",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 8968;",
        "evidence_ar": "",
        "SQL": "SELECT word FROM words WHERE wid = 8968"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the most repetitions in the Catalan language?",
        "question_ar": "",
        "evidence_en": "the most repetitions refer to MAX(occurrences); Catalan language refers to lid = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.word FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T1.occurrences = ( SELECT MAX(occurrences) FROM langs_words )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times on page number 44 does the word \"votives\" appear?",
        "question_ar": "",
        "evidence_en": "How many times refers to occurrences; page number 44 refers to pid = 44;",
        "evidence_ar": "",
        "SQL": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'votives' AND T2.pid = 44"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times on page number 16 does the second word in the pair of words 1 and 109 appear?",
        "question_ar": "",
        "evidence_en": "How many times appear refer to occurrences; page number 16 refers to pid = 16; Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 109;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.occurrences) FROM pages_words AS T1 INNER JOIN biwords AS T2 ON T2.w2nd = T1.wid WHERE T2.w2nd = 109 AND T2.w1st = 1 AND T1.pid = 16"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the percentage of the words that have been repeated under 180 times in the Catalan language?",
        "question_ar": "",
        "evidence_en": "repeated under 180 times refers to occurrences < 180; Catalan language refers to lang = 'ca'; DIVIDE(COUNT(words WHERE occurrences < 180 and lang = 'ca'), COUNT(words WHERE lang = 'ca')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.occurrences < 180 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.lid) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What percentage of Catalan-language Wikipedia pages have more than 10,000 words?",
        "question_ar": "",
        "evidence_en": "Catalan-language refers to lang = 'ca'; more than 10,000 words refer to words > 10000; DIVIDE(COUNT(pages WHERE words > 10000 and lang = 'ca'), COUNT(pages WHERE lang = 'ca')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.words > 10000 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.page) FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times the word \"desena\" occurs?",
        "question_ar": "",
        "evidence_en": "How many times occurs refers to occurrences;",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM words WHERE word = 'desena'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many words has the appearance times greater than 10?",
        "question_ar": "",
        "evidence_en": "appearance times greater than 10 refers to occurrences > 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(w1st) AS countwords FROM biwords WHERE occurrences > 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List out the total pages of Wikipedia in Catalan language.",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT pages FROM langs"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many words have repetitions greater than 2000 and lower than 5000?",
        "question_ar": "",
        "evidence_en": "repetitions greater than 2000 and lower than 5000 refer to occurrences between 2000 and 5000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(wid) FROM langs_words WHERE occurrences BETWEEN '2000' AND '5000'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List out the title of Catalan language Wikipedia page that has wikipedia revision page id as 106601.",
        "question_ar": "",
        "evidence_en": "Wikipedia revision page id as 106601 refers to revision = 106601;",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE revision = 106601"
    },
    {
        "db_id": "language_corpus",
        "question_en": "State the Wikipedia page title that has revision page id of 28040864.",
        "question_ar": "",
        "evidence_en": "revision page id of 28040864 refers to revision = 28040864;",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE revision = 28040864"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times that the word pair of \"barcelona\" and \"precolombina\" occur?",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st or w2nd = 'barcelona'; w1st or w2nd = 'precolombina';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(occurrences) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'barcelona' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'precolombina' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the locale of the language of the page titled \"Anys 90\"?",
        "question_ar": "",
        "evidence_en": "page titled \"Anys 90\" refers to title = 'Anys 90';",
        "evidence_ar": "",
        "SQL": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Anys 90'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word that has 71303 appearance in the Catalan language?",
        "question_ar": "",
        "evidence_en": "has 71303 appearance refers to occurrences = 71303;",
        "evidence_ar": "",
        "SQL": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 71303"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the locale of the language of the page titled \"Abril\"?",
        "question_ar": "",
        "evidence_en": "the page titled \"Abril\" refers to title = 'Abril';",
        "evidence_ar": "",
        "SQL": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Abril'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the total number of words in page containing pair of word id \"100\" and \"317\"?",
        "question_ar": "",
        "evidence_en": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 100; w2nd = 317;",
        "evidence_ar": "",
        "SQL": "SELECT words FROM langs WHERE lid = ( SELECT lid FROM biwords WHERE w1st = 100 AND w2nd = 317 )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "State the total pages of the words that has repeated times of 2593.",
        "question_ar": "",
        "evidence_en": "repeated times of 2593 refers to occurrences = 2593;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences = 2593"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List out the title of the word have id less than 20.",
        "question_ar": "",
        "evidence_en": "word have id less than 20 refers to wid < 20;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many word that has number of different words equal to 3?",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.wid) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many word appeared 8 times? State the language id of the page.",
        "question_ar": "",
        "evidence_en": "appeared 8 times refers to occurrences = 8;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.wid), T1.lid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.occurrences = 8"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Calculate the average percentage of word appearance in the page that have revision page id smaller than 106680.",
        "question_ar": "",
        "evidence_en": "revision page id smaller than 106680 refers to revision < 106680; word appearance refers to occurrences; DIVIDE(SUM(occurrences where revision < 106680), COUNT(occurrences)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.words) AS REAL) * 100 / SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.revision < 106680"
    },
    {
        "db_id": "language_corpus",
        "question_en": "List out the total pages of the words that has repeated times more than 3000.",
        "question_ar": "",
        "evidence_en": "repeated more than 3000 times refers to occurrences > 3000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.pages FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences > 3000 GROUP BY T1.pages"
    },
    {
        "db_id": "language_corpus",
        "question_en": "State the name of the pair of word that have id of 20 and 50?",
        "question_ar": "",
        "evidence_en": "word that have id of 20 refers to wid = 20; word that have id of 50 refers to wid = 50;",
        "evidence_ar": "",
        "SQL": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.w1st = 20 AND T2.w2nd = 50"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many pages of Wikipedia are there in total on the Catalan language?",
        "question_ar": "",
        "evidence_en": "Catalan language refers to lang = 'ca';",
        "evidence_ar": "",
        "SQL": "SELECT pages FROM langs WHERE lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the titles of the Wikipedia pages on the Catalan language with more than 4000 words.",
        "question_ar": "",
        "evidence_en": "Catalan language refers to lid = 1; more than 4000 words refers to words > 4000;",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE lid = 1 AND words > 4000"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many words are there on the page titled \"Asclepi\"?",
        "question_ar": "",
        "evidence_en": "page titled \"Asclepi\" refers to title = 'Asclepi' ;",
        "evidence_ar": "",
        "SQL": "SELECT words FROM pages WHERE title = 'Asclepi'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which of these pages have more words, the page titled \"Afluent\" or \"Asclepi\"?",
        "question_ar": "",
        "evidence_en": "COUNT(words where title = 'Afluent')> COUNT(words where title = 'Asclepi')",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN ( SELECT words FROM pages WHERE title = 'Asclepi' ) > ( SELECT words FROM pages WHERE title = 'Afluent' ) THEN 'Asclepi' ELSE 'Afluent' END"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the occurrence of the word \"nombre\"?",
        "question_ar": "",
        "evidence_en": "This is not;",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM words WHERE word = 'nombre'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the Catalan words with an occurrence of over 200000.",
        "question_ar": "",
        "evidence_en": "occurrence of over 200000 refers to occurrences > 200000;",
        "evidence_ar": "",
        "SQL": "SELECT word FROM words WHERE occurrences > 200000"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the locale of the language of the page titled \"Asclepi\"?",
        "question_ar": "",
        "evidence_en": "page titled \"Asclepi\" refers to title = 'Asclepi' ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.locale FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.title = 'Asclepi'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times did the word \"grec\" occur on the page titled \"Àbac\"?",
        "question_ar": "",
        "evidence_en": "how many times occur refers to occurrences; page titled \"Àbac\" refers to title = 'Àbac' ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T3.title = 'Àbac' AND T1.word = 'grec'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the title of the pages on which the word \"grec\" occurred for over 20 times.",
        "question_ar": "",
        "evidence_en": "occurred for over 20 times refers to occurrences > 20;",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences > 20"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many words are there on the page that the word \"grec\" has occurred for 52 times?",
        "question_ar": "",
        "evidence_en": "the word \"grec\" refers to word = 'grec'; occurred for 52 times refers to occurrences = 52",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.words) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What's the occurrence of the biwords pair whose first word is \"àbac\" and second word is \"xinès\"?",
        "question_ar": "",
        "evidence_en": "àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; occurrence refers to occurrences",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xinès' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which biwords pair has a higher occurrence, \"àbac-xinès\" or \"àbac-grec\"?",
        "question_ar": "",
        "evidence_en": "higher occurrence is MAX(occurrences); àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; grec refers to word = 'grec'",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xinès' ) ) > ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'grec' ) ) THEN 'àbac-xinès' ELSE 'àbac-grec' END AS CALUS FROM words LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many more times does the first word in the biwords pair \"àbac-xinès\" occur than the biwords pair itself?",
        "question_ar": "",
        "evidence_en": "àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; How many more times the first word in the biwords occur than the biwords pair itself means SUBTRACT(words.occurrence, biwords.occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT occurrences - ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xinès' ) ) AS CALUS FROM words WHERE word = 'àbac'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list all the biwords pairs with \"àbac\" as its first word.",
        "question_ar": "",
        "evidence_en": "àbac refers to word = 'àbac'; first word refers to w1st",
        "evidence_ar": "",
        "SQL": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = 'àbac'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the total occurrence of the biwords pairs with \"àbac\" as its first word?",
        "question_ar": "",
        "evidence_en": "occurrence refers to occurrences; àbac refers to word = 'àbac'; first word refers to w1st",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = 'àbac'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many Wikipedia pages are there on the language of the biwords pair \"àbac-xinès\"?",
        "question_ar": "",
        "evidence_en": "àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; Wikipedia pages refer to pages",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN biwords AS T2 ON T1.lid = T2.lid WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word = 'xinès' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How much higher in percentage does the word \"grec\" occur on the page titled \"Àbac\" than on the page titled \"Astronomia\"?",
        "question_ar": "",
        "evidence_en": "grec refers to word = 'grec'; Àbac refers to title = 'Àbac'; Astronomia refers to title = 'Astronomia'; percentage = DIVIDE(SUBTRACT(occurrences where title = 'Àbac' AND word = 'grec', occurrences where title = 'Astronomia' AND word = 'grec'), occurrences where title = 'Astronomia' AND word = 'grec')",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T3.title = 'Àbac' THEN T2.occurrences END) - SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END)) AS REAL) * 100 / SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many pages does the Catalan language have in Wikipedia?",
        "question_ar": "",
        "evidence_en": "Catalan language refers to lang = 'ca'",
        "evidence_ar": "",
        "SQL": "SELECT pages FROM langs WHERE lang = 'ca'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the most repetitions in the Catalan language? Give the ID of the word.",
        "question_ar": "",
        "evidence_en": "word with the most repetitions refers to MAX(occurrences); ID of the word refers to wid",
        "evidence_ar": "",
        "SQL": "SELECT wid FROM langs_words WHERE occurrences = ( SELECT MAX(occurrences) FROM langs_words )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the word ID for the second word for the biwords pair with most repetitions?",
        "question_ar": "",
        "evidence_en": "second word refers to w2nd; biwords pair with most repetitions refers to MAX(biwords.occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many occurrences does the word \"panajot\" have?",
        "question_ar": "",
        "evidence_en": "panajot refers to word = 'panajot'",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM words WHERE word = 'panajot'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the time of occurrences as 340691?",
        "question_ar": "",
        "evidence_en": "occurrences of 340691 refers to occurrences = 340691",
        "evidence_ar": "",
        "SQL": "SELECT word FROM words WHERE occurrences = 340691"
    },
    {
        "db_id": "language_corpus",
        "question_en": "State the word ID for \"periodograma\".",
        "question_ar": "",
        "evidence_en": "word ID refers to wid; periodograma refers to word = 'periodograma'",
        "evidence_ar": "",
        "SQL": "SELECT wid FROM words WHERE word = 'periodograma'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "For the biwords pair that appears \"116430\" times, what is the second word of the pair?",
        "question_ar": "",
        "evidence_en": "the biwords pair that appears \"116430\" times refers to occurrences = 116430; second word of the pair refers to w2nd",
        "evidence_ar": "",
        "SQL": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T2.occurrences = 116430"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times does the word \"riu\" appears in the biwords pair?",
        "question_ar": "",
        "evidence_en": "riu refers to word = 'riu'; SUM(w1st where wid is word = 'riu' AND w2nd where wid is word = 'riu')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.wid) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = 'riu'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the most appearances in the Wikipedia page with the title of \"Agricultura\"? Give the word ID.",
        "question_ar": "",
        "evidence_en": "Agricultura refers to title = 'Agricultura'; the most appearances is MAX(pages_words_sampling.occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Agricultura' ORDER BY T2.occurrences DESC LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many appearances does the word ID No. 2823 have in the Wikipedia page \"Astre\"?",
        "question_ar": "",
        "evidence_en": "Astre refers to title = 'Astre'; word ID No. 2823 refers to wid = 2823; appearances refers to pages_words_sampling.occurrences",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Astre' AND T2.wid = 2823"
    },
    {
        "db_id": "language_corpus",
        "question_en": "In which Wikipedia page does the word ID No. 174 have the most appearances? Give the title.",
        "question_ar": "",
        "evidence_en": "word ID No. 174 refers to wid = 174; appearances refers to pages_words_sampling.occurrences",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE pid = ( SELECT pid FROM pages_words WHERE wid = 174 ORDER BY occurrences DESC LIMIT 1 )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times does the word \"heròdot\" appear in the Wikipedia page?",
        "question_ar": "",
        "evidence_en": "heròdot refers to word = 'heròdot'; times appear refers to SUM(pid)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'heròdot'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word has the most appearances in the Wikipedia page revision ID No. 28278070? Give the word ID.",
        "question_ar": "",
        "evidence_en": "the most appearances refers to MAX(occurrences); revision ID No. 28278070 refers to revision = 28278070; word ID refers to wid",
        "evidence_ar": "",
        "SQL": "SELECT pid FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE revision = 28278070 ) ORDER BY occurrences DESC LIMIT 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times does the biwords \"que gregorio\" appear in the language?",
        "question_ar": "",
        "evidence_en": "que gregorio refers to w1st = wid where word = 'que' AND w2nd = wid where word = 'gregorio'; appear refers to biwords.occurrences",
        "evidence_ar": "",
        "SQL": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'que' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'gregorio' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many biword pairs contain the word \"base\" as the second word?",
        "question_ar": "",
        "evidence_en": "base refers to word = 'base'; SUM(w2nd) where w2nd = wid for word = 'base'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(w1st) FROM biwords WHERE w2nd = ( SELECT wid FROM words WHERE word = 'base' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times of repetition does the word \"exemple\" show in the Catalan language?",
        "question_ar": "",
        "evidence_en": "exemple refers to word = 'exemple'; repetition refers to langs_words.occurrences; lid = 1 menas it's Catalan language",
        "evidence_ar": "",
        "SQL": "SELECT T2.occurrences FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'exemple' AND T2.lid = 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Which word that has 274499 repetitions in the Catalan language?",
        "question_ar": "",
        "evidence_en": "lid = 1 menas it's Catalan language; 274499 repetitions refers to occurrences = 274499",
        "evidence_ar": "",
        "SQL": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 274499 AND T2.lid = 1"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many times greater is the appearances of the biword pair \"a base\" than \"a decimal\"?",
        "question_ar": "",
        "evidence_en": "a, base AND decimal are words; wid is the ID of word; w1st is the first word of a biword pair; w2nd is the second word of a biword pair; appearances refers to biwords.occurrences; biword pair 'a base' refers to word = 'a' as w1st AND word = 'base' as w2nd; biword pair 'a decimal' refers to word = 'a' as w1st AND word = 'decimal' as w2nd; appearances of 'a base' greater than 'a decimal' refers to DIVIDE(SUBTRACT(biwords.occurrences'a base', biwords.occurrences'a decimal'), biwords.occurrences'a decimal')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(occurrences AS REAL) / ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'decimal' ) ) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'base' )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "For the word \"grec\", what is the percentage of the appearances in the \"Art\" Wikipedia page have among all the appearances?",
        "question_ar": "",
        "evidence_en": "grec refers to word = 'grec'; Art refers to title = 'Art'; percentage is DIVIDE(occurrences(grec), occurences(Art))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.title = 'Art' THEN T2.occurrences ELSE 0 END) AS REAL) * 100 / SUM(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many Wikipedia pages with over 4000 different words are there on the Catalan language?",
        "question_ar": "",
        "evidence_en": "lid = 1 means it's Catalan language; over 4000 different words means words > 4000; Wikipedia pages refers to pid",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 4000"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the titles of all the Wikipedia pages on the Catalan language with 10 different words.",
        "question_ar": "",
        "evidence_en": "lid = 1 means it's Catalan language; 10 different words refers to words = 10; titles refers to title",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE lid = 1 AND words = 10 LIMIT 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the word that occurs the most in the Catalan language?",
        "question_ar": "",
        "evidence_en": "MAX(occurrences)",
        "evidence_ar": "",
        "SQL": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the titles of the top 3 Wikipedia pages with the most different words on the Catalan language.",
        "question_ar": "",
        "evidence_en": "lid = 1 means it's Catalan language; with most different words refers to MAX(words)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the revision ID for the page on Catalan titled \"Arqueologia\"?",
        "question_ar": "",
        "evidence_en": "lid = 1 means it's Catalan language; Arqueologia refers to title = 'Arqueologia'; revision ID refers to revision",
        "evidence_ar": "",
        "SQL": "SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Among the wikipedia pages on Catalan with more than 300 different words, how many of them have a revision ID of over 28330000?",
        "question_ar": "",
        "evidence_en": "lid = 1 means it's Catalan language; more than 300 different words refers to words > 300; revision ID of over 28330000 refers to revision > 28330000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 300 AND revision > 28330000"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Please list the page IDs of all the Wikipedia pages that have the word \"nombre\" appeared on it.",
        "question_ar": "",
        "evidence_en": "nombre refers to word = 'nombre'; page IDs refers to pid",
        "evidence_ar": "",
        "SQL": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many Wikipedia pages on Catalan are there with the word \"nombre\" appearing for more than 5 times?",
        "question_ar": "",
        "evidence_en": "nombre refers to word = 'nombre'; appear for more than 5 times refers to  pages_words.occurrences > 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.pid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre' AND T2.occurrences > 5"
    },
    {
        "db_id": "language_corpus",
        "question_en": "How many biwords pairs are there whose second word is \"grec\"?",
        "question_ar": "",
        "evidence_en": "grec refers to word = 'grec'; wid where word = 'grec' AS w2nd",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T1.word = 'grec'"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the title of the page on which the word \"grec\" has an occurrence of 52 times.",
        "question_ar": "",
        "evidence_en": "occurrence of 52 times refers to pages_words.occurrences = 52; grec refers to word = 'grec'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52"
    },
    {
        "db_id": "language_corpus",
        "question_en": "Among the biwords pairs with \"àbac\" as its first word, how many of them have an occurrence of over 10?",
        "question_ar": "",
        "evidence_en": "àbac refers to word = 'àbac'; as first word refers to w1st; occurrence of over 10 refers to occurrences > 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.w2nd) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T1.word = 'àbac' AND T2.occurrences > 10"
    },
    {
        "db_id": "language_corpus",
        "question_en": "What is the average occurrence of the word \"grec\" on each Wikipedia page that has this word?",
        "question_ar": "",
        "evidence_en": "grec refers to word = 'grec'; AVG(occurrences where word = 'grec')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.wid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'grec'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights were there on 2018/8/1?",
        "question_ar": "",
        "evidence_en": "on 2018/8/1 refers to FL_DATE = '2018/8/1';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1'"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights on 2018/8/1, how many of them departed from an airport in New York?",
        "question_ar": "",
        "evidence_en": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; departed from an airport in New York refers to ORIGIN = 'JFK';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK'"
    },
    {
        "db_id": "airline",
        "question_en": "Please list the destination cities of all the flights that were cancelled on 2018/8/1.",
        "question_ar": "",
        "evidence_en": "destination cities refers to DEST; cancelled refers to CANCELLED = 1; on 2018/8/1 refers to FL_DATE = '2018/8/1';",
        "evidence_ar": "",
        "SQL": "SELECT DEST FROM Airlines WHERE FL_DATE = '2018/8/1' AND CANCELLED = 1 GROUP BY DEST"
    },
    {
        "db_id": "airline",
        "question_en": "Please list the dates of the flights that were cancelled due to the most serious reason.",
        "question_ar": "",
        "evidence_en": "dates of the flights refers to FL_DATE; cancelled refers to CANCELLED = 1; most serious reason refers to CANCELLATION_CODE = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT FL_DATE FROM Airlines WHERE CANCELLATION_CODE = 'A' GROUP BY FL_DATE"
    },
    {
        "db_id": "airline",
        "question_en": "Please list the departure airports of the flights on 2018/8/1 that were delayed.",
        "question_ar": "",
        "evidence_en": "departure airports refers ORIGIN; on 2018/8/1 refers to FL_DATE = '2018/8/1'; delayed refers to DEP_DELAY > 0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T2.DEP_DELAY > 0 GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?",
        "question_ar": "",
        "evidence_en": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; depart from refers to ORIGIN; John F. Kennedy International in New York refers to Description = 'New York, NY: John F. Kennedy International';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International'"
    },
    {
        "db_id": "airline",
        "question_en": "For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight?",
        "question_ar": "",
        "evidence_en": "on 2018/8/1 refers to FL_DATE = '2018/8/1';  delayed for the longest time refers to MAX(DEP_DELAY); destination airport refers to DEST;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/1' ORDER BY T2.DEP_DELAY DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled?",
        "question_ar": "",
        "evidence_en": "departing from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; arrived earlier than scheduled refers to ARR_DELAY < 0;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ARR_DELAY < 0 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'New York, NY: John F. Kennedy International'"
    },
    {
        "db_id": "airline",
        "question_en": "Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart?",
        "question_ar": "",
        "evidence_en": "depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; earliest one scheduled to depart refers to MIN(DEP_TIME);",
        "evidence_ar": "",
        "SQL": "SELECT T2.DEP_TIME FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.DEP_TIME IS NOT NULL ORDER BY T2.DEP_TIME ASC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights on 2018/8/1 were operated by American Airlines Inc.?",
        "question_ar": "",
        "evidence_en": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International.",
        "question_ar": "",
        "evidence_en": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International';",
        "evidence_ar": "",
        "SQL": "SELECT T2.OP_CARRIER_FL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.FL_DATE = '2018/8/1'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights operated by American Airlines Inc. on 2018/8/1 were faster than scheduled?",
        "question_ar": "",
        "evidence_en": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?",
        "question_ar": "",
        "evidence_en": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; longest delay in departure refers to MAX(DEP_DELAY);",
        "evidence_ar": "",
        "SQL": "SELECT T1.OP_CARRIER_FL_NUM FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' ORDER BY T1.DEP_TIME DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York?",
        "question_ar": "",
        "evidence_en": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; land in New York refers to DEST = 'JFK';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights operated by American Airlines Inc. on 2018/8/1, how many of them were cancelled?",
        "question_ar": "",
        "evidence_en": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; cancelled refers to CANCELLED = 1;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.CANCELLED = 1 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "Which airline operated more flights on 2018/8/1, American Airlines Inc. or Endeavor Air Inc.?",
        "question_ar": "",
        "evidence_en": "SUM(Description = 'American Airlines Inc.: AA') > SUM(Description = 'Endeavor Air Inc.: 9E') means American Airlines Inc. operated more flights than  Endeavor Air Inc; SUM(Description = 'American Airlines Inc.: AA') < SUM(Description = 'Endeavor Air Inc.: 9E') means Endeavor Air Inc. operated more flights than American Airlines Inc.; on 2018/8/1 refers to FL_DATE = '2018/8/1';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the average departure delay time of flights operated by American Airlines Inc.?",
        "question_ar": "",
        "evidence_en": "average departure delay time = DIVIDE(SUM(DEP_DELAY), COUNT(Code)); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.DEP_DELAY) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights on average does American Airlines Inc. operate every day in August, 2018?",
        "question_ar": "",
        "evidence_en": "flights on average = DIVIDE(COUNT(Code), 31); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; every day in August, 2018 refers to FL_DATE like '2018/8%';",
        "evidence_ar": "",
        "SQL": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the number of air carriers in the database?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Code) FROM `Air Carriers`"
    },
    {
        "db_id": "airline",
        "question_en": "Give the number of planes that took off from Los Angeles International airport on 2018/8/27.",
        "question_ar": "",
        "evidence_en": "took off from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; on 2018/8/27 refers to FL_DATE = '2018/8/27';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the number of airplanes that landed on Oakland Airport on 2018/8/7.",
        "question_ar": "",
        "evidence_en": "landed on refers to DEST; Oakland Airport refers to Description which contains 'Oakland'; on 2018/8/7 refers to FL_DATE = '2018/8/7';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Description LIKE '%Oakland%' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/7'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights of Alaska Airlines were delayed on 2018/8/2?",
        "question_ar": "",
        "evidence_en": "Alaska Airlines refers to Description = 'Alaska Airlines Inc.: AS'; delayed refers to DEP_DELAY > 0; on 2018/8/2 refers to FL_DATE = '2018/8/2';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0"
    },
    {
        "db_id": "airline",
        "question_en": "Tell the number of fights landed earlier on Miami Airport on 2018/8/12.",
        "question_ar": "",
        "evidence_en": "landed on refers to DEST; landed earlier refers to ARR_DELAY < 0; Miami Airport refers to DEST = 'MIA'; on 2018/8/12 refers to FL_DATE = '2018/8/12';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights from American Airlines were cancelled due to a type A cancellation code?",
        "question_ar": "",
        "evidence_en": "American Airlines refers to Description = 'American Airlines Inc.: AA'; cancelled refers to Cancelled = 1; cancelled due to type A cancellation code refers to CANCELLATION_CODE = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLATION_CODE = 'A' AND T2.Description = 'American Airlines Inc.: AA' AND T1.CANCELLED = 1"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights of Endeavor Air Inc. were faster than scheduled on 2018/8/31?",
        "question_ar": "",
        "evidence_en": "Endeavor Air Inc. refers to Description = 'Endeavor Air Inc.: 9E'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME; on 2018/8/31 refers to FL_DATE = '2018/8/31';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/31' AND T2.Description = 'Endeavor Air Inc.: 9E'"
    },
    {
        "db_id": "airline",
        "question_en": "How many planes of Spirit Air Lines took off on 2018/8/7?",
        "question_ar": "",
        "evidence_en": "Spirit Air Lines refers to Description = 'Spirit Air Lines: NK'; on 2018/8/7 refers to FL_DATE = '2018/8/7';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Code) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/7' AND T2.Description = 'Spirit Air Lines: NK'"
    },
    {
        "db_id": "airline",
        "question_en": "For the flight with the tail number 'N702SK', which air carrier does it belong to?",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; TAIL_NUM = 'N702SK';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N702SK' GROUP BY T2.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the name of the airport which landed the most number of flights on 2018/8/15.",
        "question_ar": "",
        "evidence_en": "name of the airport refers to Description; airport that landed the most number of flights refers to MAX(COUNT(DEST)); on 2018/8/15 refers to FL_DATE = '2018/8/15';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' ORDER BY T2.DEST DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "For the flight from ATL to PHL on 2018/8/1 that scheduled local departure time as \"2040\", which air carrier does this flight belong to?",
        "question_ar": "",
        "evidence_en": "flight from ATL refers to ORIGIN = 'ATL'; flight to PHL refers to DEST = 'PHL'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; local departure time refers to CRS_DEP_TIME; CRS_DEP_TIME = '2040';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/1' AND T1.ORIGIN = 'ATL' AND T1.DEST = 'PHL' AND T1.CRS_DEP_TIME = '2040' GROUP BY T2.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Tell the number of flights that landed at Lake Charles Regional Airport on 2018/8/15.",
        "question_ar": "",
        "evidence_en": "landed at refers to DEST; Lake Charles Regional Airport refers to Description = 'Lake Charles, LA: Lake Charles Regional'; on 2018/8/15 refers to FL_DATE = '2018/8/15';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' AND T1.Description = 'Lake Charles, LA: Lake Charles Regional'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018?",
        "question_ar": "",
        "evidence_en": "flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; in the August of 2018 refers to FL_DATE like '2018/8%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(FL_DATE) FROM Airlines WHERE FL_DATE LIKE '2018/8%' AND ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'San Diego, CA: San Diego International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Los Angeles, CA: Los Angeles International' )"
    },
    {
        "db_id": "airline",
        "question_en": "What is the percentage of flights from Los Angeles International airport that were cancelled due to a type C cancellation code?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(CANCELLATION_CODE = 'C'), COUNT(Code)), 100); flights from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; cancelled refers to Cancelled = 1; cancelled due to a type C cancellation code refers to CANCELLATION_CODE = 'C';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.CANCELLATION_CODE = 'C' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/15' AND T2.CANCELLATION_CODE IS NOT NULL AND T1.Description = 'Los Angeles, CA: Los Angeles International'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the percentage of flights which landed at Pittsburgh were faster than scheduled?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(ACTUAL_ELAPSED_TIME < T2.CRS_ELAPSED_TIME), COUNT(Code)), 100); landed at refers to DEST; Pittsburgh refers to Description which contains 'Pittsburgh'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL"
    },
    {
        "db_id": "airline",
        "question_en": "What is the description of the airline code 19049?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Description FROM `Air Carriers` WHERE Code = 19049"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights departed on time on 8/1/2018?",
        "question_ar": "",
        "evidence_en": "departed on time refers to DEP_DELAY < = 0; on 8/1/2018 refers to FL_DATE = '2018/8/1';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0"
    },
    {
        "db_id": "airline",
        "question_en": "What are the codes of the airport found in Ankara, Turkey?",
        "question_ar": "",
        "evidence_en": "airport found in Ankara, Turkey refers to Description like '%Ankara, Turkey%';",
        "evidence_ar": "",
        "SQL": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'"
    },
    {
        "db_id": "airline",
        "question_en": "How long was the longest minute delay caused by a weather problem in airport id 12264?",
        "question_ar": "",
        "evidence_en": "longest minute delay caused by a weather problem refers to MAX(WEATHER_DELAY); airport id refers to ORIGIN_AIRPORT_ID; ORIGIN_AIRPORT_ID = 12264;",
        "evidence_ar": "",
        "SQL": "SELECT WEATHER_DELAY FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264 ORDER BY WEATHER_DELAY DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "What is the IATA code of the Anita Bay Airport in Anita Bay, Alaska?",
        "question_ar": "",
        "evidence_en": "IATA code refers to Code; Anita Bay Airport in Anita Bay, Alaska refers to Description = 'Anita Bay, AK: Anita Bay Airport';",
        "evidence_ar": "",
        "SQL": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the origin airport id that recorded the longest delay due to a late aircraft?",
        "question_ar": "",
        "evidence_en": "origin airport id refers to ORIGIN_AIRPORT_ID; longest delay due to a late aircraft refers to MAX(LATE_AIRCRAFT_DELAY);",
        "evidence_ar": "",
        "SQL": "SELECT ORIGIN_AIRPORT_ID FROM Airlines ORDER BY LATE_AIRCRAFT_DELAY DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights depart to Hartsfield-Jackson Atlanta International from Chicago O'Hare International?",
        "question_ar": "",
        "evidence_en": "depart to refers to DEST; Hartsfield-Jackson Atlanta International refers to Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'; depart from refers to ORIGIN; Chicago O'Hare International refes to Description = 'Chicago, IL: Chicago O'Hare International';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(FL_DATE) FROM Airlines WHERE ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Chicago, IL: Chicago O''Hare International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International' )"
    },
    {
        "db_id": "airline",
        "question_en": "How many planes does Southwest Airlines Co. have?",
        "question_ar": "",
        "evidence_en": "planes refers to TAIL_NUM; Southwest Airlines Co. refers to Description = 'Southwest Airlines Co.: WN';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.TAIL_NUM) FROM ( SELECT T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Southwest Airlines Co.: WN' GROUP BY T1.TAIL_NUM ) T3"
    },
    {
        "db_id": "airline",
        "question_en": "On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International?",
        "question_ar": "",
        "evidence_en": "On August 2018 refers to FL_DATE like '2018/8%'; day with the highest number of cancelled flights refers to MAX(COUNT(FL_DATE WHERE CANCELLED = 1)); cancelled due to the most serious reasons refers to CANCELLATION_CODE = 'A'; in Dallas/Fort Worth International refers to Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International';",
        "evidence_ar": "",
        "SQL": "SELECT T2.FL_DATE FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' AND T2.ORIGIN = 'DFW' AND T2.CANCELLED = 1 AND T2.CANCELLATION_CODE = 'A' GROUP BY T2.FL_DATE ORDER BY COUNT(T2.FL_DATE) DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018?",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; arrived on time refers to ARR_DELAY < = 0; Meadows Field airport refers to Description = 'Bakersfield, CA: Meadows Field'; in August of 2018 refers to FL_DATE like '2018/8%';",
        "evidence_ar": "",
        "SQL": "SELECT T2.TAIL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Bakersfield, CA: Meadows Field' AND T2.DEST = 'BFL' AND T2.ARR_DELAY <= 0 GROUP BY T2.TAIL_NUM"
    },
    {
        "db_id": "airline",
        "question_en": "Among the airports whose destination is Logan International, what is the airline id of the carrier operator with the highest delay in minutes due to security?",
        "question_ar": "",
        "evidence_en": "destination refers to DEST; Logan International refers to Description = 'Boston, MA: Logan International'; airline id of the carrier operator refers to OP_CARRIER_AIRLINE_ID; highest delay in minutes due to security refers to MAX(SECURITY_DELAY);",
        "evidence_ar": "",
        "SQL": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T1.Description = 'Boston, MA: Logan International' AND T2.DEST = 'BOS' ORDER BY T2.SECURITY_DELAY DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "What are the names of the top 5 airlines with the highest number of aircraft?",
        "question_ar": "",
        "evidence_en": "names of the airlines refers to Description; highest number of aircraft refers to MAX(COUNT(TAIL_NUM));",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5"
    },
    {
        "db_id": "airline",
        "question_en": "What is the name of the airline with the highest number of non-cancelled flights?",
        "question_ar": "",
        "evidence_en": "names of the airlines refers to Description; highest number of non-cancelled flights refers to MAX(COUNT(CANCELLED = 0));",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLED = 0 GROUP BY T2.Description ORDER BY COUNT(T1.CANCELLED) DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Give the name of the airline to which tail number N202NN belongs to.",
        "question_ar": "",
        "evidence_en": "name of the airline refers to Description; tail number refers to TAIL_NUM; TAIL_NUM = 'N202NN';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N202NN' GROUP BY T2.Description"
    },
    {
        "db_id": "airline",
        "question_en": "What is the name of the airline that flew the most flights to Chicago Midway International?",
        "question_ar": "",
        "evidence_en": "name of the airline refers to Description; flights to refers to DEST; Chicago Midway International refers to Description = 'Chicago, IL: Chicago Midway International'; most flights to Chicago Midway International refers to MAX(COUNT(DEST WHERE Description = 'Chicago, IL: Chicago Midway International'));",
        "evidence_ar": "",
        "SQL": "SELECT T3.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T1.Description = 'Chicago, IL: Chicago Midway International' AND T2.DEST = 'MDW' GROUP BY T3.Description ORDER BY COUNT(T3.Description) DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "What is the tail number of a Compass Airline's plane that flew the most number of flights from LAX to ABQ?",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; Compass Airline refers to Description = 'Compass Airlines: CP'; flew the most number of lights from LAX TO ABQ refers to MAX(COUNT(OP_CARRIER_AIRLINE_ID WHERE ORIGIN = 'LAX' and DEST = 'ABQ')); from LAX refers to ORIGIN = 'LAX'; to ABQ refers to DEST = 'ABQ';",
        "evidence_ar": "",
        "SQL": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Compass Airlines: CP' AND T2.ORIGIN = 'LAX' AND T2.DEST = 'ABQ' GROUP BY T2.OP_CARRIER_AIRLINE_ID ORDER BY COUNT(T2.OP_CARRIER_AIRLINE_ID) DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Which airport did Republic Airline fly the most from?",
        "question_ar": "",
        "evidence_en": "Republic Airline refers to Description = 'Republic Airline: YX'; fly the most from refers to MAX(COUNT(ORIGIN));",
        "evidence_ar": "",
        "SQL": "SELECT T2.DEST FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Republic Airline: YX' GROUP BY T2.DEST ORDER BY COUNT(T2.DEST) DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Which airline does the aircraft with the fastest flight belong to?",
        "question_ar": "",
        "evidence_en": "fastest flight refers to MIN(SUBTRACT(ACTUAL_ELAPSED_TIME, CRS_ELAPSED_TIME));",
        "evidence_ar": "",
        "SQL": "SELECT T1.OP_CARRIER_AIRLINE_ID FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ACTUAL_ELAPSED_TIME IS NOT NULL AND T1.CRS_ELAPSED_TIME IS NOT NULL ORDER BY T1.ACTUAL_ELAPSED_TIME - T1.CRS_ELAPSED_TIME ASC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "How many hours in total did all of the Delta Air Lines aircraft were delayed due to a late aircraft in August of 2018? Identify the plane number of the aircraft with the highest delayed hours.",
        "question_ar": "",
        "evidence_en": "hours in total = DIVIDE(SUM(LATE_AIRCRAFT_DELAY), 60); Delta Air Lines refers to Description = 'Delta Air Lines Inc.: DL'; delayed due to a late aircraft refers to LATE_AIRCRAFT_DELAY; in August of 2018 refers to FL_DATE like '2018/8/%'; plane number refers to TAIL_NUM; highest delayed hours refers to MAX(DIVIDE(SUM(LATE_AIRCRAFT_DELAY),60));",
        "evidence_ar": "",
        "SQL": "SELECT T1.TAIL_NUM, SUM(CAST(T1.LATE_AIRCRAFT_DELAY AS REAL) / 60) AS delay FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.FL_DATE LIKE '2018/8/%' AND T2.Description = 'Delta Air Lines Inc.: DL' ORDER BY delay DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Please list any three airports with their codes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Code, Description FROM Airports LIMIT 3"
    },
    {
        "db_id": "airline",
        "question_en": "What is the code of Mississippi Valley Airlines?",
        "question_ar": "",
        "evidence_en": "Mississippi Valley Airlines refers to Description like 'Mississippi Valley Airlines%';",
        "evidence_ar": "",
        "SQL": "SELECT Code FROM `Air Carriers` WHERE Description LIKE 'Mississippi Valley Airlines%'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the scheduled local departure time and the actual departure time of the flight from Philadelphia to Harrisburg with the plane's tail number N627AE on the 13th of August 2018?",
        "question_ar": "",
        "evidence_en": "scheduled local departure time refers to CRS_DEP_TIME; actual departure time refers to DEP_TIME; from Philadelphia refers to ORIGIN = 'PHL'; to Harrisburg refers to DEST = 'MDT'; tail number refers to TAIL_NUM; TAIL_NUM = 'N627AE'; on the 13th of August 2018 refers to FL_DATE = '2018/8/13';",
        "evidence_ar": "",
        "SQL": "SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018/8/13'"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights on the 1st of August 2018 were coming from Allentown, Pennsylvania?",
        "question_ar": "",
        "evidence_en": "1st of August 2018 refers to FL_DATE = '2018/8/1'; coming from Allentown, Pennsylvania refers to ORIGIN = 'ABE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the only flight destination for flights from Albany?",
        "question_ar": "",
        "evidence_en": "flight destination refers to DEST; from Albany refers to ORIGIN = 'ABY';",
        "evidence_ar": "",
        "SQL": "SELECT DEST FROM Airlines WHERE ORIGIN = 'ABY' GROUP BY DEST"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights from Dallas to Santa Ana departed on time?",
        "question_ar": "",
        "evidence_en": "from Dallas refers to ORIGIN = 'DFW'; to Santa Ana refers to DEST = 'SNA'; departed on time refers to DEP_DELAY = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE DEST = 'SNA' AND ORIGIN = 'DFW' AND DEP_DELAY = 0"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights from Charlotte Douglas International Airport to Austin - Bergstrom International Airport experienced serious reasons that cause flight cancellation?",
        "question_ar": "",
        "evidence_en": "from refers to ORIGIN; Charlotte Douglas International Airport refers to Description = 'Charlotte, NC: Charlotte Douglas International'; to refers to DEST; Austin - Bergstrom International Airport refers to Description = 'Austin, TX: Austin - Bergstrom International'; serious reasons refers to CANCELLATION_CODE = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'"
    },
    {
        "db_id": "airline",
        "question_en": "Which flight carrier operator has the most cancelled flights?",
        "question_ar": "",
        "evidence_en": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; most cancelled flights refers to MAX(COUNT(CANCELLED = 1));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.CANCELLED DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "What is the actual departure time of JetBlue Airways with the plane's tail number N903JB to Fort Lauderdale-Hollywood International Airport on the 20th of August 2018?",
        "question_ar": "",
        "evidence_en": "actual departure time refers to DEP_TIME; JetBlue Airways refers to Description like '%JetBlue Airways%'; tail number refers to TAIL_NUM; TAIL_NUM = 'N903JB'; to refers to DEST; Fort Lauderdale-Hollywood International Airport refers to Description like '%Fort Lauderdale-Hollywood%'; on the 20th of August 2018 refers to FL_DATE = '2018/8/20';",
        "evidence_ar": "",
        "SQL": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'"
    },
    {
        "db_id": "airline",
        "question_en": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?",
        "question_ar": "",
        "evidence_en": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description"
    },
    {
        "db_id": "airline",
        "question_en": "What is the airport description of the airport code A11?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Description FROM Airports WHERE Code = 'A11'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the total number of flights that have Oklahoma as their origin?",
        "question_ar": "",
        "evidence_en": "Oklahoma as origin refers to Origin = 'OKC';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) AS num FROM Airlines WHERE Origin = 'OKC'"
    },
    {
        "db_id": "airline",
        "question_en": "How many airports have a code starting with the letter C?",
        "question_ar": "",
        "evidence_en": "code starting with the letter C refers to Code like 'C%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%'"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the destinations of flight number 1596.",
        "question_ar": "",
        "evidence_en": "destination refers to DEST; flight number refers to OP_CARRIER_FL_NUM; OP_CARRIER_FL_NUM = 1596;",
        "evidence_ar": "",
        "SQL": "SELECT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = 1596"
    },
    {
        "db_id": "airline",
        "question_en": "List the description of the airports that have code that ends with number 3?",
        "question_ar": "",
        "evidence_en": "code that ends with number 3 refers to Code like '%3';",
        "evidence_ar": "",
        "SQL": "SELECT Description FROM Airports WHERE Code LIKE '%3'"
    },
    {
        "db_id": "airline",
        "question_en": "Give the code of the airport described as Driftwood Bay, AK: Driftwood Bay Airport.",
        "question_ar": "",
        "evidence_en": "Driftwood Bay, AK: Driftwood Bay Airport refers to Description = 'Driftwood Bay, AK: Driftwood Bay Airport';",
        "evidence_ar": "",
        "SQL": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport'"
    },
    {
        "db_id": "airline",
        "question_en": "How many cancelled flights are there?",
        "question_ar": "",
        "evidence_en": "cancelled flights refers to CANCELLED = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Airlines WHERE CANCELLED = 1"
    },
    {
        "db_id": "airline",
        "question_en": "List the tail number of flights that flew on August 17, 2018.",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; on August 17, 2018 refers to FL_DATE = '2018/8/17';",
        "evidence_ar": "",
        "SQL": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the origin of the flight that has the shortest actual elapsed time.",
        "question_ar": "",
        "evidence_en": "shortest actual elapsed time refers to MIN(ACTUAL_ELAPSED_TIME);",
        "evidence_ar": "",
        "SQL": "SELECT ORIGIN FROM Airlines ORDER BY ACTUAL_ELAPSED_TIME ASC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the date and tail number of flight with air carrier \"Ross Aviation Inc.: GWE\".",
        "question_ar": "",
        "evidence_en": "date of flight refers to FL_DATE; tail number of flight refers to TAIL_NUM; Ross Aviation Inc.: GWE refers to Description = 'Ross Aviation Inc.: GWE';",
        "evidence_ar": "",
        "SQL": "SELECT T1.FL_DATE, T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Ross Aviation Inc.: GWE'"
    },
    {
        "db_id": "airline",
        "question_en": "List the air carrier description and code of the flight with the shortest arrival time.",
        "question_ar": "",
        "evidence_en": "shortest arrival time refers to MIN(ARR_TIME);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description, T1.Code FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ARR_TIME ASC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "How many flights of air carrier called JetBlue Airways: B6 have 0 new arrival delay?",
        "question_ar": "",
        "evidence_en": "JetBlue Airways refers to Description = '%JetBlue Airway%'; 0 new arrival delay refers to ARR_DELAY_NEW = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%JetBlue Airways: B6%' AND T2.ARR_DELAY_NEW = 0"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the air carrier description of all flights arriving at Miami.",
        "question_ar": "",
        "evidence_en": "arriving at Miami refers to DEST = 'MIA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'MIA'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the air carrier's description of the cancelled flights?",
        "question_ar": "",
        "evidence_en": "cancelled flights refers to CANCELLED = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.CANCELLED = 1 GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Give the actual elapsed time of the flights with air carrier named Semo Aviation Inc.: SEM.",
        "question_ar": "",
        "evidence_en": "actual elapsed time refers to ACTUAL_ELAPSED_TIME; Semo Aviation Inc.: SEM. Refers to Description = 'Semo Aviation Inc.: SEM';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ACTUAL_ELAPSED_TIME FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Semo Aviation Inc.: SEM'"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights with air carrier described as Asap Air Inc.: ASP, what is the tail number of the flight with the longest departure delay?",
        "question_ar": "",
        "evidence_en": "Asap Air Inc.: ASP refers to Description = 'Asap Air Inc.: ASP'; tail number refers to TAIL_NUM; longest departure delay refers to MAX(DEP_DELAY);",
        "evidence_ar": "",
        "SQL": "SELECT T2.TAIL_NUM FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "List the air carrier's description of the flights with 0 departure delay.",
        "question_ar": "",
        "evidence_en": "0 departure delay refers to DEP_DELAY = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEP_DELAY = 0 GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the air carrier description of the flight with the highest actual elapsed time.",
        "question_ar": "",
        "evidence_en": "highest actual elapsed time refers to MAX(ACTUAL_ELAPSED_TIME);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1"
    },
    {
        "db_id": "airline",
        "question_en": "What are the destinations of the flights with air carrier description \"Southeast Alaska Airlines: WEB\"?",
        "question_ar": "",
        "evidence_en": "destinations refers to DEST; Southeast Alaska Airlines: WEB refers to Description = 'Southeast Alaska Airlines: WEB';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DEST FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southeast Alaska Airlines: WEB'"
    },
    {
        "db_id": "airline",
        "question_en": "From August 10 to August 20, 2018, how many cancelled flights of air carrier named Spirit Air Lines: NK are there?",
        "question_ar": "",
        "evidence_en": "From August 10 to August 20, 2018 refers to FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'; cancelled flights refers to CANCELLED = 1; Trans Southern Airways: 'Spirit Air Lines: NK' refers to Description = 'Spirit Air Lines: NK';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Spirit Air Lines: NK' AND T2.CANCELLED = 0 AND T2.FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the total number of flights that flew on August 2, 2018 with air carrier described as Horizon Air?",
        "question_ar": "",
        "evidence_en": "on August 2, 2018 refers to FL_DATE = '2018/8/2'; Horizon Air refers to Description which includs 'Horizon Air';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Horizon Air%' AND T2.FL_DATE = '2018/8/2'"
    },
    {
        "db_id": "airline",
        "question_en": "What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below?",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; Iscargo Hf: ICQ refers to Description = 'Iscargo Hf: ICQ'; arrival time of 1000 and below refers to ARR_TIME < = 1000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.TAIL_NUM FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_TIME <= 1000 AND T1.Description = 'Iscargo Hf: ICQ'"
    },
    {
        "db_id": "airline",
        "question_en": "List the flight date of flights with air carrier described as Profit Airlines Inc.: XBH which have an actual elapsed time below 100.",
        "question_ar": "",
        "evidence_en": "flight date refers to FL_DATE; Profit Airlines Inc.: XBH refers to Description = 'Profit Airlines Inc.: XBH'; actual elapsed time below 100 refers to ACTUAL_ELAPSED_TIME < 100;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FL_DATE FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME < 100 AND T1.Description = 'Profit Airlines Inc.: XBH'"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights with air carrier named Republic Airline, how many of the flights have departure delay of 30 minutes and above?",
        "question_ar": "",
        "evidence_en": "Republic Airline refers to Description which contains 'Republic Airline'; departure delay of 30 minutes and above refers to DEP_DELAY > 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Republic Airline%' AND T2.DEP_DELAY > 30"
    },
    {
        "db_id": "airline",
        "question_en": "What are the air carriers of the flights that flew on August 25, 2018 that have departure delay of -5?",
        "question_ar": "",
        "evidence_en": "on August 25, 2018 refers to FL_DATE = '2018/8/25'; departure delay of -5 refers to DEP_DELAY = -5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.FL_DATE = '2018/8/25' GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Provide the air carrier description of the flight with a tail number N922US from Phoenix.",
        "question_ar": "",
        "evidence_en": "tail number refers to TAIL_NUM; TAIL_NUM = 'N922US'; from Phoenix refers to ORIGIN = 'PHX';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.TAIL_NUM = 'N922US' AND T1.ORIGIN = 'PHX' GROUP BY T2.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Give the air carrier description of the flights that have an earlier arrival and departure.",
        "question_ar": "",
        "evidence_en": "earlier arrival and departure refers to ARR_DELAY < 0 AND DEP_DELAY < 0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights with air carrier \"Southwest Airlines Co.: WN\", provide the tail number of flights with an actual elapsed time lower than the 80% of the average actual elapsed time of listed flights.",
        "question_ar": "",
        "evidence_en": "Southwest Airlines Co.: WN refers to Description = 'Southwest Airlines Co.: WN'; tail number refers to TAIL_NUM; actual elapsed time lower than the 80% of the average actual elapsed time refers to ACTUAL_ELAPSED_TIME < (MULTIPLY AVG(ACTUAL_ELAPSED_TIME), 0.8);",
        "evidence_ar": "",
        "SQL": "SELECT T2.TAIL_NUM FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )"
    },
    {
        "db_id": "airline",
        "question_en": "List the air carrier's description with arrival time lower than the 40% of the average arrival time of flights that flew to Phoenix.",
        "question_ar": "",
        "evidence_en": "arrival time lower than the 40% of the average arrival time refers to ARR_TIME < MULTIPLY(AVG(ARR_TIME), 0.4); flew to Phoenix refers to DEST = 'PHX';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description"
    },
    {
        "db_id": "airline",
        "question_en": "Among the flights of the air carrier described as American Airlines, what is the percentage of the flights with earlier departure?",
        "question_ar": "",
        "evidence_en": "American Airlines can be found in Description which contains 'American Airlines'; percentage = MULTIPLY(DIVIDE(SUM(DEP_DELAY < 0), COUNT(DEP_DELAY)), 1.0); earlier departure refers to DEP_DELAY < 0;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.DEP_DELAY < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%American Airlines%'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books published by publisher ID 1929, how many of them have over 500 pages?",
        "question_ar": "",
        "evidence_en": "books have over 500 pages refers to num_pages > 500",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500"
    },
    {
        "db_id": "books",
        "question_en": "What is the publication date of the book with the most pages?",
        "question_ar": "",
        "evidence_en": "book with the most pages refers to Max(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT publication_date FROM book ORDER BY num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher of the book \"The Illuminati\"?",
        "question_ar": "",
        "evidence_en": "\"The Illuminati\" is the title of the book; name of publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published by publisher \"Thomas Nelson\"?",
        "question_ar": "",
        "evidence_en": "\"Thomas Nelson\" is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher that has published the most number of books?",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T1.book_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "Please give the title of the oldest book published by publisher \"Thomas Nelson\".",
        "question_ar": "",
        "evidence_en": "\"Thomas Nelson\" is the publisher_name; oldest book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "Among the books published by publisher \"Thomas Nelson\", how many of them have over 300 pages?",
        "question_ar": "",
        "evidence_en": "\"Thomas Nelson\" is the publisher_name; books with over 300 pages refers to num_pages > 300",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' AND T1.num_pages > 300"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher of the book with the most pages?",
        "question_ar": "",
        "evidence_en": "book with the most pages refers to Max(num_pages); name of publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books are in English?",
        "question_ar": "",
        "evidence_en": "books in English refers to language_name = 'English'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'English'"
    },
    {
        "db_id": "books",
        "question_en": "Please list the titles of all the books in British English.",
        "question_ar": "",
        "evidence_en": "\"British English\" is the language_name of the book",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'"
    },
    {
        "db_id": "books",
        "question_en": "What is the cheapest order price of the book \"The Little House\"?",
        "question_ar": "",
        "evidence_en": "\"The Little House\" is the title of book; cheapest order price refers to Min(price)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Little House'"
    },
    {
        "db_id": "books",
        "question_en": "Please list the titles of all the books that Lucas Wyldbore has ordered.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages?",
        "question_ar": "",
        "evidence_en": "books have over 300 pages refers to num_pages > 300",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore' AND T1.num_pages > 300"
    },
    {
        "db_id": "books",
        "question_en": "What is the total price of all the books ordered by Lucas Wyldbore?",
        "question_ar": "",
        "evidence_en": "total price refers to Sum(price)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'"
    },
    {
        "db_id": "books",
        "question_en": "How much money on average does Lucas Wyldbore spend on book orders?",
        "question_ar": "",
        "evidence_en": "average spend on book orders = AVG (price)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.price) / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books ordered by Lucas Wyldbore, what is the percentage of those books over $13?",
        "question_ar": "",
        "evidence_en": "books over $13 refers to price > 13; percentage = Divide (Sum (order_id where price > 13), Count (order_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.price > 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'"
    },
    {
        "db_id": "books",
        "question_en": "Which city does the address id 547 belong to?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT city FROM address WHERE address_id = 547"
    },
    {
        "db_id": "books",
        "question_en": "How many orders has Cordy Dumbarton made?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Cordy' AND T1.last_name = 'Dumbarton'"
    },
    {
        "db_id": "books",
        "question_en": "List the title of the earliest published Japanese book.",
        "question_ar": "",
        "evidence_en": "Japanese book refers to language_name = 'Japanese'; earliest published refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "For the publisher which published the most books, show its name.",
        "question_ar": "",
        "evidence_en": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published by Kensington?",
        "question_ar": "",
        "evidence_en": "\"Kensington\" is the publisher_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.book_id) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Kensington'"
    },
    {
        "db_id": "books",
        "question_en": "Which language was book id 1405 written in?",
        "question_ar": "",
        "evidence_en": "language written in refers to language_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.book_id = 1405"
    },
    {
        "db_id": "books",
        "question_en": "Which customer has made the most orders? Show his/her full name.",
        "question_ar": "",
        "evidence_en": "most order refers to Max(Count(order_id)); customer refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "Name the book title of the bestseller.",
        "question_ar": "",
        "evidence_en": "book title refers to title; best sellers refers to title where Max(count(order_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.title ORDER BY COUNT(T1.title) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books did David Foster Wallace write?",
        "question_ar": "",
        "evidence_en": "\"David Foster Wallace\" is the author_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.title) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Foster Wallace'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders does the book \"O Xará\" have?",
        "question_ar": "",
        "evidence_en": "\"O Xará\" is the title of the book",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xará'"
    },
    {
        "db_id": "books",
        "question_en": "Which country does Malina Johnson live in?",
        "question_ar": "",
        "evidence_en": "country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Malina' AND T1.last_name = 'Johnson' AND T2.status_id = 2"
    },
    {
        "db_id": "books",
        "question_en": "Give the number of Ukrainian addresses in the database.",
        "question_ar": "",
        "evidence_en": "Ukrainian address refers to country_name = 'Ukraine'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'Ukraine'"
    },
    {
        "db_id": "books",
        "question_en": "Which country does Žirovnica city belong to?",
        "question_ar": "",
        "evidence_en": "\"Žirovnica\" is the city; country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Žirovnica'"
    },
    {
        "db_id": "books",
        "question_en": "Calculate the percentage of the International shipping orders on 2022/11/10.",
        "question_ar": "",
        "evidence_en": "International shipping order refers to method_name = 'International'; orders on 2022/11/10 refers to order_date LIKE '2022-11-10%'; percentage = Divide (Sum(order_id  where method_name = 'International'), Count(order_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipping_method AS T1 INNER JOIN cust_order AS T2 ON T1.method_id = T2.shipping_method_id WHERE T2.order_date LIKE '2022-11-10%'"
    },
    {
        "db_id": "books",
        "question_en": "What is the average number of pages of David Coward's books?",
        "question_ar": "",
        "evidence_en": "number of pages refers to num_pages; average = Divide (Sum(num_pages), Count(book_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Coward'"
    },
    {
        "db_id": "books",
        "question_en": "What is the cost of the slowest and least expensive shipping method?",
        "question_ar": "",
        "evidence_en": "slowest and least expesive method refers to shipping_method = 'Standard'",
        "evidence_ar": "",
        "SQL": "SELECT method_name FROM shipping_method ORDER BY cost ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the title of the first book that was published in 1900?",
        "question_ar": "",
        "evidence_en": "published in 1900 refers to publication_date LIKE '1900%'; first book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1900' ORDER BY publication_date LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the full name of the customer who owns the \"aalleburtonkc@yellowbook.com\" e-mail address?",
        "question_ar": "",
        "evidence_en": "\"aalleburtonkc@yellowbook.com\" is the email of customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders in 2022 have Iran as their destinations?",
        "question_ar": "",
        "evidence_en": "Iran as their destination refers to country_name = 'Iran'; orders in 2022 refers to order_date LIKE '2022%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id INNER JOIN cust_order AS T3 ON T3.dest_address_id = T2.address_id WHERE T1.country_name = 'Iran' AND STRFTIME('%Y', T3.order_date) = '2022'"
    },
    {
        "db_id": "books",
        "question_en": "Among Daisey Lamball's orders, how many were shipped via International shipping?",
        "question_ar": "",
        "evidence_en": "via international shipping refers to method_name = 'International'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Daisey' AND T1.last_name = 'Lamball' AND T3.method_name = 'International'"
    },
    {
        "db_id": "books",
        "question_en": "What is the full name of the customer who ordered the most books of all time?",
        "question_ar": "",
        "evidence_en": "customer who ordered the most book refers to customer_id where Max(count(order_id)); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many orders did Antonia Poltun return?",
        "question_ar": "",
        "evidence_en": "order returned refers to status_value = 'Returned'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.status_value = 'Returned' AND T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'"
    },
    {
        "db_id": "books",
        "question_en": "Which shipping method is preferred by customers the most?",
        "question_ar": "",
        "evidence_en": "shipping method preferred the most by customers refers to method_id where Max(Count(method_id)); which shipping method refers to method_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many orders were delivered in 2021?",
        "question_ar": "",
        "evidence_en": "delivered refers to status_value = 'Delivered'; in 2021 refers to status_date LIKE '2021%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2021'"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the first book written by J.K Rowling?",
        "question_ar": "",
        "evidence_en": "\"J.K Rowling\" is the author_name; first published book refers to book_id where Min(publication_date); name of the book refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'J.K. Rowling' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books did A.R. Braunmuller write?",
        "question_ar": "",
        "evidence_en": "\"A.R. Braunmuller\" is the author_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher who published Agatha Christie's first book?",
        "question_ar": "",
        "evidence_en": "\"Agatha Christie\" is the author_name; name of publisher refers to publisher_name; first book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "List all the names of the books written by Danielle Steel.",
        "question_ar": "",
        "evidence_en": "\"Danielle Steel\" is the author_name; name of books refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Danielle Steel'"
    },
    {
        "db_id": "books",
        "question_en": "How many books by William Shakespeare were published by Penguin Classics?",
        "question_ar": "",
        "evidence_en": "\"William Shakespeare\" is the author_name; \"Penguin Classics\" is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'William Shakespeare' AND T4.publisher_name = 'Penguin Classics'"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher that published the most books?",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the total shipping cost of all the orders made by Page Holsey? Indicate how many of the said orders were ordered in 2022.",
        "question_ar": "",
        "evidence_en": "shipping cost refers to cost; ordered in 2022 refers to order_date LIKE '2022%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.cost) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Page' AND T1.last_name = 'Holsey' AND STRFTIME('%Y', T2.order_date) = '2022'"
    },
    {
        "db_id": "books",
        "question_en": "What is the name of the publisher with publisher ID 22?",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT publisher_name FROM publisher WHERE publisher_id = 22"
    },
    {
        "db_id": "books",
        "question_en": "How many of the books authored by Al Gore have less than 400 pages?",
        "question_ar": "",
        "evidence_en": "\"AI Gore\" is the author_name; have less than 400 pages refers to num_pages < 400",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Al Gore' AND T1.num_pages < 400"
    },
    {
        "db_id": "books",
        "question_en": "List the author's and publisher's name of the book published on July 10, 1997.",
        "question_ar": "",
        "evidence_en": "author's name refers to author_name; publisher's name refers to publisher_name; book published on July 10, 1997 refers to publication_date LIKE '1997-07-10'",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name, T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T1.publication_date = '1997-07-10'"
    },
    {
        "db_id": "books",
        "question_en": "What is the language of the book with ISBN 23755004321?",
        "question_ar": "",
        "evidence_en": "\"23755004321\" is the isbn13; language refers to language_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.isbn13 = 23755004321"
    },
    {
        "db_id": "books",
        "question_en": "What is the title of the most expensive book?",
        "question_ar": "",
        "evidence_en": "most expensive book refers to Max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "Calculate the total price of books ordered by customer named Lucas Wyldbore.",
        "question_ar": "",
        "evidence_en": "total price refers to Sum(price); full name is composed of first name, last name",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'"
    },
    {
        "db_id": "books",
        "question_en": "List the ISBN of the book published in Spanish.",
        "question_ar": "",
        "evidence_en": "\"Spanish\" is the language_name; ISBN refers to isbn13",
        "evidence_ar": "",
        "SQL": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Spanish'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books that cost less than 1 dollar, how many were published by Berkley Trade?",
        "question_ar": "",
        "evidence_en": "book cost less than 1 dollar refers to price < 1; 'Berkley Trade' is the publisher_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM publisher AS T1 INNER JOIN book AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN order_line AS T3 ON T3.book_id = T2.book_id WHERE T1.publisher_name = 'Berkley' AND T3.price < 1"
    },
    {
        "db_id": "books",
        "question_en": "List the title of the books purchased by the customer named Zia Roizin.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Zia' AND T4.last_name = 'Roizin'"
    },
    {
        "db_id": "books",
        "question_en": "Who authored the book with greatest number of pages?",
        "question_ar": "",
        "evidence_en": "greatest number of pages refers to Max(num_pages); who authored refers to author_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "List the email of customers that bought the book titled Switch on the Night.",
        "question_ar": "",
        "evidence_en": "\"Switch on the Night\" is the title",
        "evidence_ar": "",
        "SQL": "SELECT T4.email FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Switch on the Night'"
    },
    {
        "db_id": "books",
        "question_en": "List the author's name of the books published by Abrams.",
        "question_ar": "",
        "evidence_en": "\"Abrams\" is the publisher_name; author's name refers to author_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T4.publisher_name = 'Abrams'"
    },
    {
        "db_id": "books",
        "question_en": "What is the publisher name of the book titled The Illuminati?",
        "question_ar": "",
        "evidence_en": "\"The Illuminati\" is the title of book",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'"
    },
    {
        "db_id": "books",
        "question_en": "In books authored by Abraham Lincoln, what is the percentage of the books published in 1992?",
        "question_ar": "",
        "evidence_en": "\"Abraham Lincoln\" is the author_name; published in 1992 refers to publication_date LIKE '1992%'; percentage = Divide (Sum(publication_date LIKE '1992%'), Count(publication_date)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books published in 2004, list the name of the publisher of books with number of pages greater than 70% of the average number of pages of all books.",
        "question_ar": "",
        "evidence_en": "published in 2004 refers to publication_date LIKE '2004%'; books with number of pages greater than 70% of the average number of pages refers to num_pages > Multiply(Avg(num_pages), 0.7); name of publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE STRFTIME('%Y', T1.publication_date) = '2004' AND T1.num_pages * 100 > ( SELECT AVG(num_pages) FROM book ) * 70"
    },
    {
        "db_id": "books",
        "question_en": "Provide the contact email of Moss Zarb.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb'"
    },
    {
        "db_id": "books",
        "question_en": "Name the streets in Dallas.",
        "question_ar": "",
        "evidence_en": "\"Dallas\" is the city; streets refers to street_name",
        "evidence_ar": "",
        "SQL": "SELECT street_name FROM address WHERE city = 'Dallas'"
    },
    {
        "db_id": "books",
        "question_en": "Which books were released by Orson Scott Card in 2001?",
        "question_ar": "",
        "evidence_en": "\"Orson Scott Card\" is the author_name; released in 2001 refers to publication_date LIKE '2001%'; books refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card' AND STRFTIME('%Y', T1.publication_date) = '2001'"
    },
    {
        "db_id": "books",
        "question_en": "Count the number of books written by Orson Scott Card.",
        "question_ar": "",
        "evidence_en": "\"Orson Scott Card\" is the author_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the authors and titles of the books which have more than 3000 pages.",
        "question_ar": "",
        "evidence_en": "authors refers to author_name; more than 3000 pages refers to num_pages > 3000",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name, T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages > 3000"
    },
    {
        "db_id": "books",
        "question_en": "Who wrote \"The Prophet\"?",
        "question_ar": "",
        "evidence_en": "\"The Prophet\" is the title of the book: who wrote refers to author_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Prophet'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published by Ace Hardcover?",
        "question_ar": "",
        "evidence_en": "\"Ace Hardcover\" is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Ace Hardcover'"
    },
    {
        "db_id": "books",
        "question_en": "Which publisher published Barry Eisler's book?",
        "question_ar": "",
        "evidence_en": "\"Barry Eisler\" is the author_name; publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published in Japanese?",
        "question_ar": "",
        "evidence_en": "published in Japanese refers to language_name = 'Japanese'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.book_id) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'"
    },
    {
        "db_id": "books",
        "question_en": "Sum the total price of the orders for The Prophet book.",
        "question_ar": "",
        "evidence_en": "\"The Prophet\" is the title of the book: total price refers to Sum(price)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id WHERE T2.title = 'The Prophet'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the number of orders by Daisey Lamball in 2021.",
        "question_ar": "",
        "evidence_en": "in 2021 refers to order_date LIKE '2021%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'"
    },
    {
        "db_id": "books",
        "question_en": "How many customers are from Australia?",
        "question_ar": "",
        "evidence_en": "\"Australia\" is the country_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address AS T2 ON T2.address_id = T1.address_id INNER JOIN country AS T3 ON T3.country_id = T2.country_id WHERE T3.country_name = 'Australia'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders were delivered in December 2019?",
        "question_ar": "",
        "evidence_en": "delivered refers to status_value = 'Delivered'; in December 2019 refers to status_date LIKE '2019-12%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2019'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the customers' names who ordered the Fantasmas.",
        "question_ar": "",
        "evidence_en": "\"Fantasmas\" is the title of the book; customer names refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Fantasmas'"
    },
    {
        "db_id": "books",
        "question_en": "How many percent of orders in 2020 used international shipping?",
        "question_ar": "",
        "evidence_en": "international shipping refers to method_name = 'International'; orders in 2020 refers to order_date = '2020%'; percentage = Divide (Sum(method_name = 'International'), Count(order_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'"
    },
    {
        "db_id": "books",
        "question_en": "List all the authors named \"George\".",
        "question_ar": "",
        "evidence_en": "author named 'George' refers to author_name = 'George%'",
        "evidence_ar": "",
        "SQL": "SELECT author_name FROM author WHERE author_name LIKE 'George%'"
    },
    {
        "db_id": "books",
        "question_en": "Which year has the most customer orders?",
        "question_ar": "",
        "evidence_en": "year with the most customer orders refers to Max(count(order_id))",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%Y', order_date) FROM cust_order GROUP BY strftime('%Y', order_date) ORDER BY COUNT(strftime('%Y', order_date)) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the average price for the order line?",
        "question_ar": "",
        "evidence_en": "average price refers to AVG(price)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(price) FROM order_line"
    },
    {
        "db_id": "books",
        "question_en": "List all of the books that were published in 1995.",
        "question_ar": "",
        "evidence_en": "published in 1995 refers to publication_date LIKE '1995%'; ; list of book refers to title",
        "evidence_ar": "",
        "SQL": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'"
    },
    {
        "db_id": "books",
        "question_en": "What is the most common domain for the email address among all the customers?",
        "question_ar": "",
        "evidence_en": "most common domain for the email refers to Max(Count(SUBSTR(email, CHARINDEX('@', email) + 1, length(email) - charindex('@', email))))",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) AS ym FROM customer GROUP BY SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many publishers have the word \"book\" in their name?",
        "question_ar": "",
        "evidence_en": "publisher have the word 'book' refers to publisher_name LIKE '%book%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%'"
    },
    {
        "db_id": "books",
        "question_en": "Which language is the rarest among all the books?",
        "question_ar": "",
        "evidence_en": "language written in refers to language_name; rarest refers to Min(Count(book_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "List all the order dates for the customer named \"Adrian Kunzelmann\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.order_date FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Adrian' AND T4.last_name = 'Kunzelmann'"
    },
    {
        "db_id": "books",
        "question_en": "How many addresses are from the Philippines?",
        "question_ar": "",
        "evidence_en": "\"Philippines\" is the country_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'"
    },
    {
        "db_id": "books",
        "question_en": "Who is the author who wrote the most books?",
        "question_ar": "",
        "evidence_en": "author refers to author_name; who wrote the most book refers to Max(Count(author_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.author_name FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_name ORDER BY COUNT(T2.author_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What are the books published by \"Harper Collins\"?",
        "question_ar": "",
        "evidence_en": "\"Harper Collins\" is the publisher_name; books refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Harper Collins'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders were returned in the year 2020?",
        "question_ar": "",
        "evidence_en": "returned refers to status_value = 'Returned'; in the year 2020 refers to status_date LIKE '%2020%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2020'"
    },
    {
        "db_id": "books",
        "question_en": "What is the second-least common method of shipping?",
        "question_ar": "",
        "evidence_en": "method of shipping refers to method_name; least method refers to Min(Count(method_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1"
    },
    {
        "db_id": "books",
        "question_en": "How many of the customer addresses are inactive?",
        "question_ar": "",
        "evidence_en": "addresses are inactive refers to address_status = 'Inactive'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T1.status_id = T2.status_id WHERE T2.address_status = 'Inactive'"
    },
    {
        "db_id": "books",
        "question_en": "What is the book with the most orders?",
        "question_ar": "",
        "evidence_en": "books refers to title; the most orders refers to Max(Count(order_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id GROUP BY T2.title ORDER BY COUNT(T1.book_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the address that received the most orders?",
        "question_ar": "",
        "evidence_en": "address refers to street_name, city; received the most orders refers to Max(count(dest_address_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name, T2.city FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T2.street_number, T2.street_name, T2.city ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How much time does it take to update the status of order \"2398\"?",
        "question_ar": "",
        "evidence_en": "\"2398\" is the order_id; time =   Subtract(strftime('%Y', status_date), strftime('%Y', order_date)) AS \"year\" , Subtract(strftime('%m', status_date), strftime('%m', order_date)) AS \"month\", Subtract (strftime('%d', status_date), strftime('%d', order_date)) AS \"day\"",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.status_date) - strftime('%J', T1.order_date) FROM cust_order AS T1 INNER JOIN order_history AS T2 ON T1.order_id = T2.order_id WHERE T1.order_id = 2398"
    },
    {
        "db_id": "books",
        "question_en": "Which customer has the most addresses?",
        "question_ar": "",
        "evidence_en": "customer refers to first_name, last_name; the most address refers to Max(count(address_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.customer_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What percentage of the total prices of all orders are shipped internationally?",
        "question_ar": "",
        "evidence_en": "shipped internationally refers to method_name = 'International'; percentage = Divide (Sum(price where method_name = 'International'), Sum(price)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id"
    },
    {
        "db_id": "books",
        "question_en": "List all the authors who wrote fewer pages than the average.",
        "question_ar": "",
        "evidence_en": "author refers to author_name; who wrote fewer pages than the average refers to num_pages < AVG(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages < ( SELECT AVG(num_pages) FROM book )"
    },
    {
        "db_id": "books",
        "question_en": "Other than zero, what is the lowest price paid by a customer for an order?",
        "question_ar": "",
        "evidence_en": "other than 0 refers to price ! = 0; lowest price paid refers to Min(price)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(price) FROM order_line WHERE price <> 0"
    },
    {
        "db_id": "books",
        "question_en": "How many customers have an address that is located in the city of Villeneuve-la-Garenne?",
        "question_ar": "",
        "evidence_en": "\"Villeneuve-la-Garenne\" is the city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(address_id) FROM address WHERE city = 'Villeneuve-la-Garenne'"
    },
    {
        "db_id": "books",
        "question_en": "How many authors are named Adam?",
        "question_ar": "",
        "evidence_en": "authors named Adam refers to author_name LIKE 'Adam'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam%'"
    },
    {
        "db_id": "books",
        "question_en": "How many customers use a Yahoo! Mail e-mail address?",
        "question_ar": "",
        "evidence_en": "Yahoo! Mail e-mail address refers to email LIKE '%@yahoo.com'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer WHERE email LIKE '%@yahoo.com'"
    },
    {
        "db_id": "books",
        "question_en": "What are the city addresses of the customers located in the United States of America?",
        "question_ar": "",
        "evidence_en": "\"United States of America\" is the country_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders did Marcelia Goering place in 2021 that uses the Priority Shipping method?",
        "question_ar": "",
        "evidence_en": "in 2021 refers to substr(order_date, 1, 4) = '2021'; priority shipping method refers to method_name = 'Priority'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Marcelia' AND T1.last_name = 'Goering' AND STRFTIME('%Y', T2.order_date) = '2021' AND T3.method_name = 'Priority'"
    },
    {
        "db_id": "books",
        "question_en": "Which books have the most expensive price?",
        "question_ar": "",
        "evidence_en": "most expensive book refers to Max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many customers ordered the book titled \"Anleitung zum Zickigsein\"",
        "question_ar": "",
        "evidence_en": "\"Anleitung zum Zickigsein\" is the title of the book",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Anleitung zum Zickigsein'"
    },
    {
        "db_id": "books",
        "question_en": "What is the most expensive price paid by a customer for the book \"Bite Me If You Can (Argeneau #6)\"?",
        "question_ar": "",
        "evidence_en": "\"Bite Me If You Can (Argeneau #6)\" is the title of the book; most expensive price refers to Max(price)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Bite Me If You Can (Argeneau #6)'"
    },
    {
        "db_id": "books",
        "question_en": "How many customers ordered the oldest book?",
        "question_ar": "",
        "evidence_en": "oldest book refers to Min(publiation_date)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.publication_date ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "List all the titles of the Spanish books published by Alfaguara.",
        "question_ar": "",
        "evidence_en": "\"Spanish\" is the language_name; 'Alfaguara' is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title"
    },
    {
        "db_id": "books",
        "question_en": "How many customers ordered Stephen King's first book?",
        "question_ar": "",
        "evidence_en": "\"Stephen King\" is the author_name; first book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What are the languages of the first two published books?",
        "question_ar": "",
        "evidence_en": "first two published book refers to Min(publication_date); language refers to language_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id ORDER BY T1.publication_date ASC LIMIT 2"
    },
    {
        "db_id": "books",
        "question_en": "Who published the book \"The Secret Garden\"?",
        "question_ar": "",
        "evidence_en": "\"The Secret Garden\" is the title of the book; who published the book refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books that were published by Scholastic, how many were written by J.K Rowling?",
        "question_ar": "",
        "evidence_en": "\"J.K Rowling\" is the author_name; 'Scholastic' is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'"
    },
    {
        "db_id": "books",
        "question_en": "What are the names of all the publishers who have published at least 30 books?",
        "question_ar": "",
        "evidence_en": "published at least 30 books refers to Count(book_id) > = 30",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name HAVING COUNT(T2.publisher_name) >= 30"
    },
    {
        "db_id": "books",
        "question_en": "Indicate the last number of each street.",
        "question_ar": "",
        "evidence_en": "street refers to street_name; last number of each street refers to Substr (street_number, -1)",
        "evidence_ar": "",
        "SQL": "SELECT street_number FROM address"
    },
    {
        "db_id": "books",
        "question_en": "Indicate the complete address of customers located in Lazaro Cardenas.",
        "question_ar": "",
        "evidence_en": "complete address refers to street_number, street_name, city, country; \"Lazaro Cardenas\" is the city",
        "evidence_ar": "",
        "SQL": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'"
    },
    {
        "db_id": "books",
        "question_en": "Indicate the ISBN13 of all the books that have less than 140 pages and more than 135.",
        "question_ar": "",
        "evidence_en": "ISBN13 refers to isbn13; less than 140 pages and more than 135 refers to num_pages > 135 AND num_pages < 140;",
        "evidence_ar": "",
        "SQL": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135"
    },
    {
        "db_id": "books",
        "question_en": "Indicate the title of the six books with the greatest potential value as collectibles.",
        "question_ar": "",
        "evidence_en": "greatest potential value refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM book ORDER BY publication_date ASC LIMIT 6"
    },
    {
        "db_id": "books",
        "question_en": "How many books were ordered in the last month of the year 2020?",
        "question_ar": "",
        "evidence_en": "ordered in last month of the year 2020 refers to Substr(order_date, 1, 7) = '2020-12'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM cust_order WHERE order_date LIKE '2020-12%'"
    },
    {
        "db_id": "books",
        "question_en": "Indicate the full name of all customers whose last name begins with the letter K.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; last name begin with the letter 'K' refers to last_name LIKE 'K%'",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%'"
    },
    {
        "db_id": "books",
        "question_en": "In which cities are the customers of Costa Rica located?",
        "question_ar": "",
        "evidence_en": "\"Costa Rica\" is the country_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Costa Rica'"
    },
    {
        "db_id": "books",
        "question_en": "Which customer addresses are no longer active?",
        "question_ar": "",
        "evidence_en": "no longer active refers to address_status = 'Inactive'; customer address refers to street_number, street_name, city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.street_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN address_status AS T3 ON T3.status_id = T2.status_id WHERE T3.address_status = 'Inactive'"
    },
    {
        "db_id": "books",
        "question_en": "What is the full name of the customers who live in Baiyin city?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'Baiyin' is the city",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.city = 'Baiyin'"
    },
    {
        "db_id": "books",
        "question_en": "What is the email of the customers who place their orders with priority method?",
        "question_ar": "",
        "evidence_en": "priority method refers to method_name = 'Priority'",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T3.method_name = 'Priority'"
    },
    {
        "db_id": "books",
        "question_en": "On what date did the customers who live at number 460 of their respective streets place their orders?",
        "question_ar": "",
        "evidence_en": "live at number 460 refers to street_number = '460'; date the customers placed their orders refers to order_date",
        "evidence_ar": "",
        "SQL": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id WHERE T2.street_number = 460"
    },
    {
        "db_id": "books",
        "question_en": "Identify by their id all the orders that have been cancelled.",
        "question_ar": "",
        "evidence_en": "have been cancelled refers to status_value = 'cancelled'; id refers to order_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.order_id FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled'"
    },
    {
        "db_id": "books",
        "question_en": "What is the status of the orders placed on 04/10/2022?",
        "question_ar": "",
        "evidence_en": "placed on 04/10/2022 refers to SUBSTR(order_date, 1, 10) = '2022-04-10'; status of order refers to status_value",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.status_value FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id WHERE T3.order_date LIKE '2022-04-10%'"
    },
    {
        "db_id": "books",
        "question_en": "What is the highest price at which a customer bought the book 'The Prophet'?",
        "question_ar": "",
        "evidence_en": "\"The Prophet\" is the title of the book; highest price refers to Max(price)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Prophet'"
    },
    {
        "db_id": "books",
        "question_en": "On what dates were books ordered at a price of 16.54?",
        "question_ar": "",
        "evidence_en": "price of 16.54 refers to price = 16.54; dates the book ordered refers to order_date",
        "evidence_ar": "",
        "SQL": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54"
    },
    {
        "db_id": "books",
        "question_en": "List the titles of all the books that Peter H. Smith wrote.",
        "question_ar": "",
        "evidence_en": "\"Peter H.Smit\" is the author_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Peter H. Smith'"
    },
    {
        "db_id": "books",
        "question_en": "How many books under 300 pages has HarperCollins Publishers published?",
        "question_ar": "",
        "evidence_en": "under 300 pages refers to num_pages < 300; 'HarperCollins Publishers\" is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'HarperCollins Publishers' AND T1.num_pages < 300"
    },
    {
        "db_id": "books",
        "question_en": "How many books have been published in Japanese?",
        "question_ar": "",
        "evidence_en": "in Japanese refers to language_name = 'Japanese",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'"
    },
    {
        "db_id": "books",
        "question_en": "What is the average number of pages in the books written by Jennifer Crusie?",
        "question_ar": "",
        "evidence_en": "\"Jennifer Crusie\" is the author_name; average number of pages refers to AVG(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Jennifer Crusie'"
    },
    {
        "db_id": "books",
        "question_en": "What percentage of the orders placed by Kaleena were shipped by the international method?",
        "question_ar": "",
        "evidence_en": "shipped by international method refers to method_name = 'International'; percentage = Divide (Sum(method_name = 'International'), Count(method_name)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Kaleena'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the full name of the customers who have ordered the book The Sorrows of Young Werther.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'The Sorrows of Young Werther' is the title of the book",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'The Sorrows of Young Werther'"
    },
    {
        "db_id": "books",
        "question_en": "List every book that Ursola Purdy has ordered.",
        "question_ar": "",
        "evidence_en": "book refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Ursola' AND T4.last_name = 'Purdy'"
    },
    {
        "db_id": "books",
        "question_en": "Who is the author of the book with the biggest page count?",
        "question_ar": "",
        "evidence_en": "author refers to author_name, biggest page count refers to Max(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books written by Akira Watanabe are available on Gravity?",
        "question_ar": "",
        "evidence_en": "\"Akira Watanabe\" is the author_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the full address of Ursola Purdy.",
        "question_ar": "",
        "evidence_en": "full address refers to street_number, street_name, city, country_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'"
    },
    {
        "db_id": "books",
        "question_en": "Who is the author of the book The Mystery in the Rocky Mountains?",
        "question_ar": "",
        "evidence_en": "author refers to author_name; 'The Mystery in the Rocky Mountains' is the title of the book",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Mystery in the Rocky Mountains'"
    },
    {
        "db_id": "books",
        "question_en": "Identify the publisher of the book Girls' Night In.",
        "question_ar": "",
        "evidence_en": "\"Girls' Night In\" is the title of the book; publisher is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Girls'' Night In'"
    },
    {
        "db_id": "books",
        "question_en": "Name the publisher of the oldest book.",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name;  oldest book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "Identify the cost difference between Priority and Express shipping methods.",
        "question_ar": "",
        "evidence_en": "\"Priority\" and \"Express\" are both method_name; cost difference = Subtract (Sum(cost where method_name = 'Express'), Sum(cost where method_name 'Priority'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END) - SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) FROM shipping_method"
    },
    {
        "db_id": "books",
        "question_en": "How many orders have been cancelled in 2022?",
        "question_ar": "",
        "evidence_en": "cancelled refers to status_value = 'Cancelled'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled' AND STRFTIME('%Y', T2.status_date) = '2022'"
    },
    {
        "db_id": "books",
        "question_en": "List all the books published by BBC Audiobooks.",
        "question_ar": "",
        "evidence_en": "\"BBC Audiobooks\" refers to publisher_name; books refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'BBC Audiobooks'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published in 2017?",
        "question_ar": "",
        "evidence_en": "published in 2017 refers to Substr(publication_date,1, 4) = '2017'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book WHERE STRFTIME('%Y', publication_date) = '2017'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the International Standard Book Number of the book The Mystery in the Rocky Mountains.",
        "question_ar": "",
        "evidence_en": "International Standard Book Number refers to isbn13; 'The Mystery in the Rocky Mountains' is the title of the book",
        "evidence_ar": "",
        "SQL": "SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains'"
    },
    {
        "db_id": "books",
        "question_en": "Among all orders updated in 2022, identify the percentage that has been returned.",
        "question_ar": "",
        "evidence_en": "order updated in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'; has been returned refers to status_value = 'Returned'; percentage = Divide (Count(status_value = 'Returned'), Count(status_value)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.status_value = 'Returned' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE STRFTIME('%Y', T2.status_date) = '2022'"
    },
    {
        "db_id": "books",
        "question_en": "Among all addresses provided by customers, identify the percentage that are not in use anymore.",
        "question_ar": "",
        "evidence_en": "address not in use refers to address_status = 'Inactive'; percentage = Divide (Count(address_status = 'Inactive'), Count(address_status)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.address_status = 'Inactive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T2.status_id = T1.status_id"
    },
    {
        "db_id": "books",
        "question_en": "How many pages does 'Seaward' have?",
        "question_ar": "",
        "evidence_en": "\"Seaward\" is the title of the book; pages refers to num_pages",
        "evidence_ar": "",
        "SQL": "SELECT num_pages FROM book WHERE title = 'Seaward'"
    },
    {
        "db_id": "books",
        "question_en": "Who is the author of First Things First?",
        "question_ar": "",
        "evidence_en": "\"First Things First\" is the title of the book; author refers to author_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'First Things First'"
    },
    {
        "db_id": "books",
        "question_en": "List all books authored by Tom Clancy.",
        "question_ar": "",
        "evidence_en": "\"Tom Clancy\" is the author_name; books refers title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'"
    },
    {
        "db_id": "books",
        "question_en": "Which book by Hirohiko Araki was published on 6/6/2006?",
        "question_ar": "",
        "evidence_en": "\"Hirohiko Araki\" is the author_name; on 6/6/2006 refers to publication_date = '2006-06-06'; which book refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Hirohiko Araki' AND T1.publication_date = '2006-06-06'"
    },
    {
        "db_id": "books",
        "question_en": "Who is the publisher of Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic?",
        "question_ar": "",
        "evidence_en": "\"Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic\" is the title of the book; publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'"
    },
    {
        "db_id": "books",
        "question_en": "List all books published by ADV Manga.",
        "question_ar": "",
        "evidence_en": "\"ADV Manga\" is the publisher_name; books refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'"
    },
    {
        "db_id": "books",
        "question_en": "Write the full name of the customers whose address is at 55 Dorton Pass, Huangqiao.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; '55' is the street_number, 'Dorton Pass' is the street_name; 'Huangqiao' is the city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.street_number = 55 AND T3.street_name = 'Dorton Pass' AND T3.city = 'Huangqiao'"
    },
    {
        "db_id": "books",
        "question_en": "Which country is 9 Green Ridge Point, Arendal located at?",
        "question_ar": "",
        "evidence_en": "\"9\" is the street_number; 'Green Reidge Point' is the street_name; 'Arendal' is the city",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'"
    },
    {
        "db_id": "books",
        "question_en": "List 10 addresses located in Poland.",
        "question_ar": "",
        "evidence_en": "\"Polan\" is the country_name; address refers to street_number, street_name, city",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10"
    },
    {
        "db_id": "books",
        "question_en": "What is the shipping method ordered by Nicolette Sadler at 6/29/2020 7:40:07 PM?",
        "question_ar": "",
        "evidence_en": "ordered at 6/29/2020 7:40:07 PM refers to order_date = '2020-06-29 19:40:07'; shipping method refers to method_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.method_name FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id WHERE T2.first_name = 'Nicolette' AND T2.last_name = 'Sadler' AND T1.order_date = '2020-06-29 19:40:07'"
    },
    {
        "db_id": "books",
        "question_en": "List all books written in Arabic.",
        "question_ar": "",
        "evidence_en": "\"Arabic\" is the language_name; book refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Arabic'"
    },
    {
        "db_id": "books",
        "question_en": "Which language is 'El plan infinito' written in?",
        "question_ar": "",
        "evidence_en": "\"El plan infinito\" is the title of the book; language refers to language_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'El plan infinito'"
    },
    {
        "db_id": "books",
        "question_en": "What percentage of books written by Hirohiko make up the number of books published by Viz Media?",
        "question_ar": "",
        "evidence_en": "\"Hirohiko Araki\" is the author_name; 'Viz Media' is the publisher_name; percentage = Divide (Count(author_name = 'Hirohiko Araki'), Count(book_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'"
    },
    {
        "db_id": "books",
        "question_en": "What is the average number of book pages written by Zilpha Keatley Snyder?",
        "question_ar": "",
        "evidence_en": "\"Zilpha Keatley Snyder\" is the author_name; average number of book pages refers to AVG(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.num_pages) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'Zilpha Keatley Snyder'"
    },
    {
        "db_id": "books",
        "question_en": "What is the full name of customer with email ckupis4@tamu.edu?",
        "question_ar": "",
        "evidence_en": "\"ckupis4@tamu.edu\" is the email of customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'"
    },
    {
        "db_id": "books",
        "question_en": "Which book has the most number of pages?",
        "question_ar": "",
        "evidence_en": "books with the most number of pages refers to Max(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM book ORDER BY num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "How many books were written by author A.J. Ayer?",
        "question_ar": "",
        "evidence_en": "\"A.J. Ayer\" is the author_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = 'A.J. Ayer'"
    },
    {
        "db_id": "books",
        "question_en": "Name the title of books written by author A.J.Ayer.",
        "question_ar": "",
        "evidence_en": "\"A.J. Ayer\" is the author_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'A.J. Ayer'"
    },
    {
        "db_id": "books",
        "question_en": "The book name \"The Season: A Candid Look at Broadway\" was published by which publisher?",
        "question_ar": "",
        "evidence_en": "\"The Season: A Candid Look at Broadway\" is the  title of the book; publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'"
    },
    {
        "db_id": "books",
        "question_en": "What is the average of English books among all books published by Carole Marsh Mysteries?",
        "question_ar": "",
        "evidence_en": "English book refers to language_name = 'English'; 'Carole Marsh Mysteries' is the publisher_name; average = Divide (Count(language_name = 'English'), Count(book_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Carole Marsh Mysteries'"
    },
    {
        "db_id": "books",
        "question_en": "Name the title of the book with the most number of pages that was published from 1990 to 2000 by publisher Free Press.",
        "question_ar": "",
        "evidence_en": "books with the most number of pages refers to Max(num_pages); published from 1990 to 2000 refers to SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'; 'Free Press' is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the order price of the book \"The Servant Leader\" in 2003?",
        "question_ar": "",
        "evidence_en": "\"The Servant Leader\" is the title of the book; book in 2003 refers to SUBSTR(publication_date, 1, 4) = '2003'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Servant Leader' AND STRFTIME('%Y', T1.publication_date) = '2003'"
    },
    {
        "db_id": "books",
        "question_en": "What is the current address of customer Kandy?",
        "question_ar": "",
        "evidence_en": "current address refers to address_status = 1; address refers to street_number, street_name, city",
        "evidence_ar": "",
        "SQL": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were ordered by customer Kandy Adamec?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Kandy' AND T3.last_name = 'Adamec'"
    },
    {
        "db_id": "books",
        "question_en": "How many orders got returned in 2022?",
        "question_ar": "",
        "evidence_en": "orders got returned refers to status_value = 'Returned'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'"
    },
    {
        "db_id": "books",
        "question_en": "Which country does the customer with the email \"rturbitt2@geocities.jp\" from?",
        "question_ar": "",
        "evidence_en": "\"rturbitt2@geocities.jp\" is the email of customer; country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'"
    },
    {
        "db_id": "books",
        "question_en": "Name the publisher who published the most books.",
        "question_ar": "",
        "evidence_en": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the title of the first book that was written by A.J. Ayer?",
        "question_ar": "",
        "evidence_en": "\"A.J. Ayer\" is the author_name; first book refers to Min(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "What is the percentage of books that cost greater than $10 and were ordered by customer Ruthanne Vatini?",
        "question_ar": "",
        "evidence_en": "cost greater than $10 refers to price > 10; percentage = Divide (Count(book_id where price >10), Count(book_id)) * 100; full name refers to the composition of first name, lastname",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.price > 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Ruthanne' AND T3.last_name = 'Vatini'"
    },
    {
        "db_id": "books",
        "question_en": "List the title of books published by AK Press.",
        "question_ar": "",
        "evidence_en": "\"AK Press\" is the publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'AK Press'"
    },
    {
        "db_id": "books",
        "question_en": "Who ordered the book with the cheapest price?",
        "question_ar": "",
        "evidence_en": "book with cheapest price refers to Min(price); who order means name of customer which refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com.",
        "question_ar": "",
        "evidence_en": "\"fsier3e@ihg.com\" is the email of customer; ISBN refers to isbn13",
        "evidence_ar": "",
        "SQL": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.email = 'fsier3e@ihg.com'"
    },
    {
        "db_id": "books",
        "question_en": "Give the author's name of the books that cost 19 dollars and above.",
        "question_ar": "",
        "evidence_en": "books cost 19 dollars and above refers to price > = 19",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T4.price > 19"
    },
    {
        "db_id": "books",
        "question_en": "Provide the publisher name of the book with ISBN 76092025986.",
        "question_ar": "",
        "evidence_en": "\"76092025986\" is the isbn13",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.isbn13 = 76092025986"
    },
    {
        "db_id": "books",
        "question_en": "Among the books published by Birlinn in 2008, how many books have pages around 600 to 700?",
        "question_ar": "",
        "evidence_en": "\"Birlinn\" is the publisher_name; books have pages around 600 to 700 refers to num_pages BETWEEN 600 AND 700; in 2008 refers to SUBSTR(publication_date, 1, 4) = '2008'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Birlinn' AND STRFTIME('%Y', T1.publication_date) = '2008' AND T1.num_pages BETWEEN 600 AND 700"
    },
    {
        "db_id": "books",
        "question_en": "What is the price of the book with ISBN 9780763628321?",
        "question_ar": "",
        "evidence_en": "\"9780763628321\" is the isbn13",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321"
    },
    {
        "db_id": "books",
        "question_en": "What is the number of pages of the book in the order ID 1167?",
        "question_ar": "",
        "evidence_en": "number of pages refers to num_pages",
        "evidence_ar": "",
        "SQL": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167"
    },
    {
        "db_id": "books",
        "question_en": "Provide the title of the books published in British-English.",
        "question_ar": "",
        "evidence_en": "\"British English\" is the language_name of the book",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'"
    },
    {
        "db_id": "books",
        "question_en": "How many books were published by Brava in 2006?",
        "question_ar": "",
        "evidence_en": "\"Brava\" is the publisher_name; in 2006 refers to SUBSTR(publication_date, 1, 4) = '2006'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Brava' AND STRFTIME('%Y', T1.publication_date) = '2006'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the ISBN and price of the book with book ID 7160.",
        "question_ar": "",
        "evidence_en": "ISBN refers to isbn13;",
        "evidence_ar": "",
        "SQL": "SELECT T1.isbn13, T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.book_id = 6503"
    },
    {
        "db_id": "books",
        "question_en": "What is the title of the book in the order ID 931?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 931"
    },
    {
        "db_id": "books",
        "question_en": "What is the language of the book titled Zorro?",
        "question_ar": "",
        "evidence_en": "\"Zorro\" is the title of the book; langauge refers to language_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'Zorro'"
    },
    {
        "db_id": "books",
        "question_en": "Provide the email of the customers that purchased books with a price range of 3 to 5 dollars.",
        "question_ar": "",
        "evidence_en": "books with a price range of 3 to 5 dollars refers to price BETWEEN 3 AND 5",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.email FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.price BETWEEN 3 AND 5"
    },
    {
        "db_id": "books",
        "question_en": "List the ISBN of the books that cost 7.5 dollars.",
        "question_ar": "",
        "evidence_en": "ISBN refers to isbn13; books cost 7.5 dollars refers to price = 7.5",
        "evidence_ar": "",
        "SQL": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price = 7.5"
    },
    {
        "db_id": "books",
        "question_en": "Give the publisher's name of the books authored by Alan Lee.",
        "question_ar": "",
        "evidence_en": "\"Alan Lee\" is the author_name; publisher's name refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Alan Lee' GROUP BY T4.publisher_name"
    },
    {
        "db_id": "books",
        "question_en": "What is the sum of the number of pages of the books ordered by Mick Sever?",
        "question_ar": "",
        "evidence_en": "sum of the number of pages refers to Sum(num_pages)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'"
    },
    {
        "db_id": "books",
        "question_en": "Write down the author's name of the book most recently published.",
        "question_ar": "",
        "evidence_en": "author's name refers to author_name; book most recently published refers to Max(publication_date)",
        "evidence_ar": "",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.publication_date DESC LIMIT 1"
    },
    {
        "db_id": "books",
        "question_en": "In books published by Ace Book, what is the percentage of English books published?",
        "question_ar": "",
        "evidence_en": "\"Ace Book\" is the publisher_name; English book refers to language_name = 'English'; percentage = Divide (Count(book_id where language_name = 'English'), Count(book_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Ace Book'"
    },
    {
        "db_id": "books",
        "question_en": "Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages?",
        "question_ar": "",
        "evidence_en": "book purchased by less than 1 dollar refers to price < 1; books with less than 500 pages refers to num_pages < 500; greater than 500 pages refers to num_pages > 500; Difference = Subtract (Count(book_id where num_pages < 500), Count(book_id where num_pages > 500))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS dif FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price < 1"
    },
    {
        "db_id": "books",
        "question_en": "What are the language and title of the ordered books with price less than 20% of the average price of all ordered books?",
        "question_ar": "",
        "evidence_en": "language refers to language_name; books with price less than 20% of the average price refers to price < Multiply (AVG(price), 0.2)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.language_name, T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id INNER JOIN book_language AS T3 ON T3.language_id = T2.language_id WHERE T1.price * 100 < ( SELECT AVG(price) FROM order_line ) * 20"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the full names of all the sanitarians under the supervision of Darlisha Jacobs.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM employee WHERE title = 'Sanitarian' AND supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Darlisha' AND last_name = 'Jacobs' )"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the full names of the sanitarians who did at least one inspection in May, 2010.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; in May 2010 refers to inspection_date like '2010-05%'; sanitarian refers to title = 'Sanitarian'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections were sanitarian Joshua Rosa responsible for in 2010?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to inspection_date like '2010%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the assumed name of all the facilities inspected by Joshua Rosa.",
        "question_ar": "",
        "evidence_en": "assumed name refers to dba_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the facilities that have undergone at least one inspection in 2010, how many of them are restaurants or cafeterias?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to inspection_date like '2010%'; restaurant or cafeteria refers to facility_type = 'Restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the location coordinates of all the facilities that had an inspection on 2010/5/11.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to latitude, longitude; on 2010/5/11 refers to inspection_date = '2010-05-11'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to inspection_date like '2010%'; in ward no.42 refers to ward = 42",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.ward = 42"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the full names of all the sanitarians who have inspected the facility Burbank.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the facility Burbank refers to dba_name = 'Burbank'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T3.dba_name = 'Burbank' AND T1.title = 'Sanitarian'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the assumed name of all the facilities that failed an inspection in 2010.",
        "question_ar": "",
        "evidence_en": "assumed name refers to dba_name; failed an inspection refers to results = 'Fail'; in 2010 refers to inspection_date like '2010%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND strftime('%Y', T1.inspection_date) = '2010'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name;  Amundsen High School refers to dba_name = 'AMUNDSEN HIGH SCHOOL'; on 2010/5/11 refers to inspection_date = '2010-05-11'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of \"pass\"?",
        "question_ar": "",
        "evidence_en": "have the result of \"pass\" refers to results = 'Pass'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done?",
        "question_ar": "",
        "evidence_en": "Azha Restaurant Inc. refers to dba_name = 'Azha Restaurant Inc.'; on 2010/1/21 refers to inspection_date = '2010-01-21'; follow-up inspection date refers to followup_to",
        "evidence_ar": "",
        "SQL": "SELECT T1.followup_to FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T2.dba_name = 'Azha Restaurant Inc.' AND T1.results = 'Pass' AND T1.inspection_date = '2010-01-21'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the facilities that had undergone at least one inspection in 2010, how many of them have the most serious food safety issues?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to inspection_date like '2010%'; the most serious food safety issues refers to risk_level = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.risk_level = 3"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the average number of inspections carried out in the year 2010 by a sanitarian whose salary is over 70000?",
        "question_ar": "",
        "evidence_en": "in the year 2010 refers to inspection_date like '2010%'; salary is over 70000 refers to salary > 70000; average number = divide(sum(inspection where inspection_date like '2010%'), sum(employee_id where salary > 70000))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.inspection_date LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.salary > 70000 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the point level of \"Refrigeration and metal stem thermometers provided and conspicuous\"?",
        "question_ar": "",
        "evidence_en": "\"Refrigeration and metal stem thermometers provided and conspicuous\" refers to Description = 'Refrigeration and metal stem thermometers provided and conspicuous '",
        "evidence_ar": "",
        "SQL": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Which employee was responsible for inspection no.48224? Give the full name.",
        "question_ar": "",
        "evidence_en": "inspection no.48224 refers to inspection_id = '48224'; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 48224"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections did All Style Buffet Restaurant have?",
        "question_ar": "",
        "evidence_en": "All Style Buffet refers to dba_name = 'All Style Buffet'; Restaurant refers to facility_type = 'Restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'Restaurant' AND T1.dba_name = 'All Style Buffet'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "When did Wing Hung Chop Suey Restaurant have its first inspection?",
        "question_ar": "",
        "evidence_en": "Wing Hung Chop Suey Restaurant refers to aka_name = 'WING HUNG CHOP SUEY RESTAURANT'; first inspection refers to min(inspection_date)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many restaurants were inspected on 2015/5/8?",
        "question_ar": "",
        "evidence_en": "restaurant refers to facility_type = 'Restaurant'; on 2015/5/8 refers to inspection_date = '2015-05-08'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date = '2015-05-08' AND T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many \"food maintenance\" related violations did inspection no.1454071 have?",
        "question_ar": "",
        "evidence_en": "\"food maintenance\" related refers to category = 'Food Maintenance'; inspection no.1454071 refers to inspection_id = '1454071'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = '1454071' AND T1.category = 'Food Maintenance'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "State the number of violations did Royal Thai Cuisine has during the 2015/5/8 inspection.",
        "question_ar": "",
        "evidence_en": "Royal Thai Cuisine refers to dba_name = 'ROYAL THAI CUISINE'; 2015/5/8 refers to inspection_date = '2015-05-08'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.point_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2015-05-08' AND T1.dba_name = 'ROYAL THAI CUISINE'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "For the grocery store located at \"3635 W DIVERSEY AVE\", how many inspections did it have?",
        "question_ar": "",
        "evidence_en": "grocery store refers to facility_type = 'Grocery Store'; \"3635 W DIVERSEY AVE\" refers to address = '3635 W DIVERSEY AVE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Who is responsible for most of the inspections? Give the full name.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; most of the inspections refers to max(count(employee_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.employee_id, T2.first_name, T2.last_name, COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.employee_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections done by Lisa Tillman ended up with the result of \"Out of Business\"?",
        "question_ar": "",
        "evidence_en": "the result of \"Out of Business\" refers to results = 'Out of Business'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND T1.results = 'Out of Business'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "For the sanitarian who lives on 5000 N Wolcott Ave, how many establishments did he/she inspect in the May of 2011?",
        "question_ar": "",
        "evidence_en": "sanitarian refers to title = 'Sanitarian'; 5000 N Wolcott Ave refers to address = '5000 N Wolcott Ave'; in May 2011 refers to inspection_date between '2011-04-30' and '2011-06-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Show the phone number of the sanitarian who was responsible for inspection no.634597.",
        "question_ar": "",
        "evidence_en": "phone number refers to phone; sanitarian refers to title = 'Sanitarian'; inspection no.634597 refers to inspection_id = '634597'",
        "evidence_ar": "",
        "SQL": "SELECT T2.phone FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 634597 AND T2.title = 'Sanitarian'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "State the salary of the employee who did the most inspections.",
        "question_ar": "",
        "evidence_en": "the most inspections refers to max(count(employee_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT T.employee_id, COUNT(T.inspection_id) FROM inspection AS T GROUP BY T.employee_id ORDER BY COUNT(T.inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the average number of inspections did risk level 3 taverns have?",
        "question_ar": "",
        "evidence_en": "risk level 3 refers to risk_level = '3'; tavern refers to facility_type = 'TAVERN'; average number = divide(count(inspection_id), sum(license_no)) where risk_level = '3' and facility_type = 'TAVERN'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.inspection_id) AS REAL) / COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T1.facility_type = 'TAVERN'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "State the inspection pass rate of Pockets Restaurant.",
        "question_ar": "",
        "evidence_en": "Pockets refers to dba_name = 'POCKETS'; Restaurant refers to facility_type = 'Restaurant'; pass refers to results = 'Pass'; the inspection pass rate = divide(sum(inspection_id where results = 'Pass'), count(license_no)) where dba_name = 'POCKETS' and facility_type = 'Restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many sanitarian employees in Chicago are from the zip code 60617?",
        "question_ar": "",
        "evidence_en": "sanitarian refers to title = 'Sanitarian'; in Chicago refers to city = 'Chicago'; zip code 60617 refers to zip = 60617",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(employee_id) FROM employee WHERE zip = '60617'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the assumed name of the business located at 2903 W Irving Park Rd?",
        "question_ar": "",
        "evidence_en": "assumed name refers to dba_name; 2903 W Irving Park Rd refers to address = '2903 W IRVING PARK RD '",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT dba_name FROM establishment WHERE address = '2903 W IRVING PARK RD '"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the full name of the employee with the lowest salary?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the lowest salary refers to min(salary)",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM employee ORDER BY salary ASC LIMIT 1"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many establishments that are doing business as Homemade Pizza have a risk level of 2?",
        "question_ar": "",
        "evidence_en": "Homemade Pizza refers to dba_name = 'HOMEMADE PIZZA'; a risk level of 2 refers to risk_level = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 2 AND dba_name = 'HOMEMADE PIZZA'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections with critical food safety problems are under inspection point id 3?",
        "question_ar": "",
        "evidence_en": "critical food safety problems refers to fine = 500; point_id = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(inspection_id) FROM violation WHERE point_id = 3 AND fine = 500"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many employees are under Gregory Cardenas?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.employee_id) FROM employee AS T1 WHERE T1.supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Gregory' AND last_name = 'Cardenas' )"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "When did Renaldi's Pizza had its first inspection?",
        "question_ar": "",
        "evidence_en": "Renaldi's Pizza refers to dba_name = 'RENALDI''S PIZZA'; first inspection refers to min(inspection_date)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'RENALDI''S PIZZA'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the full name of the employee who was responsible for the most inspection in March 2016?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the most inspection refers to max(count(employee_id)); in March 2016 refers to inspection_date like '2016-03%'",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM ( SELECT T1.employee_id, COUNT(T1.inspection_id) FROM inspection AS T1 WHERE strftime('%Y-%m', T1.inspection_date) = '2016-03' GROUP BY T1.employee_id ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T2 INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What are the names of the businesses that passed with conditions in May 2012?",
        "question_ar": "",
        "evidence_en": "name of business refers to dba_name; passed with conditions refers to results = 'Pass w/ Conditions'; in May 2012 refers to inspection_date like '2012-05%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T1.inspection_date) = '2012-05' AND T1.results = 'Pass w/ Conditions'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Out of all the short form complaint inspections done by David Hodges, how many businesses passed?",
        "question_ar": "",
        "evidence_en": "short form complaint inspection refers to inspection_type = 'Short Form Complaint'; pass refers to results = 'Pass'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.license_no) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'David' AND T1.last_name = 'Hodges' AND T1.employee_id = 153225 AND T2.inspection_type = 'Short Form Complaint' AND T2.results = 'Pass'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?",
        "question_ar": "",
        "evidence_en": "ward 42 refers to ward = 42; at least 5 failed inspection results refers to count(results = 'Fail') > = 5; between 1/1/2010 to 12/31/2015 refers to inspection_date between '2010-01-01' and '2015-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND T1.ward = 42 AND T1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) )"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How much is the salary of the employee who has the highest number of inspections done of all time?",
        "question_ar": "",
        "evidence_en": "the highest number of inspections done refers to max(count(employee_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT employee_id, COUNT(inspection_id) FROM inspection GROUP BY employee_id ORDER BY COUNT(inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the assumed name of the business that has the highest total fine in 2014?",
        "question_ar": "",
        "evidence_en": "assumed name of business refers to dba_name; the highest total fine refers to max(sum(fine)); in 2014 refers to inspection_date like '2014%'",
        "evidence_ar": "",
        "SQL": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the precise location of the establishment with the highest number of failed inspections?",
        "question_ar": "",
        "evidence_en": "precise location refers to latitude, longitude; the highest number of failed inspections refers to max(count(results where results = 'Fail'))",
        "evidence_ar": "",
        "SQL": "SELECT T1.latitude, T1.longitude FROM establishment AS T1 INNER JOIN ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no ORDER BY COUNT(results) DESC LIMIT 1 ) AS T2 ON T1.license_no = T2.license_no"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What are the comments of the inspector during the inspection of Taqueria La Fiesta on 1/25/2010?",
        "question_ar": "",
        "evidence_en": "comment of the inspector refers to inspector_comment; Taqueria La Fiesta refers to dba_name = 'TAQUERIA LA FIESTA'; on 1/25/2010 refers to inspection_date = '2010-01-25'",
        "evidence_ar": "",
        "SQL": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How much is the total fine given to Ron of Japan Inc in its inspection done on February 2014?",
        "question_ar": "",
        "evidence_en": "total fine = sum(fine); Ron of Japan Inc refers to dba_name = 'RON OF JAPAN INC'; on February 2014 refers to inspection_date like '2014-02%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2014-02' AND T1.dba_name = 'RON OF JAPAN INC'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List the full names of the employees who were responsible for inspecting Taqueria La Paz.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; Taqueria La Paz refers to dba_name = 'TAQUERIA LA PAZ'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'TAQUERIA LA PAZ'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the full name of the employee who gave the highest amount of fine of all time?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the highest amount of fine refers to max(sum(fine))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T3.fine) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id GROUP BY T1.first_name, T1.last_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the average number of inspections done by the top 5 employees with the highest salary? List the names of the said employees.",
        "question_ar": "",
        "evidence_en": "the highest salary refers to max(salary); sanitarian refers to title = 'Sanitarian'; name refers to first_name, last_name; average number = divide(sum(inspection_id), 5)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT T2.inspection_id) AS REAL) / 5, T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.title = 'Sanitarian' ORDER BY T1.salary DESC LIMIT 5"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Which business had the highest number of inspections done? Calculate the percentage of passed and failed inspections of the said business.",
        "question_ar": "",
        "evidence_en": "business name refers to dba_name; the highest number of inspections done max(count(inspection_id)); percentage of passed inspections = divide(sum(inspection_id where results = 'Pass'), total(inspection_id)) * 100%; percentage of failed inspections = divide(sum(inspection_id where results = 'Fail'), total(inspection_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT T2.dba_name , CAST(SUM(CASE WHEN T1.results = 'Pass' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) AS percentagePassed , CAST(SUM(CASE WHEN T1.results = 'Fail' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no GROUP BY T2.dba_name ORDER BY COUNT(T1.license_no) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL?",
        "question_ar": "",
        "evidence_en": "7211 S Hermitage Ave refers to address = '7211 S Hermitage Ave'; Chicago refers to city = 'Chicago'; IL refers to state = 'IL'",
        "evidence_ar": "",
        "SQL": "SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the establishment's name and employee involved in the inspection ID 44256 on May 5, 2010?",
        "question_ar": "",
        "evidence_en": "establishment's name refers to dba_name; employee name refers to first_name, last_name; inspection ID 44256 refers to inspection_id = 44256; on May 5, 2010 refers to inspection_date = '2010-05-05'",
        "evidence_ar": "",
        "SQL": "SELECT T1.dba_name, T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2010-05-05' AND T2.inspection_id = 44256"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Give the address of the schools that passed the inspection in March 2010.",
        "question_ar": "",
        "evidence_en": "school refers to facility_type = 'School'; pass refers to results = 'Pass'; in March 2010 refers to inspection_date like '2010-03%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-03' AND T2.results = 'Pass' AND T1.facility_type = 'School'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the employee's full name involved in the canvass inspection type on March 09, 2010?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; canvass inspection type refers to inspection_type = 'Canvass'; on March 09, 2010 refers to inspection_date = '2010-03-09'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-03-09' AND T2.inspection_type = 'Canvass'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the inspection ID of the establishment named \"PIZZA RUSTICA, INC.\"",
        "question_ar": "",
        "evidence_en": "\"PIZZA RUSTICA, INC.\" refers to dba_name = 'PIZZA RUSTICA, INC'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'PIZZA RUSTICA, INC'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many restaurants with the highest risk level still passed the inspection?",
        "question_ar": "",
        "evidence_en": "restaurant refers to facility_type = 'Restaurant'; the highest risk level refers to max(risk_level); pass the inspection refers to results = 'Pass'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List the names of employees involved in an inspection with the Display of Inspection Report Summary category.",
        "question_ar": "",
        "evidence_en": "name refers to first_name, last_name; Display of Inspection Report Summary category refers to category = 'Display of Inspection Report Summary'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'Display of Inspection Report Summary'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the title of the employee involved in inspection ID 60332?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many of the restaurants with the lowest risk level failed the complaint inspection type?",
        "question_ar": "",
        "evidence_en": "restaurant refers to facility_type = 'Restaurant'; the lowest risk level refers to min(risk_level); failed refers to results = 'Fail'; the complaint inspection type refers to inspection_type = 'Complaint'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = '1' AND T2.inspection_type = 'Complaint' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the fine paid and the complete address of the establishment with inspection ID 48216.",
        "question_ar": "",
        "evidence_en": "complete address refers to state, city, address",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.fine, T1.state, T1.city, T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_id = 48216"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the inspection ID of the inspection with critical point level, $500 fine, and inspector comment \"CDI ON 5-17-10\"?",
        "question_ar": "",
        "evidence_en": "critical point level refers to point_level = 'Critical'; $500 fine refers to fine = 500; inspector comment \"CDI ON 5-17-10\" refers to inspector_comment = 'CDI ON 5-17-10'",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 500 AND T1.point_level = 'Critical' AND T2.inspector_comment = 'CDI ON 5-17-10'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What are the inspection description and inspector's comments in the inspection ID 164795?",
        "question_ar": "",
        "evidence_en": "inspection description refers to Description; inspector's comment refers to inspector_comment",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description, T2.inspector_comment FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 44247"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What are the inspector's comments and clean operating requirement code for inspection ID 54216 and point ID 34?",
        "question_ar": "",
        "evidence_en": "inspector's comment refers to inspector_comment; clean operating requirement code refers to code",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspector_comment, T1.code FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 54216 AND T2.point_id = 34"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the establishments that failed in the inspection, what is the percentage of establishments with the highest risk level?",
        "question_ar": "",
        "evidence_en": "failed in inspection refers to results = 'Fail'; the highest risk level refers to max(risk_level); percentage = divide(count(license_no where risk_level = max(risk_level)), count(license_no)) * 100% where results = 'Fail'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 3 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.risk_level) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500?",
        "question_ar": "",
        "evidence_en": "salary between $75000 and $85000 refers to 75000 < = salary < = 80000; difference = subtract(count(inspection_id where fine = 100), count(inspection_id where fine = 500)) where 75000 < = salary < = 80000",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.fine = 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.fine = 500 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.salary BETWEEN 75000 AND 80000"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections were done in January 2011?",
        "question_ar": "",
        "evidence_en": "in January 2011 refers to inspection_date like '2011-01%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y-%m', inspection_date) = '2011-01'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections failed in 2014?",
        "question_ar": "",
        "evidence_en": "failed refers to results = 'Fail'; in 2014 refers to inspection_date like '2014%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the percentage of inspections with the fine for a minor food safety problem.",
        "question_ar": "",
        "evidence_en": "fine for a minor food safety problem refers to fine = 100; percentage = divide(count(inspection_id where fine = 100), sum(inspection_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN fine = 100 THEN inspection_id END) AS REAL) * 100 / COUNT(inspection_id) FROM violation"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List the point IDs and fines of the inspections done on 7th August 2010.",
        "question_ar": "",
        "evidence_en": "on 7th August 2010 refers to inspection_date = '2010-08-07'",
        "evidence_ar": "",
        "SQL": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections were done under the personnel category?",
        "question_ar": "",
        "evidence_en": "under the personnel category refers to category = 'Personnel'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.inspection_id) FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id WHERE T2.category = 'Personnel'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the names and inspection results of the facilities located in Burnham.",
        "question_ar": "",
        "evidence_en": "names refers to dba_name; inspection result refers to results; in Burnham refers to city = 'BURNHAM'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'BURNHAM'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Compare the number of inspections under toxic items and no-smoking regulations.",
        "question_ar": "",
        "evidence_en": "under toxic items refers to category = 'Toxic Items'; no-smoking regulations refers to category = 'No Smoking Regulations'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.category = 'Toxic Items' THEN T1.inspection_id END) AS Tox_nums , COUNT(CASE WHEN T2.category = 'No Smoking Regulations' THEN T1.inspection_id END) AS NosmoNums FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Which facilities were inspected by Sarah Lindsey on 20th November 2012?",
        "question_ar": "",
        "evidence_en": "facility name refers to dba_name; on 20th November 2012 refers to inspection_date = '2012-11-20'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2012-11-20' AND T3.first_name = 'Sarah' AND T3.last_name = 'Lindsey'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the categories and fines for the inspections done by Lisa Tillman in January 2014.",
        "question_ar": "",
        "evidence_en": "in January 2014 refers to inspection_date like '2014-01%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.category, T3.fine FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T1.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND strftime('%Y-%m', T1.inspection_date) = '2014-01'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections were done under the display of inspection report summary category?",
        "question_ar": "",
        "evidence_en": "under the display of inspection report summary category refers to category = 'Display of Inspection Report Summary'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Display of Inspection Report Summary'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List the types and results of the inspections done on Riverwalk café.",
        "question_ar": "",
        "evidence_en": "type refers to inspection_type; Riverwalk café refers to facility_type = 'RIVERWALK CAFE'",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspection_type, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'RIVERWALK CAFE'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Who inspected Jean Samocki and what was the result?",
        "question_ar": "",
        "evidence_en": "employee's name refers to first_name, last_name; Jean Samocki refers to dba_name = 'JEAN SAMOCKI'",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How much did Hacienda Los Torres from ward 36 fine for failing an inspection?",
        "question_ar": "",
        "evidence_en": "Hacienda Los Torres refers to dba_name = 'HACIENDA LOS TORRES'; ward 36 refers to ward = 36; failing an inspection refers to results = 'Fail';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.dba_name = 'HACIENDA LOS TORRES' AND T1.ward = 36 AND T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the total amount of fine under the food equipment and utensil category.",
        "question_ar": "",
        "evidence_en": "under the food equipment and utensil category refers to category = 'Food Equipment and Utensil'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.fine) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Food Equipment and Utensil'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the names and locations of the facilities that failed inspections on 29th July 2013.",
        "question_ar": "",
        "evidence_en": "name refers to dba_name; location refers to latitude, longitude; failed inspections refers to results = 'Fail'; on 29th July 2013 refers to inspection_date = '2013-07-29'",
        "evidence_ar": "",
        "SQL": "SELECT T2.dba_name, T2.longitude, T2.latitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2013-07-29' AND T1.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the percentage of inspections with verified quality. Among them, how many businesses were from Chicago?",
        "question_ar": "",
        "evidence_en": "verified quality refers to results like 'Pass%'; from Chicago refers to city = 'CHICAGO'; percentage = divide(count(inspection_id where results like 'Pass%'), sum(inspection_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.results LIKE '%Pass%' THEN T2.inspection_id END) AS REAL) * 100 / COUNT(T2.inspection_id), COUNT(DISTINCT T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'CHICAGO'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the average inspections per year done by Jessica Anthony from 2010 to 2017.",
        "question_ar": "",
        "evidence_en": "from 2010 to 2017 refers to inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'; average inspections per year = divide(count(inspection_id where inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'), 8)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' THEN T2.inspection_id ELSE 0 END) AS REAL) / 8 FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) BETWEEN '2010' AND '2017'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the first name of employee who did inspection ID 48225?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Tell the address of employee who did inspection ID 52238?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Write down the last name of employee who did inspection ID 52238?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the inspection result for inspection done by Thomas Langley?",
        "question_ar": "",
        "evidence_en": "inspection result refers to results",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List down the address of employees who did inspection dated 11/5/2010.",
        "question_ar": "",
        "evidence_en": "dated 11/5/2010 refers to inspection_date = '2010-11-05'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-11-05'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List down the phone numbers of employees who did Canvass inspection.",
        "question_ar": "",
        "evidence_en": "phone number refers to phone; Canvass inspection refers to inspection_type = 'Canvass'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.phone FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_type = 'Canvass'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the job title of employee who did inspection ID 52269?",
        "question_ar": "",
        "evidence_en": "job title refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What are the inspection results for Xando Coffee & Bar / Cosi Sandwich Bar?",
        "question_ar": "",
        "evidence_en": "Xando Coffee & Bar / Cosi Sandwich Bar refers to dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What type of inspection was done at John Schaller?",
        "question_ar": "",
        "evidence_en": "type of inspection refers to inspection_type; John Schaller refers to dba_name = 'JOHN SCHALLER'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.inspection_type FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List down the dba name of restaurants that were inspected due to license.",
        "question_ar": "",
        "evidence_en": "inspected due to license refers to inspection_type = 'License'",
        "evidence_ar": "",
        "SQL": "SELECT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'License'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspections done in 2010 had serious food safety issue?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to inspection_date like '2010%'; had serious food safety issue refers to risk_level = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.risk_level = 3"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "State the name of dbas with verified quality.",
        "question_ar": "",
        "evidence_en": "name of dba refers to dba_name; with verified quality refers to results = 'Pass' or results = 'Pass w/Conditions'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the total salary for employees who did inspection from ID 52270 to 52272.",
        "question_ar": "",
        "evidence_en": "inspection from ID 52270 to 52272 refers to inspection_id between 52270 and 52272",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id BETWEEN 52270 AND 52272"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Calculate the average salary for employees who did inspection on License Re-Inspection.",
        "question_ar": "",
        "evidence_en": "inspection on License Re-Inspection refers to inspection_type = 'License Re-Inspection'; average salary = avg(salary)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Did license number 1222441 pass the inspection and what is the zip code number of it?",
        "question_ar": "",
        "evidence_en": "license number 1222441 refers to license_no = 1222441; result of the inspection refers to results; zip code number refers to zip",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.results, T1.zip FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.license_no = 1222441"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "When did restaurant John Schaller has its first inspection in 2010?",
        "question_ar": "",
        "evidence_en": "John Schaller refers to dba_name = 'JOHN SCHALLER'; first inspection refers to min(inspection_date); in 2010 refers to inspection_date like '2010%'",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER' AND strftime('%Y', T2.inspection_date) = '2010'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the full name of the employee that inspected establishments with license 1334073?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; with license 1334073 refers to license_no = 1334073",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Which establishments did Joshua Rosa inspect?",
        "question_ar": "",
        "evidence_en": "establishment name refers to dba_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many employees have salary greater than 70000 but fail the inspection?",
        "question_ar": "",
        "evidence_en": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Name the food businesses that passed the inspection in 2010.",
        "question_ar": "",
        "evidence_en": "business name refers to dba_name; food business refers to restaurant; pass the inspection refers to results = 'Pass'; in 2010 refers to inspection_date like '2010%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T2.results = 'Pass' AND T1.facility_type = 'Liquor'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the name of the establishment that Joshua Rosa inspected?",
        "question_ar": "",
        "evidence_en": "name of the establishment refers to dba_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many taverns failed in July 2010?",
        "question_ar": "",
        "evidence_en": "tavern refers to facility_type = 'Tavern'; failed refers to results = 'Fail'; in July 2010 refers to inspection_date like '2010-07%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-07' AND T2.results = 'Fail' AND T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the risk level of the establishment that Bob Benson inspected?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.risk_level FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Which establishments did Bob Benson inspect in 2010 and what was the results?",
        "question_ar": "",
        "evidence_en": "establishment name refers to dba_name; in 2010 refers to inspection_date like '2010%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.dba_name, T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND strftime('%Y', T2.inspection_date) = '2010'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the title of the employee that inspected the establishment with license number 1576687?",
        "question_ar": "",
        "evidence_en": "license number 1576687 refers to license_no = 1576687",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many inspection points with serious point level that have no fine?",
        "question_ar": "",
        "evidence_en": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the percentage of restaurants that paid a fine of 250 among all establishments?",
        "question_ar": "",
        "evidence_en": "a fine of 250 refers to fine = 250; percentage = divide(sum(license_no where fine = 250), count(license_no)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection?",
        "question_ar": "",
        "evidence_en": "a risk level of 1 refers to risk_level = 1; pass the inspection refers to results = 'Pass'; percentage = divide(sum(license_no where risk_level = 1), count(license_no)) * 100% where results = 'Pass'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 1 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Pass'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Where does the employee named \"Standard Murray\" live?",
        "question_ar": "",
        "evidence_en": "address refers to address, city, state",
        "evidence_ar": "",
        "SQL": "SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the facility type of the establishment named \"Kinetic Playground\"?",
        "question_ar": "",
        "evidence_en": "the establishment named \"Kinetic Playground\" refers to dba_name = 'Kinetic Playground'",
        "evidence_ar": "",
        "SQL": "SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How much salary does Jessica Anthony receive?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the restaurant's name at \"41.9532864854\" latitude and \"-87.7673790701422\" longitude?",
        "question_ar": "",
        "evidence_en": "restaurant refers to facility_type = 'Restaurant'; name refers to dba_name; \"41.9532864854\" latitude and \"-87.7673790701422\" longitude refers to latitude = 41.9532864854 and longitude = -87.7673790701422",
        "evidence_ar": "",
        "SQL": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the list of employees, what is the total number of supervisors?",
        "question_ar": "",
        "evidence_en": "supervisor refers to title = 'Supervisor'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(employee_id) FROM employee WHERE title = 'Supervisor'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Where in Chicago does the restaurant named \"Old Timers Rest & Lounge\" located?",
        "question_ar": "",
        "evidence_en": "in Chicago refers to city = 'CHICAGO'; restaurant refers to facility_type = 'Restaurant'; \"Old Timers Rest & Lounge\" refers to dba_name = 'OLD TIMERS REST & LOUNGE'; location refers to address",
        "evidence_ar": "",
        "SQL": "SELECT address FROM establishment WHERE city = 'CHICAGO' AND dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many employees are living in Hoffman Estates, IL?",
        "question_ar": "",
        "evidence_en": "in Hoffman Estates refers to city = 'Hoffman Estates'; IL refers to state = 'IL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(employee_id) FROM employee WHERE state = 'IL' AND city = 'Hoffman Estates'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the total number of establishments with the highest risk level?",
        "question_ar": "",
        "evidence_en": "total number of establishments with the highest risk level = count(max(risk_level))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Who is the employee that receives 82700 as their salary?",
        "question_ar": "",
        "evidence_en": "employee name refers to first_name, last_name; receives 82700 as salary refers to salary = 82700",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM employee WHERE salary = 82700"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the last name of the employee involved in the inspection ID 52256.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52256"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Please list the names of taverns that paid a $100 fine upon inspection.",
        "question_ar": "",
        "evidence_en": "name refers to dba_name; tavern refers to facility_type = 'Tavern'; a $100 fine refers to fine = 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Tavern' AND T3.fine = 100"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List point level of inspections with no fine.",
        "question_ar": "",
        "evidence_en": "no fine refers to fine = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.point_level FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the facility type and license number of establishments with the lowest risk level but failed the inspection.",
        "question_ar": "",
        "evidence_en": "license number refers to license_no; the lowest risk level refers to min(risk_level); failed the inspection refers to results = 'Fail'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the result of the February 24, 2010 inspection involving the employee named \"Arnold Holder\"?",
        "question_ar": "",
        "evidence_en": "February 24, 2010 refers to inspection_date = '2010-02-24'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many restaurants failed the inspection in April 2010?",
        "question_ar": "",
        "evidence_en": "restaurant refers to facility_type = 'Restaurant'; failed the inspection refers to results = 'Fail'; in April 2010 refers to inspection_date like '2010-04%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-04' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List all inspection IDs where the employee named \"Rosemary Kennedy\" was involved.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.inspection_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Rosemary' AND T1.last_name = 'Kennedy'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What type of inspection was done on July 07, 2010, involving the employee named \"Lisa Tillman\"?",
        "question_ar": "",
        "evidence_en": "type of inspection refers to inspection_type; on July 07, 2010 refers to inspection_date = '2010-07-07'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.inspection_type FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Lisa' AND T1.last_name = 'Tillman' AND T2.inspection_date = '2010-07-07'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the inspection ID of the inspection with the comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" and sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A).",
        "question_ar": "",
        "evidence_en": "comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" refers to inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'; sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A) refers to code = '7-38-030, 015, 010 (A), 005 (A)'",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List down the names of the establishments with the highest risk level and failed the inspection.",
        "question_ar": "",
        "evidence_en": "name of establishment refers to dba_name; the highest risk level refers to max(risk_level); failed the inspection refers to results = 'Fail'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Fail'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the inspection ID where the employee named \"David Hodges\" is currently employed in the \"Kamayan Express\" establishment?",
        "question_ar": "",
        "evidence_en": "the \"Kamayan Express\" establishment refers to dba_name = 'KAMAYAN EXPRESS'",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T3.first_name = 'David' AND T3.last_name = 'Hodges' AND T1.dba_name = 'KAMAYAN EXPRESS'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Provide the salary range of the employee involved in the inspection ID 58424.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.salary, T3.salary FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN employee AS T3 WHERE T2.inspection_id = 58424 ORDER BY T1.salary, T3.salary DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "List down the inspection ID with the inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" and inspection category of Personnel.",
        "question_ar": "",
        "evidence_en": "inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" refers to inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'; inspection category of Personnel refers to category = 'Personnel'",
        "evidence_ar": "",
        "SQL": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Personnel' AND T2.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many grocery stores paid $250 fine upon their inspection?",
        "question_ar": "",
        "evidence_en": "grocery store refers to facility_type = 'Grocery Store'; $250 fine refers to fine = 250",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Grocery Store' AND T3.fine = 250"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the category of the inspection of the establishment named \"J & J FOOD\"?",
        "question_ar": "",
        "evidence_en": "the establishment named \"J & J FOOD\" refers to dba_name = 'J & J FOOD'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.category FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T1.dba_name = 'J & J FOOD'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Name the taverns that failed the inspection in January 2010.",
        "question_ar": "",
        "evidence_en": "tavern refers to facility_type = 'Tavern'; failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-01' AND T2.results = 'Fail' AND T1.facility_type = 'TAVERN'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "How many of the inspections with serious point levels have no fines?",
        "question_ar": "",
        "evidence_en": "serious point level refers to point_level = 'Serious'; no fines refers to fine = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the establishment's name with an inspection category of No Smoking Regulations?",
        "question_ar": "",
        "evidence_en": "establishment's name refers to dba_name; an inspection category of No Smoking Regulations refers to category = 'No Smoking Regulations'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'No Smoking Regulations'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "What is the difference in the number of restaurants that passed and failed the canvass inspection type?",
        "question_ar": "",
        "evidence_en": "canvass inspection type refers to inspection_type = 'Canvass'; restaurant refers to facility_type = 'Restaurant'; difference = subtract(count(inspection_id where results = 'Pass'), count(inspection_id where results = 'Fail'))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the establishments that failed the inspection in February 2010, list the names of the employees with a salary greater than 70% of the average salary of all employees.",
        "question_ar": "",
        "evidence_en": "failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'; name of employee refers to first_name, last_name; a salary greater than 70% of the average salary refers to salary > multiply(avg(salary), 0.7)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.employee_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND strftime('%Y-%m', T2.inspection_date) = '2010-02' AND T1.salary > 0.7 * ( SELECT AVG(salary) FROM employee )"
    },
    {
        "db_id": "food_inspection_2",
        "question_en": "Among the establishments that paid a 500 fine, what is the percentage of restaurants?",
        "question_ar": "",
        "evidence_en": "a 500 fine refers to fine = 500; restaurant refers to facility_type = 'Restaurant'; percentage = divide(count(license_no where facility_type = 'Restaurant'), count(license_no)) * 100% where fine = 500",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.facility_type = 'Restaurant' THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.facility_type) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T3.fine = 500"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coin that has the highest market capitalization for all transactions in 2018.",
        "question_ar": "",
        "evidence_en": "highest market capitalization refers to max(market_cap); in 2018 refers to year(date) = 2018",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.",
        "question_ar": "",
        "evidence_en": "total value in the past 24 hours refers to volume_24h; on 11/10/16 refers to date = '2016-11-10'",
        "evidence_ar": "",
        "SQL": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days?",
        "question_ar": "",
        "evidence_en": "on 1/11/13 and the next 7 consecutive days refers to DATE BETWEEN '2013-11-01' AND '2013-11-07'; average price refers to AVG(price); Zetacoin refers to name = 'Zetacoin'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT AVG(T2.PRICE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.",
        "question_ar": "",
        "evidence_en": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'",
        "evidence_ar": "",
        "SQL": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "State the transaction date whereby DigixDAO was transacted at the hightest price.",
        "question_ar": "",
        "evidence_en": "the highest price refers to max(price); DigixDAO refers to name = 'DigixDAO'",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'DigixDAO' ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.",
        "question_ar": "",
        "evidence_en": "the highest percentage price changed in 24 hours refers to max(percent_change_24h)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What is the average monthly circulating supply for Frozen in 2014.",
        "question_ar": "",
        "evidence_en": "average monthly circulating supply = AVG(circulating_supply); in 2017 refers to date BETWEEN '2017-01-01' AND '2017-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.circulating_supply) AS REAL) / 12 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND STRFTIME('%Y', T2.date) = '2014'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List all the inactive coins and state the last date of its transaction?",
        "question_ar": "",
        "evidence_en": "the last date refers to max(date); inactive coins refers to status = 'inactive'",
        "evidence_ar": "",
        "SQL": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the price of 1 Bitcoin in 2016?",
        "question_ar": "",
        "evidence_en": "2016 refers to historical date where year(date) = 2016",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "State the transaction date and the price when Bitcoin was bottomed?",
        "question_ar": "",
        "evidence_en": "was bottomed refers to min(price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "For all coins with average price more than $1000. State the current status of the coin.",
        "question_ar": "",
        "evidence_en": "average price more than $1000 refers to AVG(price)>1000",
        "evidence_ar": "",
        "SQL": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coin and date of transactions with the greatest decline in percent change in 1 hour.",
        "question_ar": "",
        "evidence_en": "the greatest decline in percent change in 1 hour refers to max(percent_change_1h)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coin under the token category that gives the highest max profit.",
        "question_ar": "",
        "evidence_en": "the highest max profit refers to max(subtract(high, low))",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22.",
        "question_ar": "",
        "evidence_en": "average percentage price changed from the previous 24 hours refers to AVG(percent_change_24h); on 15/5/2013 refers to DATE = '2013-04-15'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28?",
        "question_ar": "",
        "evidence_en": "ranked the first refers to cmc_rank = 1; on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market?",
        "question_ar": "",
        "evidence_en": "worth refers to price; on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T2.market_cap FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Which crytocurrency was not opened on 2013/5/3?",
        "question_ar": "",
        "evidence_en": "not opened refers to open IS NULL; on 2013/5/3 refers to date = '2013-05-03'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-03' AND T2.open IS NULL"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the price of Bitcoin when it closed at the end of the day on 2013/4/29?",
        "question_ar": "",
        "evidence_en": "price when it closed refers to close; on 2013/4/29 refers to date = '2013-04-29'",
        "evidence_ar": "",
        "SQL": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When did Bitcoin reach its highest price on 2013/4/29?",
        "question_ar": "",
        "evidence_en": "time that a coin reaches its highest price refers to time_high; on 2013/4/29 refers to date = '2013-04-29'",
        "evidence_ar": "",
        "SQL": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the max profit a user can make on Bitcoin on 2013/4/28?",
        "question_ar": "",
        "evidence_en": "the max profit = subtract(high, low); on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T2.high - T2.low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the number of Bitcoins verifiably burned until 2013/4/28?",
        "question_ar": "",
        "evidence_en": "the number of Bitcoins verifiably burned = max_supply - total_supply; 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T2.max_supply - T2.total_supply FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Which crytocurrency was traded in the highest value on 2016/1/8?",
        "question_ar": "",
        "evidence_en": "traded in the highest value refers to max(volume_24h); on 2016/1/8 refers to date = '2016-01-08'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Please list the names of the crytocurrencies that have a total amount of existence of over 10000000 on 2013/4/28.",
        "question_ar": "",
        "evidence_en": "a total amount of existence of over 10000000 refers to total_supply>10000000; on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.total_supply > 10000000"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?",
        "question_ar": "",
        "evidence_en": "price increased refers to percent_change_7d>0; decreased refers percent_change_7d<0; on 2013/5/5 refers to date = '2013-05-05'",
        "evidence_ar": "",
        "SQL": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin?",
        "question_ar": "",
        "evidence_en": "a bigger number of coins circulating in the market refers to max(circulating_supply); on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name IN ('Bitcoin', 'Litecoin') ORDER BY T2.circulating_supply DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "How much was a Bitcoin on 2013/4/28?",
        "question_ar": "",
        "evidence_en": "how much refers to price; on 2013/4/28 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the average price of a Bitcoin in the year 2013?",
        "question_ar": "",
        "evidence_en": "average price refers SUM(price)/COUNT(named = 'Bitcoin'); in the year 2013 refers to year(date) = 2013",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y', T2.date) = '2013' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What was the percentage of the Bitcoins verifiably burned until 2018/4/28?",
        "question_ar": "",
        "evidence_en": "the percentage of the Bitcoins verifiably burned = divide(subtract(SUM(max_supply), SUM(total_supply)),SUM(total_supply))*100%; until 2013/4/28 refers to date<'2013-04-08'",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(T2.max_supply) - SUM(T2.total_supply)) AS REAL) / SUM(T2.total_supply) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date < '2018-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Please list the names of coins that has been disappeared.",
        "question_ar": "",
        "evidence_en": "has disappeared refers to status = 'extinct'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM coins WHERE status = 'extinct'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What's the descripition of BitBar?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT description FROM coins WHERE name = 'BitBar'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "How many coins were added in May 2013? Please list the names of coins.",
        "question_ar": "",
        "evidence_en": "in May 2013 refers to year(date_added) = 2013 and month(date_added) = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) num FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05' UNION ALL SELECT name FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List the names and symbols of the coins that were added on June 14, 2013.",
        "question_ar": "",
        "evidence_en": "added on June 14, 2013 refers to date_added like '2013-06-14%'",
        "evidence_ar": "",
        "SQL": "SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List the names of coins that cannot be traded in 2014.",
        "question_ar": "",
        "evidence_en": "cannot be tracked refers to status = 'untracked'; in 2014 refers to year(date_added) = '2014'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM coins WHERE date_added LIKE '2014%' AND status = 'untracked'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coins that have three tags.",
        "question_ar": "",
        "evidence_en": "have three tags refers to length(tag_names)-length(replace(tag_names,',','')) = 2",
        "evidence_ar": "",
        "SQL": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(replace(tag_names, ',', '')) = 2"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What is the name of the coin with the highest price?",
        "question_ar": "",
        "evidence_en": "the highest price refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Please name the coin that ranked first among the coins traded on April 29, 2013.",
        "question_ar": "",
        "evidence_en": "ranked first refers to cmc_rank = 1; on April 29, 2013 refers to date = '2013-04-29'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When is the best time to purchase Bitcoin?",
        "question_ar": "",
        "evidence_en": "lowest price refers to low; best time refers to date with the low;",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.low LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What is the name of the coin that creates the most total value in the past 24 hours?",
        "question_ar": "",
        "evidence_en": "creates the most total value in the past 24 hours refers to max(volume_24h)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "Name the coins that were not opened on May 2013.",
        "question_ar": "",
        "evidence_en": "not opened refers to open IS NULL; on May 2013 refers to year(date) = 2019 AND month(date) = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When is the highest closed price of CHNCoin?",
        "question_ar": "",
        "evidence_en": "the highest closed price refers to max(close)",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'CHNCoin' ORDER BY T2.close DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When did Peercoin rank fifth?",
        "question_ar": "",
        "evidence_en": "when refers to date; rank fifth refers to cmc_rank = 5",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Peercoin' AND T2.cmc_rank = 5"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When is Devcoin most valuable in the market?",
        "question_ar": "",
        "evidence_en": "when refers to date; most valuable refers to max(market_cap)",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Devcoin' ORDER BY T2.market_cap DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List the names of the top five coins traded on January 1, 2014.",
        "question_ar": "",
        "evidence_en": "the top five coins refers to cmc_rank< = 5; on January 1, 2014 refers to date = '2014-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2014-01-01' AND T2.cmc_rank <= 5"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When was Lebowskis not opened?",
        "question_ar": "",
        "evidence_en": "when refers to date; not opened refers to open IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Lebowskis' AND (T2.open IS NULL OR T2.open = 0)"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "When is the highest price of Terracoin?",
        "question_ar": "",
        "evidence_en": "when refers to date; the highest price refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Terracoin' ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "How many times was Bytecoin traded in June 2013?",
        "question_ar": "",
        "evidence_en": "in June 2013 refers to year(date) = 2013 AND month(date) = 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND STRFTIME('%Y-%m', T2.date) = '2013-06'"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "List the names of the coins above the average price on April 28, 2013.",
        "question_ar": "",
        "evidence_en": "average price = divide(sum(price), count(name)); on April 28, 2013 refers to date = '2013-04-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )"
    },
    {
        "db_id": "coinmarketcap",
        "question_en": "What's the percentage of coins that is higher than the price 1 hour ago in May 29,2013? List the names of these coins.",
        "question_ar": "",
        "evidence_en": "percentage that is higher than the price 1 hour ago refers to percent_change_1h>0; in May 29,2013 refers to date = '2013-05-29'",
        "evidence_ar": "",
        "SQL": "SELECT T1.NAME FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T2.DATE = '2013-05-29' AND T2.percent_change_1h > 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees have obtained a doctorate?",
        "question_ar": "",
        "evidence_en": "doctorate refers to TitleOfCourtesy = 'Dr.;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees WHERE TitleOfCourtesy = 'Dr.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "To whom does Nancy Davolio report? Please give that employee's full name.",
        "question_ar": "",
        "evidence_en": "to whom refers to ReportsTo; full name = FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE EmployeeID = ( SELECT ReportsTo FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which phone number should I call if I want to reach Nancy Davolio's home?",
        "question_ar": "",
        "evidence_en": "phone number of Nancy Davolio's home refers to HomePhone WHERE FirstName = 'Nancy' AND LastName = 'Davolio';",
        "evidence_ar": "",
        "SQL": "SELECT HomePhone FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees have Andrew Fuller as their direct supervisor?",
        "question_ar": "",
        "evidence_en": "direct supervisor refers to ReportsTo where the person being reported to is usually the direct supervisor of the reporter;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which employee has the highest salary? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "highest salary refers to MAX(Salary); full name = FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How much higher is the salary of Andrew Fuller than that of Nancy Davolio?",
        "question_ar": "",
        "evidence_en": "how much higher = SUBTRACT(SUM(Salary WHERE LastName = 'Fuller' and FirstName = 'Andrew'), SUM(Salary WHERE LastName = 'Davolio' and FirstName = 'Nancy'));",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' ) - ( SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' ) AS RESULT"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the employees working as Sales Representatives, how many of them are located in the UK?",
        "question_ar": "",
        "evidence_en": "Sales Representatives refers to Title = 'Sales Representative'; UK refers to Country = 'UK';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Country) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
        "question_ar": "",
        "evidence_en": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'"
    },
    {
        "db_id": "retail_world",
        "question_en": "The sales of how many territories is Nancy Davolio in charge of?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the names of all the territories whose sales are taken in charge by Nancy Davolio.",
        "question_ar": "",
        "evidence_en": "names of all territories refers to TerritoryDescription;",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'"
    },
    {
        "db_id": "retail_world",
        "question_en": "The sales of how many territories in total do the employees in London take charge of?",
        "question_ar": "",
        "evidence_en": "London refers to city = 'London';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller.",
        "question_ar": "",
        "evidence_en": "territories refers to TerritoryDescription;",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees in the UK takes charge of the sales in over 4 territories?",
        "question_ar": "",
        "evidence_en": "UK refers to Country = 'UK'; employees with over 4 territories refers to EmployeeID WHERE TerritoryID > 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(COUNTEID) FROM ( SELECT T1.EmployeeID AS COUNTEID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Country = 'UK' GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4 ) T1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territories are there in the Eastern Region?",
        "question_ar": "",
        "evidence_en": "Eastern Region refers to RegionDescription = 'Eastern';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list all the territories in the Eastern Region.",
        "question_ar": "",
        "evidence_en": "territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees in total are in charge of the sales in the Eastern Region?",
        "question_ar": "",
        "evidence_en": "Eastern Region refers to RegionDescription = 'Eastern';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.EmployeeID) FROM ( SELECT T3.EmployeeID FROM Region AS T1 INNER JOIN Territories AS T2 ON T1.RegionID = T2.RegionID INNER JOIN EmployeeTerritories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.RegionDescription = 'Eastern' GROUP BY T3.EmployeeID ) T"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region.",
        "question_ar": "",
        "evidence_en": "home phone numbers refers to HomePhone; Eastern Region refers to RegionDescription = 'Eastern';",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern ' GROUP BY T1.HomePhone"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many more territories are there in than Eastern Region than in the Southern Region?",
        "question_ar": "",
        "evidence_en": "how many more = SUBTRACT(SUM(RegionDescription = 'Eastern'), SUM(RegionDescription = 'Southern')); Eastern Region refers to RegionDescription = 'Eastern'; Southern Region refers to RegionDescription = 'Southern';",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) - ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the names of all the products ordered in order no. 10248.",
        "question_ar": "",
        "evidence_en": "names of the products refers to ProductName; order no. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the quantity of Ikura ordered in order no. 10273?",
        "question_ar": "",
        "evidence_en": "Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total price of Ikura ordered in order no. 10273?",
        "question_ar": "",
        "evidence_en": "total price = MULTIPLY(UnitPrice, Quantity); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT T2.UnitPrice * T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total production of the product that is ordered in the highest quantity in order no. 10248?",
        "question_ar": "",
        "evidence_en": "total production of the product = SUM(units in stock, units on order); order no. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT T1.UnitsInStock + T1.UnitsOnOrder FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Of all the products ordered in order no. 10248, which product has the highest user satisfaction?",
        "question_ar": "",
        "evidence_en": "order no. refers to OrderID; highest user satisfaction refers to MAX(ReorderLevel);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders have asked for the product Tofu?",
        "question_ar": "",
        "evidence_en": "product refers to ProductName;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Tofu'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the IDs of the orders with a product whose production is not continuous.",
        "question_ar": "",
        "evidence_en": "IDs of the orders refers to OrderID; production is not continuous refers to Discontinued = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OrderID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Of all the orders that have ordered Ikura, how many of them enjoys a unit price that's lower than its standard unit price?",
        "question_ar": "",
        "evidence_en": "Ikura refers to ProductName = 'Ikura'; ordered unit price that's lower than its standard unit price refers to \"Order Details\".UnitPrice < \"Product\".UnitPrice;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura' AND T2.UnitPrice < T1.UnitPrice"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the name of the supplier company for Aniseed Syrup?",
        "question_ar": "",
        "evidence_en": "name of the supplier refers to CompanyName; Aniseed Syrup refers to ProductName = 'Aniseed Syrup';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the names of all the products whose supplier is in Japan.",
        "question_ar": "",
        "evidence_en": "names of the products refers to ProductName; Japan refers to Country = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock.",
        "question_ar": "",
        "evidence_en": "UnitsInStock < UnitsOnOrder;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock < T1.UnitsOnOrder"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the products that are no longer in continuous production, how many of them have their supplier in the USA?",
        "question_ar": "",
        "evidence_en": "no longer continuous refers to Discontinued = 1; USA refers to Country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'USA' AND T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the supplier of the product with the highest unit price?",
        "question_ar": "",
        "evidence_en": "supplier of the product refers to CompanyName; highest unit price refers to MAX(UnitPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average salary of the employees who takes charge of the sales of over 4 territories?",
        "question_ar": "",
        "evidence_en": "average salary = DIVIDE(SUM(Salary), COUNT(EmployeeID)); employees who takes charge of over 4 territories refers to EmployeeID WHERE COUNT(TerritoryID) > 4;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Salary) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4"
    },
    {
        "db_id": "retail_world",
        "question_en": "How much lower in percentage is the unit price of Ikura in order no. 10273 than its standard unit price?",
        "question_ar": "",
        "evidence_en": "how much lower in percentage = MULTIPLY(DIVIDE(SUBTRACT(Products.UnitPrice, Order Details.UnitPrice), Products.UnitPrice), 100); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT CAST((T1.UnitPrice - T2.UnitPrice) AS REAL) * 100 / T1.UnitPrice FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average quantity of Ikura ordered in one order?",
        "question_ar": "",
        "evidence_en": "average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the products ordered in order no. 10248, which product has the biggest ratio of units on order to units in stock?",
        "question_ar": "",
        "evidence_en": "order no. refers to OrderID; biggest ratio = MAX(DIVIDE(UnitsOnOrder, UnitsInStock));",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.UnitsOnOrder / T1.UnitsInStock DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the full name of the youngest employee.",
        "question_ar": "",
        "evidence_en": "full name = FirstName, LastName; youngest refers to latest BirthDate;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the newest hired employee? Give the full name.",
        "question_ar": "",
        "evidence_en": "newest hired refers to latest HireDate; full name = FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE HireDate = ( SELECT MAX(HireDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the number of orders that were handled by Michael Suyama.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the name of the territory where Mr. Robert King works.",
        "question_ar": "",
        "evidence_en": "name of territory refers to TerritoryDescription; Mr. refers to TitleOfCourtesy = 'Mr';",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Mr.' AND T1.FirstName = 'Robert' AND T1.LastName = 'King'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which territory does Ms. Laura Callahan's direct supervisor work in? Give the name of the territory.",
        "question_ar": "",
        "evidence_en": "Ms. refers to TitleOfCourtesy = 'Ms'; ReportsTo’ represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; name of the territory refers to TerritoryDescription;",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.EmployeeID = ( SELECT ReportsTo FROM Employees WHERE TitleOfCourtesy = 'Ms.' AND FirstName = 'Laura' AND LastName = 'Callahan' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is in charge of the \"Santa Monica\" territory? Give the full name.",
        "question_ar": "",
        "evidence_en": "Santa Monica refers to TerritoryDescription = 'Santa Monica'; full name = FirstName, MiddleName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Santa Monica'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the home phone number of the employee who is in charge of \"Savannah\" territory.",
        "question_ar": "",
        "evidence_en": "home phone number refers to HomePhone; Savannah refers to TerritoryDescription = 'Savannah';",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Savannah'"
    },
    {
        "db_id": "retail_world",
        "question_en": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?",
        "question_ar": "",
        "evidence_en": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "For the order paying the highest freight, how many kinds of products does it contain?",
        "question_ar": "",
        "evidence_en": "highest freight refers to MAX(Freight); kinds of products refers to ProductID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = ( SELECT MAX(Freight) FROM Orders ) GROUP BY T1.OrderID"
    },
    {
        "db_id": "retail_world",
        "question_en": "Tell the name of the shipper company for the order No.10585.",
        "question_ar": "",
        "evidence_en": "name of the shipper company refers to ShipName; order No. refers to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10585"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the number of orders that were shipped by \"Federal Shipping\".",
        "question_ar": "",
        "evidence_en": "Federal Shipping refers to CompanyName = 'Federal Shipping';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many kinds of products are there in the the category of \"dairy products\"?",
        "question_ar": "",
        "evidence_en": "kinds of products refers to ProductID; category refers to CategoryName;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which category does \"tofu\" belong to?",
        "question_ar": "",
        "evidence_en": "category refers to CategoryName; tofu refers to ProductName = 'Tofu';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total production of the products from the supplier “Escargots Nouveaux”?",
        "question_ar": "",
        "evidence_en": "total production of the products = add(units in stock , units on order); supplier “Escargots Nouveaux” refers to CompanyName = 'Escargots Nouveaux'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the reorder level for the products from the supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\".",
        "question_ar": "",
        "evidence_en": "supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\" refers to CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many kinds of products are supplied by \"Karkki Oy\" company?",
        "question_ar": "",
        "evidence_en": "supplied by refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Karkki Oy'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".",
        "question_ar": "",
        "evidence_en": "product refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Tell the country name of the supplier for \"Scottish Longbreads\".",
        "question_ar": "",
        "evidence_en": "\"Scottish Longbreads\" refers to ProductName = 'Scottish Longbreads'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Scottish Longbreads'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the number of territories in the \"Northern\" region.",
        "question_ar": "",
        "evidence_en": "\"Northern\" region refers to RegionDescription = 'Northern'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which region is \"Columbia\" in?",
        "question_ar": "",
        "evidence_en": "region refers to RegionID; \"Columbia\" refers to TerritoryDescription = 'Columbia'",
        "evidence_ar": "",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Columbia'"
    },
    {
        "db_id": "retail_world",
        "question_en": "For the orders of Customer \"WHITC\", what is the percentage of the orders were fulfilled with shipper company \"United Package\"?",
        "question_ar": "",
        "evidence_en": "Customer \"WHITC\" refers to CustomerID = 'WHITC'; shipper company \"United Package\" refers to CompanyName = 'United Package'; percentage = divide(count(ShipperID where CompanyName = 'United Package') , count(ShipperID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'WHITC'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many percent more orders were fulfilled with shipper company \"United Package\" than with \"Speedy Express\"?",
        "question_ar": "",
        "evidence_en": "percent = divide(subtract(count(OrderID where CompanyName = 'United Package') , count(OrderID where CompanyName = 'Speedy Express')) , count(OrderID where CompanyName = 'Speedy Express')) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END)) AS REAL) * 100 / COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many times is the number of territories in \"Eastern Region\" than \"Southern Region\"?",
        "question_ar": "",
        "evidence_en": "\"Eastern Region\" refers to RegionDescription = 'Eastern'; \"Southern Region\" refers to RegionDescription = 'Southern'; times = divide(count(TerritoryDescription where RegionDescription = 'Eastern') , count(TerritoryDescription where RegionDescription = 'Southern'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) AS REAL) / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many customers are there in the country with the highest number of customers?",
        "question_ar": "",
        "evidence_en": "highest number refers to max(count(CustomerID))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the order ids of the orders with freight of over 800?",
        "question_ar": "",
        "evidence_en": "freight of over 800 refers to Freight > 800",
        "evidence_ar": "",
        "SQL": "SELECT OrderID FROM Orders WHERE Freight > 800"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the Island Trading customer's complete address?",
        "question_ar": "",
        "evidence_en": "Island Trading refers to CompanyName = 'Island Trading'; complete address = Address, City, Region, Country, PostalCode",
        "evidence_ar": "",
        "SQL": "SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the most expensive product?",
        "question_ar": "",
        "evidence_en": "product refers to ProductName; most expensive refers to max(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many suppliers are there in the United States of America?",
        "question_ar": "",
        "evidence_en": "United States of America refers to Country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which product have the highest user satisfaction?",
        "question_ar": "",
        "evidence_en": "product refers to ProductName; highest user satisfaction refers to max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the employee with the highest salary?",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName LastName; highest salary refers to max(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the names of the products that were discountinued?",
        "question_ar": "",
        "evidence_en": "discontinued refers to Discontinued = 1; name of products refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average salary of sales representatives in the United Kingdom?",
        "question_ar": "",
        "evidence_en": "average salary = avg(Salary); sales representative refers to Title = 'Sales Representative'; in the United Kingdom refers to Country = 'UK'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the most widely used shipping company in the United States of America?",
        "question_ar": "",
        "evidence_en": "most widely used refers to max(count(ShipVia)); shipping company refers to CompanyName; in the United States of America refers to ShipCountry = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCountry = 'USA' GROUP BY T2.CompanyName ORDER BY COUNT(T2.CompanyName) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many products were supplied by Pavlova, Ltd.?",
        "question_ar": "",
        "evidence_en": "Pavlova, Ltd. refers to CompanyName = 'Pavlova, Ltd.'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were shipped to GREAL via United Package?",
        "question_ar": "",
        "evidence_en": "GREAL refers to CustomerID = 'GREAL'; via United Package refers to CompanyName = 'United Package'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'GREAL' AND T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the names of the suppliers whose products have the highest user satisfaction?",
        "question_ar": "",
        "evidence_en": "name of the supplier refers to SupplierID; highest user satisfaction refers to max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "In total, how many orders were shipped via United Package?",
        "question_ar": "",
        "evidence_en": "via United Package refers to CompanyName = 'United Package'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many suppliers in Australia whose products were discontinued?",
        "question_ar": "",
        "evidence_en": "in Australia refers to Country = 'Australia'; discontinued refers to Discontinued = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country = 'Australia'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How much is the total purchase price, including freight, of the top 2 most expensive products?",
        "question_ar": "",
        "evidence_en": "total purchase price including freight refers to add(multiply(UnitPrice , Quantity) , Freight); most expensive refers to max(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T2.UnitPrice * T2.Quantity + T1.Freight FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID ORDER BY T2.UnitPrice * T2.Quantity + T1.Freight DESC LIMIT 2"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the name of the supplier that supplies the most products to the company?",
        "question_ar": "",
        "evidence_en": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the names of the products that were ordered that have a unit price of no more than 5?",
        "question_ar": "",
        "evidence_en": "unit price of no more than 5 refers to UnitPrice < 5; name of products refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.UnitPrice < 5"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the title of the employee with the highest number of territories in charge?",
        "question_ar": "",
        "evidence_en": "highest number of territories refers to max(TerritoryID)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the most ordered products by customers?",
        "question_ar": "",
        "evidence_en": "most ordered refers to max(count(ProductID)); product refers to ProductID",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which territories is the employee with a doctorate in charge of? List all of the territory descriptions.",
        "question_ar": "",
        "evidence_en": "with a doctorate refers to TitleOfCourtesy = 'Dr.'",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the territory descriptions of territories in the Eastern region?",
        "question_ar": "",
        "evidence_en": "in the Eastern region refers to RegionDescription = 'Eastern'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ORDER BY T1.TerritoryDescription"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average number of territories do each sales representative is in charge of?",
        "question_ar": "",
        "evidence_en": "sales representative refers to Title = 'Sales Representative'; average number of territories = divide(count(TerritoryID) , count(EmployeeID)) where Title = 'Sales Representative'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.TerritoryID) AS REAL) / COUNT(DISTINCT T1.EmployeeID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the beverages, which product has the highest customer satisfaction?",
        "question_ar": "",
        "evidence_en": "beverage refers to CategoryName = 'Beverages'; highest customer satisfaction refers to max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Beverages' ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the employee who handled the highest amount of orders?",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.FirstName, T1.LastName ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many products were ordered in the order with the highest freight?",
        "question_ar": "",
        "evidence_en": "highest freight refers to max(Freight)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID GROUP BY T2.ProductID ORDER BY COUNT(T1.Freight) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the seafood products, which product have the highest total production of the production?",
        "question_ar": "",
        "evidence_en": "seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Seafood' ORDER BY T1.UnitsInStock + T1.UnitsOnOrder DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the difference in salary of the top 2 employees with the highest number of territories in charge?",
        "question_ar": "",
        "evidence_en": "highest number of territories refers to max(TerritoryID); difference in salary = subtract(employeeA.Salary, employeeB.Salary)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(Salary) - MIN(Salary) FROM ( SELECT T1.Salary FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID, T1.Salary ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 2 ) T1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average price of products with more than fifty units in stock?",
        "question_ar": "",
        "evidence_en": "more than fifty units in stock refers to UnitsInStock > 50; average price = avg(UnitPrice where UnitsInStock > 50)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(UnitPrice) / COUNT(UnitPrice) FROM Products WHERE UnitsInStock > 50"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the company names of customers from the city with the most customers.",
        "question_ar": "",
        "evidence_en": "most customers refers to max(count(Relationship))",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM `Customer and Suppliers by City` WHERE CITY = ( SELECT City FROM `Customer and Suppliers by City` GROUP BY City ORDER BY COUNT(Relationship) DESC LIMIT 1 )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Find and list the company name, company contact name, and contact title of customers from Madrid.",
        "question_ar": "",
        "evidence_en": "from Madrid refers to City = 'Madrid'",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the full name and contact number of employees in descending order of age.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName LastName; contact number refers to HomePhone; descending order of age refers to order by BirthDate desc limit 1",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName, HomePhone FROM Employees ORDER BY BirthDate DESC"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the average price of products shipped to the UK.",
        "question_ar": "",
        "evidence_en": "average price = divide(sum(UnitPrice) , count(ProductID)); the UK refers to Country = 'UK'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(UnitPrice) AS avg FROM Invoices WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among all the orders, which products sold for the most amount?",
        "question_ar": "",
        "evidence_en": "the most amount refers to max(sum(Quantity))",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM `Order Details` GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the name, address, and phone number of companies that supply products for more than thirty dollars per unit.",
        "question_ar": "",
        "evidence_en": "more than thirty dollars per unit refers to UnitPrice > 30",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice > 30"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the customers, list customers' company names and addresses who paid more than average in freight.",
        "question_ar": "",
        "evidence_en": "paid more than average in freight refers to Freight > divide(sum(Freight) , count(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CompanyName, T1.Address FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > ( SELECT AVG(Freight) FROM Orders )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Find and list the full name of employees who are from the territory, Wilton.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName LastName; Wilton refers to TerritoryDescription = 'Wilton'",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Wilton'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the names of non-US suppliers that have discontinued.",
        "question_ar": "",
        "evidence_en": "non-US refers to Country <> 'USA'; discontinued refers to Discontinued = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country != 'USA'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the top five most costly products in 1998.",
        "question_ar": "",
        "evidence_en": "most costly refers to max(add(unit price , Freight)); in 1998 refers to OrderDate > = '1998-01-01 00:00:00' AND OrderDate < '1999-01-01 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.OrderDate LIKE '1998%' ORDER BY T3.UnitPrice + T1.Freight DESC LIMIT 5"
    },
    {
        "db_id": "retail_world",
        "question_en": "Of the customers who are from Canada, how many used Federal Shipping?",
        "question_ar": "",
        "evidence_en": "from Canada refers to Country = 'Canada'; Federal Shipping refers to ShipName = 'Federal Shipping'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.CustomerID) FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.ShipName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the name of the top ten most ordered product's names in descending order of the number of orders.",
        "question_ar": "",
        "evidence_en": "most ordered refers to max(COUNT(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which supplier supplies the most amount of products?",
        "question_ar": "",
        "evidence_en": "supplier refers to SupplierID; most amount refers to max(count(ProductID))",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the full name and region of each employee in alphabetical order.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName LastName; region refers to RegionDescription",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID ORDER BY T1.FirstName"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which employee handled the most amount of orders in 1996? Give the full name, title, and address of this employee.",
        "question_ar": "",
        "evidence_en": "most amount of orders refers to max(count(OrderID)); in 1996 refers to OrderDate > = '1996-01-01 00:00:00' AND OrderDate < '1997-01-01 00:00:00'; full name refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName, Title, address FROM Employees WHERE EmployeeID = ( SELECT T1.EmployeeID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderDate BETWEEN '1996-01-01 00:00:00' AND '1997-01-01 00:00:00' GROUP BY T1.EmployeeID ORDER BY COUNT(T2.OrderID) DESC LIMIT 1 )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What was the average unit price of products shipped via United Package in 1997?",
        "question_ar": "",
        "evidence_en": "via United Package refers to CompanyName = 'United Package'; in 1997 refers to OrderDate > = '1997-01-01 00:00:00' AND OrderDate < '1998-01-01 00:00:00'; average unit price = divide(sum(UnitPrice), count(ShipperID))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.OrderDate LIKE '1997%' AND T3.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the percentage of shipping done through Speedy Express.",
        "question_ar": "",
        "evidence_en": "through Speedy Express refers to CompanyName = 'Speedy Express'; percentage = divide(count(ShipperID where CompanyName = 'Speedy Express') , count(ShipperID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the courtesy title of the 3 employees who have the lowest salary.",
        "question_ar": "",
        "evidence_en": "courtesy title refers to TitleOfCourtesy; the lowest salary refers to MIN(Salary);",
        "evidence_ar": "",
        "SQL": "SELECT TitleOfCourtesy FROM Employees ORDER BY Salary LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the last name of the employees who must report to the Vice President of Sales?",
        "question_ar": "",
        "evidence_en": "report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Vice President of Sales refers to Title = 'Vice President, Sales';",
        "evidence_ar": "",
        "SQL": "SELECT LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the highest total price paid for an order?",
        "question_ar": "",
        "evidence_en": "the highest total price paid for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "evidence_ar": "",
        "SQL": "SELECT UnitPrice * Quantity * (1 - Discount) AS THETOP FROM `Order Details` ORDER BY UnitPrice * Quantity * (1 - Discount) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which 3 products are produced in greater quantity?",
        "question_ar": "",
        "evidence_en": "3 products produced in greater quantity refer to MAX(SUM(UnitsInStock, UnitsOnOrder)) Limit 3;",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products ORDER BY UnitsInStock + UnitsOnOrder DESC LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question_en": "Of the 10 products with the highest unit price, identify by their ID the ones that have generated the least satisfaction.",
        "question_ar": "",
        "evidence_en": "High reorder level generally means high user satisfaction of the product and vice versa; the least satisfaction refers to MIN(ReorderLevel); the highest unit price refers to MAX(UnitPrice);",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Products ORDER BY ReorderLevel ASC, UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many non-discontinued products are there in the dairy category?",
        "question_ar": "",
        "evidence_en": "non-discontinued products in the dairy category refer to ProductID where Discontinued = 0 and CategoryName = 'Dairy Products';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CategoryID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.Discontinued = 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "What territories is the Inside Sales Coordinator in charge of?",
        "question_ar": "",
        "evidence_en": "territories refer to TerritoryDescription; Title = 'Inside Sales Coordinator';",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the name of the companies that have freighted products for a value greater than 2,000,000.",
        "question_ar": "",
        "evidence_en": "freighted products for a value greater than 2,000,000 refer to Freight > 2000000; name of companies refers to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > 2000000"
    },
    {
        "db_id": "retail_world",
        "question_en": "Through which companies have products been shipped the most times to the city of Aachen?",
        "question_ar": "",
        "evidence_en": "shipped the most times refer to MAX(COUNT(ShipVia)); city of Aachen refers to ShipCity = 'Aache'; companies refers to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCity = 'Aachen' GROUP BY T2.CompanyName ORDER BY COUNT(T1.ShipVia) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the full name of all employees who work in the Northern region.",
        "question_ar": "",
        "evidence_en": "full names = FirstName, LastName; Northern region refers to RegionDescription = 'Northern';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the name of the contact person of the Pavlova supplier company?",
        "question_ar": "",
        "evidence_en": "contact person refers to ContactName; Pavlova is the name of the product;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the name of the products that have been shipped to the city of Paris.",
        "question_ar": "",
        "evidence_en": "shipped to the city of Paris refers to ShipCity = 'Paris';",
        "evidence_ar": "",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipCity = 'Paris'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What product is the least shipped to the postal code 28023?",
        "question_ar": "",
        "evidence_en": "the least shipped product refers ProductName where MIN(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.PostalCode = 28023 ORDER BY T3.Quantity LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the employee in charge of the Southern region who is to report to Andrew Fuller?",
        "question_ar": "",
        "evidence_en": "full names = FirstName, LastName; report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Andrew Fuller refers to Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller'; Southern region refers to RegionDescription = 'Southern';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Southern' AND T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "On what date did the Du monde entier company request that 9 units of Filo Mix be sent to it?",
        "question_ar": "",
        "evidence_en": "9 units of Filo Mix refer to ProductName where Quantity = 9; Du monde entier is the name of the customer; date refers to OrderDate;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OrderDate FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.ProductName = 'Filo Mix' AND T3.Quantity = 9 AND T1.CompanyName = 'Du monde entier'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the name of the categories to which the products of order number 10933 belong.",
        "question_ar": "",
        "evidence_en": "order number 10933 refers to OrderID = 10933;",
        "evidence_ar": "",
        "SQL": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the phone number for the employee in charge of the Portsmouth territory?",
        "question_ar": "",
        "evidence_en": "phone refers to HomePhone; Portsmouth territory refers to TerritoryDescription = 'Portsmouth';",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Portsmouth'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average quantity of product that have been shipped by Federal Shipping in November 1996?",
        "question_ar": "",
        "evidence_en": "Federal Shipping refers to CompanyName = 'Federal Shipping'; DIVIDE(SUM(Quantity), COUNT(ProductID)) where CompanyName = 'Federal Shipping' and ShippedDate > = '1996-11-01 00:00:00' AND ShippedDate < '1996-12-01 00:00:00';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.ShippedDate LIKE '1996-11%' AND T3.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Of all the shipments made by United Package throughout the year 1996, what percentage correspond to the month of September?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-09-01 00:00:00' AND ShippedDate < '1996-09-30 00:00:00')), (COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-01-01 00:00:00' AND ShippedDate < '1997-01-01 00:00:00')) as percentage; \n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.ShippedDate LIKE '1996-09%' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package' AND T1.ShippedDate LIKE '1996%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many owners are located in Mexico?",
        "question_ar": "",
        "evidence_en": "owners in Mexico refer to ContactTitle where Country = 'Mexico';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ContactTitle) FROM Customers WHERE Country = 'Mexico' AND ContactTitle = 'Owner'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full address of Andr Fonseca?",
        "question_ar": "",
        "evidence_en": "full address includes Address, City, Region, PostalCode and Country; ContactName = 'Andr Fonseca';",
        "evidence_ar": "",
        "SQL": "SELECT Address, City, Region, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the companies that have the same phone area code as 171?",
        "question_ar": "",
        "evidence_en": "phone area code as 171 refers to Phone LIKE '(171)%'; companies refer to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM Customers WHERE Phone LIKE '(171)%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the difference in the number of employees from the UK and the USA who work as sales representatives?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(COUNT(EmployeeID where Country = 'UK' and Title = 'sales representative'), COUNT(EmployeeID where Country = 'USA' and Title = 'sales representative'));",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(Title) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative' ) - ( SELECT COUNT(Title) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative' ) AS DIFFERENCE"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many sales associates are located in Sao Paulo, Brazil?",
        "question_ar": "",
        "evidence_en": "sales associates refer to ContactTitle; Sao Paulo is the name of the city in the country Brazil;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'Sao Paulo' AND Country = 'Brazil' AND ContactTitle = 'Sales Associate'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the family name of the employee who shipped the order 10521 to CACTU?",
        "question_ar": "",
        "evidence_en": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the shipping cost for order number 10692 from the company Alfreds Futterkiste?",
        "question_ar": "",
        "evidence_en": "Alfreds Futterkiste is the name of the company; order number 10692 refers to OrderID = 10692;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Freight FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10692 AND T1.CompanyName = 'Alfreds Futterkiste'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the shipping company for order number 10558?",
        "question_ar": "",
        "evidence_en": "order number 10558 refers to OrderID = 10558;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10558"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list any three order numbers that have been shipped using Speedy Express.",
        "question_ar": "",
        "evidence_en": "Speedy Express is the name of the shipping company; three order numbers refer to OrderID LIMIT 3;",
        "evidence_ar": "",
        "SQL": "SELECT T1.OrderID FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the products that belong to the beverage category?",
        "question_ar": "",
        "evidence_en": "products belong to beverage category refer to ProductName where CategoryName = 'beverage';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the description of the category that tofu belongs to?",
        "question_ar": "",
        "evidence_en": "tofu is the name of the product;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which company supplies Gula Malacca?",
        "question_ar": "",
        "evidence_en": "Gula Malacca is the name of the product; company refers to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gula Malacca'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the products that are supplied by Aux joyeux ecclsiastiques?",
        "question_ar": "",
        "evidence_en": "Aux joyeux ecclsiastiques is the name of supply company; products refer to ProductName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Aux joyeux ecclsiastiques'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How much per unit of Konbu does Mayumi's charge?",
        "question_ar": "",
        "evidence_en": "Mayumi's is the name of the company; how much per unit of Konbu refers to UnitPrice where ProductName = 'Konbu';",
        "evidence_ar": "",
        "SQL": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Mayumi%' AND T1.ProductName = 'Konbu'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the person to contact to get Camembert Pierrot?",
        "question_ar": "",
        "evidence_en": "Camembert Pierrot is the name of the product; person to contact refers to ContactName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please name any three products that have been discontinued in the meat or poultry category.",
        "question_ar": "",
        "evidence_en": "three products that have been discontinued refer to ProductName LIMIT 3 where Discontinued = 1; CategoryName = 'Meat/Poultry';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.Discontinued = 1 AND T1.CategoryName = 'Meat/Poultry' LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please name any two products that have the highest satisfaction levels among users of Heli Swaren GmbH & Co. KG.",
        "question_ar": "",
        "evidence_en": "High reorder level generally means high user satisfaction; the highest satisfaction levels refer to MAX(ReorderLevel); two products refer to ProductName LIMIT 2; CompanyName = 'Heli Swaren GmbH & Co. KG';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY T1.ReorderLevel DESC LIMIT 2"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the one representing the company \"Heli Swaren GmbH & Co. KG\"?",
        "question_ar": "",
        "evidence_en": "Heli Swaren GmbH & Co. KG is the name of the company; who is representing refers to ContactName;",
        "evidence_ar": "",
        "SQL": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Heli Swaren GmbH & Co. KG'"
    },
    {
        "db_id": "retail_world",
        "question_en": "From which country is the company \"Drachenblut Delikatessen\" from?",
        "question_ar": "",
        "evidence_en": "Drachenblut Delikatessen is the company name;",
        "evidence_ar": "",
        "SQL": "SELECT Country FROM Customers WHERE CompanyName = 'Drachenblut Delikatessen'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territories are there?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TerritoryID) FROM Territories"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the largest total price for an order?",
        "question_ar": "",
        "evidence_en": "the largest total price for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(UnitPrice) FROM `Order Details` GROUP BY OrderID ORDER BY SUM(UnitPrice) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which product is the most expensive?",
        "question_ar": "",
        "evidence_en": "most expensive product refers to ProductName where MAX(UnitPrice);",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many of the orders are shipped to France?",
        "question_ar": "",
        "evidence_en": "shipped to France refers to ShipCountry = 'France';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ShipCountry) FROM Orders WHERE ShipCountry = 'France'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which region does Hoffman Estates belong to?",
        "question_ar": "",
        "evidence_en": "Hoffman Estates refer to TerritoryDescription;",
        "evidence_ar": "",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Hoffman Estates'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the homepage link for the company that supplies the product \"Thringer Rostbratwurst\"?",
        "question_ar": "",
        "evidence_en": "ProductName = 'Thringer Rostbratwurst';",
        "evidence_ar": "",
        "SQL": "SELECT T2.HomePage FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Thringer Rostbratwurst'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the first names of the employees who take the orders that ship to the city of \"Reims\".",
        "question_ar": "",
        "evidence_en": "ship to the city of \"Reims\" refers to ShipCity = Reims';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCity = 'Reims'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the largest quantity of \"Manjimup Dried Apples\" for an order?",
        "question_ar": "",
        "evidence_en": "the largest quantity of \"Manjimup Dried Apples\" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were shipped by \"Speedy Express\"?",
        "question_ar": "",
        "evidence_en": "\"Speedy Express\" is the name of the shipping company; orders refer to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Make a list of all the territories in the Southern region.",
        "question_ar": "",
        "evidence_en": "territories in the Southern region refer to TerritoryDescription WHERE RegionDescription = 'Southern';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the prices on cheese products?",
        "question_ar": "",
        "evidence_en": "prices on cheese refer to UnitPrice WHERE Description = 'Cheeses';",
        "evidence_ar": "",
        "SQL": "SELECT T2.UnitPrice FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Description = 'Cheeses'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders did \"Laughing Bacchus Wine Cellars\" make?",
        "question_ar": "",
        "evidence_en": "\"Laughing Bacchus Wine Cellars\" is the name of the company; orders refer to OrderID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all the products that were shipped to Starenweg 5.",
        "question_ar": "",
        "evidence_en": "products shipped to Starenweg 5 refer to ProductName where ShipAddress = 'Starenweg 5';",
        "evidence_ar": "",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipAddress = 'Starenweg 5' GROUP BY T3.ProductName"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the products by the company \"Bigfoot Breweries\"?",
        "question_ar": "",
        "evidence_en": "Bigfoot Breweries is the name of the company; products refer to ProductName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Bigfoot Breweries'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the names of Robert King's territories?",
        "question_ar": "",
        "evidence_en": "Robert King is a full name of an employee where LastName = 'King' AND FirstName = 'Robert'; names of territories refer to TerritoryDescription;",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.LastName = 'King' AND T1.FirstName = 'Robert'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the name of the contact person who made the orders that shipped to Switzerland.",
        "question_ar": "",
        "evidence_en": "shipped to Switzerland refers to ShipCountry = 'Switzerland'; contact person refers to Customers;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ContactName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ShipCountry = 'Switzerland' GROUP BY T1.ContactName"
    },
    {
        "db_id": "retail_world",
        "question_en": "What proportion of orders are taken by the Sales Representative?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.Title = 'Sales Representative' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the USA employess, how many of them has PhD title of courtesy?",
        "question_ar": "",
        "evidence_en": "\"USA\" is the Country; PhD title of courtesy refers to TitleOfCourtesy = 'Dr.'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Country) FROM Employees WHERE TitleOfCourtesy = 'Dr.' AND Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average salary for employees from ID 1 to 9?",
        "question_ar": "",
        "evidence_en": "ID 1 to 9 refers to EmployeeID BETWEEN 1 AND 9; Average salary = AVG(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the total salary for employees from UK.",
        "question_ar": "",
        "evidence_en": "\"UK\" is the Country; total salary refers to Sum(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Salary) FROM Employees WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Is (206) 555-1189 the home phone number for Laura Callahan?",
        "question_ar": "",
        "evidence_en": "\"Laura Callahan\" refers to FirstName = 'Laura AND LastName = 'Callahan",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN HomePhone = '(206) 555-1189' THEN 'YES' ELSE 'NO' END FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Write down the notes of employee with the highest salary.",
        "question_ar": "",
        "evidence_en": "highest salary refers to Max(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT Notes FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the customer ids who placed order with Michael Suyama.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Where are the ship countries of orders placed by Janet Leverling?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ShipCountry FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Janet' AND T1.LastName = 'Leverling'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders have Margaret Peacock placed?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the average salary per order for Andrew Fuller.",
        "question_ar": "",
        "evidence_en": "average salary = AVG(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.Salary) AS REAL) / COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the product names of Exotic Liquids?",
        "question_ar": "",
        "evidence_en": "\"Exotic Liquids\" is the CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the quantity per unit for products of Tokyo Traders.",
        "question_ar": "",
        "evidence_en": "\"Tokyo Traders\" is the CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T1.QuantityPerUnit FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many products have been discountinued by New Orleans Cajun Delights?",
        "question_ar": "",
        "evidence_en": "\"New Orleans Cajun Delights\" is the CompanyName; discontinued refers to Discontinued = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please calculate the average unit price for products of Formaggi Fortini s.r.l.",
        "question_ar": "",
        "evidence_en": "\"Formaggi Fortini s.r.l.\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.UnitPrice) / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Formaggi Fortini s.r.l.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the total products that are supplied by Japan suppliers.",
        "question_ar": "",
        "evidence_en": "Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the contact name for product Teatime Chocolate Biscuits?",
        "question_ar": "",
        "evidence_en": "\"Teatime Chocolate Biscuits\" is the ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the company names that have the highest reorder level.",
        "question_ar": "",
        "evidence_en": "Highest reorder level refers to Max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces.",
        "question_ar": "",
        "evidence_en": "\"10 boxes x 12 pieces\" is the QuantityPerUnit",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactTitle FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total units on order from Exotic Liquids?",
        "question_ar": "",
        "evidence_en": "\"Exotic Liquids\" is the CompanyName; total unit on order = Sum(UnitsOnOrder)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the percentage of products supplied by Gai pturage over all products.",
        "question_ar": "",
        "evidence_en": "\"Gai pturage\" is the CompanyName; Percentage = Divide (Count(SupplierID where CompanyName = 'Gai pturage'), Count (SupplierID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Gai pturage' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the product ID of the top five products, by descending order, the number of quantities in stock.",
        "question_ar": "",
        "evidence_en": "by descending in number of quantity in stock refers to max(UnitsInStock)",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Products ORDER BY UnitsInStock DESC LIMIT 5"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the products, how many of them were discontinued in production?",
        "question_ar": "",
        "evidence_en": "discontinued refers to Discontinued = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give me the address, home phone and salary of the Sales Manager.",
        "question_ar": "",
        "evidence_en": "\"Sales Manage\" is the Title",
        "evidence_ar": "",
        "SQL": "SELECT Address, HomePhone, Salary FROM Employees WHERE Title = 'Sales Manager'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the Vice President of Sales. Give me the URL of his/her photo.",
        "question_ar": "",
        "evidence_en": "\"Vice Present of Sales\" refers to Title = 'Vice President, Sales'; full name refers to FirstName, LastName; url of photo refers to PhotoPath",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Title = 'Vice President, Sales'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Write down the top ten companies with the most total sales by amount.",
        "question_ar": "",
        "evidence_en": "most total sales refers to Max(SaleAmount); companies refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM `Sales Totals by Amount` ORDER BY SaleAmount DESC LIMIT 10"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average sales for each categories?",
        "question_ar": "",
        "evidence_en": "average sales = AVG(ProductSales)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(ProductSales) FROM `Sales by Category` GROUP BY CategoryName"
    },
    {
        "db_id": "retail_world",
        "question_en": "Compute the total order quantity for Uncle Bob's Organic Dried Pears so far.",
        "question_ar": "",
        "evidence_en": "\"Uncle Bob's Organic Dried Pears\" is the ProductName; total order quantity refers to Sum(Quantity)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName LIKE 'Uncle Bob%s Organic Dried Pears'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the seafoods, how many of them have an order quantity of more than 50?",
        "question_ar": "",
        "evidence_en": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level.",
        "question_ar": "",
        "evidence_en": "\"Pavlova, Ltd\" is the CompanyName; products refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName, T1.ProductID, T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who are the suppliers of the discontinued products?",
        "question_ar": "",
        "evidence_en": "discontinued product refers to Discontinued = 1; supplier refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the employees, give me the full names of those who have less than 4 territories.",
        "question_ar": "",
        "evidence_en": "less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees have territories in the Eastern region?",
        "question_ar": "",
        "evidence_en": "\"Eastern\" is the RegionDescription",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.FirstName) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "From 1/3/97 to 8/10/97, how many orders were shipped via Federal Shipping?",
        "question_ar": "",
        "evidence_en": "from 1/3/97 to 8/10/97 refers to 1997-03-01 < ShippedDate < 1997-10-08; 'Federal Shipping' is the CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate BETWEEN '1997-03-01 00:00:00' AND '1997-10-08 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Tally the customer ID of orders that were shipped to Brazil by Margaret Peacock from 3/31/97 to 12/10/97.",
        "question_ar": "",
        "evidence_en": "\"Brazil\" is the ShipCountry; from 3/31/97 to 12/10/97 refers to 1997-03-31 < ShippedDate < 1997-10-12",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret' AND T2.ShipCountry = 'Brazil' AND T2.ShippedDate BETWEEN '1997-03-31 00:00:00' AND '1997-12-10 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the re-order level of products that have an order quantity of 1?",
        "question_ar": "",
        "evidence_en": "order quantity of 1 refers to Quantity = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the stock value of every condiments?",
        "question_ar": "",
        "evidence_en": "\"Condiments\" is the CategoryName; Stock value = MULTIPLY( UnitPrice, UnitInStock)",
        "evidence_ar": "",
        "SQL": "SELECT T1.UnitPrice * T1.UnitsInStock FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territories are owned by Anne Dodsworth?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which of the American customers have experienced a delay in the shipment and how long was the longest?",
        "question_ar": "",
        "evidence_en": "\"American\" refers to Country = 'USA'; longest delay in shipment refers to Max(Subtract(RequiredDate, ShippedDate)); customer refers to CustomerID",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName, TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'USA' AND TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) < 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the contact name and phone number of the customer who has made the most total payment on the order to date?",
        "question_ar": "",
        "evidence_en": "most total payment = Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT T1.ContactName, T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.OrderID, T1.ContactName, T1.Phone ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the sales representative of the customer who has made the highest payment? Include the full name of employee and his/her supervisor.",
        "question_ar": "",
        "evidence_en": "highest payment refers to Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount))); full name refers to FirstName, LastName; his/her supervisor refers to 'ReportsTo'",
        "evidence_ar": "",
        "SQL": "SELECT T4.LastName, T4.FirstName, T4.ReportsTo , T1.Quantity * T1.UnitPrice * (1 - T1.Discount) AS payment FROM `Order Details` AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID INNER JOIN Employees AS T4 ON T2.EmployeeID = T4.EmployeeID ORDER BY payment DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many customers are there in Berlin, Germany?",
        "question_ar": "",
        "evidence_en": "\"Berlin\" is the City; 'Germany' is the Country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(City) FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many products does the company Exotic Liquids supply?",
        "question_ar": "",
        "evidence_en": "\"Exotic Liquids\" is the CompanyName of supplier",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which company has the lowest unit price? Please give the company name and the product name.",
        "question_ar": "",
        "evidence_en": "lowest unit price refers to Min(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MIN(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average unit price of Tokyo Traders' products?",
        "question_ar": "",
        "evidence_en": "\"Tokyo Traders\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.UnitPrice) / COUNT(T2.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territories are there in the Eastern region?",
        "question_ar": "",
        "evidence_en": "\"Eastern\" is the RegionDescription",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.RegionID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which region has the most territories?",
        "question_ar": "",
        "evidence_en": "region refers to RegionDescription; most territories refers to Max(Count(TerritoryID))",
        "evidence_ar": "",
        "SQL": "SELECT T2.RegionID FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T2.RegionID ORDER BY COUNT(T1.TerritoryID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which region does territory id 2116 belong to?",
        "question_ar": "",
        "evidence_en": "region refers to RegionDescription",
        "evidence_ar": "",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryID = 2116"
    },
    {
        "db_id": "retail_world",
        "question_en": "What percentage of orders were placed by customers in Madrid city in 1996?",
        "question_ar": "",
        "evidence_en": "\"Madrid\" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please list the full names and titles of all employees.",
        "question_ar": "",
        "evidence_en": "full name refers to LastName, FirstName",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName, Title FROM Employees"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who has the highest salary? Please give their first name.",
        "question_ar": "",
        "evidence_en": "highest salary refers to Max(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many sales representatives whose salaries are higher than 2000?",
        "question_ar": "",
        "evidence_en": "\"Sales Representative\" is the Title; higher than 2000 refers to Salary > 2000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Title) FROM Employees WHERE Salary > 2000 AND Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question_en": "In 1996, how many orders were from customers in the UK?",
        "question_ar": "",
        "evidence_en": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which company had the most orders in 1998?",
        "question_ar": "",
        "evidence_en": "in 1998 refers to YEAR (OrderDate) = 1998; most orders = Max(Count(CustomerID)); company refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please calculate the number of orders from customers by country in 1996.",
        "question_ar": "",
        "evidence_en": "in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' GROUP BY T1.Country"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were from Hanna Moos company in 1999?",
        "question_ar": "",
        "evidence_en": "\"Hanna Moos\" is the CompanyName; in 1999 refer to YEAR (OrderDate) = 1999",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1999' AND T1.CompanyName = 'Hanna Moos'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many days was the fastest shipping of Berglunds snabbkp's order?",
        "question_ar": "",
        "evidence_en": "Berglunds snabbkp is the CompanyName; fastest shipping = Min(Subtract(ShippedDate, OrderDate))",
        "evidence_ar": "",
        "SQL": "SELECT datediff(T2.ShippedDate, T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Berglunds snabbkp' ORDER BY datediff(T2.ShippedDate, T2.OrderDate) LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which company placed the order with the id 10257?",
        "question_ar": "",
        "evidence_en": "\"10257\" is the OrderID; company refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question_en": "In which year did Around the Horn place the most orders?",
        "question_ar": "",
        "evidence_en": "Around the Horn is the CompanyName; year with the most order refers to Year (OrderDate) where Max(Count(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Around the Horn' GROUP BY STRFTIME('%Y', T2.OrderDate) ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees report to Andrew Fuller?",
        "question_ar": "",
        "evidence_en": "\"Andrew Fuller\" refers to FirstName = 'Andrew' AND LastName = 'Fuller'; report to refers to ReportsTo ! = NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which country are the majority of the suppliers located?",
        "question_ar": "",
        "evidence_en": "majority of the suppliers located refers to MAX(COUNT(SupplierID))",
        "evidence_ar": "",
        "SQL": "SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the employees who report to the Sales Manager?",
        "question_ar": "",
        "evidence_en": "full name refers to LastName, FirstName; the Sales Manager refers to Title = 'Sales Manager'; report to refers to ReportsTo is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "In August of 1996, how many orders were placed by the customer with the highest amount of orders?",
        "question_ar": "",
        "evidence_en": "August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How much is the salary of the first employee that was hired?",
        "question_ar": "",
        "evidence_en": "first employee that was hired refers to MIN(HireDate)",
        "evidence_ar": "",
        "SQL": "SELECT Salary FROM Employees WHERE HireDate = ( SELECT MIN(HireDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How old was the oldest employee at the time he or she was hired?",
        "question_ar": "",
        "evidence_en": "oldest employee at the time he or she was hired refers to MAX(SUBTRACT(HireDate, Birthdate))",
        "evidence_ar": "",
        "SQL": "SELECT MAX(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) FROM Employees"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total sales amount of all discontinued products?",
        "question_ar": "",
        "evidence_en": "discontinued products refers to Discontinued = 1; total sales amount refers to SUM(MULTIPLY(UnitPrice, Quantity))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the category of the product that has the highest number of discontinued products?",
        "question_ar": "",
        "evidence_en": "discontinued products refers to Discontinued = 1; highest number of discontinued products refers to MAX(Discontinued = 1)",
        "evidence_ar": "",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Discontinued = 1 GROUP BY T2.CategoryName ORDER BY COUNT(T1.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many condiments were sold in 1997?",
        "question_ar": "",
        "evidence_en": "\"Condiments\" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the customer who purchased the highest number of products in a single order?",
        "question_ar": "",
        "evidence_en": "highest number of products refers to MAX(COUNT(ProductID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName ORDER BY COUNT(T3.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the monthly average number of products shipped via Federal Shipping for the year 1996?",
        "question_ar": "",
        "evidence_en": "monthly average number of products refers to DIVIDE(SUM(OrderID), 12); shipped via Federal Shipping refers to CompanyName = 'Federal Shipping'; for the year 1996 refers to year(ShippedDate) = 1996",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.ShipVia) AS REAL) / 12 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate LIKE '1996%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which products are being supplied by \"G'day, Mate\"? List all of their names.",
        "question_ar": "",
        "evidence_en": "supplied by \"G'day, Mate\" refers to CompanyName = 'G''day, Mate';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'G%day, Mate'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territories are there in the region with the highest number of territories?",
        "question_ar": "",
        "evidence_en": "highest number of territories refers to max(TerritoryID)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RegionDescription), T1.TerritoryDescription, COUNT(*) AS num FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T1.TerritoryDescription ORDER BY num DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the company name of the supplier who supplies the product with the highest unit price?",
        "question_ar": "",
        "evidence_en": "the highest unit price refers to MAX(UnitPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many female employees are in charge of 3 or more territories?",
        "question_ar": "",
        "evidence_en": "female employees refers to TitleOfCourtesy = 'Mrs.' or TitleOfCourtesy = 'Ms.'; in charge of 3 or more territories refers to TerritoryID > = 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(EID) FROM ( SELECT T1.EmployeeID AS EID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.TitleOfCourtesy IN ('Ms.' OR 'Mrs.') GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) >= 3 ) T1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who are the top 8 suppliers supplying the products with the highest user satisfaction?",
        "question_ar": "",
        "evidence_en": "highest user satisfaction refers to max(ReorderLevel);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T1.ReorderLevel DESC LIMIT 8"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the company name of the customer who made the biggest amount of purchase in a single order before discount?",
        "question_ar": "",
        "evidence_en": "biggest amount of purchase in a single order refers to MAX(MULTIPLY(UnitPrice, Quantity)); before discount refers to Discount = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T3.Discount = 0 GROUP BY T1.CompanyName ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What was the total amount of sales handled by Nancy Davolio in December 1996, excluding discounts?",
        "question_ar": "",
        "evidence_en": "in December 1996 refers to year(OrderDate) = 1996 AND month(OrderDate) = 12; excluding discounts refers to Discount = 0; total amount of sales refers to MULTIPLY((UnitPrice, Quantity))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.OrderDate LIKE '1996-12%' AND T3.Discount = 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the total amount of sales made in the year 1997?",
        "question_ar": "",
        "evidence_en": "year 1997 refers to year(OrderDate) = 1997; total amount of sales refers to (UnitPrice * Quantity)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.OrderDate LIKE '1997%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average annual amount of shipped sales from 1997 to 1998?",
        "question_ar": "",
        "evidence_en": "from 1997 to 1998 refers to ShippedDate > '1996-1-1' and ShippedDate < '1998-12-31'; average annual amount refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / 3 FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.ShippedDate BETWEEN '1996-01-01 00:00:00' AND '1998-12-31 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were shipped to Venezuela in 1996?",
        "question_ar": "",
        "evidence_en": "shipped to Venezuela refers to ShipCountry = 'Venezuela'; in 1996 refers to year(ShippedDate) = '1996';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OrderID) FROM Orders WHERE ShipCountry = 'Venezuela' AND STRFTIME('%Y', ShippedDate) = '1996'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the ID and description of the condiments category?",
        "question_ar": "",
        "evidence_en": "condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID",
        "evidence_ar": "",
        "SQL": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the order IDs, product IDs and unit price of orders which total payment is greater than 15000.",
        "question_ar": "",
        "evidence_en": "total payment is greater than 15000 refers to MULTIPLY((Quantity * UnitPrice * (1 - Discount))) > 15000\n",
        "evidence_ar": "",
        "SQL": "SELECT ProductID, OrderID, UnitPrice FROM `Order Details` WHERE UnitPrice * Quantity * (1 - Discount) > 15000"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the territory IDs under employee ID of 7.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the supplier company name in Sydney and its homepage address if available.",
        "question_ar": "",
        "evidence_en": "in Sydney refers to City = 'Sydney';",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Write down the full name of Vie President of Sales and his age when he was hired.",
        "question_ar": "",
        "evidence_en": "Vice President of Sales refers to Title = 'Vice President, Sales';",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, HireDate) AS AGE FROM Employees WHERE Title = 'Vice President, Sales'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the supplier company names located in Germany.",
        "question_ar": "",
        "evidence_en": "located in Germany refers to Country = 'Germany';",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM Suppliers WHERE Country = 'Germany'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the employees' full names and ages in 2022 who lived in London.",
        "question_ar": "",
        "evidence_en": "in London refers to City = 'London'; ages in 2022 refers to SUBTRACT(2022, year(BirthDate)); full names refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT TitleOfCourtesy, FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, NOW()) AS ages FROM Employees WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the customer company names, addresses, phones and faxes which are located in London.",
        "question_ar": "",
        "evidence_en": "in London refers to City = 'London'",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName, Address, Phone, Fax FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the full name of employees and titles who have to report to Sales Manager.",
        "question_ar": "",
        "evidence_en": "Sales Manager refers to Title = 'Sales Manager'; full name refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all the customer company names and cities located in Canada.",
        "question_ar": "",
        "evidence_en": "located in Canada refers to Country = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Find the total production amount and product names which had \"10 - 500 g pkgs.\" as quantity per unit.",
        "question_ar": "",
        "evidence_en": "total production amount refers to ADD(UnitsInstock, UnitsOnOrder)",
        "evidence_ar": "",
        "SQL": "SELECT UnitsInStock + UnitsOnOrder, ProductName FROM Products WHERE QuantityPerUnit = '10 - 500 g pkgs.'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all the product names and categories of the highest reorder level.",
        "question_ar": "",
        "evidence_en": "Highest reorder level refers to Max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID ORDER BY T2.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Describe the supplier companies, cities and products which total production amount is more than 120.",
        "question_ar": "",
        "evidence_en": "total production amount is more than 120 refers to ADD(UnitsInstock, UnitsOnOrder) > 120",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName, T2.City, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock + UnitsOnOrder > 120"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the contact person name, title and supplied products by \"Escargots Nouveaux\" company.",
        "question_ar": "",
        "evidence_en": "\"Escargots Nouveaux\" company refers to CompanyName = 'Escargots Nouveaux';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ContactName, T2.ContactTitle, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the territory IDs, description and region description under the in-charge of Mrs. Margaret Peacock.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.TitleOfCourtesy = 'Mrs.' AND T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What were the products supplied by the company in Spain?",
        "question_ar": "",
        "evidence_en": "company in Spain refers to Country = 'Spain'; product supplied refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What products were ordered by the customer ID \"WILMK\" which were required on 3/26/1998?",
        "question_ar": "",
        "evidence_en": "required on 3/26/1998 refers to RequiredDate = '1998-03-26 00:00:00'; products ordered refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.RequiredDate LIKE '1998-03-26%' AND T1.CustomerID = 'WILMK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the list of product IDs and names under the meat/poultry category.",
        "question_ar": "",
        "evidence_en": "meat/poultry category refers to CategoryName = 'Meat/Poultry';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were made by the customers in Ireland.",
        "question_ar": "",
        "evidence_en": "in Ireland refers to Country = 'Ireland';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the products list which were ordered in 1996 by the company in Norway.",
        "question_ar": "",
        "evidence_en": "ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'",
        "evidence_ar": "",
        "SQL": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among orders shipping to Brazil, mention the supplier company of the order which was done by employee Anne Dodsworth in December, 1996 .",
        "question_ar": "",
        "evidence_en": "shipping to Brazil refers to ShipCountry = 'Brazil'; in December, 1996  refers to year(OrderDate) = 1996 and month(OrderDate) = 12;",
        "evidence_ar": "",
        "SQL": "SELECT T5.CompanyName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Suppliers AS T5 ON T4.SupplierID = T5.SupplierID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth' AND T2.ShipCountry = 'Brazil' AND T2.OrderDate LIKE '1996-12%'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName, LastName; shipped to USA refers to ShipCountry = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName, T1.Title, T1.Salary , COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE ShipCountry = 'USA' GROUP BY T1.FirstName, T1.LastName, T1.Title, T1.Salary, T1.BirthDate ORDER BY T1.BirthDate LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the territory IDs and descriptions existed in Southern region.",
        "question_ar": "",
        "evidence_en": "in Southern region refers to RegionDescription = 'Southern';",
        "evidence_ar": "",
        "SQL": "SELECT T1.TerritoryID, T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the average payment per product under confections category.",
        "question_ar": "",
        "evidence_en": "under confections category refers to CategoryName = 'Confections';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Confections'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Find the total payment of the orders by customers from San Francisco.",
        "question_ar": "",
        "evidence_en": "from San Francisco refers to City = 'San Francisco'; total payment refers to sum(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) AS TOTALPAYMENT FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.City = 'San Francisco'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the total production for each product which were supplied from Japan",
        "question_ar": "",
        "evidence_en": "from Japan refers to Country = 'Japan'; total production refers to ADD(UnitsInstock, UnitsOnOrder)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the supplied products from Australia, describe the discontinued products and the category.",
        "question_ar": "",
        "evidence_en": "from Australia refers to Country = 'Australia'; discontinued products refers to Discontinued = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName, T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.Country = 'Australia' AND T2.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Mention the supplier country of Ipoh Coffee and the order ID which had maximum in total payment.",
        "question_ar": "",
        "evidence_en": "Ipoh Coffee refers to ProductName = 'Ipoh Coffee'; maximum in total payment refers to MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT T3.Country, T1.OrderID FROM `Order Details` AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T2.ProductName = 'Ipoh Coffee' ORDER BY T1.UnitPrice * T1.Quantity * (1 - T1.Discount) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the list of products ordered by ID 10979 and calculate its total payment.",
        "question_ar": "",
        "evidence_en": "ordered by ID 10979 refers to OrderID = '10979'; total payment refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName , SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10979 GROUP BY T1.ProductName"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the products under grains/cereals category, provide the contact person and title of the supplier with one digit ID.",
        "question_ar": "",
        "evidence_en": "grains/cereals category refers to CategoryName = 'Grains/Cereals'; supplier with one digit ID refers to SupplierID between 1 and 10;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ContactName, T1.ContactTitle FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Grains/Cereals' AND T1.SupplierID BETWEEN 1 AND 10 LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide Speedy Express's phone number and number of shipped orders on 30th January, 1998.",
        "question_ar": "",
        "evidence_en": "Speedy Express's refers to CompanyName = 'Speedy Express'; orders on 30th January, 1998 refers to ShippedDate = '1998-01-30 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone, COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' AND T1.ShippedDate LIKE '1998-01-30%' GROUP BY T2.Phone"
    },
    {
        "db_id": "retail_world",
        "question_en": "Describe the ordered products which were the most overdue from required date.",
        "question_ar": "",
        "evidence_en": "the most overdue from required date refers to MIN(SUBTRACT(ShippedDate, RequiredDate) < 0)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE DATEDIFF(T1.ShippedDate, T1.RequiredDate) < 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "Under the in-charge of inside sales coordinator, provide the product lists which were shipped to Mexico in 1996.",
        "question_ar": "",
        "evidence_en": "shipped to Mexico refers to ShipCountry = 'Mexico'; in 1996 refers to year(ShippedDate) = 1996; charge of inside sales coordinator refers to Title = 'Inside Sales Coordinator'",
        "evidence_ar": "",
        "SQL": "SELECT T4.ProductName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Title = 'Inside Sales Coordinator' AND T2.ShippedDate LIKE '1996%' AND T2.ShipCountry = 'Mexico'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the name of the most popular dairy product in terms of reorder quantity.",
        "question_ar": "",
        "evidence_en": "'dairy product' refers to CategoryName; most popular reorder quantity refers to MAX(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the production volume of the dairy product 'Mascarpone Fabioli'.",
        "question_ar": "",
        "evidence_en": "'Mascarpone Fabioli' is a ProductName; calculation = SUM(UnitsInStock, UnitsOnOrder)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(UnitsInStock + UnitsOnOrder) FROM Products WHERE ProductName = 'Mascarpone Fabioli'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the name and product category for the most expensive and the least expensive products.",
        "question_ar": "",
        "evidence_en": "name of product refers to ProductName; category of product refers to CategoryName; the most expensive products refers to MAX(UnitPrice); the least expensive products refers to MIN(UnitPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.UnitPrice IN (( SELECT MIN(UnitPrice) FROM Products ), ( SELECT MAX(UnitPrice) FROM Products ))"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the customer, which placed the largest order in terms of value.",
        "question_ar": "",
        "evidence_en": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the number of employees in Northern sales region.",
        "question_ar": "",
        "evidence_en": "Northern sales region refers to RegionDescription = 'Northern'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.EmployeeID) FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Region AS T3 ON T1.RegionID = T3.RegionID WHERE T3.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the average value of the sales order?",
        "question_ar": "",
        "evidence_en": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM `Order Details`"
    },
    {
        "db_id": "retail_world",
        "question_en": "Find the percentage of discontinued products in Northwind's portfolio of products.",
        "question_ar": "",
        "evidence_en": "discontinued products refers to Discontinued = 1; calculation = DIVIDE(SUM(Discontinued = 1), COUNT(ProductID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN Discontinued = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(ProductID) FROM Products"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the full name of the employee who processed the sales order with ID 10274.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'.",
        "question_ar": "",
        "evidence_en": "'GROSELLA-Restaurante' refers to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'GROSELLA-Restaurante'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Name products and their quantity ordered by the company 'GROSELLA-Restaurante' in the sales order that was processed by Nancy Davolio.",
        "question_ar": "",
        "evidence_en": "name products refers to ProductName; 'GROSELLA-Restaurante' refers to CompanyName; 'Nancy Davolio' is the full name of an employee; full name refers to FirstName, LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T4.ProductName, T3.Quantity FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Customers AS T5 ON T2.CustomerID = T5.CustomerID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T5.CompanyName = 'GROSELLA-Restaurante'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the total number of orders placed by the customer 'Laughing Bacchus Wine Cellars' and it's average value.",
        "question_ar": "",
        "evidence_en": "'Laughing Bacchus Wine Cellars' refers to CompanyName; calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) , SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) / COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many boxes of 'Pavlova' did Northwind sell?",
        "question_ar": "",
        "evidence_en": "'Pavlova' is a ProductName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Pavlova'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the salary range for sales representative in Northwind?",
        "question_ar": "",
        "evidence_en": "salary range is BETWEEN max(Salary) AND min(Salary); sales representative is a title",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT MIN(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MIN , ( SELECT MAX(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MAX"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many suppliers does Northwind have in USA?",
        "question_ar": "",
        "evidence_en": "'USA' is a country; supplier refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What products are no longer sold by Northwind?",
        "question_ar": "",
        "evidence_en": "no longer sold refers to Discontinued = 1; products refers to ProductName",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who is the Sales Agent for the company 'Eastern Connection'?",
        "question_ar": "",
        "evidence_en": "'Eastern Connection' is a CompanyName; 'Sales Agent' is a ContactTitle",
        "evidence_ar": "",
        "SQL": "SELECT ContactName FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactTitle = 'Sales Agent'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many companies do ship Northwind's orders?",
        "question_ar": "",
        "evidence_en": "companies refers to ShipperID",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ShipperID) FROM Shippers"
    },
    {
        "db_id": "retail_world",
        "question_en": "Identify the total number of orders processed by Northwind employee named Andrew Fuller. What percent of those orders was shipped to Austria?",
        "question_ar": "",
        "evidence_en": "'Andrew Fuller' is the full name of an employee; full name refers to FistName, LastName; Austria refers to ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Austria'), COUNT(OrderID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.ShipCountry = 'Austria' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.",
        "question_ar": "",
        "evidence_en": "Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName",
        "evidence_ar": "",
        "SQL": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the phone number of company named Around the Horn.",
        "question_ar": "",
        "evidence_en": "phone number refers to Phone; 'Around the Horn' is a CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT Phone FROM Customers WHERE CompanyName = 'Around the Horn'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city.",
        "question_ar": "",
        "evidence_en": "'Blondesddsl pre et fils' is a CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many companies are there in the city of London?",
        "question_ar": "",
        "evidence_en": "companies refers to CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CompanyName) FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the address of the company Eastern Connection whose contact name is Ann Devon.",
        "question_ar": "",
        "evidence_en": "'Eastern Connection' is a CompanyName; 'Ann Devon' is the full name of an employee; full name refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT Address FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactName = 'Ann Devon'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate which company is located in France?",
        "question_ar": "",
        "evidence_en": "company refers to CompanyName; France is a country",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM Customers WHERE Country = 'France'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many product names does the supplier Exotic Liquids have?",
        "question_ar": "",
        "evidence_en": "'Exotic Liquids' is a CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the name of the company that has the product with the highest unit price?",
        "question_ar": "",
        "evidence_en": "name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which company name in London city has the most stocked products?",
        "question_ar": "",
        "evidence_en": "the most stocked products refers to MAX(UnitsInStock)",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.City = 'London' ORDER BY T1.UnitsInStock DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which product of Exotic Liquids company that have the highest reorder levels?",
        "question_ar": "",
        "evidence_en": "'Exotic Liquids' is a CompanyName; the highest reorder levels refers to MAX(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids' ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide the category name of the Chef Anton's Gumbo Mix product that New Orleans Cajun Delights company has.",
        "question_ar": "",
        "evidence_en": "'Chef Anton's Gumbo Mix' is a ProductName; 'New Orleans Cajun Delights' is a CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.CompanyName = 'New Orleans Cajun Delights' AND T2.ProductName LIKE 'Chef Anton%s Gumbo Mix'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.",
        "question_ar": "",
        "evidence_en": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Indicate the category name of the product name with the highest units on order.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.UnitsOnOrder = ( SELECT MAX(T1.UnitsOnOrder) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the difference in number of unit price from Chef Anton's Cajun Seasoning product and Chef Anton's Gumbo Mix product of New Orleans Cajun Delights company.",
        "question_ar": "",
        "evidence_en": "Chef Anton's Cajun Seasoning' AND 'Chef Anton''s Gumbo Mix' are ProductName; 'New Orleans Cajun Delights' is a CompanyName; calculation = SUBTRACT(UnitPrice where ProductName = 'Chef Anton's Cajun Seasoning', UnitPrice where ProductName = 'Chef Anton''s Gumbo Mix')",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Cajun Seasoning' ) - ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Gumbo Mix' ) AS calu"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which of Cooperativa de Quesos 'Las Cabras' products have a unit price greater than 20?",
        "question_ar": "",
        "evidence_en": "Cooperativa de Quesos 'Las Cabras'' is a CompanyName; unit price greater than 20 refers to UnitPrice > 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Cooperativa de Quesos%' AND T1.UnitPrice > 20"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please indicate the product name of Tokyo Traders company with order quantity greater than 40.",
        "question_ar": "",
        "evidence_en": "'Tokyo Traders' is a CompanyName; order quantity greater than 40 refers to Quantity > 40",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CompanyName = 'Tokyo Traders' AND T3.Quantity > 40"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all category name of Exotic Liquids 's product with units in stock over 100.",
        "question_ar": "",
        "evidence_en": "'Exotic Liquids' is a CompanyName; units in stock over 100 refers to UnitsInStock > 100",
        "evidence_ar": "",
        "SQL": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T2.UnitsInStock > 100 AND T1.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity.",
        "question_ar": "",
        "evidence_en": "order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Quantity < 50 THEN 1 ELSE 0 END) , CAST(SUM(IF(T2.Quantity < 50, 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity.",
        "question_ar": "",
        "evidence_en": "'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the position of Robert King?",
        "question_ar": "",
        "evidence_en": "'Robert King' is the full name of an employee; full name refers to FirstName, LastName; position refers to Title",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Write the shipping company name with the telephone number of (503) 555-9931.",
        "question_ar": "",
        "evidence_en": "telephone number of (503) 555-9931 refers to Phone = '(503) 555-9931'",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM Shippers WHERE Phone = '(503) 555-9931'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Write the address and phone number of Margaret Peacock.",
        "question_ar": "",
        "evidence_en": "Margaret Peacock is the full name of an employee; full name refers to FirstName, LastName; phone number refers to HomePhone",
        "evidence_ar": "",
        "SQL": "SELECT Address, HomePhone FROM Employees WHERE FirstName = 'Margaret' AND LastName = 'Peacock'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full address of Rattlesnake Canyon Grocery?",
        "question_ar": "",
        "evidence_en": "full address refers to ShipAddress, ShipCity, ShipRegion,ShipPostalCode, ShipCountry; 'Rattlesnake Canyon Grocery' is a ShipName;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry FROM Orders WHERE ShipName = 'Rattlesnake Canyon Grocery'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all product names under Confections.",
        "question_ar": "",
        "evidence_en": "'Confections' is a CompanyName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Sir Rodney's Marmalade is supplied by which company and who is the contact for this company?",
        "question_ar": "",
        "evidence_en": "'Sir Rodney's Marmalade' is a ProductName; company refers to CompanyName; contact for a company refers to ContactName",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName, T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName LIKE 'Sir Rodney%s Marmalade'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the full name of the employee who is in charge of the territory of Denver?",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName, LastName; Denver is a TerritoryDescription",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Denver'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List all the territories where Laura Callahan is in charge.",
        "question_ar": "",
        "evidence_en": "territories refers to TerritoryDescription; Laura Callahan is the full name of an employee; full name refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Laura' AND T1.LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were shipped via Federal Shipping?",
        "question_ar": "",
        "evidence_en": "'Federal Shipping' is a CompanyName; orders refers to OrderID",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShipVia = 3"
    },
    {
        "db_id": "retail_world",
        "question_en": "Name the products where the suppliers come from Finland.",
        "question_ar": "",
        "evidence_en": "'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'"
    },
    {
        "db_id": "retail_world",
        "question_en": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.",
        "question_ar": "",
        "evidence_en": "Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Name the suppliers that supply products under the category 'cheeses.'",
        "question_ar": "",
        "evidence_en": "suppliers refers to CompanyName; 'cheeses' is a Description",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Name all products supplied by Zaanse Snoepfabriek.",
        "question_ar": "",
        "evidence_en": "products refers to ProductName; 'Zaanse Snoepfabriek' is a CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Zaanse Snoepfabriek'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which products by Plutzer Lebensmittelgromrkte AG were discontinued and what are their price?",
        "question_ar": "",
        "evidence_en": "products refers to ProductName; 'Plutzer Lebensmittelgromrkte AG' is a CompanyName; price refers to UnitPrice; \ndiscontinued products refers to discontinued = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "List the cities where the product 'Mishi Kobe Niku' were shipped to.",
        "question_ar": "",
        "evidence_en": "cities refers to ShipCity; 'Mishi Kobe Niku' is a ProductName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ShipCity FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductName = 'Mishi Kobe Niku'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What percentage does the shipment of products by Speedy Express to Sweden make up to the shipping company's total?",
        "question_ar": "",
        "evidence_en": "Speedy Express is a company; Sweden is a ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Sweden'), SEM(ShipCountry)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.ShipCountry = 'Sweden' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many territory fall into region 1?",
        "question_ar": "",
        "evidence_en": "region 1 refers to RegionID = 1\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the the total number of territory in each region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID IN (1, 2, 3, 4) GROUP BY RegionID"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many suppliers are from UK?",
        "question_ar": "",
        "evidence_en": "from UK refers to Country = 'UK'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Please give the contact name for Tokyo Traders.",
        "question_ar": "",
        "evidence_en": "Tokyo Traders refers to CompanyName = 'Tokyo Traders'",
        "evidence_ar": "",
        "SQL": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees from USA with Sales Representative title?",
        "question_ar": "",
        "evidence_en": "from USA refers to Country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Country) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the highest salary earn by the the employee and what is his/her position in the company?",
        "question_ar": "",
        "evidence_en": "highest salary refers to max(salary); position refers to Title",
        "evidence_ar": "",
        "SQL": "SELECT Salary, Title FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many products supplied by Plutzer Lebensmittelgromrkte AG that is currently out of stock and on order?",
        "question_ar": "",
        "evidence_en": "Plutzer Lebensmittelgromrkte AG refers to CompanyName; is currently out of stock and on order refers to UnitsInStock = 0 and UnitsOnOrder > 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.UnitsInStock = 0 AND T1.UnitsOnOrder = 0"
    },
    {
        "db_id": "retail_world",
        "question_en": "What product have the highest unit price and how many quantity have been being sold?",
        "question_ar": "",
        "evidence_en": "product refers to ProductID; highest unit price refers to Max(UnitPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductName, T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which employee has created the least order and please indicates the employee's title?",
        "question_ar": "",
        "evidence_en": "least order refers to Min(OrderID)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.OrderID) LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the most common product ordered by a customer from Germany?",
        "question_ar": "",
        "evidence_en": "most common product refers to max(count(ProductID)); customer from Germany refers to Country = 'Germany'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN `Order Details` AS T2 WHERE T1.Country = 'Germany' GROUP BY T2.ProductID ORDER BY COUNT(T2.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the total products value shipped to Brazil by Speedy Express Company?",
        "question_ar": "",
        "evidence_en": "shipped to Brazil refers to ShipCountry = 'Brazil'; by Speedy Express Company refers to CompanyName = 'Speedy Express'; total products value refers to sum(MULTIPLY(UnitPrice, Quantity))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity * T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T3.CompanyName = 'Speedy Express' AND T1.ShipCountry = 'Brazil'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many subordinates does employee ID 2 have and what is the biggest order in terms of value that his/her subordinates have created?",
        "question_ar": "",
        "evidence_en": "subordinates of employee ID 2 refers to EmployeeID where ReportsTo = 2;  biggest order in terms of value refers to max(MULTIPLY(Quantity, UnitPrice))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.EmployeeID), SUM(T3.Quantity * T3.UnitPrice) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.ReportsTo = 2 ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many sales values have been created by sales representative and which sales representative have the highest sales?",
        "question_ar": "",
        "evidence_en": "sales representative refers to Title = 'Sales Representative'; sales values refers to MULTIPLY(Quantity, UnitPrice); the highest sales refers to max(MULTIPLY(Quantity, UnitPrice))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.Title = 'Sales Representative' ORDER BY SUM(T3.UnitPrice * T3.Quantity)"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many employees is a UK citizen and are they all covering the same region?",
        "question_ar": "",
        "evidence_en": "is a UK citizen refers to Country = 'UK'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.EmployeeID), T3.RegionID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Country = 'UK' GROUP BY T3.RegionID"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which customer have the biggest purchase in one order and where does this order being ship to?",
        "question_ar": "",
        "evidence_en": "biggest purchase refers to max(ProductID.Order_Details); ship to refers to ShipCountry",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName, T2.ShipCountry FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName, T2.ShipCountry ORDER BY COUNT(T3.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Which customer is a regular customer in this shop and what are the products category that he mostly buy?",
        "question_ar": "",
        "evidence_en": "regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID, T4.CategoryName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Categories AS T4 ON T3.CategoryID = T4.CategoryID ORDER BY T1.CustomerID DESC, T4.CategoryName DESC"
    },
    {
        "db_id": "retail_world",
        "question_en": "What are the most popular confections product and calculate the total sales generated by this product?",
        "question_ar": "",
        "evidence_en": "most popular confections product refers to ProductID = max(count(MULTIPLY(Quantity, UnitPrice))) from CategoryName = 'Confections' ;  total sales refers to sum(MULTIPLY(Quantity, UnitPrice))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UnitPrice * T3.Quantity) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CategoryName = 'Confections' GROUP BY T3.Quantity ORDER BY T3.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the name of product with the ID of 77?",
        "question_ar": "",
        "evidence_en": "name of product refers to ProductName; ID refers to ProductID",
        "evidence_ar": "",
        "SQL": "SELECT ProductName FROM Products WHERE ProductID = 77"
    },
    {
        "db_id": "retail_world",
        "question_en": "State the company name of all suppliers in USA.",
        "question_ar": "",
        "evidence_en": "in USA refers to Country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT CompanyName FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the position title for Laura Callahan?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question_en": "State the name of employee that manages the order from Victuailles en stock?",
        "question_ar": "",
        "evidence_en": "name of employee refers to FirstName; from Victuailles en stock refers to CompanyName = 'Victuailles en stock'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.CompanyName = 'Victuailles en stock'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were shipped by Federal Shipping?",
        "question_ar": "",
        "evidence_en": "Federal Shipping refers to CompanyName = 'Federal Shipping'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Who was taking charge of orders from Morristown?",
        "question_ar": "",
        "evidence_en": "Morristown refers to TerritoryDescription = 'Morristown'",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Morristown'"
    },
    {
        "db_id": "retail_world",
        "question_en": "State the name of all territories in Northern region.",
        "question_ar": "",
        "evidence_en": "name of all territories refers to TerritoryDescription; Northern region refers to RegionDescription = 'Northern'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders were handled by Michael Suyama. State the order ID.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the ratio number of territories in Northern region and number territories in Western region?",
        "question_ar": "",
        "evidence_en": "Northern region refers to RegionID = 3; Western region refers to RegionID = 2 ; ratio = divide((TerritoryDescription where RegionID = 3), (TerritoryDescription where RegionID = 2))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern' ) AS REAL) * 100 / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Westerns' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question_en": "Provide employees' ID who are in-charge of territory ID from 1000 to 2000.",
        "question_ar": "",
        "evidence_en": "territory ID from 1000 to 2000 refers to TerritoryID BETWEEN 1000 and 2000",
        "evidence_ar": "",
        "SQL": "SELECT EmployeeID FROM EmployeeTerritories WHERE TerritoryID BETWEEN 1000 AND 2000"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the territory IDs, descriptions and region description which are under the in-charge of Nancy Davolio,",
        "question_ar": "",
        "evidence_en": "descriptions refers to TerritoryDescription; region refers to RegionDescription",
        "evidence_ar": "",
        "SQL": "SELECT T3.RegionID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.LastName = 'Davolio' AND T1.FirstName = 'Nancy'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Describe Sales Representative names who were hired in 1992 and compare the number of orders among them.",
        "question_ar": "",
        "evidence_en": "Sales Representative refers to Title = 'Sales Representative'；were hired in 1992 refers to HireDate = '1992'",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName, COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative' AND STRFTIME('%Y', T1.HireDate) = '1992' GROUP BY T1.EmployeeID, T1.FirstName, T1.LastName"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the total payment of orders for Vegie-spread product.",
        "question_ar": "",
        "evidence_en": "Vegie-spread product refers to ProductName = 'Vegie-spread'；total payment = MULTIPLY(UnitPrice, Quantity, (1-Discount))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) AS sum FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Vegie-spread'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List down the company names which supplied products for the order on 14th August, 1996.",
        "question_ar": "",
        "evidence_en": "products refers to Order_Details.ProductID; on 14th August, 1996 refers to OrderDate = '8/14/1996'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE date(T4.OrderDate) = '1996-08-14'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the product lists in order ID 10337, write down the product names and suppliers which had the highest in reorder level.",
        "question_ar": "",
        "evidence_en": "suppliers refers to CompanyName; highest in reorder level refers to Max(ReorderLevel)",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductName, T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T3.OrderID = 10337 ORDER BY T2.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Name the shipper which had the most shipments in first quarter of 1998.",
        "question_ar": "",
        "evidence_en": "Name the shipper refers to CompanyName; most shipments refers to max(count(OrderID)); first quarter of 1998 refers to ShippedDate = 1998/1 and ShippedDate = 1998/2 and ShippedDate = 1998/3 and ShippedDate = 1998/4",
        "evidence_ar": "",
        "SQL": "SELECT T1.CompanyName FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia WHERE STRFTIME('%Y', T2.ShippedDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many customers are located in London?",
        "question_ar": "",
        "evidence_en": "London refers to City = 'London'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the title of Michael Suyama?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List out the full name of employee who has birth day on \"3/4/1955 12:00:00 AM\".",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName, LastName; brith day refers to BirthDate",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'"
    },
    {
        "db_id": "retail_world",
        "question_en": "Mention the first name of employee who took care the order id 10250.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10250"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders that the employees who are located in Tacoma handled?",
        "question_ar": "",
        "evidence_en": "located in Tacoma refers to City = 'Tacoma'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the country location of the employee who handled order id 10257?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the title of the employee who handled order id 10270?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the phone number of the customer who placed the order id 10264.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264"
    },
    {
        "db_id": "retail_world",
        "question_en": "What is the region where the customer who placed the order id 10276 located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Region FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10276"
    },
    {
        "db_id": "retail_world",
        "question_en": "Among the employees who handled orders to Brazil, who has the highest salary and calculate the average salary of them.",
        "question_ar": "",
        "evidence_en": "orders to Brazil refers to ShipCountry = 'Brazil'; highest salary refers to max(salary); average salary = AVG(Salary)",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName, AVG(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCountry = 'Brazil' GROUP BY T1.FirstName, T1.LastName ORDER BY SUM(T1.Salary) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question_en": "Calculate the percentage salary of employees who handled orders shipped in 1996.",
        "question_ar": "",
        "evidence_en": "shipped in 1996 refers to ShippedDate = 1996; percentage salary = divide(sum(Salary when ShippedDate = 1996), sum(Salary)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T2.ShippedDate) = '1996' THEN T1.Salary ELSE 0 END) AS REAL) * 100 / SUM(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID"
    },
    {
        "db_id": "retail_world",
        "question_en": "When was the employee who handled order id 10281 hired?",
        "question_ar": "",
        "evidence_en": "When was hired refers to HireDate",
        "evidence_ar": "",
        "SQL": "SELECT T1.HireDate FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10281"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders was handled by employees who reported to employee id 5?",
        "question_ar": "",
        "evidence_en": "reported to employee id 5 refers to ReportsTo = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.ReportsTo = 5"
    },
    {
        "db_id": "retail_world",
        "question_en": "Give the full name of employee who handled the order id 10280.",
        "question_ar": "",
        "evidence_en": "full name refers to FirstName, LastName",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280"
    },
    {
        "db_id": "retail_world",
        "question_en": "State the shipping company of order id 10260.",
        "question_ar": "",
        "evidence_en": "shipping company refers to CompanyName",
        "evidence_ar": "",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260"
    },
    {
        "db_id": "retail_world",
        "question_en": "How many orders have been shipped through United Package?",
        "question_ar": "",
        "evidence_en": "shipped through refers to ShipVia; United Package refers to CompanyName = 'United Package'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question_en": "List out the phone number of the shipping company of order id 10296.",
        "question_ar": "",
        "evidence_en": "shipping company refers to Shippers; phone number refers to Phone",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260"
    },
    {
        "db_id": "retails",
        "question_en": "How many kinds of items are returned in order no.5?",
        "question_ar": "",
        "evidence_en": "returned refer to l_returnflag = 'R'; order no.5 refers to l_orderkey = 5; kinds of items refer to l_linenumber;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question_en": "When was the latest date the items of order no.1 were shipped?",
        "question_ar": "",
        "evidence_en": "order no.1 refers to l_orderkey = 1; the latest date shipped refers to MAX(l_shipdate);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question_en": "Which order has a higher priority, order no. 4 or order no. 36?",
        "question_ar": "",
        "evidence_en": "earlier orderdate have higher priority in delivery; which order no. 4 or order no. 36 refers to o_orderkey in (4, 36) where MIN(o_orderdate);",
        "evidence_ar": "",
        "SQL": "SELECT l_orderkey FROM lineitem WHERE l_orderkey IN (4, 36) ORDER BY l_shipdate DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the comment of the order with the highest total price?",
        "question_ar": "",
        "evidence_en": "the highest total price refers to MAX(o_totalprice); comment of the order refers to o_comment;",
        "evidence_ar": "",
        "SQL": "SELECT o_comment FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question_en": "What is the phone number of Customer#000000001?",
        "question_ar": "",
        "evidence_en": "customer phone refers to c_phone; Customer#000000001 refers to c_name;",
        "evidence_ar": "",
        "SQL": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders in total have the customers in the household segment made?",
        "question_ar": "",
        "evidence_en": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the orders made by a customer in the household segment, what is the highest total price?",
        "question_ar": "",
        "evidence_en": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the highest total price refers to MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the order comments of all the orders made by customers in the household segment.",
        "question_ar": "",
        "evidence_en": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question_en": "Please give the name of the customer who has made the single order with the highest total price.",
        "question_ar": "",
        "evidence_en": "name of the customer refers to c_name; single order with the highest total price refers to MAX(o_totalprice) LIMIT 1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the order keys of all the orders made by a customer whose account is in debt.",
        "question_ar": "",
        "evidence_en": "account is in debt if c_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "Among the orders made by customers in the household segment, how many of them are urgent?",
        "question_ar": "",
        "evidence_en": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers are in Brazil?",
        "question_ar": "",
        "evidence_en": "Brazil is the name of the nation which refers to n_name = 'BRAZIL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the phone numbers of all the customers in the household segment and are in Brazil.",
        "question_ar": "",
        "evidence_en": "phone numbers refer to c_phone; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; household segment refers to c_mktsegment = 'HOUSEHOLD';",
        "evidence_ar": "",
        "SQL": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the customers in Germany, how many of them have an account balance of over 1000?",
        "question_ar": "",
        "evidence_en": "Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders in total are made by customers in Germany?",
        "question_ar": "",
        "evidence_en": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total price of all the orders made by customers in Germany?",
        "question_ar": "",
        "evidence_en": "orders refer to o_orderkey; total price refers to o_totalprice; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the orders made by customers in Germany, which one of them has the highest priority in delivery? Please give its order key.",
        "question_ar": "",
        "evidence_en": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY'; earlier orderdate have higher priority in delivery therefore MIN(o_orderdate);",
        "evidence_ar": "",
        "SQL": "SELECT T3.o_orderkey FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY' ORDER BY T3.o_orderdate LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the average price of the orders made by a customer in Germany?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(o_totalprice), COUNT(o_orderkey)) where n_name = 'GERMANY';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the customers, what is the percentage of the customer's nation being Germany?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(c_custkey when n_name = 'GERMANY'), COUNT(c_custkey)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey"
    },
    {
        "db_id": "retails",
        "question_en": "How many countries are there in the No.2 region?",
        "question_ar": "",
        "evidence_en": "No.2 region refers to n_regionkey = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2"
    },
    {
        "db_id": "retails",
        "question_en": "Which country does supplier No.34 come from?",
        "question_ar": "",
        "evidence_en": "supplier No.34 refers to s_suppkey = 34; country refers to n_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34"
    },
    {
        "db_id": "retails",
        "question_en": "Which region does \"Supplier#000000129\" belong to?",
        "question_ar": "",
        "evidence_en": "\"Supplier#000000129\" is the name of the supplier which refers to s_name; Which region refers to r_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.r_name FROM nation AS T1 INNER JOIN supplier AS T2 ON T1.n_nationkey = T2.s_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.s_name = 'Supplier#000000129'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the nationality of \"Customer#000000055\"?",
        "question_ar": "",
        "evidence_en": "\"Customer#000000055\" is the name of the customer which refers to c_name; nationality is the state of belonging to a particular country, therefore nationality refers to n_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_name = 'Customer#000000055'"
    },
    {
        "db_id": "retails",
        "question_en": "Give customer No.106936's region name.",
        "question_ar": "",
        "evidence_en": "\"Customer#000000055\" is the name of the customer which refers to c_name; region name refers to r_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_custkey = 106936"
    },
    {
        "db_id": "retails",
        "question_en": "Give the number of Moroccan customers whose account is in debt.",
        "question_ar": "",
        "evidence_en": "account is in debt if c_acctbal < 0; Moroccan customers refer to c_name WHERE n_name = 'MOROCCO';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397?",
        "question_ar": "",
        "evidence_en": "MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) where o_totalprice = 231499.38 AND l_suppkey = 9397;",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) AS DISCOUNTERPRICE FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE T1.l_suppkey = 9397 AND T2.o_totalprice = 231499.38"
    },
    {
        "db_id": "retails",
        "question_en": "For the order with the total price of 218195.43, which supplier handled the returned item? Give the supplier id.",
        "question_ar": "",
        "evidence_en": "returned item refers to l_returnflag = 'R'; supplier id refers to l_suppkey; order with the total price of 218195.43 refers to o_totalprice = 218195.43;",
        "evidence_ar": "",
        "SQL": "SELECT T2.l_suppkey FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question_en": "Clerk#000000936 dealt with a \"Not Specified\" order on 1995/3/13, what was the charge for the part of the order shipped by truck?",
        "question_ar": "",
        "evidence_en": "MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) WHERE o_clerk = 'Clerk#000000936', o_orderstatus = '4-NOT SPECIFIED', o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';",
        "evidence_ar": "",
        "SQL": "SELECT T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax) AS num FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_clerk = 'Clerk#000000936' AND T2.l_shipmode = 'TRUCK' AND T1.o_orderstatus = '4-NOT SPECIFIED' AND T1.o_orderdate = '1995-03-13'"
    },
    {
        "db_id": "retails",
        "question_en": "Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(l_receiptdate, l_commitdate) WHERE o_orderdate = '1996-07-27' AND o_custkey = '129301';",
        "evidence_ar": "",
        "SQL": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = '129301' AND T1.o_orderdate = '1996-07-27'"
    },
    {
        "db_id": "retails",
        "question_en": "Give the name of the customer who made an order with Clerk#000000803 on 1997/12/10.",
        "question_ar": "",
        "evidence_en": "name of the customer refers to c_name; o_clerk = 'Clerk#000000803'; order on 1997/12/10 refers to o_orderdate = '1997-12-10';",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'"
    },
    {
        "db_id": "retails",
        "question_en": "Calculates the profit processed by Supplier No. 7414 on order No. 817154.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) WHERE l_suppkey = 7414 AND l_orderkey = 817154;",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154"
    },
    {
        "db_id": "retails",
        "question_en": "Which country has the most number of suppliers whose account is in debt?",
        "question_ar": "",
        "evidence_en": "country refers to n_name; the most number of suppliers whose account is in debt refers to MAX(SUM(s_acctbal < 0));",
        "evidence_ar": "",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the percentage of the European countries among the given countries?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey"
    },
    {
        "db_id": "retails",
        "question_en": "Give the percentage of Japanese suppliers whose account is in debt.",
        "question_ar": "",
        "evidence_en": "account is in debt if s_acctbal < 0; DIVIDE(COUNT(s_acctbal < 0 where n_name = 'JAPAN'), COUNT(s_name where n_name = 'JAPAN')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the customer with the highest amount of debt?",
        "question_ar": "",
        "evidence_en": "customer with the highest amount of debt refers to c_name where MIN(c_acctbal);",
        "evidence_ar": "",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders were shipped in 1998?",
        "question_ar": "",
        "evidence_en": "orders refer to l_orderkey; shipped in 1998 refers to year(l_shipdate) = 1998;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1998'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers are in debt?",
        "question_ar": "",
        "evidence_en": "customers are in debt refer to c_custkey where c_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "How many items that were shipped via air were returned in 1994?",
        "question_ar": "",
        "evidence_en": "items refer to l_linenumber; shipped via air in 1994 refers to year(l_shipdate) = 1994 where l_shipmode = 'AIR'; returned refer to l_returnflag = 'R';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_shipmode = 'AIR' AND STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers are in the automobile market segment?",
        "question_ar": "",
        "evidence_en": "automobile market segment refers to c_mktsegment = 'AUTOMOBILE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the top 2 order keys of the item with the highest amount of extended price?",
        "question_ar": "",
        "evidence_en": "the highest amount of extended price refers to MAX(l_extendedprice);",
        "evidence_ar": "",
        "SQL": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice DESC LIMIT 2"
    },
    {
        "db_id": "retails",
        "question_en": "When was the order with the highest amount of total price shipped?",
        "question_ar": "",
        "evidence_en": "when shipped refers to l_shipdate; the highest amount of total price refers to MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "In which country do most of the customers come from?",
        "question_ar": "",
        "evidence_en": "country refers to n_name; most of the customers refer to MAX(COUNT(c_custkey));",
        "evidence_ar": "",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many urgent orders were shipped the next day?",
        "question_ar": "",
        "evidence_en": "the order is urgent if o_orderpriority = '1-URGENT'; shipped the next day refers to SUBTRACT(l_shipdate, o_orderdate) = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.o_orderkey) FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE JULIANDAY(T1.l_shipdate) - JULIANDAY(T2.o_orderdate) = 1 AND T2.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "How many in debt customers in the household market segment are from Russia?",
        "question_ar": "",
        "evidence_en": "in debt customers refer to c_custkey where c_acctbal < 0; c_mktsegment = 'HOUSEHOLD'; Russian is the name of the nation which refers to n_name = 'RUSSIA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'RUSSIA'"
    },
    {
        "db_id": "retails",
        "question_en": "How many suppliers are from Japan?",
        "question_ar": "",
        "evidence_en": "suppliers refer to s_nationkey; Japan is the name of the nation which refers to n_name = 'JAPAN';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders shipped via ship have a medium priority?",
        "question_ar": "",
        "evidence_en": "orders shipped via ship refer to o_orderkey where l_shipmode = 'SHIP'; medium priority refers to o_orderpriority = '3-MEDIUM';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'SHIP' AND T1.o_orderpriority = '3-MEDIUM'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers from the United States, which market segment has the highest number of customers?",
        "question_ar": "",
        "evidence_en": "the highest number of customers refer to MAX(COUNT(c_custkey)); the United States is the name of the nation which refers to n_name = 'UNITED STATES'; market segment refers to c_mktsegment;",
        "evidence_ar": "",
        "SQL": "SELECT T.c_mktsegment FROM ( SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'UNITED STATES' GROUP BY T1.c_mktsegment ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What are the countries in the region of Asia?",
        "question_ar": "",
        "evidence_en": "countries in the region of Asia refer to n_name where r_name = 'ASIA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the names of the parts manufactured by manufacturer 3 that have a supply cost of 1,000?",
        "question_ar": "",
        "evidence_en": "names of the parts refer to p_name; manufacturer 3 refers to p_mfgr = 'Manufacturer#3'; ps_supplycost = 1000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T1.ps_supplycost = 1000 AND T2.p_mfgr = 'Manufacturer#3'"
    },
    {
        "db_id": "retails",
        "question_en": "How many countries are there in the region whose comment description is \"asymptotes sublate after the r.\"",
        "question_ar": "",
        "evidence_en": "r_comment = 'asymptotes sublate after the r'; countries refer to n_nationkey;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'asymptotes sublate after the r'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail?",
        "question_ar": "",
        "evidence_en": "manufacturer 5 refers to p_mfgr = 'Manufacturer#5'; retail price of no more than 1,000 refers to p_retailprice < 1000; shipped via rail refers to shipmode = 'RAIL';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_mfgr = 'Manufacturer#5' AND T3.p_retailprice < 1000 AND T2.l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question_en": "How much is the profit for smoke turquoise purple blue salmon that was delivered in person on 5/7/1996?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'smoke turquoise purple blue salmon' and l_receiptdate = '1996-05-07' and l_shipinstruct = 'DELIVER IN PERSON';",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity AS num FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T1.l_receiptdate = '1996-05-07' AND T1.l_shipinstruct = 'DELIVER IN PERSON' AND T3.p_name = 'smoke turquoise purple blue salmon'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the average price before discount of the top 10 orders with the highest total price?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(l_extendedprice), 10) where MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.l_extendedprice) / 10 FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question_en": "Identify the names of the top 3 customers with the highest number of orders of all time and calculate for the average total price per order of each customers.",
        "question_ar": "",
        "evidence_en": "customers with the highest number of orders refer to c_name where MAX(COUNT(o_orderkey)); DIVIDE(SUM(o_totalprice), COUNT(o_orderkey));",
        "evidence_ar": "",
        "SQL": "SELECT T.c_name, T.res FROM ( SELECT T2.c_name, SUM(T1.o_totalprice) / COUNT(T1.o_orderkey) AS res , COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "How many items were shipped on 4th December, 1993?",
        "question_ar": "",
        "evidence_en": "items shipped on 4th December, 1993 refer to l_linenumber where l_shipdate = '1993-12-04';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04'"
    },
    {
        "db_id": "retails",
        "question_en": "What was the order date of items with the highest total price?",
        "question_ar": "",
        "evidence_en": "the highest total price refers to MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT o_orderdate FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the percentage of customers' accounts in debt.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(c_custkey where c_acctbal < 0), COUNT(c_custkey)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(c_acctbal < 0, 1, 0)) AS REAL) * 100 / COUNT(c_custkey) FROM customer"
    },
    {
        "db_id": "retails",
        "question_en": "How many part supplies were nearly out of stock?",
        "question_ar": "",
        "evidence_en": "supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the percentage of manufactured parts by Manufacturer#3.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(p_partkey where p_mfgr = 'Manufacturer#3'), COUNT(p_partkey)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(p_mfgr = 'Manufacturer#3', 1, 0)) AS REAL) * 100 / COUNT(p_partkey) FROM part"
    },
    {
        "db_id": "retails",
        "question_en": "List any five parts name in Medium Plated Brass.",
        "question_ar": "",
        "evidence_en": "p_type = 'MEDIUM PLATED BRASS'; parts name refer to p_name;",
        "evidence_ar": "",
        "SQL": "SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5"
    },
    {
        "db_id": "retails",
        "question_en": "Among the orders shipped in November, 1998 by air, how many orders were urgent?",
        "question_ar": "",
        "evidence_en": "orders shipped in November, 1998 refer to o_orderkey where l_shipdate LIKE '1998-11-%'; by air refers to l_shipmode = 'AIR'; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'AIR' AND T1.o_orderpriority = '1-URGENT' AND SUBSTR(T2.l_shipdate, 1, 7) = '1998-11'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers are there in India?",
        "question_ar": "",
        "evidence_en": "customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers from Morocco, how many customers were in debt?",
        "question_ar": "",
        "evidence_en": "customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'"
    },
    {
        "db_id": "retails",
        "question_en": "List down the nation keys and names in Africa.",
        "question_ar": "",
        "evidence_en": "Africa refers to r_name = 'Africa';",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name, T1.n_nationkey FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'AFRICA'"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the total price of orders by Customer#000000013.",
        "question_ar": "",
        "evidence_en": "Customer#000000013 is the name of the customer which refers to c_name;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_name = 'Customer#000000013'"
    },
    {
        "db_id": "retails",
        "question_en": "How many items did Customer#000021159 order? Calculate those items total charges.",
        "question_ar": "",
        "evidence_en": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the total profit made by chocolate floral blue coral cyan.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'chocolate floral blue coral cyan';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.l_extendedprice * (1 - T3.l_discount) - T2.ps_supplycost * T3.l_quantity) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_partkey = T3.l_partkey AND T2.ps_suppkey = T3.l_suppkey WHERE T1.p_name = 'chocolate floral blue coral cyan'"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the percentage of suppliers in Germany.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(s_suppkey where n_name = 'GERMANY'), COUNT(s_suppkey)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "List the suppliers' names which supplied smoke red pale saddle plum.",
        "question_ar": "",
        "evidence_en": "p_name = 'smoke red pale saddle plum'; the suppliers' names refer to s_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'smoke red pale saddle plum'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the suppliers from Middle East region, how many suppliers were in debt?",
        "question_ar": "",
        "evidence_en": "suppliers from Middle East region refer to s_name where r_name = 'MIDDLE EAST'; in debt refers to s_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount.",
        "question_ar": "",
        "evidence_en": "shipped by rail on 1st December, 1995 refers to l_shipmode = 'RAIL' where l_shipdate = '1995-12-01'; part names with 10% discount refer to p_name where l_discount = 0.1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN lineitem AS T3 ON T1.ps_partkey = T3.l_partkey WHERE T3.l_discount = 0.1 AND T3.l_shipdate = '1995-12-01' AND T3.l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the parts supplied by Supplier#000000018, provide parts names which had supply costs above 900.",
        "question_ar": "",
        "evidence_en": "Supplier#000000018 is the name of supplier which refers to s_name; supply costs above 900 refer to ps_supplycost > 900;",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN supplier AS T3 ON T1.ps_suppkey = T3.s_suppkey WHERE T1.ps_supplycost > 900 AND T3.s_name = 'Supplier#000000018'"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders were shipped in 1994?",
        "question_ar": "",
        "evidence_en": "orders shipped in 1994 refer to l_orderkey where year(l_shipdate) = 1994;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "db_id": "retails",
        "question_en": "How many of the line items have been shipped by rail with a quantity less than 30?",
        "question_ar": "",
        "evidence_en": "shipped by rail refers to l_shipmode = 'RAIL'; quantity less than 30 refers to l_quantity < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity < 30 AND l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers in the furniture market segment, how many of them have a nation key of 1?",
        "question_ar": "",
        "evidence_en": "furniture market segment refers to c_mktsegment = 'FURNITURE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1"
    },
    {
        "db_id": "retails",
        "question_en": "Give the phone number of the customer with the highest account balance.",
        "question_ar": "",
        "evidence_en": "phone number of the customer refers to c_phone; the highest account balance refers to MAX(c_acctbal);",
        "evidence_ar": "",
        "SQL": "SELECT c_phone FROM customer ORDER BY c_acctbal DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the order priority of the order with the highest total price?",
        "question_ar": "",
        "evidence_en": "order with the highest total price refers to MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT o_orderpriority FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total number of orders made by customers in United States?",
        "question_ar": "",
        "evidence_en": "orders refer to o_orderkey; the United States is the name of the nation which refers to n_name = 'UNITED STATES';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey INNER JOIN nation AS T3 ON T2.c_nationkey = T3.n_nationkey WHERE T3.n_name = 'UNITED STATES'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers from Brazil, how many customers are in automobile market segment?",
        "question_ar": "",
        "evidence_en": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; c_mktsegment = 'automobile';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question_en": "Provide the order comments for at least 5 orders made by customers in the furniture segment.",
        "question_ar": "",
        "evidence_en": "order comments refer to o_comment; c_mktsegment = 'Furniture';",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5"
    },
    {
        "db_id": "retails",
        "question_en": "List down the countries that are located in Asia.",
        "question_ar": "",
        "evidence_en": "countries in Asia refer to n_name where r_name = 'ASIA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question_en": "Name the countries that belong in the region with comment description \"furiously express accounts wake sly\".",
        "question_ar": "",
        "evidence_en": "r_comment = 'furiously express accounts wake sly';",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'furiously express accounts wake sly'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total number of suppliers from Germany?",
        "question_ar": "",
        "evidence_en": "suppliers refer to s_suppkey; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers in Asia, how many customers are in debt?",
        "question_ar": "",
        "evidence_en": "customers in Asia refer to n_name where r_name = 'ASIA'; customers in debt refer to c_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.n_name) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_acctbal < 0 AND T3.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question_en": "Provide the phone number of the customer with the highest total price in an order.",
        "question_ar": "",
        "evidence_en": "phone number of the customer refers to c_phone; the highest total price refers to MAX(o_totalprice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?",
        "question_ar": "",
        "evidence_en": "products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name and marketing segment of the customer with the total order price of 199180.63?",
        "question_ar": "",
        "evidence_en": "name of the customer refers to c_name; total order price of 199180.63 refers o_totalprice = 199180.63; marketing segment refers to c_mktsegment;",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_name, T2.c_mktsegment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 199180.63"
    },
    {
        "db_id": "retails",
        "question_en": "Provide the nation and region of the customer with the address of wH55UnX7 VI?",
        "question_ar": "",
        "evidence_en": "nation refers to n_name; region refers to r_name; address of wH55UnX7 VI refers to c_address = 'wH55UnX7 VI';",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the customers in Brazil, how many of them have an account balance of less than 1000?",
        "question_ar": "",
        "evidence_en": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000"
    },
    {
        "db_id": "retails",
        "question_en": "List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers.",
        "question_ar": "",
        "evidence_en": "country name refers to n_name; building marketing segment refers to c_mktsegment = 'BUILDING'; account balance greater than 80% of the average account balance of all customers refers to c_acctbal > MULTIPLY(AVG(c_acctbal), 0.8);",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN ( SELECT AVG(c_acctbal) * 0.8 AS avg_acctbal FROM customer ) AS T3 WHERE T1.c_acctbal > T3.avg_acctbal"
    },
    {
        "db_id": "retails",
        "question_en": "Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(c_custkey where n_name = 'United States' and c_acctbal < 4000), COUNT(c_custkey where c_acctbal < 4000)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'United States', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000"
    },
    {
        "db_id": "retails",
        "question_en": "Give the name and phone number of the customers who have more than 9000 account balance.",
        "question_ar": "",
        "evidence_en": "the name of the customer refers to c_name; phone number of the customer refers to c_phone; have more than 9000 account balance refers to c_acctbal > 9000;",
        "evidence_ar": "",
        "SQL": "SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000"
    },
    {
        "db_id": "retails",
        "question_en": "What is the average number of items shipped each day in April of 1994?",
        "question_ar": "",
        "evidence_en": "AVG(l_linenumber) where l_shipdate between '1994-01-01' and '1994-01-30';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-01-30'"
    },
    {
        "db_id": "retails",
        "question_en": "List the order key of the orders with a total price between 200000 and 300000.",
        "question_ar": "",
        "evidence_en": "orders with a total price between 200000 and 300000 refer to o_totalprice between 200000 and 300000;",
        "evidence_ar": "",
        "SQL": "SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000"
    },
    {
        "db_id": "retails",
        "question_en": "Find and list the part key of the parts which has an above-average retail price.",
        "question_ar": "",
        "evidence_en": "part key of the parts which has an above-average retail price refer to p_partkey where p_retailprice > AVG(p_retailprice);",
        "evidence_ar": "",
        "SQL": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the percentage of part supply that costs more than 500.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(ps_suppkey where ps_supplycost > 500)), COUNT(ps_suppkey) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp"
    },
    {
        "db_id": "retails",
        "question_en": "Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance.",
        "question_ar": "",
        "evidence_en": "supply key refers to s_suppkey; the most amount account balance refers to MAX(s_acctbal);",
        "evidence_ar": "",
        "SQL": "SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers who are not in debt ordered an urgent order?",
        "question_ar": "",
        "evidence_en": "customers who are not in debt refer to c_custkey where c_acctbal > 0; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.c_custkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal > 0 AND T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "List the name and phone number of customers in India who have an above-average account balance.",
        "question_ar": "",
        "evidence_en": "name of customer refers to c_name; phone number of customer refers to c_phone; customers in India who have an above-average account balance refer to n_name = 'INDIA' and c_acctbal > AVG(c_acctbal);",
        "evidence_ar": "",
        "SQL": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name"
    },
    {
        "db_id": "retails",
        "question_en": "In the parts supply by Supplier#000000654, list the top five parts with the most supply cost in descending order of supply cost.",
        "question_ar": "",
        "evidence_en": "Supplier#000000654 is the name of the supplier which refers to s_name; parts with the most supply cost refer to ps_partkey where MAX(ps_supplycost);",
        "evidence_ar": "",
        "SQL": "SELECT T2.ps_partkey FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey WHERE T1.s_name = 'Supplier#000000654' ORDER BY T2.ps_supplycost DESC LIMIT 5"
    },
    {
        "db_id": "retails",
        "question_en": "What percentage of customers from France is in the automobile segment?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(c_name where c_mktsegment = 'AUTOMOBILE' and n_name = 'FRANCE'), COUNT(c_name where n_name = 'FRANCE')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'AUTOMOBILE', 1, 0)) AS REAL) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE'"
    },
    {
        "db_id": "retails",
        "question_en": "Name the part which is most profitable.",
        "question_ar": "",
        "evidence_en": "profit can be calculated as SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))); part which is most profitable refers to p_name where MAX(profit);",
        "evidence_ar": "",
        "SQL": "SELECT T.p_name FROM ( SELECT T3.p_name , T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity AS num FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "List the names of the countries with the below-average number of customers in ascending order of customer numbers.",
        "question_ar": "",
        "evidence_en": "the names of countries with the below-average number of customers refer to n_name where COUNT(c_name) < DIVIDE(COUNT(c_name)), COUNT(n_name);",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name HAVING COUNT(T1.c_name) > ( SELECT COUNT(customer.c_name) / COUNT(DISTINCT nation.n_name) FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey ) ORDER BY COUNT(T1.c_name)"
    },
    {
        "db_id": "retails",
        "question_en": "What percentage of customers from the African region is in the household segment?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(c_custkey where c_mktsegment = 'HOUSEHOLD' and r_name = 'AFRICA'), COUNT(c_custkey where r_name = 'AFRICA')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question_en": "List the name of the top ten items with the most quantity available in the descending order of availability.",
        "question_ar": "",
        "evidence_en": "items with the most quantity available refer to p_name where MAX(ps_availqty);",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the difference in the average retail price of parts shipped via ship and air.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(DIVIDE(SUM(p_retailprice where l_shipmode = 'SHIP'), COUNT(l_shipmode = 'SHIP')), DIVIDE(SUM(p_retailprice where l_shipmode = 'AIR'), COUNT(l_shipmode = 'AIR')));",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(IIF(T3.l_shipmode = 'SHIP', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'SHIP', 1, 0))) - (CAST(SUM(IIF(T3.l_shipmode = 'AIR', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'AIR', 1, 0))) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey"
    },
    {
        "db_id": "retails",
        "question_en": "What is the average discount for the parts made by Manufacturer#5?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(l_discount), COUNT(l_partkey)) where p_mfgr = 'Manufacturer#5';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.l_discount) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey WHERE T1.p_mfgr = 'Manufacturer#5'"
    },
    {
        "db_id": "retails",
        "question_en": "In the parts shipped by rail, how many are of medium priority?",
        "question_ar": "",
        "evidence_en": "parts shipped by rail refer to l_partkey where l_shipmode = 'RAIL'; medium priority refers to o_orderpriority = '3-MEDIUM';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'RAIL' AND T1.o_orderpriority = '3-MEDIUM'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the suppliers in the European region, what percentage have a below-average account balance?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(supplier.s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question_en": "List by their id all customers who have a debit balance in their accounts.",
        "question_ar": "",
        "evidence_en": "customers who have a debt balance refer to c_custkey where c_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT c_custkey FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "List by order number the 3 items with the lowest price after applying the discount.",
        "question_ar": "",
        "evidence_en": "order number refers to l_orderkey; the lowest price after applying the discount refers to MIN(MULTIPLY(l_extendedprice), SUBTRACT(1, l_discount));",
        "evidence_ar": "",
        "SQL": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice * (1 - l_discount) LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders of more than 10 items have been returned?",
        "question_ar": "",
        "evidence_en": "more than 10 items have been returned refer to l_returnflag = 'R' where l_quantity > 10; orders refer to l_orderkey;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 10 AND l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total price charged for orders shipped by air without shipping instructions?",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where l_shipmode = 'AIR' and l_shipinstruct = 'NONE';",
        "evidence_ar": "",
        "SQL": "SELECT l_extendedprice * (1 - l_discount) * (1 + l_tax) AS totalprice FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE'"
    },
    {
        "db_id": "retails",
        "question_en": "Of the orders with a lower delivery priority, how many have an urgent priority order?",
        "question_ar": "",
        "evidence_en": "an urgent priority order refers to o_orderkey where o_orderpriority = '1-URGENT'; earlier orderdate have higher priority in delivery; lower delivery priority refers to MAX(o_orderdate);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(o_orderkey) FROM orders WHERE o_orderpriority = '1-URGENT' GROUP BY o_orderdate ORDER BY o_orderdate DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many suppliers from Egypt have a debit balance?",
        "question_ar": "",
        "evidence_en": "suppliers refer to s_suppkey; Egypt is the name of the nation which refers to n_name = 'EGYPT'; the balance is in debt if s_acctbal < 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'"
    },
    {
        "db_id": "retails",
        "question_en": "How many items shipped by REG AIR were ordered on March 22, 1995?",
        "question_ar": "",
        "evidence_en": "items shipped by REG AIR refer to l_linenumber where l_shipmode = 'REG AIR'; ordered on March 22, 1995 refers to o_orderdate = '1995-03-22';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'"
    },
    {
        "db_id": "retails",
        "question_en": "How many European suppliers are there?",
        "question_ar": "",
        "evidence_en": "European suppliers refer to s_suppkey where r_name = 'EUROPE';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question_en": "To which segment belongs the customer that made the most orders in April 1994?",
        "question_ar": "",
        "evidence_en": "segment refers to c_mktsegment; customer made the most orders in April 1994 refers to c_custkey where o_orderdate LIKE '1994-04-%' and MAX(COUNT(o_orderkey));",
        "evidence_ar": "",
        "SQL": "SELECT T.c_mktsegment FROM ( SELECT T2.c_mktsegment, COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate LIKE '1994-04-%' GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Lists all parts supplied by Supplier#000000034.",
        "question_ar": "",
        "evidence_en": "part refers to p_name; Supplier#000000034 refers to s_name = 'Supplier#000000034'",
        "evidence_ar": "",
        "SQL": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the cost prices of large burnished copper?",
        "question_ar": "",
        "evidence_en": "cost price refers to ps_supplycost; large burnished copper refers to p_type = 'LARGE BURNISHED COPPER'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'"
    },
    {
        "db_id": "retails",
        "question_en": "How many clients from Mozambique required orders with a low priority order?",
        "question_ar": "",
        "evidence_en": "Mozambique refers to n_name = 'MOZAMBIQUE'; low priority order refers to o_orderpriority = '5-LOW'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'"
    },
    {
        "db_id": "retails",
        "question_en": "Indicate the name of the product that is close to being sold out and that has the lowest cost price.",
        "question_ar": "",
        "evidence_en": "name of the product refers to p_name; close to being sold out refers to ps_availqty < 10; the lowest cost price refers to min(ps_supplycost)",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty < 10 ORDER BY T2.ps_supplycost LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many different clerks have served the customer with the address uFTe2u518et8Q8UC?",
        "question_ar": "",
        "evidence_en": "clerk who have served the customer refers to o_clerk\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.o_clerk) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_address = 'uFTe2u518et8Q8UC'"
    },
    {
        "db_id": "retails",
        "question_en": "Indicate the name of the parts without discount.",
        "question_ar": "",
        "evidence_en": "name of the part refers to p_name; without discount refers to l_discount = 0.0000",
        "evidence_ar": "",
        "SQL": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000"
    },
    {
        "db_id": "retails",
        "question_en": "How many suppliers from Germany have left a comment with 'carefully regular packages'?",
        "question_ar": "",
        "evidence_en": "Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'"
    },
    {
        "db_id": "retails",
        "question_en": "How many products shipped on 19/11/1994 were ordered on 21/09/1994?",
        "question_ar": "",
        "evidence_en": "shipped on 19/11/1994 refers to l_shipdate = '1994-11-19'; ordered on 21/09/1994 refers to o_orderdate = '1994-09-21'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-09-21' AND T2.l_shipdate = '1994-11-19'"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the average profit of prom brushed steel products.",
        "question_ar": "",
        "evidence_en": "prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity) / COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question_en": "What percentage of customers engaged in the household segment are from Iran?",
        "question_ar": "",
        "evidence_en": "the household segment refers to c_mktsegment = 'HOUSEHOLD'; Iran is nation name which refers to n_name = 'IRAN'; percentage = divide(count(c_custkey where n_name = 'IRAN'), count(c_custkey)) where c_mktsegment = 'HOUSEHOLD' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question_en": "Please state the segment, the name, the address, and the phone number of customer number 3.",
        "question_ar": "",
        "evidence_en": "segment refers to c_mktsegment; name refers to c_name; address refers to c_address; phone number refers to c_phone; customer number 3 refers to c_custkey = 3",
        "evidence_ar": "",
        "SQL": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3"
    },
    {
        "db_id": "retails",
        "question_en": "Please list any three line item numbers that have 10% off.",
        "question_ar": "",
        "evidence_en": "line item number refers to l_linenumber; 10% off refers to l_discount = 0.1",
        "evidence_ar": "",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "How many of the line items that have a quantity greater than 40 have been shipped by air?",
        "question_ar": "",
        "evidence_en": "quantity greater than 40 refers to l_quantity > 40; shipped by air refers to l_shipmode = 'AIR'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR'"
    },
    {
        "db_id": "retails",
        "question_en": "Which ship mode has more \"deliver in person\" instructions, rail or mail?",
        "question_ar": "",
        "evidence_en": "ship mode refers to l_shipmode; \"deliver in person\" instruction refers to l_shipinstruct = 'DELIVER IN PERSON'",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(IIF(l_shipmode = 'RAIL', 1, 0)) - SUM(IIF(l_shipmode = 'MAIL', 1, 0)), 'RAIL', 'MAIL') AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total price and the order priority of order number 33?",
        "question_ar": "",
        "evidence_en": "total price refers to o_totalprice; order priority refers to o_orderpriority; order number 33 refers to o_orderkey = 33",
        "evidence_ar": "",
        "SQL": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33"
    },
    {
        "db_id": "retails",
        "question_en": "How many orders in 1998 had a total price under 950?",
        "question_ar": "",
        "evidence_en": "1998 refers to year(o_orderdate) = '1998'; a total price under 950 refers to o_totalprice < 950",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1998' AND o_totalprice < 950"
    },
    {
        "db_id": "retails",
        "question_en": "Please list any three customers with debt.",
        "question_ar": "",
        "evidence_en": "customer refers to c_name; with debt refers to c_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "What is the discounted price of line item number 1?",
        "question_ar": "",
        "evidence_en": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); line item number 1 refers to l_linenumber = 1",
        "evidence_ar": "",
        "SQL": "SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?",
        "question_ar": "",
        "evidence_en": "full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7"
    },
    {
        "db_id": "retails",
        "question_en": "What is the supply cost of large plated tin?",
        "question_ar": "",
        "evidence_en": "supply cost refers to ps_supplycost; large plated tin refers to p_type = 'large plated tin'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'large plated tin'"
    },
    {
        "db_id": "retails",
        "question_en": "Please name any three parts that have an available quantity of more than 9998.",
        "question_ar": "",
        "evidence_en": "part name refers to p_name; an available quantity of more than 9998 refers to ps_availqty > 9998",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty > 9998 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "Please list any two parts that come with the wrap bag container and have a supply cost of under 10.",
        "question_ar": "",
        "evidence_en": "part name refers to p_name; wrap bag container refers to p_container = 'WRAP BAG'; supply cost of under 10 refers to ps_supplycost < 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost < 10 AND T1.p_container = 'WRAP BAG' LIMIT 2"
    },
    {
        "db_id": "retails",
        "question_en": "What is the nationality of supplier number 1?",
        "question_ar": "",
        "evidence_en": "nationality refers to n_name; supplier number 1 refers to s_suppkey = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 1"
    },
    {
        "db_id": "retails",
        "question_en": "What are the countries that belong to Africa?",
        "question_ar": "",
        "evidence_en": "country is nation name which refers to n_name; Africa is region name refers to r_name = 'Africa'",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'"
    },
    {
        "db_id": "retails",
        "question_en": "Which region has the lowest number of countries?",
        "question_ar": "",
        "evidence_en": "region refers to has r_name; the lowest number of countries refers to min(count(n_name))",
        "evidence_ar": "",
        "SQL": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers from the furniture segments come from Iraq?",
        "question_ar": "",
        "evidence_en": "furniture segment refers to c_mktsegment = 'FURNITURE'; Iraq refers to n_name = 'Iraq'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'FURNITURE' AND T2.n_name = 'IRAQ'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the customer number 93697 with the total order price of 191918.92?",
        "question_ar": "",
        "evidence_en": "customer name refers to c_name; number 93697 refers to o_custkey = 93697; total order price of 191918.92 refers to o_totalprice = 191918.92",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697"
    },
    {
        "db_id": "retails",
        "question_en": "Which nation and region does the Customer#000000008 come from?",
        "question_ar": "",
        "evidence_en": "nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'",
        "evidence_ar": "",
        "SQL": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the delivery time and the clerk of order number 6?",
        "question_ar": "",
        "evidence_en": "delivery time = subtract(l_receiptdate, l_commitdate); clerk refers to o_clerk; order number 6 refers to o_orderkey = 6",
        "evidence_ar": "",
        "SQL": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate), T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderkey = 6"
    },
    {
        "db_id": "retails",
        "question_en": "How many Japanese suppliers have their accounts in debt?",
        "question_ar": "",
        "evidence_en": "Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question_en": "Which customer is the most in debt?",
        "question_ar": "",
        "evidence_en": "customer refers to c_name; the most in debt refers to max(c_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question_en": "List all the dates of the urgent orders.",
        "question_ar": "",
        "evidence_en": "date refers to o_orderdate; urgent order refers to o_orderpriority = '1-URGENT'",
        "evidence_ar": "",
        "SQL": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "How many of the items are instructed to be delivered in person?",
        "question_ar": "",
        "evidence_en": "instructed to be delivered in person refers to l_shipinstruct = 'DELIVER IN PERSON'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the largest supplier's account balance?",
        "question_ar": "",
        "evidence_en": "the largest supplier's account balance refers to max(s_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(s_acctbal) FROM supplier"
    },
    {
        "db_id": "retails",
        "question_en": "How many part supplies are close to being out of stock?",
        "question_ar": "",
        "evidence_en": "close to being out of stock refers to ps_availqty < 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10"
    },
    {
        "db_id": "retails",
        "question_en": "List all the nations in Europe.",
        "question_ar": "",
        "evidence_en": "nation refers to n_name; Europe refers to r_name = 'EUROPE'",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the supply cost for the part \"violet olive rose ivory sandy\"?",
        "question_ar": "",
        "evidence_en": "supply cost refers to ps_supplycost; part \"violet olive rose ivory sandy\" refers to p_name = 'violet olive rose ivory sandy'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'"
    },
    {
        "db_id": "retails",
        "question_en": "List all the customers' phone numbers from Ethiopia.",
        "question_ar": "",
        "evidence_en": "phone number refers to c_phone; Ethiopia refers to n_name = 'Ethiopia'",
        "evidence_ar": "",
        "SQL": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'Ethiopia'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total price of all orders from the customer with the phone number \"627-220-3983\"?",
        "question_ar": "",
        "evidence_en": "total price = sum(o_totalprice); phone number \"627-220-3983\" refers to c_phone = '627-220-3983'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_phone = '627-220-3983'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the shipping methods for the orders on 12/31/1994?",
        "question_ar": "",
        "evidence_en": "shipping method refers to l_shipmode; order on 12/31/1994 refers to o_orderdate = '1994-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.l_shipmode FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-12-31'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the account balance of the supplier with the most parts?",
        "question_ar": "",
        "evidence_en": "account balance refers to s_acctbal; the most parts refers to max(count(ps_suppkey))",
        "evidence_ar": "",
        "SQL": "SELECT T.s_acctbal FROM ( SELECT T1.s_acctbal, COUNT(T2.ps_suppkey) AS num FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey GROUP BY T1.s_suppkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Which nation does the supplier with the account balance of \"4393.04\" belong to?",
        "question_ar": "",
        "evidence_en": "nation refers to n_name; account balance of \"4393.04\" refers to s_acctbal = 4393.04",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal = 4393.04"
    },
    {
        "db_id": "retails",
        "question_en": "What is the region with the most customers?",
        "question_ar": "",
        "evidence_en": "region refers to r_name; the most customers refers to max(count(c_custkey))",
        "evidence_ar": "",
        "SQL": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "List the phone number of the customer who placed orders with a total price of more than $300,000.",
        "question_ar": "",
        "evidence_en": "phone number refers to c_phone; a total price of more than $300,000 refers to o_totalprice > 300000",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000"
    },
    {
        "db_id": "retails",
        "question_en": "What are the clerks of orders with line items shipped by mail?",
        "question_ar": "",
        "evidence_en": "clerk refers to o_clerk; shipped by mail refers to l_shipmode = 'MAIL'",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the top 5 nations of suppliers with the lowest account balance?",
        "question_ar": "",
        "evidence_en": "nation refers to n_name; the lowest account balance refers to min(s_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_acctbal LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "List all the addresses for the suppliers of the biggest parts.",
        "question_ar": "",
        "evidence_en": "addresses refers to s_address; the biggest part refers to max(p_size)",
        "evidence_ar": "",
        "SQL": "SELECT T2.s_address FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ORDER BY T3.p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Which part and supplier have the most profit?",
        "question_ar": "",
        "evidence_en": "part refers to p_name; supplier refers to s_name; the most profit refers to max(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity)))",
        "evidence_ar": "",
        "SQL": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What proportion of suppliers are from Asia?",
        "question_ar": "",
        "evidence_en": "Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey"
    },
    {
        "db_id": "retails",
        "question_en": "Please indicate the total price of order key 32.",
        "question_ar": "",
        "evidence_en": "total price refers to o_totalprice; order key 32 refers to o_orderkey = 32",
        "evidence_ar": "",
        "SQL": "SELECT o_totalprice FROM orders WHERE o_orderkey = 32"
    },
    {
        "db_id": "retails",
        "question_en": "How many order keys are not applied for the discount?",
        "question_ar": "",
        "evidence_en": "order key refers to l_orderkey; not applied for the discount refers to l_discount = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE l_discount = 0"
    },
    {
        "db_id": "retails",
        "question_en": "List line items shipped by truck with delivery time before 1997.",
        "question_ar": "",
        "evidence_en": "line item refers to l_linenumber; shipped by truck refers to l_shipmode = 'truck'; delivery time before 1997 refers to year(l_shipdate) < 1997",
        "evidence_ar": "",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'truck'"
    },
    {
        "db_id": "retails",
        "question_en": "How many line items were returned in 1998?",
        "question_ar": "",
        "evidence_en": "line item refers to l_linenumber; returned refers to returnflag = 'R'; in 1998 refers to year(l_shipdate) = 1998",
        "evidence_ar": "",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question_en": "Which line item with the highest quantity is shipped by air?",
        "question_ar": "",
        "evidence_en": "line item refers to l_linenumber; the highest quantity refers to max(l_quantity); shipped by air refers to l_shipmode = 'AIR'",
        "evidence_ar": "",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "List the names of customers whose accounts are in debt.",
        "question_ar": "",
        "evidence_en": "name of customer refers to c_name; account in debt refers to c_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers belong to the household segment in Germany?",
        "question_ar": "",
        "evidence_en": "household segment refers to c_mktsegment = 'household'; Germany refers to n_name = 'Germany'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question_en": "List the phone numbers of customers whose order priority is urgent.",
        "question_ar": "",
        "evidence_en": "phone number refers to c_phone; order priority is urgent refers to o_orderpriority = '1-URGENT'",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "Name of customer whose order is applied with the highest discount.",
        "question_ar": "",
        "evidence_en": "customer name refers to c_name; the highest discount refers to max(l_discount)",
        "evidence_ar": "",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "List the 5 orders with the highest total price, indicating the delivery date.",
        "question_ar": "",
        "evidence_en": "order refers to o_orderkey; the highest total price refers to max(o_totalprice); delivery date refers to l_shipdate",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_orderkey, T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 5"
    },
    {
        "db_id": "retails",
        "question_en": "List the comments describing orders from customers in the furniture segment.",
        "question_ar": "",
        "evidence_en": "comment refers to o_comment; furniture segment refers to c_mktsegment = 'FURNITURE'",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'FURNITURE'"
    },
    {
        "db_id": "retails",
        "question_en": "Please indicate the names of the customers whose order with a total price over $300000.",
        "question_ar": "",
        "evidence_en": "customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000",
        "evidence_ar": "",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000"
    },
    {
        "db_id": "retails",
        "question_en": "Name customers in India with account balances over $5000.",
        "question_ar": "",
        "evidence_en": "customer name refers to c_name; India refers to n_name = 'INDIA'; account balance over $5000 refers to c_acctbal > 5000",
        "evidence_ar": "",
        "SQL": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'"
    },
    {
        "db_id": "retails",
        "question_en": "List the phone numbers of suppliers from Japan.",
        "question_ar": "",
        "evidence_en": "phone number refers to s_phone; Japan refers to n_name = 'JAPAN'",
        "evidence_ar": "",
        "SQL": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the providers in Argentina, which supplier has an account that is in debt?",
        "question_ar": "",
        "evidence_en": "Argentina refers to n_name = 'ARGENTINA'; supplier refers to s_name; an account in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'"
    },
    {
        "db_id": "retails",
        "question_en": "How many countries belong to the Algeria region?",
        "question_ar": "",
        "evidence_en": "the algeria region refers to r_name = 'ALGERIA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.r_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T2.n_name = 'ALGERIA'"
    },
    {
        "db_id": "retails",
        "question_en": "Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995.",
        "question_ar": "",
        "evidence_en": "customer name refers to c_name; 10% discount refers to l_discount = 0.1; order dates between 1/1/1994 and 1/1/1995 refers to year(o_orderdate) = 1994 OR o_orderdate = '1995-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey WHERE T2.l_discount = 0.1 AND STRFTIME('%Y', T1.o_orderdate) BETWEEN 1994 AND 1995"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate the percentage of countries that belong to the American region.",
        "question_ar": "",
        "evidence_en": "the American region refers to r_name = 'America'; percentage = divide(count(n_name where r_name = 'America'), count(n_name)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.r_name = 'America', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey"
    },
    {
        "db_id": "retails",
        "question_en": "Calculate percentage of household segment in Indonesia.",
        "question_ar": "",
        "evidence_en": "household segment refers to c_mktsegment = 'HOUSEHOLD'; Indonesia refers to n_name = 'Indonesia'; percentage = divide(count(c_mktsegment = 'HOUSEHOLD'), count(c_mktsegment)) where n_name = 'Indonesia' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'HOUSEHOLD', 1, 0)) AS REAL) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the names of all the products under the type \"promo brushed steel\".",
        "question_ar": "",
        "evidence_en": "product name refers to p_name; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'",
        "evidence_ar": "",
        "SQL": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the comment of the product \"burlywood plum powder puff mint\"?",
        "question_ar": "",
        "evidence_en": "comment refers to p_comment; product \"burlywood plum powder puff mint\" refers to p_name = 'burlywood plum powder puff mint'",
        "evidence_ar": "",
        "SQL": "SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint'"
    },
    {
        "db_id": "retails",
        "question_en": "How many parts have a retail price of over 1900?",
        "question_ar": "",
        "evidence_en": "a retail price of over 1900 refers to p_retailprice > 1900",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900"
    },
    {
        "db_id": "retails",
        "question_en": "Among the products under the type \"promo brushed steel\", how many of them are manufactured by Manufacturer#5?",
        "question_ar": "",
        "evidence_en": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; Manufacturer#5 refers to p_mfgr = 'Manufacturer#5'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list all the brands that contain a part under the type \"promo brushed steel\".",
        "question_ar": "",
        "evidence_en": "brand refers to p_brand; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'",
        "evidence_ar": "",
        "SQL": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the product with the highest retail price?",
        "question_ar": "",
        "evidence_en": "name of the product refers to p_name; the highest retail price refers to p_retailprice",
        "evidence_ar": "",
        "SQL": "SELECT p_name FROM part WHERE p_retailprice = ( SELECT MAX(p_retailprice) FROM part )"
    },
    {
        "db_id": "retails",
        "question_en": "Which part has a bigger size, \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\"?",
        "question_ar": "",
        "evidence_en": "size refers to p_size; \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')",
        "evidence_ar": "",
        "SQL": "SELECT T.p_name FROM ( SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ) AS T ORDER BY p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many parts have a jumbo case container?",
        "question_ar": "",
        "evidence_en": "jumbo case container refers to p_container = 'JUMBO CASE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the size of the smallest part in a jumbo case container?",
        "question_ar": "",
        "evidence_en": "size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'",
        "evidence_ar": "",
        "SQL": "SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE'"
    },
    {
        "db_id": "retails",
        "question_en": "How many suppliers have their accounts in debt?",
        "question_ar": "",
        "evidence_en": "account in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.",
        "question_ar": "",
        "evidence_en": "supplier name refers to s_name; the most amount of money refers to max(s_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the phone numbers of all the suppliers in Germany.",
        "question_ar": "",
        "evidence_en": "phone number refers to s_phone; Germany refers to n_name = 'Germany'",
        "evidence_ar": "",
        "SQL": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'Germany'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the names of all the suppliers for the part \"hot spring dodger dim light\".",
        "question_ar": "",
        "evidence_en": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the lowest supply cost for the part \"hot spring dodger dim light\"?",
        "question_ar": "",
        "evidence_en": "the lowest supply cost refers to min(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the supplier that provides the part \"hot spring dodger dim light\" with the lowest supply cost?",
        "question_ar": "",
        "evidence_en": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; the lowest supply cost refers to min(ps_supplycost)",
        "evidence_ar": "",
        "SQL": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_supplycost LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total quantity available by all suppliers for the part \"hot spring dodger dim light\"?",
        "question_ar": "",
        "evidence_en": "total quantity available refers to sum(ps_availqty); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.ps_availqty) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.",
        "question_ar": "",
        "evidence_en": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone",
        "evidence_ar": "",
        "SQL": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the names of all the suppliers for the part with the highest retail price.",
        "question_ar": "",
        "evidence_en": "supplier name refers to s_name; the highest retail price refers to max(p_retailprice)",
        "evidence_ar": "",
        "SQL": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T1.p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How many suppliers for the part \"hot spring dodger dim light\" are in Vietnam?",
        "question_ar": "",
        "evidence_en": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; Vietnam refers to n_name = 'VIETNAM'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey INNER JOIN nation AS T4 ON T3.s_nationkey = T4.n_nationkey WHERE T1.p_name = 'hot spring dodger dim light' AND T4.n_name = 'VIETNAM'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the suppliers providing parts under the type \"promo brushed steel\", how many of them are in debt?",
        "question_ar": "",
        "evidence_en": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T3.s_acctbal < 0 AND T1.p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the names of all the suppliers for parts under Brand#55.",
        "question_ar": "",
        "evidence_en": "supplier name refers to s_name; Brand#55 refers to p_brand = 'Brand#55'",
        "evidence_ar": "",
        "SQL": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_brand = 'Brand#55'"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the parts under the type \"promo brushed steel\", how many of them have a total available quantity from all suppliers of under 5000?",
        "question_ar": "",
        "evidence_en": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; a total available quantity of under 5000 refers to sum(ps_availqty) < 5000",
        "evidence_ar": "",
        "SQL": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T"
    },
    {
        "db_id": "retails",
        "question_en": "The part \"hot spring dodger dim light\" is ordered in how many orders?",
        "question_ar": "",
        "evidence_en": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?",
        "question_ar": "",
        "evidence_en": "total quantity refers to sum(l_quantity); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the order keys of all the orders that have more than 2 parts with a jumbo case container.",
        "question_ar": "",
        "evidence_en": "order key refers to l_orderkey; jumbo case container refers to p_container = 'JUMBO CASE'; more than 2 parts refers to count(l_partkey) > 2",
        "evidence_ar": "",
        "SQL": "SELECT T.l_orderkey FROM ( SELECT T2.l_orderkey, COUNT(T2.l_partkey) AS num FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_container = 'JUMBO CASE' GROUP BY T2.l_orderkey ) AS T WHERE T.num > 2"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the suppliers in debt, how many of them are in Europe?",
        "question_ar": "",
        "evidence_en": "in debt refers to s_acctbal < 0; Europe refers to r_name = 'EUROPE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE' AND T3.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "Among all the suppliers providing the part \"hot spring dodger dim light\", how many of them are in Europe?",
        "question_ar": "",
        "evidence_en": "part \"hot spring dodger dim light\" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T1.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list the phone numbers of all the suppliers for the parts ordered in order no.1.",
        "question_ar": "",
        "evidence_en": "phone number refers to s_phone; order no.1 refers to l_orderkey = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.s_phone FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question_en": "Among the suppliers for the parts ordered in order no.4, how many of them are in debt?",
        "question_ar": "",
        "evidence_en": "order no.4 refers to l_orderkey = 4; in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.l_linenumber) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "Among the parts that are returned, how many of them are provided by a supplier in debt?",
        "question_ar": "",
        "evidence_en": "returned refers to l_returnflag = 'R'; in debt refers to s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_returnflag = 'R' AND T2.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question_en": "On which date was the part \"burnished seashell gainsboro navajo chocolate\" in order no.1 shipped?",
        "question_ar": "",
        "evidence_en": "date refers to l_shipdate; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the quantity of the part \"burnished seashell gainsboro navajo chocolate\" ordered in order no.1?",
        "question_ar": "",
        "evidence_en": "quantity refers to l_quantity; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_quantity FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question_en": "Which part is ordered in a bigger amount in order no.1, \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\"?",
        "question_ar": "",
        "evidence_en": "amount refers to sum(l_quantity); order no.1 refers to l_orderkey = 1; \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\" refers to p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate')",
        "evidence_ar": "",
        "SQL": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What is the biggest discount among all orders for the part \"burnished seashell gainsboro navajo chocolate\"?",
        "question_ar": "",
        "evidence_en": "the biggest discount refers to max(l_discount); part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question_en": "Please list all the modes of shipping for the part \"burnished seashell gainsboro navajo chocolate\".",
        "question_ar": "",
        "evidence_en": "mode of shipping refers to l_shipmode; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the average supply cost for the part \"hot spring dodger dim light\"?",
        "question_ar": "",
        "evidence_en": "average supply cost refers to avg(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "How much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost?",
        "question_ar": "",
        "evidence_en": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((MAX(T1.ps_supplycost) - MIN(T1.ps_supplycost)) AS REAL) * 100 / MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the profit for part no.98768 in order no.1?",
        "question_ar": "",
        "evidence_en": "part no.98768 refers to l_partkey = 98768; order no.1 refers to l_orderkey = 1; profit = subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_orderkey = 1 AND T1.l_partkey = 98768"
    },
    {
        "db_id": "retails",
        "question_en": "What is the discounted price of the part \"burnished seashell gainsboro navajo chocolate\" in order no.1?",
        "question_ar": "",
        "evidence_en": "part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1; discounted price refers to multiply(l_extendedprice, subtract(1, l_discount))",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question_en": "Which market segment does the customer with the highest amount of debt belongs to?",
        "question_ar": "",
        "evidence_en": "market segment refers to c_mktsegment; the highest amount of debt refers to max(c_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT c_mktsegment FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question_en": "In 1997, how many orders were shipped via mail?",
        "question_ar": "",
        "evidence_en": "1997 refers to year(l_shipdate) = 1997; shipped via mail refers to l_shipmode = 'MAIL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers are in the furniture segment?",
        "question_ar": "",
        "evidence_en": "furniture segment refers to c_mktsegment = 'FURNITURE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE'"
    },
    {
        "db_id": "retails",
        "question_en": "Among the items shipped in 1994 via truck, how many items were returned?",
        "question_ar": "",
        "evidence_en": "1994 refers to year(l_shipdate) = 1994; via truck refers to l_shipmode = 'TRUCK'; returned refers to l_returnflag = 'R'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers in the machinery segment are in debt?",
        "question_ar": "",
        "evidence_en": "machinery segment refers to c_mktsegment = 'MACHINERY'; in debt refers to c_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'"
    },
    {
        "db_id": "retails",
        "question_en": "How many urgent orders did Clerk#000000001 handle in 1997?",
        "question_ar": "",
        "evidence_en": "urgent order refers to o_orderpriority = '1-URGENT'; Clerk#000000001 refers to o_clerk = 'Clerk#000000001'; 1997 refers to year(o_orderdate) = 1997",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(o_orderkey) FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1997' AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the customer whose order was delivered the longest?",
        "question_ar": "",
        "evidence_en": "name of the customer refers to c_name; delivered the longest refers to max(subtract(l_receiptdate, l_commitdate))",
        "evidence_ar": "",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY (JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate)) DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How much is the total price of all the orders shipped to customers in Argentina?",
        "question_ar": "",
        "evidence_en": "total price = sum(o_totalprice); Argentina refers to n_name = 'Argentina'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.o_totalprice) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'ARGENTINA'"
    },
    {
        "db_id": "retails",
        "question_en": "How many customers in the building segments have orders with a total price of no less than 50,000?",
        "question_ar": "",
        "evidence_en": "building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.c_name) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'BUILDING' AND T1.o_totalprice > 50000"
    },
    {
        "db_id": "retails",
        "question_en": "Which country has the least number of suppliers?",
        "question_ar": "",
        "evidence_en": "country refers to n_name; the least number of suppliers refers to min(count(s_name))",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "How much is the part supply cost for the medium metallic grey dodger linen?",
        "question_ar": "",
        "evidence_en": "part supply cost refers to ps_supplycost; medium metallic grey dodger linen refers to p_name = 'medium metallic grey dodger linen'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the top 2 countries with the highest number of indebted suppliers?",
        "question_ar": "",
        "evidence_en": "country refers to c_name; highest number of indebted refers to max(sum(acctbal)) where s_acctbal < 0",
        "evidence_ar": "",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2"
    },
    {
        "db_id": "retails",
        "question_en": "What are the names of the parts that have a part supply cost of at least 1,000?",
        "question_ar": "",
        "evidence_en": "name of the part refers to p_name; part supply cost of at least 1,000 refers to ps_supplycost > 1000",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost > 1000"
    },
    {
        "db_id": "retails",
        "question_en": "What is the name of the country of the supplier with the highest debt?",
        "question_ar": "",
        "evidence_en": "name of the country refers to n_name; the highest debt refers to min(s_acctbal)",
        "evidence_ar": "",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_suppkey DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "Who is the clerk in charge of handling the item with the highest amount of extended price?",
        "question_ar": "",
        "evidence_en": "clerk refers to o_clerk; the highest amount of extended price refers to max(l_extendedprice)",
        "evidence_ar": "",
        "SQL": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question_en": "What are the total quantities of the items ordered by customer 101660 on 10/5/1995?",
        "question_ar": "",
        "evidence_en": "total quantity refers to sum(l_quantity); customer 101660 refers to o_custkey = 101660; on 10/5/1995 refers to o_orderdate = '1995-10-05'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660"
    },
    {
        "db_id": "retails",
        "question_en": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?",
        "question_ar": "",
        "evidence_en": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'"
    },
    {
        "db_id": "retails",
        "question_en": "What are the names of the parts that were ordered by customer 110942?",
        "question_ar": "",
        "evidence_en": "name of the part refers to p_name; customer 110942 refers to o_custkey = 110942",
        "evidence_ar": "",
        "SQL": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942"
    },
    {
        "db_id": "retails",
        "question_en": "How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item.",
        "question_ar": "",
        "evidence_en": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); customer 111511 refers to o_custkey = 111511; order 53159 refers to o_orderkey = 53159; name of the part refers to p_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the height of David Bornhammar in inches?",
        "question_ar": "",
        "evidence_en": "heigh in inches refers to height_in_inch;",
        "evidence_ar": "",
        "SQL": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Please list the names of all the players with a height of over 6'2\" inches.",
        "question_ar": "",
        "evidence_en": "name of the players refers to PlayerName; height of over 6'2\" inches refers to height_in_inch > '6''2\"' ;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players with a height of over 6'2\" inches, how many of them were born in Sweden?",
        "question_ar": "",
        "evidence_en": "height of over 6'2\" inches refers to height_in_inch > '6''2\"'; born in Sweden refers to nation = 'Sweden' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"' AND T1.nation = 'Sweden'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the name of the tallest player?",
        "question_ar": "",
        "evidence_en": "tallest player refers to MAX(height_in_cm);",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How much does David Bornhammar weigh in kilograms?",
        "question_ar": "",
        "evidence_en": "weigh in kilograms refers to weight_in_kg;",
        "evidence_ar": "",
        "SQL": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players weigh more than 90 kg?",
        "question_ar": "",
        "evidence_en": "weigh more than 90 kg refers to weight_in_kg > 90;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players that weigh more than 90 kg, how many of them have a position of defense?",
        "question_ar": "",
        "evidence_en": "weigh more than 90 kg refers to weight_in_kg > 90; position of defense refers to position_info = 'D' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.position_info = 'D'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players that weigh more than 90 kg, what is the name of the player that has the most attendance in the player's first 7 years of NHL career?",
        "question_ar": "",
        "evidence_en": "weigh more than 90 kg refers to weight_in_kg > 90; name of the player refers to PlayerName; most attendance in the player's first 7 years of NHL career refers to MAX(sum_7yr_GP);",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.sum_7yr_GP = ( SELECT MAX(T1.sum_7yr_GP) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the weight of the player with the longest time on ice in the player’s first 7 years of NHL career in kilograms?",
        "question_ar": "",
        "evidence_en": "weight in kilograms refers to weight_in_kg; longest time on ice in the player's first 7 years of NHL career refers to MAX(sum_7yr_TOI);",
        "evidence_ar": "",
        "SQL": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.sum_7yr_TOI = ( SELECT MAX(t.sum_7yr_TOI) FROM PlayerInfo t )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How much taller is David Bornhammar than Pauli Levokari in centimeters?",
        "question_ar": "",
        "evidence_en": "how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all the players that are right-shooted, how many of them weigh over 90 kg?",
        "question_ar": "",
        "evidence_en": "right-shooted refers to shoots = 'R'; weigh over 90 kg refers to weight_in_kg > 90;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Please list the names of all the players that are over 90 kg and are right-shooted.",
        "question_ar": "",
        "evidence_en": "names of the players refers to PlayerName; over 90 kg refers to weight_in_kg > 90; right-shooted refers to shoots = 'R';",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the BMI of David Bornhammar?",
        "question_ar": "",
        "evidence_en": "BMI = DIVIDE(weight_in_kg, power(DIVIDE(height_in_cm, 100), 2));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.weight_in_kg AS REAL) / (CAST(T3.height_in_cm AS REAL) / 100 * (CAST(T3.height_in_cm AS REAL) / 100)) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the average height in centimeters of all the players in the position of defense?",
        "question_ar": "",
        "evidence_en": "average = AVG(height_in_cm); players refers to PlayerName; position of defense refers to position_info = 'D' ;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.height_in_cm) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.position_info = 'D'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the weight in pounds of the heaviest player?",
        "question_ar": "",
        "evidence_en": "weight in pounds refers to weight_in_lbs; heaviest player refers to MAX(weight_in_lbs);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many right-shooted players have a height of 5'7''?",
        "question_ar": "",
        "evidence_en": "right-shooted players refers to shoots = 'R'; height of 5'7'' refers to height_in_inch = '5''7\"';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch = '5''7\"' AND T1.shoots = 'R'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players whose total NHL games played in their first 7 years of NHL career is no less than 500, what is the name of the player who committed the most rule violations?",
        "question_ar": "",
        "evidence_en": "total NHL games played in their first 7 years of NHL career is no less than 500 refers to sum_7yr_GP > 500; name of the player refers to PlayerName; committed the most rule violations refers to MAX(PIM);",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.PIM DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada?",
        "question_ar": "",
        "evidence_en": "height in centimeter refers to height_in_cm; tallest player refers to MAX(height_in_cm); born in Edmonton, Alberta, Canada refers to birthplace = 'Edmonton, AB, CAN';",
        "evidence_ar": "",
        "SQL": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players, who were drafted by Anaheim Ducks in 2008, have played for U.S. National U18 Team?",
        "question_ar": "",
        "evidence_en": "drafted by Anaheim Ducks refers to overallby = 'Anaheim Ducks'; in 2008 refers to draftyear = 2008; played for U.S. National U18 Team refers to TEAM = 'U.S. National U18 Team';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.overallby = 'Anaheim Ducks' AND T1.draftyear = 2008 AND T2.TEAM = 'U.S. National U18 Team'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the weight in kilograms of the player with the highest number of goal differential of all time?",
        "question_ar": "",
        "evidence_en": "weight in kilograms refers to weight_in_kg; highest number of goal differential of all time refers to MAX(PLUSMINUS);",
        "evidence_ar": "",
        "SQL": "SELECT T3.weight_in_kg FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T2.weight = T3.weight_id ORDER BY T1.PLUSMINUS DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the most valuable player in QMJHL league during the 2004-2005 season?",
        "question_ar": "",
        "evidence_en": "most valuable player refers to MAX(P); QMJHL league refers to LEAGUE = 'QMJHL'; 2004-2005 season refers to SEASON = '2004-2005';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON BETWEEN '2004' AND '2005' AND T1.LEAGUE = 'QMJHL' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What are the names of the players who played for Acadie-Bathurst Titan during the regular season in 1998-1999?",
        "question_ar": "",
        "evidence_en": "names of the players refers to PlayerName; played for Acadie-Bathurst Titan refers to TEAM = 'AcadieandBathurst Titan'; regular season refers to GAMETYPE = 'Regular Season'; in 1998-1999 refers to SEASON = '1998-1999';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Acadie-Bathurst Titan'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many games did the tallest player have ever played?",
        "question_ar": "",
        "evidence_en": "tallest player refers to MAX(height_in_cm);",
        "evidence_ar": "",
        "SQL": "SELECT T1.GP FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.ELITEID = ( SELECT t.ELITEID FROM PlayerInfo t ORDER BY t.height DESC LIMIT 1 )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the youngest player to have played during the 1997-1998 season for OHL League?",
        "question_ar": "",
        "evidence_en": "youngest player refers to MAX(birthdate); 1997-1998 season refers to SEASON = '1997-1998'; OHL league refers to LEAGUE = 'OHL';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998' AND T1.LEAGUE = 'OHL' ORDER BY T2.birthdate DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players who played 72 games, how many are left-shooters?",
        "question_ar": "",
        "evidence_en": "played 72 games refers to GP = 72; left-shooters refers to shoots = 'L';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ELITEID) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.GP = 72 AND T2.shoots = 'L'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(G WHERE GAMETYPE = 'Regular Season'), SUM(G WHERE GAMETYPE = 'Playoffs') WHERE SEASON = '1998-1999'); number of goals scored refers to G; regular season refers to GAMETYPE = 'Regular Season'; playoffs refers to GAMETYPE = 'Playoffs'; 1998-1999 season refers to SEASON = '1998-1999';",
        "evidence_ar": "",
        "SQL": "SELECT T3.Rs_G - T4.Pf_G AS diff FROM ( SELECT T2.PlayerName, T1.G AS Rs_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' ) AS T3 INNER JOIN ( SELECT T2.PlayerName, T1.G AS Pf_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Playoffs' ) AS T4 ON T3.PlayerName = T4.PlayerName"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the average weight in pounds of all the players with the highest prospects for the draft?",
        "question_ar": "",
        "evidence_en": "average = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; highest prospects for the draft refers to MAX(CSS_rank);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.weight_in_lbs) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.CSS_rank = ( SELECT MAX(CSS_rank) FROM PlayerInfo )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all the teams that made the playoffs in the 2007-2008 season, identify the percentage that played over 20 games.",
        "question_ar": "",
        "evidence_en": "playoffs refers to GAMETYPE = 'Playoffs'; percentage = MULTIPLY(DIVIDE(SUM(GP > 20), COUNT(ELITEID)), 100); played over 20 games refers to GP > 20; 2007-2008 season refers to SEASON = '2007-2008';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN GP > 20 THEN TEAM ELSE NULL END) AS REAL) * 100 / COUNT(TEAM) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Name the player who scored the most goals in a single game in the 2007-2008 season of WHL?",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; scored the most goals in a single game refers to MAX(G); WHL refers to LEAGUE = 'WHL'; 2007-2008 season refers to SEASON = '2007-2008';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'WHL' ORDER BY T1.G DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Name the Chilliwack Chiefs players who have scored 100 points or more in the NHL.",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; Chilliwack Chiefs refers to TEAM = 'Chilliwack Chiefs'; scored 100 points or more in the NHL refers to P > 100;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Identify the players who weigh 120 kg.",
        "question_ar": "",
        "evidence_en": "players refers to PlayerName; weigh 120 kg refers to weight_in_kg = 120;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_kg = 120"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Identify the players with the same height as Brian Gionta. How tall are they?",
        "question_ar": "",
        "evidence_en": "players refers to PlayerName; height refers to height_in_cm;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName, T1.height_in_cm FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.height = ( SELECT height FROM PlayerInfo WHERE PlayerName = 'Brian Gionta' )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Identify the name and position of the player who has committed the most rule violations.",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; position of the player refers to position_info; committed the most rule violations refers to MAX(PIM);",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName, T2.position_info FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PIM = ( SELECT MAX(PIM) FROM SeasonStatus )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Name the player who has the most NHL points in draft year.",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; most NHL points in draft year refers to MAX(P);",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all players drafted by the Toronto Maple Leafs, identify the percentage who are from Eastern Europe.",
        "question_ar": "",
        "evidence_en": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; percentage = MULTIPLY(DIVIDE(SUM(nation = 'Eastern Europe'), COUNT(ELITEID) WHERE overallby = 'Toronto Maple Leafs'), 100); from Eastern Europe refers to nation in ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine'); countries in a continent can be identified by referring to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all players drafted by the Toronto Maple Leafs in 2008, identify the player with the highest prospects for the draft.",
        "question_ar": "",
        "evidence_en": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; highest prospects for the draft refers to MAX(CSS_rank);",
        "evidence_ar": "",
        "SQL": "SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND draftyear = '2008' ORDER BY CSS_rank DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Name the player and his team who made the playoffs in the 2006-2007 season of SuperElit league with the highest points.",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; playoffs refers to GAMETYPE = 'Playoffs'; highest points refers to MAX(P); 2006-2007 season refers to SEASON = '2006-2007'; SuperElit league refers to LEAGUE = 'SuperElit';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career?",
        "question_ar": "",
        "evidence_en": "drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; played over 300 games in their first 7 years of the NHL career refers to sum_7yr_GP > 300;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How tall is the player from Yale University who picked up 28 penalty minutes in the 2005-2006 season?",
        "question_ar": "",
        "evidence_en": "how tall refers to height_in_cm; Yale University refers to TEAM = 'Yale Univ.'; 28 penalty minutes refers to PIM = '28'; 2005-2006 season refers to SEASON = '2005-2006';",
        "evidence_ar": "",
        "SQL": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz.",
        "question_ar": "",
        "evidence_en": "goals scored refers to G; Calgary Hitmen refers to TEAM = 'Calgary Hitmen'; percentage = MULTIPLY(DIVIDE(SUM(G WHERE PlayerName = 'Ian Schultz'), SUM(G)), 100); 2007-2008 season refers to SEASON = '2007-2008';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Ian Schultz' THEN T1.G ELSE 0 END) AS REAL) * 100 / SUM(T1.G) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.TEAM = 'Calgary Hitmen'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov.",
        "question_ar": "",
        "evidence_en": "penalty minutes refers to PIM; Ak Bars Kazan refers to TEAM = 'Ak Bars Kazan'; percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE PlayerName = 'Yevgeni Muratov'), SUM(PIM)), 100.0); 1999-2000 season refers to SEASON = '1999-2000';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the birthplace of Aaron Gagnon?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the weight in kg of Tony Martensson?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Tony Martensson'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List out the name of players who weight 190 lbs.",
        "question_ar": "",
        "evidence_en": "name of players refers to PlayerName; weight 190 lbs refers to weight_in_lbs = 190;",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_lbs = 190"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who has the heaviest weight?",
        "question_ar": "",
        "evidence_en": "who refers to PlayerName; heaviest weight refers to MAX(weight_in_kg);",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id ORDER BY T2.weight_in_kg DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the percentage of players who were born in Denmark and weight above 154 lbs?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(weight_in_lbs > 154 and nation = 'Denmark'), COUNT(ELITEID)), 100); players refers to PlayerName; born in Denmark refers to nation = 'Denmark'; weight above 154 lbs refers to weight_in_lbs > 154;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Denmark' AND T2.weight_in_lbs > 154 THEN T1.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Which team does Andreas Jamtin belong to?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Andreas Jamtin'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List out the seasons that Niklas Eckerblom played.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.SEASON FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Niklas Eckerblom'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Mention the type of game that Matthias Trattnig played.",
        "question_ar": "",
        "evidence_en": "type of game refers to GAMETYPE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.GAMETYPE FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Matthias Trattnig'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List out the nation of players who played for the 1997-1998 season .",
        "question_ar": "",
        "evidence_en": "players refers to PlayerName; 1997-1998 season refers to SEASON = '1997-1998';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the highest point highest point of Per Mars in the draft year?",
        "question_ar": "",
        "evidence_en": "highest point in the draft year refers to MAX(P);",
        "evidence_ar": "",
        "SQL": "SELECT T1.P FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Per Mars' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the Italian players, who has the shortest height?",
        "question_ar": "",
        "evidence_en": "Italian refers to nation = 'Italy'; players refers to PlayerName; shortest height refers to MIN(height_in_cm);",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.nation = 'Italy' ORDER BY T1.height_in_cm ASC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List out the name of players who have a height of 5'8\".",
        "question_ar": "",
        "evidence_en": "name of players refers to PlayerName; height of 5'8\" refers to height_in_inch = '5''8\"';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_inch = '5''8\"'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players were born in 1982 and have a height above 182cm?",
        "question_ar": "",
        "evidence_en": "born in 1982 refers to birthyear = 1982; height above 182cm refers to height_in_cm > 182 ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the percentage of Russian players who have a height of under 200 inch?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Russia' WHERE height_in_cm < 200), COUNT(ELITEID)), 100); Russian refers to nation = 'Russia'; players refers to PlayerName; height of under 200 inch refers to height_in_cm < 200;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.height_in_cm < 200 AND T2.nation = 'Russia' THEN T2.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the USA players, who has the lightest weight?",
        "question_ar": "",
        "evidence_en": "USA refers to nation = 'USA' ; players refers to PlayerName; lightest weight refers to MIN(weight_in_lbs);\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who among the players in season 2000-2001 has committed the highest rule violations or penalty minutes?",
        "question_ar": "",
        "evidence_en": "committed the highest rule violations or penalty minutes refers to MAX(PIM); 2000-2001 season refers to SEASON = '2000-2001'",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' ORDER BY T1.PIM DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List the names of all players in team Avangard Omsk in season 2000-2001.",
        "question_ar": "",
        "evidence_en": "names of the players refers to PlayerName; team Avangard Omsk refers to TEAM = 'Avangard Omsk'; 2000-2001 season refers to SEASON = '2000-2001';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who among the players drafted by Arizona Coyotes in 2000 has committed the highest rule violations?",
        "question_ar": "",
        "evidence_en": "who refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; committed the highest rule violations refers to MAX(PIM); in 2000 refers to draftyear = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.overallby = 'Arizona Coyotes' AND T2.draftyear = 2000 ORDER BY T1.PIM DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players were drafted by Arizona Coyotes whose height reaches 195 centimeters?",
        "question_ar": "",
        "evidence_en": "drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; height reaches 195 centimeters refers to height_in_cm = 195;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.overallby = 'Arizona Coyotes' AND T1.height_in_cm = 195"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List the names of all players from Avangard Omsk that have played for playoffs in season 2000-2001.",
        "question_ar": "",
        "evidence_en": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; playoffs refers to GAMETYPE = 'Playoffs'; 2000-2001 season refers to SEASON = '2000-2001';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk' AND T1.GAMETYPE = 'Playoffs'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the most valuable player who played in the 2000-2001 season of the International league?",
        "question_ar": "",
        "evidence_en": "most valuable player refers to MAX(P); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many players who were born in 1980 weigh 185 in pounds?",
        "question_ar": "",
        "evidence_en": "born in 1980 refers to birthyear = 1980; weigh 185 in pounds refers to weight_in_lbs = 185;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_lbs = 185 AND strftime('%Y', T2.birthdate) = '1980'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who has played the most game plays in the 2000-2001 season of the International league?",
        "question_ar": "",
        "evidence_en": "played the most game plays refers to MAX(GP); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List the names of all players from Avangard Omsk who played in the 2000-2001 season of the International league that have no goals in draft year.",
        "question_ar": "",
        "evidence_en": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; International league refers to LEAGUE = 'International'; no goals in draft year refers to G = 0; 2000-2001 season refers to SEASON = '2000-2001';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the oldest player who played for Avangard Omsk during the regular season in 2000-2001?",
        "question_ar": "",
        "evidence_en": "oldest player refers to MIN(birthdate); Avangard Omsk refers to TEAM = 'Avangard Omsk'; regular season refers to GAMETYPE = 'Regular Season'; 2000-2001 season refers to SEASON = '2000-2001';\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Among the players who played in OHL league during the regular season in 2007-2008, who is the player that attained the most number of assist?",
        "question_ar": "",
        "evidence_en": "OHL league refers to LEAGUE = 'OHL'; who refers to PlayerName; regular season refers to GAMETYPE = 'Regular Season'; most number of assist refers to MAX(A); 2007-2008 season refers to SEASON = '2007-2008';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'OHL' AND T1.GAMETYPE = 'Regular Season' ORDER BY T1.A DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many teams did the heaviest player drafted by Arizona Coyotes have played for?",
        "question_ar": "",
        "evidence_en": "heaviest player refers to MAX(weight_in_lb); drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Calculate the average weight in pounds of all players drafted by Arizona Coyotes.",
        "question_ar": "",
        "evidence_en": "average weight in pounds = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.weight_in_lbs) AS REAL) / COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.overallby = 'Arizona Coyotes'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season.",
        "question_ar": "",
        "evidence_en": "average height in centimeter = AVG(height_in_cm); height in centimeter refers to height_in_cm; players refers to PlayerName; Acadie-Bathurst Titan refers to TEAM = 'Acadie-Bathurst Titan'; regular season refers to GAMETYPE = 'Regular Season';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many games did Per Mars play in the 1997-1998 season?",
        "question_ar": "",
        "evidence_en": "1997-1998 season refers to SEASON = '1997-1998';",
        "evidence_ar": "",
        "SQL": "SELECT T2.GP FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Pavel Patera'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How heavy is Matthias Trattnig in kilograms?",
        "question_ar": "",
        "evidence_en": "how heavy in kilograms refers to weight_in_kg;",
        "evidence_ar": "",
        "SQL": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Pavel Patera'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "List the name of players who have a height over 5'9.",
        "question_ar": "",
        "evidence_en": "names of players refers to PlayerName; height over 5'9 refers to height_in_inch > '5''9\"';",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '5''9\"'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What team did Niklas Eckerblom play in the 1997-1998 season?",
        "question_ar": "",
        "evidence_en": "1997-1998 season refers to SEASON = '1997-1998';",
        "evidence_ar": "",
        "SQL": "SELECT T2.TEAM FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Niko Kapanen'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Which team has the most Swedish?",
        "question_ar": "",
        "evidence_en": "Swedish refers to nation = 'Sweden'; team with the most Swedish refers to MAX(TEAM WHERE nation = 'Sweden');",
        "evidence_ar": "",
        "SQL": "SELECT T.TEAM FROM ( SELECT T2.TEAM, COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.nation = 'Sweden' GROUP BY T2.TEAM ORDER BY COUNT(DISTINCT T1.ELITEID) DESC LIMIT 1 ) AS T"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "How many playoffs did Per Mars participate in?",
        "question_ar": "",
        "evidence_en": "playoffs refers to GAMETYPE = 'Playoffs';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Name the player who had the most goals for team Rimouski Oceanic in playoff.",
        "question_ar": "",
        "evidence_en": "name of the player refers to PlayerName; most goals refers to MAX(G); team Rimouski Oceanic refers to TEAM = 'Rimouski Oceanic'; playoff refers to GAMETYPE = 'Playoffs';",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Rimouski Oceanic' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.G DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Which country do most players of team Plymouth Whalers come from?",
        "question_ar": "",
        "evidence_en": "country and nation are synonyms; country where most players come from refers to MAX(COUNT(nation WHERE TEAM = 'Plymouth Whalers')); players refers to PlayerName; team Plymouth Whalers refers to TEAM = 'Plymouth Whalers';",
        "evidence_ar": "",
        "SQL": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who had the most assists of team Plymouth Whalers in the 1999-2000 season?",
        "question_ar": "",
        "evidence_en": "who refers to PlayerName; most assists refers to MAX(A); team Plymouth Whalers refers to TEAM = 'Plymouth Whalers'; 1999-2000 season refers to SEASON = '1999-2000';",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' AND T2.SEASON = '1999-2000' ORDER BY T2.A DESC LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Indicate the height of all players from team Oshawa Generals in inches.",
        "question_ar": "",
        "evidence_en": "height in inches refers to height_in_inch; players refers to PlayerName; team Oshawa Generals refers to TEAM = 'Oshawa Generals';",
        "evidence_ar": "",
        "SQL": "SELECT T3.height_in_inch FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'Oshawa Generals'"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the oldest player that participated in OHL league in the 1997 - 2000 season?",
        "question_ar": "",
        "evidence_en": "oldest player refers to MIN(birthdate); OHL league refers to LEAGUE = 'OHL'; 1997-2000 season refers to SEASON = '1997-2000';",
        "evidence_ar": "",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.SEASON = '1999-2000' ORDER BY T1.birthdate LIMIT 1"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Who is the tallest player in team USA U20?",
        "question_ar": "",
        "evidence_en": "tallest refers to MAX(height_in_cm); \nplayer refers to PlayerName; team USA U20 refers to TEAM = 'USA U20';",
        "evidence_ar": "",
        "SQL": "SELECT T.PlayerName FROM ( SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC ) AS T WHERE T.height_in_cm = ( SELECT MAX(T3.height_in_cm) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' )"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "What is the percentage of Swedish players in playoffs games in the 1997 - 2000 season?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Sweden'), COUNT(ELITEID) WHERE SEASON = '1997-2000'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; playoffs games refers to GAMETYPE = 'Playoffs'; 1997-2000 season refers to 3 consecutive SEASONs : '1997-1998', '1998-1999', '1999-2000';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T1.ELITEID ELSE NULL END) OVER (PARTITION BY T2.SEASON) AS REAL) * 100 / COUNT(T1.ELITEID) OVER (PARTITION BY T2.SEASON) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON IN ('1997-1998', '1998-1999', '1999-2000')"
    },
    {
        "db_id": "ice_hockey_draft",
        "question_en": "Calculate the percentage of penalty minutes of Swedish players in OHL league among all players.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE nation = 'Sweden'), COUNT(ELITEID) WHERE LEAGUE = 'OHL'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; OHL league refers to LEAGUE = 'OHL';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T2.PIM ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average standard cost of product number CA-1098?",
        "question_ar": "",
        "evidence_en": "Average cost = AVG(StandardCost)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.StandardCost) FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = 'CA-1098'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For all the products, list the product name and its corresponding start date for the current standard cost.",
        "question_ar": "",
        "evidence_en": "The current standard cost refers to EndDate is NULL",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the products whereby the standard cost is $80 more than previous standard cost in history.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(product.StandardCost, CostHistory.StandardCost)>80",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost - T2.StandardCost > 80 GROUP BY T1.Name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name all products and total quantity for each item for shopping cart ID 14951.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Quantity FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 14951"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the product name with more than 5 quantity in the shopping cart.",
        "question_ar": "",
        "evidence_en": "Product with more than 5 quantity refers to Quantity>5",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For all the purchase order transactions, name all the products with low quality.",
        "question_ar": "",
        "evidence_en": "Low quality refers to the product's quality class, therefore Class = 'L'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Provide all the transactions whereby the quantiy is more than 10,000 pieces. State the product name and the selling price.",
        "question_ar": "",
        "evidence_en": "Quantity more than 10,000 pieces refers to Quantity>10000; selling price refers to ListPrice",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name, T1.ListPrice FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 10000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which is a high quality product but with the lowest transacted quantity?",
        "question_ar": "",
        "evidence_en": "High quality refers to the product's quality class, therefore Class = 'H'; the lowest transacted quantity refers to Quantity = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'H' ORDER BY T2.Quantity ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many transactions are there for product under the Mountain line?",
        "question_ar": "",
        "evidence_en": "The Mountain line refers to the product line, therefore ProductLine = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much would be the total sales profit for shopping cart ID 20621 ?",
        "question_ar": "",
        "evidence_en": "Sales profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost; Quantity)), where ShoppingCartID = '20621'",
        "evidence_ar": "",
        "SQL": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all product names that are high in quality. Please also state its selling price.",
        "question_ar": "",
        "evidence_en": "High quality refers to the product's quality class, therefore Class = 'H'",
        "evidence_ar": "",
        "SQL": "SELECT Name, ListPrice FROM Product WHERE Class = 'H'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product line has the most products that are salable?",
        "question_ar": "",
        "evidence_en": "Saleable product refers to FinishedGoodsFlag = 1",
        "evidence_ar": "",
        "SQL": "SELECT ProductLine FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY COUNT(FinishedGoodsFlag) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Provide details of review from reviewer whose name begin with letter 'J'. State the product ID, rating and comments.",
        "question_ar": "",
        "evidence_en": "reviewer whose name begin with letter 'J' = ReviewerName LIKE 'J%'",
        "evidence_ar": "",
        "SQL": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "State the product name, product line, rating and the selling price of product with the lowest rating.",
        "question_ar": "",
        "evidence_en": "Product with the lowest rating refers to the rating\ngiven by the\nreviewer where Rating = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.ProductLine, T2.Rating, T1.ListPrice FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the profit of each products. List all products with more than $100 in profit.",
        "question_ar": "",
        "evidence_en": "Profit = AVG(SUBTRACT(ListPrice, StandardCost)>100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Name FROM Product WHERE ListPrice - StandardCost > 100"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List down the product name, reviewer name, rating and comments for product under the road line.",
        "question_ar": "",
        "evidence_en": "The Road line refers to the product line, therefore ProductLine = 'R'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments FROM Product AS T1 INNER JOIN ProductReview AS T2 USING (productID) WHERE T1.ProductLine = 'R'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many people reviewed for product named HL Mountain Pedal? What is the average rating?",
        "question_ar": "",
        "evidence_en": "AVG(Rating) = DIVIDE(SUM(rating), COUNT(ReviewerName))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID), AVG(T2.Rating) FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Mountain Pedal'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the purchase order whereby all received quantity were rejected? Name those product.",
        "question_ar": "",
        "evidence_en": "Rejected refers rejected product in which to RejectedQty = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among all products without any rejected quantity, which product has the highest line total? State the product name and unit price.",
        "question_ar": "",
        "evidence_en": "Product without any rejected quantity refers to RejectedQty = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.UnitPrice FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = 0 ORDER BY T2.LineTotal DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all product names and its product line for all purchase order with order quantity of 5000 or more.",
        "question_ar": "",
        "evidence_en": "Purchase order with order quantity of 5000 or more refers to OrderQty> = 5000",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total ordered quantity for products under the 'Touring' line?",
        "question_ar": "",
        "evidence_en": "The Touring line refers to the product line, therefore ProductLine = 'T'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the low quality product, which product has the highest line total? List the product name and its line total?",
        "question_ar": "",
        "evidence_en": "Low quality refers to the product's quality class, therefore Class = 'L'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product has the highest profit on net? State the product name.",
        "question_ar": "",
        "evidence_en": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all products with minimum order quantity of 100 and order them by product name in descending order.",
        "question_ar": "",
        "evidence_en": "miinimum order quantity refers to MinOrderQty = 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the name and calculate its profit for product with the highest rating in review.",
        "question_ar": "",
        "evidence_en": "Profit = SUBTRACT(ListPrice, StandardCost); the highest rating in review refers to Rating = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.ListPrice - T1.StandardCost FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total profit all transactions with product ID 827?",
        "question_ar": "",
        "evidence_en": "Profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost) Quantity))",
        "evidence_ar": "",
        "SQL": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 827"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which currency pair's average exchange rate for the day is the highest?",
        "question_ar": "",
        "evidence_en": "currency pair refers to FromCurrencyCode/ToCurrencyCode",
        "evidence_ar": "",
        "SQL": "SELECT FromCurrencyCode, ToCurrencyCode FROM CurrencyRate ORDER BY AverageRate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products with the highest unit price were ordered?",
        "question_ar": "",
        "evidence_en": "number of products refers to OrderQty",
        "evidence_ar": "",
        "SQL": "SELECT OrderQty FROM PurchaseOrderDetail ORDER BY UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Between Northwest and Southeast of the United States, which territory one recorded the highest amount of sales last year?",
        "question_ar": "",
        "evidence_en": "United States refers to CountryRegionCode = 'US';",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM SalesTerritory WHERE CountryRegionCode = 'US' AND (Name = 'Northwest' OR Name = 'Southeast') ORDER BY SalesLastYear DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full name of the Document Control Manager who is in charge of all Level 1 approved documents?",
        "question_ar": "",
        "evidence_en": "full Name = FirstName+MiddleName+Last Name; approved document refers to Status = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.MiddleName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Document AS T3 ON T3.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Manager' AND T3.DocumentLevel = 1 AND T3.Status = 2 GROUP BY T1.FirstName, T1.MiddleName, T1.LastName"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which customer has the highest subtotal amount of sales orders whose assigned to the salesperson with the highest bonus?",
        "question_ar": "",
        "evidence_en": "highest subtotal amount of sales order refers to max(SubTotal);",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total price of Sales Order ID 46625 with Volume Discount 11 to 14 and Product ID 716?",
        "question_ar": "",
        "evidence_en": "total price = multiply(UnitPrice, OrderQty);",
        "evidence_ar": "",
        "SQL": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Of the products that has a reorder inventory point of no more than 600, how many manufactured in-house products that takes 1 day to manufacture with BOM Level 4 are there?",
        "question_ar": "",
        "evidence_en": "ReorderPoint<600; product is manufactured in-house refers to Makeflag = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.ProductID = T2.ProductAssemblyID WHERE T1.MakeFlag = 1 AND T1.DaysToManufacture = 1 AND T2.BOMLevel = 4 AND T1.ReorderPoint <= 600"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest amount of bonus earned by the sales person in Canada?",
        "question_ar": "",
        "evidence_en": "Canada is name of a sales territory",
        "evidence_ar": "",
        "SQL": "SELECT T2.Bonus FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CountryRegionCode = 'CA' ORDER BY T2.SalesQuota DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the names of the product that has the lowest rating?",
        "question_ar": "",
        "evidence_en": "lowest rating refers to Rating = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating ASC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many of the workers who started working in 2009 are from the Production Department?",
        "question_ar": "",
        "evidence_en": "StartDate BETWEEN '2009-01-01' AND '2009-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the company's highest-paid single female employee? Include her full name and job title.",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName; highest-paid refers to max(Rate); single refers to Status = 'S'; female refers to Gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT T3.FirstName, T3.MiddleName, T3.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'F' ORDER BY T2.Rate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the Vice President of Engineering and when did he join the company? Indicate his/her full name.",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName; HiredDate refers to the date the person joins the company;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.HireDate FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Vice President of Engineering'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many active employees whose payrate is equal or below 30 per hour.",
        "question_ar": "",
        "evidence_en": "active employee refers to CurrentFlag = 1; Rate< = 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Rate <= 30"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which department has a worker who just recently started working?",
        "question_ar": "",
        "evidence_en": "recently started working refers to latest StartDate;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID ORDER BY T2.StartDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which store sales person was reently hired? Indicate his/her full name and gender.",
        "question_ar": "",
        "evidence_en": "SC is an abbreviation for Store Contact; store contact person refers to PersonType = 'SC'; recently hired refers to latest StartDate;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.Gender FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How frequently do the employee with the least number of sick leave hours get paid?",
        "question_ar": "",
        "evidence_en": "least number of sick leave refers to min(SickLeaveHours); PayFrequency = 1 means ‘Salary received monthly’; PayFrequency = 2 means ‘Salary received biweekly';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which job title has the lowest pay?",
        "question_ar": "",
        "evidence_en": "lowest pay refers to min(Rate);",
        "evidence_ar": "",
        "SQL": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.Rate ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total number of employees that worked in the Finance department?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (DepartmentID) WHERE T1.Name = 'Finance'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the profit of the product with the highest list price and of the product with the lowest list price other than 0? Indicates the depth the component is from its parent.",
        "question_ar": "",
        "evidence_en": "profit = subtract(ListPrice, StandardCost); the depth the component from its parent refers to BOMLevel;",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice DESC LIMIT 1 ) , ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the companies to which Adventure Works Cycles purchases parts or other goods, what is the profit on net obtained from the vendor who has an above average credit rating? Kindly indicate each names of the vendor and the corresponding net profits.",
        "question_ar": "",
        "evidence_en": "above average credit rating refers to CreditRating = 3; profit on net = subtract(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CreditRating = 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many accounts have an address that is too long?",
        "question_ar": "",
        "evidence_en": "address that is too long refers to AddressLine2! = null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Address WHERE AddressLine2 <> ''"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the postal code of the street address of the account that is latest updated?",
        "question_ar": "",
        "evidence_en": "account latest updated refers to year(ModifiedDate) = 2022 and month(ModifiedDate) = 10",
        "evidence_ar": "",
        "SQL": "SELECT PostalCode FROM Address ORDER BY ModifiedDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the longest assembly item duration for bicycles?",
        "question_ar": "",
        "evidence_en": "longest assembly item duration = max(subtract(EndDate,StartDate))",
        "evidence_ar": "",
        "SQL": "SELECT JULIANDAY(EndDate) - JULIANDAY(StartDate) FROM BillOfMaterials ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many assembly items for bicycles aren't finished?",
        "question_ar": "",
        "evidence_en": "assembly lines that are not finished refers to EndDate = null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BillOfMaterialsID) FROM BillOfMaterials WHERE EndDate IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the unit measure code of the component that is of the greatest need in quantity to create the assembly.",
        "question_ar": "",
        "evidence_en": "greatest need in quantity refers to max(PerAssemblyQty)",
        "evidence_ar": "",
        "SQL": "SELECT UnitMeasureCode FROM BillOfMaterials ORDER BY PerAssemblyQty DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many product maintenance documents are private?",
        "question_ar": "",
        "evidence_en": "product maintenance documents are private refers to DocumentSummary = null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the titles of the documents that are pending approval.",
        "question_ar": "",
        "evidence_en": "documents pending approval refers to Status = 1",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Document WHERE Status = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the job titles of the employees who has a document that has been approved.",
        "question_ar": "",
        "evidence_en": "document has been approved refers to Status = 2",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.BusinessEntityID, T2.JobTitle FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the pay frequency of the oldest employee?",
        "question_ar": "",
        "evidence_en": "oldest employee refers to min(BirthDate); PayFrequency = 1 refers to ‘Salary received monthly’; PayFrequency = 2 refers to ‘Salary received biweekly'",
        "evidence_ar": "",
        "SQL": "SELECT T1.PayFrequency FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.BirthDate ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees whose pay frequencies are the highest, how many of them are married?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = M; highest pay frequency refers to PayFrequency = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the employee who has been hired the latest, what is his or her pay rate?",
        "question_ar": "",
        "evidence_en": "hired the latest refers to max(HireDate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who have a pay rate of above 40, how many of them are male?",
        "question_ar": "",
        "evidence_en": "pay rate above 40 refers to Rate>40; male employee refers to Gender = M",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate > 40"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest pay rate of the employees who are exempt from collective bargaining?",
        "question_ar": "",
        "evidence_en": "employee exempt from collective bargaining refers to SalariedFlag = 1; highest pay rate refers to max(Rate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the employees who have the highest pay frequency, please list their vacation hours.",
        "question_ar": "",
        "evidence_en": "highest pay frequency refers to PayFrequency = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.VacationHours FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.BusinessEntityID = ( SELECT BusinessEntityID FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the pay rate of the employee who has the longest vacation hours?",
        "question_ar": "",
        "evidence_en": "longest vacation hour refers to max(VacationHours)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees with a pay rate of over 35 have more than 10 sick leave hours?",
        "question_ar": "",
        "evidence_en": "more than 10 sick leave hours refers to SickLeaveHours>10; pay rate over 35 refers to Rate>35;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the active male employees, how many of them are paid with the highest frequency?",
        "question_ar": "",
        "evidence_en": "active status of employees refers to CurrentFlag = 1; Male refers to Gender = 'M'; highest frequency refers to PayFrequency = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.Gender = 'M' AND T1.PayFrequency = 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many male employees have the job position of sales person?",
        "question_ar": "",
        "evidence_en": "Sales person refers to PersonType = 'SP'; Male refers to Gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the job position of the oldest employee?",
        "question_ar": "",
        "evidence_en": "Oldest employee refers to Max ( Subtract((now())-BirthDate));",
        "evidence_ar": "",
        "SQL": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name style of the employee with the lowest pay rate?",
        "question_ar": "",
        "evidence_en": "lowest pay rate refers to Min(Rate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.NameStyle FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate IS NOT NULL ORDER BY T1.Rate ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who are married, how many of them have a western name style?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = '0';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.MaritalStatus = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who have more than 10 hours of sick leave, how many of them wish to receive e-mail promotions?",
        "question_ar": "",
        "evidence_en": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 10 hours of sick leave refer to SickLeaveHours >10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the employees who have more than 20 vacations hours and wish to receive e-mail promotions.",
        "question_ar": "",
        "evidence_en": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 20 vacations hours refers to VacationHours>20",
        "evidence_ar": "",
        "SQL": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.VacationHours > 20"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please give the additional contact information of the oldest employee with the jod position of sales person.",
        "question_ar": "",
        "evidence_en": "Sales person refers to PersonType = 'SP'; oldest employee refers to Max (Subtract((now())-BirthDate));",
        "evidence_ar": "",
        "SQL": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the first name of the male employee who has a western name style?",
        "question_ar": "",
        "evidence_en": "western name style refers to NameStyle = 0; Male refers to Gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the active employees, how many of them have a courtesy title of \"Mr\"?",
        "question_ar": "",
        "evidence_en": "active status of employees refers to CurrentFlag = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Title = 'Mr.'"
    }
]