[
    {
        "db_id": "movie_platform",
        "question_en": "Name movie titles released in year 1945. Sort the listing by the descending order of movie popularity.",
        "question_ar": "",
        "evidence_en": "released in the year 1945 refers to movie_release_year = 1945;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "State the most popular movie? When was it released and who is the director for the movie?",
        "question_ar": "",
        "evidence_en": "most popular movie refers to MAX(movie_popularity); when it was released refers to movie_release_year; director for the movie refers to director_name;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1 "
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the longest movie title? When was it released?",
        "question_ar": "",
        "evidence_en": "longest movie title refers to MAX(LENGTH(movie_title)); when it was released refers to movie_release_year;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_popularity) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Name the movie with the most ratings.",
        "question_ar": "",
        "evidence_en": "movie with the most rating refers to MAX(SUM(rating_score));",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average number of Mubi users who love movies directed by Stanley Kubrick?",
        "question_ar": "",
        "evidence_en": "average = AVG(movie_popularity); number of Mubi users who loves the movie refers to movie_popularity;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(movie_popularity) FROM movies WHERE director_name = 'Stanley Kubrick'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average rating for movie titled 'When Will I Be Loved'?",
        "question_ar": "",
        "evidence_en": "average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?",
        "question_ar": "",
        "evidence_en": "user avatar url refers to user_avatar_image_url; latest movie rated refers to latest rating_date;",
        "evidence_ar": "",
        "SQL": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the percentage of the ratings were rated by user who was a subcriber?",
        "question_ar": "",
        "evidence_en": "user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings"
    },
    {
        "db_id": "movie_platform",
        "question_en": "List all movie title rated in April 2020 from user who was a trialist.",
        "question_ar": "",
        "evidence_en": "movie title rated in April 2020 refers to rating_timestamp_utc LIKE '%2020-04-%'; user is a trial list refers to user_trialist = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'.",
        "question_ar": "",
        "evidence_en": "worst rating refers to rating_score = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie.",
        "question_ar": "",
        "evidence_en": "best rating score refers to rating_score = 5; number of Mubi user who loves the movie refers to movie_popularity;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above.",
        "question_ar": "",
        "evidence_en": "ratings in year 2020 refers to rating_timestamp_utc like '%2020%'; rating_score > = 4;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For all movies where users left a critic, find the movie name, user, rating and critics comments from the user.",
        "question_ar": "",
        "evidence_en": "movies where users left a critic refers to critic IS NOT NULL; critic comments refers to critic;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title, T1.user_id, T1.rating_score, T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic IS NOT NULL"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score.",
        "question_ar": "",
        "evidence_en": "rated with highest score refers to rating_score = 5; percentage = MULTIPLY(DIVIDE(SUM(rating_score = 5), COUNT(rating_score)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the percentage of rated movies were released in year 2021?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUM(movie_release_year = 2021), COUNT(rating_id)) as percent; movies released in year 2021 refers to movie_release_year = 2021;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who is the director of the movie Sex, Drink and Bloodshed?",
        "question_ar": "",
        "evidence_en": "Sex, Drink and Bloodshed refers to movie title = 'Sex, Drink and Bloodshed';",
        "evidence_ar": "",
        "SQL": "SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the most followed list?",
        "question_ar": "",
        "evidence_en": "most followed list refers to MAX(list_followers);",
        "evidence_ar": "",
        "SQL": "SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What are the URL to the list page on Mubi of the lists with followers between 1-2 and whose last update timestamp was on 2012?",
        "question_ar": "",
        "evidence_en": "URL to the list page on Mubi refers to list_url; list_followers = 1 OR list_followers = 2; last update timestamp was on 2012 refers to list_update_timestamp_utc BETWEEN '2012-1-1' AND '2012-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the list ID that was first created by user 85981819?",
        "question_ar": "",
        "evidence_en": "first created list refers to oldest list_creation_date_utc;",
        "evidence_ar": "",
        "SQL": "SELECT list_id FROM lists_users WHERE user_id = 85981819 ORDER BY list_creation_date_utc ASC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For movie id 1269, how many users, who was a paying subscriber and was eligible for trial when he rated the movie, gave the movie a rating score of less than or equal to 2?",
        "question_ar": "",
        "evidence_en": "paying subscriber refers to user_has_payment_method = 1; eligible for trial refers to user_eligible_for_trial = 1; rating_score< = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ratings WHERE movie_id = 1269 AND rating_score <= 2 AND user_eligible_for_trial = 1 AND user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity.",
        "question_ar": "",
        "evidence_en": "movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "When was the first movie released and who directed it?",
        "question_ar": "",
        "evidence_en": "first movie refers to oldest movie_release_year;",
        "evidence_ar": "",
        "SQL": "SELECT movie_release_year, director_name FROM movies WHERE movie_release_year IS NOT NULL ORDER BY movie_release_year ASC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the user ID of the user, who was a subscriber when he created the list, who created a list for 10 consecutive years? If there are multiple users, indicate each of their user IDs.",
        "question_ar": "",
        "evidence_en": "user was a subscriber when he created the list refers to user_subscriber = 1; user who created a list for 10 consecutive years refers to user_id with list_creation_date_utc for 10 succeeding years;",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM lists_users WHERE user_subscriber = 1 GROUP BY user_id HAVING MAX(SUBSTR(list_creation_date_utc, 1, 4)) - MIN(SUBSTR(list_creation_date_utc, 1, 4)) >= 10"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users gave \"Pavee Lackeen: The Traveller Girl\" movie a rating score of 4?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Was the user who created the \"World War 2 and Kids\" list eligible for trial when he created the list? Indicate how many followers does the said list has.",
        "question_ar": "",
        "evidence_en": "user was eligible for trial when he created the list refers to user_eligible_for_trial = 1; number of followers a list have refers to list_followers;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_eligible_for_trial, T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id WHERE T1.list_title = 'World War 2 and Kids'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which year was the third movie directed by Quentin Tarantino released? Indicate the user ids of the user who gave it a rating score of 4.",
        "question_ar": "",
        "evidence_en": "third movie refers to third movie that has oldest movie_release_year;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_release_year, T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_id = ( SELECT movie_id FROM movies WHERE director_name = 'Quentin Tarantino' ORDER BY movie_release_year ASC LIMIT 2, 1 ) AND T1.rating_score = 4"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes?",
        "question_ar": "",
        "evidence_en": "URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;",
        "evidence_ar": "",
        "SQL": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average rating score of the movie \"When Will I Be Loved\" and who was its director?",
        "question_ar": "",
        "evidence_en": "average rating score = AVG(rating_score);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rating_score), T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies were added to the list with the most number of movies? Indicate whether the user was a paying subscriber or not when he created the list.",
        "question_ar": "",
        "evidence_en": "list with the most number of movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list; user_has_payment_method = 0 means the user was not a paying subscriber when he created the list;",
        "evidence_ar": "",
        "SQL": "SELECT T1.list_movie_number, T2.user_has_payment_method FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id ORDER BY T1.list_movie_number DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the movie whose critic received the highest number of likes related to the critic made by the user rating the movie?",
        "question_ar": "",
        "evidence_en": "number of likes received refers to critic likes; received the highest number of likes refers to MAX(critic_likes);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How much is the popularity of the movie that has the highest popularity between 1920 to 1929 and when did the movie received its first rating score of 1 from the users who were a paying subscriber when they rated the movie ?",
        "question_ar": "",
        "evidence_en": "movie with highest popularity refers to MAX(movie_popularity); movie_release_year BETWEEN 1920 AND 1929; when the movie received its first rating score of 1 refers to oldest date in rating_timestamp_utc where rating score = 1; user was a paying subscriber when they rated the movie refers to user_has_payment_method = 1;",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.movie_popularity), MIN(T1.rating_timestamp_utc) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1920 AND 1929 AND T1.rating_score = 1 AND T1.user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies directed by Francis Ford Coppola have a popularity of more than 1,000? Indicate what is the highest amount of likes that each critic per movie has received, if there's any.",
        "question_ar": "",
        "evidence_en": "Francis Ford Coppola refers to director_name; popularity of more than 1,000 refers to movie_popularity >1000;highest amount of likes that each critic per movie has received refers to MAX(critic_likes)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_title), T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Francis Ford Coppola' AND T2.movie_popularity > 1000"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the URL to the user profile image on Mubi of the user who gave the movie id of 1103 a 5 ratinng score on 4/19/2020?",
        "question_ar": "",
        "evidence_en": "URL to the user profile image on Mubi  refers to user_avatar_image_url;  4/19/2020 refers to rating_date_utc",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN ratings_users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id = 1103 AND rating_score = 5 AND T2.rating_date_utc = '2020-04-19'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among the lists created by user 4208563, which one has the highest number of followers? Indicate how many followers it has and whether the user was a subscriber or not when he created the list.",
        "question_ar": "",
        "evidence_en": "User 4208563 refers to user_id;highest number of followers refers to MAX(list_followers); user_subscriber = 1 means that the user was a subscriber when he created the list; user_subscriber = 0 means the user was not a subscriber when he created the list (to replace)",
        "evidence_ar": "",
        "SQL": "SELECT T1.list_followers, T2.user_subscriber = 1 FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T2.list_id = T2.list_id WHERE T2.user_id = 4208563 ORDER BY T1.list_followers DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1?",
        "question_ar": "",
        "evidence_en": "least number of movies refers to MIN(movie_release_year); highest rating score refers to MAX(SUM(movie_id) where rating_score = '1')\n\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?",
        "question_ar": "",
        "evidence_en": "Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average number of movies added to the lists of user 8516503? Give the user profile image URL on Mubi.",
        "question_ar": "",
        "evidence_en": "user profile image URL refers to user_avatar_image_url; user 8516503 refers to user_id; Average refers to AVG(list_movie_number where user_id = 8516503)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.list_movie_number), T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T2.user_id = 8516503"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users rated the movie \"The Magnificent Ambersons\" gave a rating score of no more than 2? List all the URL to the rating on Mubi.",
        "question_ar": "",
        "evidence_en": "The Magnificent Ambersons refers to movie_title; rating score of no more than 2 refers to rating_score<2; URL to rating refers to rating_url",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users who created a list in the February of 2016 were eligible for trial when they created the list? Indicate the user id of the user who has the most number of followers in his list in February of 2016.",
        "question_ar": "",
        "evidence_en": "created a list in the February of 2016 refer to list_creation_date_utc BETWEEN 2/1/2016 and 2/29/2016; eligible for trial refers to user_eligible_for_trial = 1;\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id WHERE T2.list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29' AND T2.user_eligible_for_trial = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372?",
        "question_ar": "",
        "evidence_en": "URL refer to rating_url; user 22030372 refer to user_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many directors have directed atleast 10 movies between 1960 to 1985? Indicate the name of the movie in those years of each director that received the highest amount of 5 rating score.",
        "question_ar": "",
        "evidence_en": "directed at least 10 movies refers to count(direct_name)>10; 1960 to 1985 refer to movie_release_year\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name HAVING COUNT(T2.movie_id) > 10"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users, who were not a a trialist when they rated the movie, gave the movie \"The South\" a rating score of not more than 2?",
        "question_ar": "",
        "evidence_en": "not a trialist refer to user_trialist = 0; rating score of not more than 2 refer to rating_score <2; The South refers to movie_title\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score <= 2 AND T1.movie_title = 'The South'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many likes did the critic of the movie \"Apocalypse Now\" received after giving the movie a rating score of 5?",
        "question_ar": "",
        "evidence_en": "Apocalypse Now refer to movie_title; rating score refer to rating_score = '5';likes received refers to critic_likes\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.critic_likes FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score = 5 AND T1.movie_title = 'Apocalypse Now'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average rating score of the movie \"The Crowd\" and who was its director?",
        "question_ar": "",
        "evidence_en": "director refer to director_name; The Crowd refer to movie_title; Average refer to AVG(rating_score)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating_score), T1.director_name FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Crowd'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "When was the first movie of the director who directed the highest number of movies released and what is the user id of the user who received the highest number of comments related to the critic made by the user rating the movie?",
        "question_ar": "",
        "evidence_en": "comments refer to critic_comments",
        "evidence_ar": "",
        "SQL": "SELECT MIN(movie_release_year) FROM movies WHERE director_name = ( SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name ORDER BY COUNT(T2.director_name) DESC LIMIT 1 )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies have a popularity of more than 400 but less than 500? Indicate the name of the movies and the highest rating score each movie has received.",
        "question_ar": "",
        "evidence_en": "popularity of more than 400 but less than 500 refers to movie_popularity BETWEEN 400 AND 500; highest rating score refer to MAX(rating_score)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, MAX(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_popularity BETWEEN 400 AND 500 GROUP BY T1.movie_title"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes?",
        "question_ar": "",
        "evidence_en": "URL refer to rating_url; 20 likes refer to critic_likes = ’20’; user 45579900 refer to user_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average popularity of each movie that was directed by Christopher Nolan? Indicate which movie directed by him has received the highest number of 5 rating scores.",
        "question_ar": "",
        "evidence_en": "5 rating scores refer to rating_score; Christopher Nolan refer to director_name; average popularity of each movie refer to AVG(movie_popularity where director_name = 'Christopher Nolan')",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.movie_popularity) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Christopher Nolan'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What are the names of the movie that was rated by the user between 1/1/2013 to 12/31/2013 by the user who created the list \"100 Greatest Living American Filmmakers\"? Calculate for the average rating score of those movies in 2013.",
        "question_ar": "",
        "evidence_en": "Between 1/1/2013 to 12/31/2013 refer to rating_timestamp_utc; 100 Greatest Living American Filmmakers refer to list_title; average rating score refer to DIVIDE( ADD(rating_score where rating_timestamp_utc = '1/1/2013-12/31/2013'), COUNT(rating_timestamp_utc = '1/1/2013-12/31/2013'))",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average rating score of the 'Pavee Lackeen: The Traveller Girl' movie and what year was it released?",
        "question_ar": "",
        "evidence_en": "year it was released refers to movie_release_year; average rating score refers to AVG(rating_score where movie_title = 'Final Destination 6'); Final Destination 6 refers to movie_title",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rating_score), T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Pavee Lackeen: The Traveller Girl'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movie lists were still updated 10 years after it was created?",
        "question_ar": "",
        "evidence_en": "updated 10 years after it was created refers to list_update_timestamp_utc > (list_creation_timestamp_utc+10);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the description for the movie list \"Short and pretty damn sweet\"?",
        "question_ar": "",
        "evidence_en": "Short and pretty damn sweet is list_title; description refers to list_description;",
        "evidence_ar": "",
        "SQL": "SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Where can I find the movie list \"Short and pretty damn sweet\"?",
        "question_ar": "",
        "evidence_en": "Short and pretty damn sweet is list_title; location of the movie refers to list_url;",
        "evidence_ar": "",
        "SQL": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among the movie lists created after 2010/1/1, how many of them have over 200 followers?",
        "question_ar": "",
        "evidence_en": "created after 2010/1/1 refers to list_update_timestamp_utc>'2010/1/1'; over 200 followers refers to list_followers>200;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM lists WHERE list_followers > 200 AND list_update_timestamp_utc > '2010-01-01'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movie lists were created by user 83373278 when he or she was a subscriber?",
        "question_ar": "",
        "evidence_en": "the user was a subscriber when he created the list refers to user_subscriber = 1; user 83373278 refers to user_id = 83373278;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "In which year was the movie \"La Antena\" released?",
        "question_ar": "",
        "evidence_en": "movie La Antena refers to movie_title = 'La Antena'; which year refers to movie_release_year;",
        "evidence_ar": "",
        "SQL": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please give me the url of the movie \"La Antena\".",
        "question_ar": "",
        "evidence_en": "movie La Antena refers to movie_title = 'La Antena'; url refers to movie_url;",
        "evidence_ar": "",
        "SQL": "SELECT movie_url FROM movies WHERE movie_title = 'La Antena'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which movie is more popular, \"The General\" or \"Il grido\"?",
        "question_ar": "",
        "evidence_en": "The General and Il grido are movie_title; more popular movie refers to higher (movie_popularity);",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies registered on Mubi are directed by Hong Sang-soo?",
        "question_ar": "",
        "evidence_en": "Hong Sang-soo is the name of director;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movies WHERE director_name = 'Hong Sang-soo'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Was the user who created the list \"250 Favourite Films\" a trialist when he or she created the list?",
        "question_ar": "",
        "evidence_en": "the user was a trialist when he created the list refers to user_trailist = 1; 250 Favourite Films is list_title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_trialist FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial.",
        "question_ar": "",
        "evidence_en": "the user was eligible for trail when he created the list refers to user_eligile_for_trail = 1; user 32172230 refers to user_id = 32172230;",
        "evidence_ar": "",
        "SQL": "SELECT T1.list_title FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 32172230 AND T2.user_eligible_for_trial = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movie lists with over 100 movies had user 85981819 created when he or she was a paying subscriber?",
        "question_ar": "",
        "evidence_en": "the user was a paying subscriber when he created the list refers to user_has_payment_method = 1;  movie lists with over 100 refers to list_movie_number >100;  user 85981819 refers to user_id = 85981819;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 AND T1.list_movie_number > 100 AND T2.user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the description of user 85981819's movie list with the most followers?",
        "question_ar": "",
        "evidence_en": "user 85981819 refers to user_id = 85981819; most followers refers to Max(list_followers); description refers to list_descriptions;",
        "evidence_ar": "",
        "SQL": "SELECT T1.list_description FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 ORDER BY T1.list_followers DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "When did the creator of the list \"250 Favourite Films\" last updated a movie list?",
        "question_ar": "",
        "evidence_en": "250 Favourite Films refers to list_title; last update refers to list_update_date_utc;",
        "evidence_ar": "",
        "SQL": "SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the avatar image of the user who created the movie list \"250 Favourite Films\"?",
        "question_ar": "",
        "evidence_en": "250 Favourite Films refers to list_title; avatar image refers to user_avatar_image_url;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many more movie lists were created by the user who created the movie list \"250 Favourite Films\"?",
        "question_ar": "",
        "evidence_en": "250 Favourite Films refers to list_title;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(list_id) FROM lists_users WHERE user_id = ( SELECT user_id FROM lists WHERE list_title = '250 Favourite Films' )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users liked the movie \"A Way of Life\" to the highest extent?",
        "question_ar": "",
        "evidence_en": "like the movie highest to the extent refers to rating_score = 5; A Way of Life refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_score = 5"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list all the critics made by the user rating the movie \"A Way of Life\".",
        "question_ar": "",
        "evidence_en": "A Way of Life refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many critics of the movie \"Imitation of Life\" got more than 1 like?",
        "question_ar": "",
        "evidence_en": "Imitation of Life refers to movie_title; critics got more than 1 like refers to critic_likes >1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Imitation of Life' AND T1.critic_likes > 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which user made a critic for the film \"When Will I Be Loved\" and got 2 comments for the critic?",
        "question_ar": "",
        "evidence_en": "When Will I Be Loved refers to movie_title;  2 comments for the critic refers to critic_comments = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.critic_comments = 2"
    },
    {
        "db_id": "movie_platform",
        "question_en": "When did user 39115684 rate the movie \"A Way of Life\"?",
        "question_ar": "",
        "evidence_en": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  when the user rate refers to rating_timestamp_utc;",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the url of user 39115684's rating on the movie 'When Will I Be Loved'?",
        "question_ar": "",
        "evidence_en": "A Way of Life refers to movie_title; user 39115684 refers to userid = 39115684;  url refers to rating_url;",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"?",
        "question_ar": "",
        "evidence_en": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  the user was a trialist when he rated the movie refers to user_trialist = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users were trialists when they rated the movie \"A Way of Life\"?",
        "question_ar": "",
        "evidence_en": "A Way of Life' refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.user_trialist = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list all the links to the ratings on the movie \"A Way of Life\" with a critic.",
        "question_ar": "",
        "evidence_en": "A Way of Life' refers to movie_title; with a critic refers to critic is not null, links to the ratings refers to rating_url;",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users have rated the most popular movie?",
        "question_ar": "",
        "evidence_en": "most popular refers to Max(movie_popularity);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "User 58149469's critic on which film got 1 like and 2 comments?",
        "question_ar": "",
        "evidence_en": "user 58149469 refers to user_id = 58149469; critic with 1 like refers to critic_likes = 1; critic with 2 comments refers to critic_comments = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 58149469 AND T1.critic_likes = 1 AND T1.critic_comments = 2"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among the users who are trailists when rating the movie \"When Will I Be Loved\", how many of them have rated \"1\" on the movie?",
        "question_ar": "",
        "evidence_en": "When Will I Be Loved refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;rated 1 on the movie refers to rating_score = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.rating_score = 1 AND T1.user_trialist = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many ratings on the movie \"A Way of Life\" are made after the year 2011?",
        "question_ar": "",
        "evidence_en": "A Way of Life' is movie_title; rating after the year 2011 refers to rating_timestamp_utc > '2011';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_timestamp_utc >= '2012-01-01'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's of rating on the movie \"Innocence Unprotected\" by the user who created the movie list \"250 Favourite Films\"?",
        "question_ar": "",
        "evidence_en": "Innocence Unprotected' is movie_title; '250 Favourite Films' is list_title; rating refers to rating_score;",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T2.movie_title = 'Innocence Unprotected' AND T3.list_title = '250 Favourite Films'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the movies rated by the user who created the movie list \"250 Favourite Films\".",
        "question_ar": "",
        "evidence_en": "250 Favourite Films' is list_title; movies refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T3.list_title = '250 Favourite Films'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the average rating score of the movie \"A Way of Life\"?",
        "question_ar": "",
        "evidence_en": "A Way of Life' is movie_title; average rating score = Divide (Sum(rating_score), Count(rating_id));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the percentage of the users who have rated \"1\" on the movie \"When Will I Be Loved\"?",
        "question_ar": "",
        "evidence_en": "When Will I Be Loved' is movie_title; rated 1 refers to rating_score = 1; percentage = Divide(Count(rating_id where rating_score = 1),Count(rating_id)) *100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How much higher is the average rating score of the movie \"Innocence Unprotected\" than the movie \"When Will I Be Loved\"?",
        "question_ar": "",
        "evidence_en": "Innocence Unprotected' and 'When Will I Be Loved' are movie_title; Average rating score = Divide(Sum(rating_score), Count(rating_id));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who was the director of the movie \"Tokyo Eyes\"？",
        "question_ar": "",
        "evidence_en": "Tokyo Eyes' is movie_title, director refers to director_name;",
        "evidence_ar": "",
        "SQL": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many films were released in 2007?",
        "question_ar": "",
        "evidence_en": "film released in 2007 refers to movie_release_year = 2007; film refers to movie",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which of the films released in 2006 was the most popular among Mubi users?",
        "question_ar": "",
        "evidence_en": "released in 2006 refers to movie_release_year = 2006; most popular refers to Max(movie_popularity); film refers to movie;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many films did Åke Sandgren direct?",
        "question_ar": "",
        "evidence_en": "Ake Sandgren is the director name;  film refers to movie",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM movies WHERE director_name = 'Åke Sandgren'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which of the films directed by Álex de la Iclesia is the most popular among Mubi users?",
        "question_ar": "",
        "evidence_en": "Alex de la Iclesia is the director name; the most popular refers to Max(movie_popularity); films refers to movies;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM movies WHERE director_name = 'Åke Sandgren' ORDER BY movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "When was the movie Cops released?",
        "question_ar": "",
        "evidence_en": "Cops' is movie_title; released refers to movie_release_year;",
        "evidence_ar": "",
        "SQL": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the id of the director of the movie \"It's Winter\".",
        "question_ar": "",
        "evidence_en": "It's Winter' is movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please provide the ID of the user with the most followers on the list.",
        "question_ar": "",
        "evidence_en": "most followers refers to Max(list_followers);",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please provide the title of the list with the most comments on the list.",
        "question_ar": "",
        "evidence_en": "the most comments refers to Max(list_comments);",
        "evidence_ar": "",
        "SQL": "SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which of the film released in 2008 scored the highest?",
        "question_ar": "",
        "evidence_en": "film released in 2008 refers to movie_release_year = 2008; scored the highest refers to Max(rating_score); film refers to movie;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2008 ORDER BY T1.rating_score DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the top three movies in the number of likes related to the critic made by the user rating the movie.",
        "question_ar": "",
        "evidence_en": "likes related to the critic made by the user rating the movie refers to critic_likes; top refers to Max(critic_likes);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 3"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users have more than 100 followers in the list created by users in 2009?",
        "question_ar": "",
        "evidence_en": "more than 100 followers refers to list_followers >100;  list created by the user in 2009 refers to list_creation_date_utc = '2009';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 100 AND T1.list_creation_date_utc LIKE '2009%'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users in Mubi give the movie \"White Night Wedding for 5\"?",
        "question_ar": "",
        "evidence_en": "White Night Wedding' is movie_title; for 5 refers to rating_score = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the cover image of the user who created the movie list 'Georgia related films'?",
        "question_ar": "",
        "evidence_en": "Play it cool' is list_title; cover image of user refers to user_cover_image_url;",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_cover_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Georgia related films'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many followers does the list created by the user whose user_avatar_image_url is https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214 have?",
        "question_ar": "",
        "evidence_en": "followers refers to list_followers;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the movies that user 94978 scored as 5.",
        "question_ar": "",
        "evidence_en": "user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the films released in 2003 among the films scored by user 2941 .",
        "question_ar": "",
        "evidence_en": "released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many users were not trialists when they rated the movie \"Patti Smith: Dream of Life\"?",
        "question_ar": "",
        "evidence_en": "Patti Smith: Dream of Life' is movie_title; the user was not a trialist when he created the list refers to user_trialist = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Patti Smith: Dream of Life' AND T1.user_trialist = 0"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which movie has the highest average score in Mubi?",
        "question_ar": "",
        "evidence_en": "Highest average score refers to Max(Avg(rating_score));",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the top three movies in the number comments related to the critic made by the user rating the movie.",
        "question_ar": "",
        "evidence_en": "number of comments related to the critic made by the user rating the movie refers to critic_comments; top movie refers to Max(critic_comments);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url.",
        "question_ar": "",
        "evidence_en": "user 85981819 refers to user_id = 85981819;  first list created refers to Min (list_creation_date_utc);",
        "evidence_ar": "",
        "SQL": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the movies that have been rated the most times in 2020.",
        "question_ar": "",
        "evidence_en": "in 2020 refers to rating_timestamp_utc = '2020%'; rated the most times refers to Max(Count(movie_title));",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2020%' GROUP BY T2.movie_title ORDER BY COUNT(T2.movie_title) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average score for the movie Versailles Rive-Gauche?",
        "question_ar": "",
        "evidence_en": "Versailles Rive-Gauche' is movie_title; average score refers to Avg(rating_score);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which film rated by user 59988436 that received 21 comments?",
        "question_ar": "",
        "evidence_en": "user 59988436 refers to user_id = 59988436; received 21 comments refers to critic_comments = 21; film refers to movie;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Please list the names of the movies that received more than 20 likes?",
        "question_ar": "",
        "evidence_en": "received more than 20 likes refers to critic_likes>20;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic_likes > 20"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average score of the movie \"The Fall of Berlin\" in 2019?",
        "question_ar": "",
        "evidence_en": "The Fall of Berlin' is movie_title; in 2019 refers to rating_timestamp_utc = 2019; Average score refers to Avg(rating_score);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.rating_score) / COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2019%' AND T2.movie_title LIKE 'The Fall of Berlin'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What percentage of users rated the movie \"Patti Smith: Dream of Life\" by more than 3?",
        "question_ar": "",
        "evidence_en": "Patti Smith: Dream of Life' is movie_title; more than 3 refers to rating_score >3; percentage = Divide(Count(rating_score where rating_score >3), Count(rating_score))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which of the film directed by director Abbas Kiarostami has the highest average score?",
        "question_ar": "",
        "evidence_en": "Abbas Kiarostami' is director_name; the highest Average score refers to Max(Avg(rating_score));",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Abbas Kiarostami' GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which year had the most released films?",
        "question_ar": "",
        "evidence_en": "year refers to movie_release_year; most release films refers to MAX(COUNT(movie_id))\n\n",
        "evidence_ar": "",
        "SQL": "SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who is the director that made the most movies? Give the director's id.",
        "question_ar": "",
        "evidence_en": "director that made the most movies refers to MAX(COUNT(movie_id))",
        "evidence_ar": "",
        "SQL": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies did the director of the highest movie popularity make?",
        "question_ar": "",
        "evidence_en": "highest movie popularity refers to MAX(movie_popularity)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the number of the paying subscribers when rating a movie after the year 2014?",
        "question_ar": "",
        "evidence_en": "paying subscribers refers to user_has_payment_method = 1; rating a movie after the year 2014 refers to rating_date_utc>'2014%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who was the earliest user created a list but didn't get any followers? Give the user ID.",
        "question_ar": "",
        "evidence_en": "earliest user created a list refers to MIN(list_creation_date_utc); didn't get any followers refers to user_subscriber = 0",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM lists_users WHERE user_subscriber = 0 ORDER BY list_creation_date_utc LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Give the number of followers for the user who posted the most lists.",
        "question_ar": "",
        "evidence_en": "number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many followers did the user who posted the list \"Non-American Films about World War II\" have?",
        "question_ar": "",
        "evidence_en": "the list \"Non-American Films about World War II\" refers to list_title = 'Non-American Films about World War II'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What's the number of users gave the movie \"Downfall\" a rating of \"4\"?",
        "question_ar": "",
        "evidence_en": "movie \"Downfall\" refers to movie_title = 'Downfall'; rating of \"4\" refers to rating_score = 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Downfall' AND T1.rating_score = 4"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Give the name of the movie that got the most \"5\" ratings.",
        "question_ar": "",
        "evidence_en": "5 ratings refers to rating_score = 5; name of the movie refers to movie_title",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which movie got the most critic comments? Give the name of the movie.",
        "question_ar": "",
        "evidence_en": "name of the movie refers to movie_title; most critic comments refers to MAX(critic_comments)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Show the avatar of the user who gave the rating at 2019/10/17 1:36:36.",
        "question_ar": "",
        "evidence_en": "at 2019/10/17 1:36:36 refers to rating_timestamp_utc = '2019/10/17 1:36:36'; avatar of the user refers to user_avatar_image_url\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_timestamp_utc LIKE '2019-10-17 01:36:36'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Show the portrait picture of the user who created the list \"Vladimir Vladimirovich Nabokov\".",
        "question_ar": "",
        "evidence_en": "the list \"Vladimir Vladimirovich Nabokov\" refers to list_title = 'Vladimir Vladimirovich Nabokov'; portrait picture refers to user_avatar_image_url",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Vladimir Vladimirovich Nabokov'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list?",
        "question_ar": "",
        "evidence_en": "the list that contained the most number of the movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list ; \nuser_has_payment_method = 0 means the user was not a paying subscriber when he created the list \n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Show the head portrait of the user who gave the most \"5\" ratings.",
        "question_ar": "",
        "evidence_en": "head portrait refers to user_avatar_image_url; \"5\" ratings refers to rating_score = 5",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_score = 5"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many critics were given to the movie that got the most movie popularity number.",
        "question_ar": "",
        "evidence_en": "most movie popularity number refers to MAX(movie_popularity)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.critic) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who gave a \"4\" rating to the movie \"Freaks\" at 2013/5/4 6:33:32? Give his/her user id.",
        "question_ar": "",
        "evidence_en": "4 rating refers to rating_score = 4; the movie \"Freaks\" refers to movie_title = 'Freaks' ; at 2013/5/4 6:33:32 refers to rating_timestamp_utc = '2013-05-04 06:33:32'",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 4 AND rating_timestamp_utc LIKE '2013-05-04 06:33:32' AND T2.movie_title LIKE 'Freaks'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Give the url of movie which was rated 5 on 2013/5/3 5:11:17.",
        "question_ar": "",
        "evidence_en": "rated 5 refers to rating_score = 5; on 2013/5/3 5:11:17 refers to rating_timestamp_utc = '2013-05-03 05:11:17'",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 5 AND rating_timestamp_utc LIKE '2013-05-03 05:11:17'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For the 1998 movie which got the highest popularity, how many \"4\" rating did the movie get?",
        "question_ar": "",
        "evidence_en": "1998 movie refers to movie_release_year = '1998'; the highest popularity refers to MAX(movie_popularity) ; \"4\" rating refers to rating_score = 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_title) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 4 AND T2.movie_release_year = 1998 ORDER BY T2.movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "From all the movies that got more than 13000 popularity number, which one had the least ratings.",
        "question_ar": "",
        "evidence_en": "more than 13000 popularity number refers to movie_popularity > 13000; least ratings refers to MIN(rating_score)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity > 13000 ORDER BY T1.rating_score LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many paying subscribers gave a rating to the movie \"One Flew Over the Cuckoo's Nest\"?",
        "question_ar": "",
        "evidence_en": "paying subscribers refer to user_has_payment_method = 1; movie \"One Flew Over the Cuckoo's Nest\" refers to movie_id = 'One Flew Over the Cuckoo''s Nest'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'One Flew Over the Cuckoo''s Nest' AND T3.user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For the lists that got more than 3000 followers, how many did the users who created those lists are paying subscribers?",
        "question_ar": "",
        "evidence_en": "got more than 3000 followers refers to list_followers > 3000; paying subscribers refer to user_has_payment_method = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 3000 AND T1.user_has_payment_method = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which 1988 movie got the most ratings?",
        "question_ar": "",
        "evidence_en": "1988 movie refers to movie_release_year = '1998'; most ratings refers to MAX(rating_score)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 1988 ORDER BY T1.rating_score DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For all the movies that were released in 1995, how many lower than 3 ratings did the most popularity movie had?",
        "question_ar": "",
        "evidence_en": "released in 1995 refers to movie_release_year = '1995'; lower than 3 ratings refers to rating_score <3; most popularity movie refers to MAX(movie_popularity)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score < 3 AND T2.movie_release_year = 1995 AND T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = 1995 )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the percentage of users gave \"5\" to the movie \"Go Go Tales\"?",
        "question_ar": "",
        "evidence_en": "movie \"Go Go Tales\" refers to movie_title = 'Go Go Tales'; gave \"5\" refers to rating_score = 5; percentage refers to DIVIDE(COUNT(rating_score = 5),COUNT(rating_score))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Go Go Tales'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Give the percentage of subscribers who rated who rated the movie \"G.I. Jane\".",
        "question_ar": "",
        "evidence_en": "movie \"G.I. Jane\" refers to movie_title = 'G.I. Jane'; subscribers refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(user_subscriber))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'G.I. Jane'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For all the users who gave \"A Shot in the Dark\" a rating, how many percent of them is a paying subscriber?",
        "question_ar": "",
        "evidence_en": "\"A Shot in the Dark\" refers to movie_title = 'A Shot in the Dark'; paying subscriber refers to user_has_payment_method = 1; percentage refers to DIVIDE(COUNT(user_has_payment_method = 1),COUNT(user_has_payment_method))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'A Shot in the Dark'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Name all the list titles created by user 4208563.",
        "question_ar": "",
        "evidence_en": "user 4208563 refers to user_id = 4208563",
        "evidence_ar": "",
        "SQL": "SELECT list_title FROM lists WHERE user_id LIKE 4208563"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among the lists created in 2016, which is the list that was updated most recently.",
        "question_ar": "",
        "evidence_en": "created in 2016 refers to list_creation_timestamp_utc like '2016%'; updated most recently refers to MAX(list_update_timestamp_utc)",
        "evidence_ar": "",
        "SQL": "SELECT list_title FROM lists WHERE strftime('%Y', list_update_timestamp_utc) = '2016' ORDER BY list_update_timestamp_utc DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the percentage of list created by user who was a subscriber when he created the list?",
        "question_ar": "",
        "evidence_en": "was a subscriber refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(list_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(list_id) FROM lists_users"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Name all lists created by a user who was a subcriber when created the list.",
        "question_ar": "",
        "evidence_en": "was a subscriber refers to user_subscriber = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.list_id FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_subscriber = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Provide list titles created by user who are eligible for trial when he created the list.",
        "question_ar": "",
        "evidence_en": "eligible for trial refers to user_eligible_for_trial = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_eligible_for_trial = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among the lists with at least one follower, how many were created by user who was subscriber when created the list?",
        "question_ar": "",
        "evidence_en": "lists with at least one follower refers to list_followers > = 1; was a subscriber refers to user_subscriber = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.list_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers >= 1 AND T1.user_subscriber = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For all list titles with at least 200 movies in the list, what is their average number of followers?",
        "question_ar": "",
        "evidence_en": "at least 200 movies in the list refers to list_movie_number > 200; average number of followers refers to avg(list_followers)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(list_followers) FROM lists WHERE list_movie_number > 200"
    },
    {
        "db_id": "movie_platform",
        "question_en": "List all the titles created by user who was a subsriber when he created the list and have less than 50 movies in the list.",
        "question_ar": "",
        "evidence_en": "have less than 50 movies in the list refers to list_movie_number <50; was a subscriber refers to user_subscriber = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number < 50 AND T1.user_subscriber = 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Which title list has not been updated for the longest period of time? State how long it has not been updated?",
        "question_ar": "",
        "evidence_en": "not been updated for the longest period of time refers to MIN(list_update_timestamp_utc); how long it has not been updated refers to SUBTRACT(CURRENT_TIMESTAMP, list_update_timestamp_utc)",
        "evidence_ar": "",
        "SQL": "SELECT list_title , datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(list_update_timestamp_utc) FROM lists ORDER BY list_update_timestamp_utc LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who is the user who created the list titled 'Sound and Vision'? Was he a subcriber when he created the list?",
        "question_ar": "",
        "evidence_en": "list titled 'Sound and Vision' refers to list_title = 'Sound and Vision'; user_subscriber = 1 means the user was a subscriber when he rated the movie; user_subscriber = 0 means the user was not a subscriber when he rated the movie\n\n\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id, T1.user_subscriber FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Sound and Vision'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "For the list with more than 200 followers, state the title and how long the list has been created?",
        "question_ar": "",
        "evidence_en": "more than 200 followers refers to list_followers >200; how long the list has been created refers to SUBTRACT(CURRENT_TIMESTAMP,list_creation_timestamp_utc)",
        "evidence_ar": "",
        "SQL": "SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Among all movies in the list, calculate the percentage of movies that were never been rated?",
        "question_ar": "",
        "evidence_en": "percentage of movies that were never been rated refers to DIVIDE(COUNT(main_movies.movie_id ! = main_ratings.movie_id),COUNT(movie_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.movie_id IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.movie_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id"
    },
    {
        "db_id": "movie_platform",
        "question_en": "List all movies rated by user 39115684. State the title, rating date and rating score.",
        "question_ar": "",
        "evidence_en": "user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Between 1970 to 1980, how many movies with a popularity of more than 11,000 were released?",
        "question_ar": "",
        "evidence_en": "Between 1970 to 1980 refers to movie_release_year between 1970 and 1980; popularity of more than 11,000 refers movie_popularity >11000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000"
    },
    {
        "db_id": "movie_platform",
        "question_en": "How many movies directed by Felipe Cazals was realeased on 1976?",
        "question_ar": "",
        "evidence_en": "directed by Felipe Cazals refers to director_name = 'Felipe Cazals' ; realeased on 1976 refers to movie_release_year = 1976",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the URL to the movie director page on Mubi of the movie titled \"Red Blooded American Girl\"",
        "question_ar": "",
        "evidence_en": "movie titled \"Red Blooded American Girl\" refers to movie_title = 'Red Blooded American Girl'",
        "evidence_ar": "",
        "SQL": "SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the list that was updated most recently?",
        "question_ar": "",
        "evidence_en": "updated most recently refers to MAX(list_update_date_utc)",
        "evidence_ar": "",
        "SQL": "SELECT list_title FROM lists WHERE list_update_timestamp_utc = ( SELECT list_update_timestamp_utc FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1 )"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who created the list that has 142 comments? Indicate the user id of the user, if there are multiple lists with 142 comments, list the user id of the person who created the list",
        "question_ar": "",
        "evidence_en": "list that has 142 comments refers to list_comments = 142",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM lists WHERE list_comments = 142"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is Jeannot Szwarc's most popular movie and what is its average rating score?",
        "question_ar": "",
        "evidence_en": "Jeannot Szwarc's refers to director_name = 'Jeannot Szwarc'; most popular movie refers to MAX(movie_popularity); average rating score refers to avg(rating_score)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title, AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Jeannot Szwarc' ORDER BY T2.movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users.",
        "question_ar": "",
        "evidence_en": "highest number of movies COUNT(T1.movie_id); in the 70s refers to movie_release_year between 1970 and 1979",
        "evidence_ar": "",
        "SQL": "SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie \"The Secret Life of Words\" a rating score of 3?",
        "question_ar": "",
        "evidence_en": "Between 1/1/2010 to 12/31/2020 refers to rating_timestamp_utc between '2010-01-01%' and '2020-12-31%'; a trialist refers to user_trialist = 1; movie \"The Secret Life of Words\" refers to movie_title = 'The Secret Life of Words'; rating score of 3 refers to rating_score = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the movie whose critic received the highest amount of likes? Indicate the URL to the rating on Mubi.",
        "question_ar": "",
        "evidence_en": "critic received the highest amount of likes refers to MAX(critic_likes);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What are the top 5 most popular movies of the 21st century? Indicate how many users gave it a rating score of 5.",
        "question_ar": "",
        "evidence_en": "most popular movies refers to MAX(movie_popularity); rating score of 5 refers to rating_score = 5; movies of the 21st century refers to movie_release_year> = 2000",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.movie_id, SUM(T1.rating_score = 5) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T2.movie_popularity DESC LIMIT 5"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average number of followers of the lists created by the user who rated the movie \"Pavee Lackeen: The Traveller Girl\" on 3/27/2011 at 2:06:34 AM?",
        "question_ar": "",
        "evidence_en": "average number of followers refers to AVG(list_followers); movie \"Pavee Lackeen: The Traveller Girl\" refers to movie_title = 'Pavee Lackeen: The Traveller Girl'; on 3/27/2011 at 2:06:34 AM refers to rating_timestamp_utc = '2011-03-27 02:06:34'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Between 1/1/2017 to 12/31/2017, how many users who were eligible for trial when they rated the movie \"Patti Smith: Dream of Life\"and what is the image URL to the movie on Mubi?",
        "question_ar": "",
        "evidence_en": "Between 1/1/2017 to 12/31/2017 refers to rating_timestamp_utc between '2017-01-01 00:00:00' and '2017-12-31 00:00:00'; eligible for trial refers to user_eligible_for_trial = 1; movie \"Patti Smith: Dream of Life\" refers to movie_title = 'Patti Smith: Dream of Life'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id), T2.movie_image_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE datetime(T1.rating_timestamp_utc) BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the average number of number of movies added to the lists of user 8516503? Indicate how many movies did he/she give a rating score of 5.",
        "question_ar": "",
        "evidence_en": "average number of number of movies refers to AVG(list_movie_number); user 8516503 refers to user_id = 8516503; rating score of 5 refers to rating_score = 5",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503"
    },
    {
        "db_id": "movie_platform",
        "question_en": "Who is the director of the most popular movie of all time and when was it released? Indicate the average rating score of the users who were on a trialist when they rated the movie.",
        "question_ar": "",
        "evidence_en": "most popular movie of all time refers to MAX(movie_popularity); a trialist refers to user_trialist = 1; average rating score = AVG(rating_score)",
        "evidence_ar": "",
        "SQL": "SELECT T1.director_name, T1.movie_release_year , SUM(T2.rating_score) / COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 ORDER BY T1.movie_popularity DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What is the name of the movie that was rated recently by user 57756708?",
        "question_ar": "",
        "evidence_en": "user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1"
    },
    {
        "db_id": "movie_platform",
        "question_en": "What are the top 10 oldest movies and what are the average rating score for each movie? Indicate the name of the director and when the movies were released.",
        "question_ar": "",
        "evidence_en": "the average rating score refers to AVG(T2.rating_score); oldest movies refers to MIN(rating_timestamp_utc)",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which date has the most ordered quantity? What is the total order quantity on that day?",
        "question_ar": "",
        "evidence_en": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(sum(qty))",
        "evidence_ar": "",
        "SQL": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the title with the most ordered quantity in year 1992?",
        "question_ar": "",
        "evidence_en": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(count(qty)); date refers to ord_date; year 1992 refers to YEAR(ord_date) = 1992",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List the title, price and publication date for all sales with 'ON invoice' payment terms.",
        "question_ar": "",
        "evidence_en": "publication date refers to pubdate; payment terms refers to payterms; payterms = 'ON invoice'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the title that have at least 10% royalty without minimum range amount.",
        "question_ar": "",
        "evidence_en": "at least 10% royalty refers to royalty > = 10; minimum range is synonym for low range which refers to lorange; without minimum range amount refers to lorange <> 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "State the title and royalty percentage for title ID BU2075 between 10000 to 50000 range.",
        "question_ar": "",
        "evidence_en": "lorange mean low range; hirange mean high range; range refers to between the low and high range; lorange>10000; hirange<12000",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 10000 AND T2.hirange < 50000 AND T1.title_ID = 'BU2075'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Among the titles with royalty percentage, which title has the greatest royalty percentage. State it's minimum range to enjoy this royalty percentage.",
        "question_ar": "",
        "evidence_en": "minimum range is synonym for low range which refers to lorange",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Provide a list of titles together with its publisher name for all publishers located in the USA.",
        "question_ar": "",
        "evidence_en": "publisher name refers to pub_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "State the royalty percentage for the most year to date sale title within the 20000 range.",
        "question_ar": "",
        "evidence_en": "most year to date sales refers to MAX(ytd_sales); range limit means high range which refers to hirange; the 20000 range refers to hirange<20000",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all titles published in year 1991. Also provide notes details of the title and the publisher's name.",
        "question_ar": "",
        "evidence_en": "publisher name refers to pub_name; publication date refers to pubdate; published in year 1991 refers to YEAR(pubdate) = 1991",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all titles with sales of quantity more than 20 and store located in the CA state.",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; sales of quantity more than 20 refers to qty>20; store refers to stor_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.qty FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T2.stor_id = T3.stor_id WHERE T2.qty > 20 AND T3.state = 'CA'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the store with the highest quantity in sales? What is the least quantity title from the store's sale?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; highest quantity refers to MAX(qty); least quantity refers to MIN(qty)",
        "evidence_ar": "",
        "SQL": "SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the title and publisher for title ID BU 2075. Provide all the royalty percentage for all ranges.",
        "question_ar": "",
        "evidence_en": "name the publisher refers to pub_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T3.pub_name, T2.lorange, T2.hirange, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T1.title_id = 'BU2075'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms.",
        "question_ar": "",
        "evidence_en": "store with ID 7066 refers to stor_ID = '7066'; 'Net 60' payment terms refers to payterm = 'Net 60'; qty is abbreviation for quantity; percentage = DIVIDE(payterms = 'Net 60', sum(qty))*100",
        "evidence_ar": "",
        "SQL": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "State the publisher name for publisher ID 877? Calculate its average year to date sales.",
        "question_ar": "",
        "evidence_en": "publisher id refers to pub_id; publisher name refers to pub_name; average year to date sales = AVG(ytd_sales)",
        "evidence_ar": "",
        "SQL": "SELECT T2.pub_name, AVG(T1.ytd_sales) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.pub_id = '0877' GROUP BY T2.pub_name"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name all employees who were hired before year 1990.",
        "question_ar": "",
        "evidence_en": "hired before year 1990 refers to YEAR(hire_date)<1990",
        "evidence_ar": "",
        "SQL": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which employee has the lowest job level. State the first name, last name and when he /she was hired.",
        "question_ar": "",
        "evidence_en": "lowest job level refers to MIN(job_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT fname, lname, hire_date FROM employee ORDER BY job_lvl LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "In which year has the most hired employees?",
        "question_ar": "",
        "evidence_en": "most hired employees refers to MAX(count(emp_id))",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', hire_date) FROM employee GROUP BY STRFTIME('%Y', hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all employees who are at the maximum level in their job designation.",
        "question_ar": "",
        "evidence_en": "maximum level in their job designation refers to job_lvl = MAX(max_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl = T2.max_lvl"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the Chief Executive Officer and when he/she was hired.",
        "question_ar": "",
        "evidence_en": "Chief Financial Offer is a job description which refers to job_desc",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Who are the employees working for publisher not located in USA? State the employee's name and publisher name.",
        "question_ar": "",
        "evidence_en": "not located at USA refers to country! = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.lname, T2.pub_name FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all employees working for publisher 'GGG&G'. State their name and job description.",
        "question_ar": "",
        "evidence_en": "name = fname, lname; job description refers to job_desc; publisher refers pub_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.lname, T3.job_desc FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T1.job_id = T3.job_id WHERE T2.pub_name = 'GGG&G'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "For each publisher, state the type of titles they published order by the publisher name.",
        "question_ar": "",
        "evidence_en": "publisher name refers to pub_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.pub_name, T1.type FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T2.pub_name"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the publisher which has the most titles published in 1991.",
        "question_ar": "",
        "evidence_en": "most title published refers to MAX(count(title_id); published in 1991 refers to YEAR(pubdate) = 1991",
        "evidence_ar": "",
        "SQL": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991' GROUP BY T1.pub_id, T2.pub_name ORDER BY COUNT(T1.title_id) DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the title with the highest price published by 'Binnet & Hardley'.",
        "question_ar": "",
        "evidence_en": "published by refers to pub_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'Binnet & Hardley' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Among all employees, who have job level greater than 200. State the employee name and job description.",
        "question_ar": "",
        "evidence_en": "job level greater than 200 refers to job_lvl>200; job description refers to job_desc",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name all the authors for all business titles.",
        "question_ar": "",
        "evidence_en": "business title refers to title under business where type = 'business'",
        "evidence_ar": "",
        "SQL": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all the titles and year to date sales by author who are not on contract.",
        "question_ar": "",
        "evidence_en": "year to date sales refers to ytd_sales; not on contract refers to contract = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "For all authors from CA who are not on contract, which title of his/hers has the most year to date sales.",
        "question_ar": "",
        "evidence_en": "year to date sales refers to ytd_sales; on contract refers to contract = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name all the authors for 'Sushi, Anyone?'.",
        "question_ar": "",
        "evidence_en": "most year to date sales refers to MAX(ytd_sales); on contract refers to contract = 1; name of author = au_fname, au_lname",
        "evidence_ar": "",
        "SQL": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.title = 'Sushi, Anyone?'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Calculate the percentage of the employees who are Editor or Designer?",
        "question_ar": "",
        "evidence_en": "Editor or Auditor are job description which refers to job_desc; percentage = DIVIDE(count(job_desc = 'Editor' or job_desc = 'Auditor'), count(emp_id))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List all titles which have year to date sales higher than the average order by pubisher name.",
        "question_ar": "",
        "evidence_en": "year to date sales refers to ytd_sales; average order = AVG(ytd_sales)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.ytd_sales > ( SELECT AVG(ytd_sales) FROM titles )"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "How many publishers are in the USA?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the publisher's information of New Moon Books?",
        "question_ar": "",
        "evidence_en": "publisher name refers to pub_name; New Moon Books is a publisher name",
        "evidence_ar": "",
        "SQL": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Please list the first names of the employees who work as Managing Editor.",
        "question_ar": "",
        "evidence_en": "Managing Editor is a job description which refers to job_desc",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Managing Editor'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the highest level of job to get to for the employee who got hired the earliest?",
        "question_ar": "",
        "evidence_en": "highest job level refers to MAX(job_lvl); hired the earliest refers to MIN(hire_date)",
        "evidence_ar": "",
        "SQL": "SELECT T2.max_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.hire_date LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "In which city is the store with the highest total sales quantity located?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; highest sales quantity refers to MAX(qty)",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the price of the book that sells the best?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id ORDER BY T1.qty DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Please list the stores that ordered the book \"Life Without Fear\".",
        "question_ar": "",
        "evidence_en": "store name refers to stor_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.stor_name FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T3.title = 'Life Without Fear'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Among the stores that have ordered the book \"Life Without Fear\", how many of them are located in Massachusetts?",
        "question_ar": "",
        "evidence_en": "Massachusetts is a state",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "In which country is the publisher of the book \"Life Without Fear\" located?",
        "question_ar": "",
        "evidence_en": "Life Without Fear is book title",
        "evidence_ar": "",
        "SQL": "SELECT T2.country FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Life Without Fear'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the publisher that has published the most expensive book?",
        "question_ar": "",
        "evidence_en": "most expensive book refers to MAX(price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Among the publishers in the USA, how many of them have published books that are over $15?",
        "question_ar": "",
        "evidence_en": "are over $15 refers to price>15",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Please give more detailed information about the first three books that sell the best.",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)",
        "evidence_ar": "",
        "SQL": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id ORDER BY T2.qty DESC LIMIT 3"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "How many books on business have the bookstores in Massachusetts ordered?",
        "question_ar": "",
        "evidence_en": "Massachusetts is a state; business books refers to type = 'business'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the average quantity of each order for the book \"Life Without Fear\"?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; average quantity order = AVG(qty)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.qty) AS REAL) / COUNT(T1.title_id) FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T1.title = 'Life Without Fear'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What is the average level employees working as Managing Editor are at? How many levels are there between the average level and the highest level?",
        "question_ar": "",
        "evidence_en": "Managing Editor is a job description which refers to job_desc; job level refers to job_lvl; highest level job refers to max_lvl; levels between the average level and the highest level = SUBTRACT(max_lvl; AVG(job_lvl))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.job_lvl), T1.max_lvl - AVG(T2.job_lvl) FROM jobs AS T1 INNER JOIN employee AS T2 ON T1.job_id = T2.job_id WHERE T1.job_desc = 'Managing Editor' GROUP BY T2.job_id, T1.max_lvl"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which one is the cheapest business book?",
        "question_ar": "",
        "evidence_en": "business books refers to type = 'business'; cheapest book refers to MIN(price)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which type of book had the most pre-paid amount?",
        "question_ar": "",
        "evidence_en": "most pre-paid amount refers to MAX(advance)",
        "evidence_ar": "",
        "SQL": "SELECT type FROM titles ORDER BY advance DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What's the royalty for the bestseller book?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; bestseller means with the most sales quantity; MAX(qty)",
        "evidence_ar": "",
        "SQL": "SELECT royalty FROM titles ORDER BY ytd_sales DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which job level is O'Rourke at?",
        "question_ar": "",
        "evidence_en": "job level refers to job_lvl",
        "evidence_ar": "",
        "SQL": "SELECT job_lvl FROM employee WHERE lname = 'O''Rourke'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Show me the employ id of the highest employee who doesn't have a middle name.",
        "question_ar": "",
        "evidence_en": "highest employee refers to employee with the highest job level; MAX(job_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT emp_id FROM employee WHERE minit = '' ORDER BY job_lvl DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Is the author of \"Sushi, Anyone?\" on the contract?",
        "question_ar": "",
        "evidence_en": "contract = 1 means on contract; contract = 0 means not on contract",
        "evidence_ar": "",
        "SQL": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which publisher had the highest job level? Give his/her full name.",
        "question_ar": "",
        "evidence_en": "highest job level refers to MAX(job_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT T1.fname, T1.minit, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.job_lvl DESC LIMIT 1"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What's Pedro S Afonso's job title?",
        "question_ar": "",
        "evidence_en": "job title means job description which refers to job_desc",
        "evidence_ar": "",
        "SQL": "SELECT T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Pedro' AND T1.minit = 'S' AND T1.lname = 'Afonso'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position?",
        "question_ar": "",
        "evidence_en": "max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What's on the notes for the order happened on 1994/9/14?",
        "question_ar": "",
        "evidence_en": "order happened on refers to ord_date",
        "evidence_ar": "",
        "SQL": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1994-09-14'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List the type of the book for the order which was sold on 1993/5/29.",
        "question_ar": "",
        "evidence_en": "sold on refers to ord_date",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Tell me about the information of the French publisher.",
        "question_ar": "",
        "evidence_en": "French publisher means publisher in France where country = 'France'",
        "evidence_ar": "",
        "SQL": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'France'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "What's the publisher of the book \"Silicon Valley Gastronomic Treats\"? Give the publisher's name.",
        "question_ar": "",
        "evidence_en": "publisher name refers to pub_name; Silicon Valley Gastronomic Treats is the title of a book",
        "evidence_ar": "",
        "SQL": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Silicon Valley Gastronomic Treats'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which city did Victoria P Ashworth work in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.fname = 'Victoria' AND T1.minit = 'P' AND T1.lname = 'Ashworth'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "How many sales did the store in Remulade make?",
        "question_ar": "",
        "evidence_en": "Remulade is a city; sales in the store refers to ord_num",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ord_num) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T2.city = 'Remulade'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "For the quantities, what percent more did the store in Fremont sell than the store in Portland in 1993?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; Fremont and Portland are name of city; sell in 1993 refers to YEAR(ord_date) = 1993; percentage = DIVIDE(\nSUBTRACT(SUM(qty where city = ‘Fremont’ and year(ord_date = 1993)), \nSUM(qty where city = ‘Portland’ and year(ord_date = 1993))), SUM(qty where city = ‘Fremont’ and year(ord_date = 1993)) *100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Among all the employees, how many percent more for the publishers than designers?",
        "question_ar": "",
        "evidence_en": "publisher and designer are job descriptions which refers to job_desc; percentage more = 100*(SUBTRACT(SUM(CASE WHERE job_desc = 'publisher), SUM(CASE WHERE job_desc = 'designer'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.job_desc = 'designer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Find and list the full name of employees who were hired between 1990 and 1995. Also, arrange them in the descending order of job level.",
        "question_ar": "",
        "evidence_en": "job level refers to job_lvl; YEAR(hire_date) between 1990 and 1995",
        "evidence_ar": "",
        "SQL": "SELECT fname, minit, lname FROM employee WHERE STRFTIME('%Y', hire_date) BETWEEN '1990' AND '1995' ORDER BY job_lvl DESC"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which titles has above average royalty rate? Give those title's name, type and price?",
        "question_ar": "",
        "evidence_en": "average royalty rate = DIVIDE(SUM(royalty), COUNT(title_id))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > ( SELECT CAST(SUM(royalty) AS REAL) / COUNT(title_id) FROM roysched )"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "In 1994 which title had less order quanty than the average order quantity? Find the title name, type and price.",
        "question_ar": "",
        "evidence_en": "orders in 1994 refers to YEAR(ord_date) = 1994; order quantity refers to number of order expressed by ord_num; average order quantity = DIVIDE(SUM(ord_num), COUNT(title_id))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date LIKE '1994%' AND T2.Qty < ( SELECT CAST(SUM(T4.qty) AS REAL) / COUNT(T3.title_id) FROM titles AS T3 INNER JOIN sales AS T4 ON T3.title_id = T4.title_id )"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "List the title name, type, and price of the titles published by New Moon Books. Arrange the list in ascending order of price.",
        "question_ar": "",
        "evidence_en": "Eric the Read Books is a publisher which refers to pub_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "In the books published by US publishers, which book has the highest royalty? List these books in the descending order of royalty.",
        "question_ar": "",
        "evidence_en": "US publisher refers publisher in the US where country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Find the difference between the average royalty of titles published by US and non US publishers?",
        "question_ar": "",
        "evidence_en": "US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; difference = SUBTRACT(AVG(royalty) where country = 'USA', AVG(royalty) where country! = 'USA'))",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Calculate the average level difference between the Marketing editors hired by the US and non-US publishers?",
        "question_ar": "",
        "evidence_en": "Marketing manager is a job description which refers to job_desc; US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; job level refers to job_lvl; average level = AVG(job_lvl)",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T1.country = 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.country != 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country != 'USA' THEN 1 ELSE 0 END)) FROM publishers AS T1 INNER JOIN employee AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T2.job_id = T3.job_id WHERE T3.job_desc = 'Managing Editor'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Which title is about helpful hints on how to use your electronic resources, which publisher published it and what is the price of this book?",
        "question_ar": "",
        "evidence_en": "publisher refers to pub_name; about the title refers to notes",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.pub_name, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Helpful hints on how to use your electronic resources to the best advantage.'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Of the titles, which title is about the Carefully researched study of the effects of strong emotions on the body, which state-based publisher published this book, and what is the year-to-date sale?",
        "question_ar": "",
        "evidence_en": "year to date sales refers to ytd_sales; about the title refers to notes",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'"
    },
    {
        "db_id": "book_publishing_company",
        "question_en": "Name the top five titles that sold more than average and list them in descending order of the number of sales in California stores?",
        "question_ar": "",
        "evidence_en": "qty is abbreviation for quantity; sold more than average refers to qty > AVG(qty); california refers to state = 'CA\"",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T2.qty > ( SELECT CAST(SUM(qty) AS REAL) / COUNT(title_id) FROM sales ) AND T3.state = 'CA' ORDER BY T2.qty DESC LIMIT 5"
    },
    {
        "db_id": "retail_complains",
        "question_en": "On which day was the most verbose complaint received?",
        "question_ar": "",
        "evidence_en": "day received refers to \"Date received\"; most verbose complaint refers to MAX(ser_time);",
        "evidence_ar": "",
        "SQL": "SELECT `Date received` FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "When did the earliest complaint start on 2017/3/22?",
        "question_ar": "",
        "evidence_en": "earliest complaint refers to oldest ser_start; on 2017/3/22 refers to \"Date received\" = '2017-03-22';",
        "evidence_ar": "",
        "SQL": "SELECT MIN(ser_time) FROM callcenterlogs WHERE `Date received` = '2017-03-22'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which complaint is more urgent, complaint ID CR2400594 or ID CR2405641?",
        "question_ar": "",
        "evidence_en": "more urgent refers to MAX(priority);",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN `Complaint ID` = 'CR2400594' THEN priority END) > SUM(CASE WHEN `Complaint ID` = 'CR2405641' THEN priority END) THEN 'CR2400594' ELSE 'CR2405641' END FROM callcenterlogs"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list the full names of all the male clients born after the year 1990.",
        "question_ar": "",
        "evidence_en": "full names = first, middle, last; male refers to sex = 'Male'; year > 1990;",
        "evidence_ar": "",
        "SQL": "SELECT first, middle, last FROM client WHERE year > 1990"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints have the client Diesel Galloway filed?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3?",
        "question_ar": "",
        "evidence_en": "detailed product refers to \"sub-product\"; on 2014/7/3 refers to \"Date received\" = '2014-07-03';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sub-product` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway' AND T2.`Date received` = '2014-07-03'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Was the tag in the complaint filed by Matthew Pierce on 2016/10/28 approved by himself?",
        "question_ar": "",
        "evidence_en": "on 2016/10/28 refers to Date received = '2016-10-28'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means that customers provide the consent for this tag;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.`Consumer consent provided?` IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed?",
        "question_ar": "",
        "evidence_en": "on 2016/10/28 refers to \"Date received\" = '2016-10-28'; delayed = SUBTRACT(\"Date sent to company', 'Date received\");",
        "evidence_ar": "",
        "SQL": "SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL?",
        "question_ar": "",
        "evidence_en": "full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.`Date received` = '2017-03-27' AND T2.server = 'MICHAL'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last?",
        "question_ar": "",
        "evidence_en": "how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.`Date received` = '2017-03-27'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among all the clients from the New York city, how many of them have filed a complaint on the issue of Deposits and withdrawals?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list the full names of all the clients whose complaints are still in progress.",
        "question_ar": "",
        "evidence_en": "full name = first, middle, last; complaints are still in progress refers to \"Company response to consumer\" = 'In progress';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the clients who did receive a timely response for their complaint, how many of them are from New York?",
        "question_ar": "",
        "evidence_en": "did not receive a timely response refers to \"Timely response?\" = 'No'; New York refers to city = 'New York';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.city) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'No' AND T1.city = 'New York City'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints on credit cards in the year 2016 were filed by male clients?",
        "question_ar": "",
        "evidence_en": "credit cards refers to Product = 'Credit card'; 2016 refers to year(Date received) = 2016; male refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which division is Diesel Galloway in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list the full names of all the male clients in the Pacific division.",
        "question_ar": "",
        "evidence_en": "full names = first, middle, last; male refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific' AND T1.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the average number of complaints on credit cards filed by clients from New York in the 3 consecutive years starting from 2015?",
        "question_ar": "",
        "evidence_en": "average = AVG(Complaint ID); credit cards refers to Product = 'Credit card'; New York refers to city = 'New York'; 3 consecutive years starting from 2015 refers to \"Date received\" BETWEEN 2015 AND 2017;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.`Complaint ID`) AS REAL) / 3 AS average FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) BETWEEN '2015' AND '2017' AND T1.city = 'New York City' AND T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the percentage of the increase of complaints filed by the clients from New York from the year 2016 to the year 2017?",
        "question_ar": "",
        "evidence_en": "percentage of increase = MULTIPLY(DIVIDE(SUBTRACT(SUM(year(\"Date received\") = 2017), SUM(year(\"Date received\") = 2016)), SUM(year(\"Date received\") = 2016)), 1.0); New York refers to city = 'New York'; year(\"Date received\") BETWEEN 2016 AND 2017;",
        "evidence_ar": "",
        "SQL": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2017' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22?",
        "question_ar": "",
        "evidence_en": "serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Client_ID = 'C00007127' AND T1.`Date received` = '2017-02-22'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which state does the owner of \"wyatt.collins@gmail.com\" live in? Give the full name of the state.",
        "question_ar": "",
        "evidence_en": "full name of the state refers to state_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.email = 'wyatt.collins@gmail.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which detailed product did Mr Lennox Oliver Drake complain about?",
        "question_ar": "",
        "evidence_en": "detailed product refers to \"Sub-product\"; Mr refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Sub-product` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lennox' AND T1.middle = 'Oliver' AND T1.last = 'Drake' AND T1.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What was the detailed issue did Mr Gunner Omer Fuller complain about?",
        "question_ar": "",
        "evidence_en": "detailed issue refers to Sub-issue; Mr refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sub-issue` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Did Ms. Lyric Emely Taylor provide the consent for result of the complaint call on 2016/5/20?",
        "question_ar": "",
        "evidence_en": "Ms refers to sex = 'Female'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means the customers provide the consent; on 2016/5/20 refers to Date received = '2016-05-20';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.`Consumer consent provided?` IN (NULL, 'N/A', '') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lyric' AND T1.middle = 'Emely' AND T1.last = 'Taylor' AND T1.sex = 'Female' AND T2.`Date received` = '2016-05-20'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?",
        "question_ar": "",
        "evidence_en": "days delay for the complaint = SUBTRACT(\"date sent to company\", \"Date received\"); Mr refers to sex = 'Male'; on 2012/5/18 refers to \"Date received\" = '2012-05-18';",
        "evidence_ar": "",
        "SQL": "SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which district did the review on 2018/9/11 come from? Give the name of the city.",
        "question_ar": "",
        "evidence_en": "on 2018/9/11 refers to Date = '2017-07-22';",
        "evidence_ar": "",
        "SQL": "SELECT T2.district_id, T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Date = '2018-09-11'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What was the review context from Jacksonville on 2017/7/22?",
        "question_ar": "",
        "evidence_en": "Jacksonville refers to city = 'Jacksonville'; on 2017/7/22 refers to Date = '2017-07-22';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Reviews FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Jacksonville' AND T1.Date = '2017-07-22'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which product received a review from Indianapolis on 2016/10/7?",
        "question_ar": "",
        "evidence_en": "Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many stars did \"Eagle Capital\" received from Little Rock on 2013/4/4?",
        "question_ar": "",
        "evidence_en": "Eagle Capital refers to Product = 'Eagle Capital'; Little Rock is a city; on 2013/4/4 refers to Date = '2013-04-04';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T2.city = 'Little Rock' AND T1.Date = '2013-04-04'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "For the client who made the complaint call \"CR0217298\", what was his/her birthday？",
        "question_ar": "",
        "evidence_en": "complaint call refers to Complaint ID; birthday = year, month, day;",
        "evidence_ar": "",
        "SQL": "SELECT T1.month, T1.day FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0217298'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What was the phone of number of the client who made the complaint call \"CR0100432\" ？",
        "question_ar": "",
        "evidence_en": "complaint call refers to Complaint ID;",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0100432'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "For all the complaint callers on 2017/3/27, what percentage of the clients are females?",
        "question_ar": "",
        "evidence_en": "on 2017/3/27 refers to \"Date received\" = '2017-03-27'; percentage = MULTIPLY(DIVIDE(SUM(sex = 'Female' ), COUNT(client_id)), 1.0); females refers to sex = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2017-03-27'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the percentage of the complaint calls from Mr Mason Javen Lopez has got the consent provided by the customer?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer consent provided?\" = 'Consent provided'), COUNT(client_id)), 1.0); Mr refers to sex = 'Male'; consent provided by the customer refers to \"Consumer consent provided?\" = 'Consent provided';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.`Consumer consent provided?` = 'Consent provided' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.`Consumer consent provided?`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.first = 'Mason' AND T1.middle = 'Javen' AND T1.last = 'Lopez'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many priority urgent complaints were received in march of 2017? List the complaint ID of these complaints.",
        "question_ar": "",
        "evidence_en": "urgent complaints refers to priority = 2; march of 2017 refers to \"Date received\" BETWEEN '2017-01-01' AND '2017-01-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(`Complaint ID`) FROM callcenterlogs WHERE `Date received` LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list the full name, date of birth, and email id of the elderly clients in descending order of age.",
        "question_ar": "",
        "evidence_en": "full name = first, middle, last; date of birth = year, month, day; elderly clients refers to age > 65;",
        "evidence_ar": "",
        "SQL": "SELECT first, middle, last, year, month , day, email FROM client WHERE age > 65 ORDER BY age DESC"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which product got the most five stars, and how many?",
        "question_ar": "",
        "evidence_en": "most five stars refers to MAX(COUNT(stars = 5));",
        "evidence_ar": "",
        "SQL": "SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List all the states in the South region.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT state FROM state WHERE Region = 'South'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the email id of clients whose calls were hung?",
        "question_ar": "",
        "evidence_en": "email id refers to email; calls were hung refers to outcome = 'Hang';",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.outcome = 'HANG'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the average age of clients from the Midwest region.",
        "question_ar": "",
        "evidence_en": "average age = AVG(age);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the full name and phone number of clients who submitted the complaint via fax.",
        "question_ar": "",
        "evidence_en": "full name = first, middle, last; submitted the complaint via fax refers to \"Submitted via\" = 'fax';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Fax'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Find and list the names of districts which has below-average stars for Eagle Capital.",
        "question_ar": "",
        "evidence_en": "below average = AVG(stars) < Stars; Eagle Capital refers to Product = 'Eagle Capital';",
        "evidence_ar": "",
        "SQL": "SELECT T2.division FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T1.Stars > ( SELECT AVG(Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In the calls from the mountain division, how many are from teenage clients?",
        "question_ar": "",
        "evidence_en": "teenage refers to age BETWEEN 12 AND 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the number of complaints related to Credit cards came from female clients?",
        "question_ar": "",
        "evidence_en": "Credit cards refers to Product = 'Credit card'; female refers to sex = 'female';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the clients born between 1980 and 2000, list the name of male clients who complained through referral.",
        "question_ar": "",
        "evidence_en": "born between 1980 and 2000 refers to year BETWEEN 1980 AND 2000; name = first, middle, last; male refers to sex = 'Male'; complained through refers to \"Submitted via\";",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year BETWEEN 1980 AND 2000 AND T1.sex = 'Male' AND T2.`Submitted via` = 'Referral'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the medium through which most complaints are registered in Florida?",
        "question_ar": "",
        "evidence_en": "medium refers to \"Submitted via\"; most complaints refers to MAX(Complaint ID); Florida refers to state = 'florida';",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Submitted via` FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.state = 'FL' GROUP BY T1.`Complaint ID` ORDER BY COUNT(T1.`Complaint ID`) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the average number of complaints received from New Bedford each year which are closed with explanation.",
        "question_ar": "",
        "evidence_en": "average = AVG(\"Complaint ID\"); New Bedford refers to city = 'New Bedford'; closed with explanation refers to Company response to consumer = 'Closed with explanation';",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T3.`Date received`) , CAST(SUM(CASE WHEN T3.`Company response to consumer` = 'Closed with explanation' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.`Complaint ID`) AS average FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.city = 'New Bedford' GROUP BY strftime('%Y', T3.`Date received`)"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What percentage of consumers from Houston disputed complaints?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer disputed?\" = 'Yes' AND city = 'Houston'), COUNT(client_id)), 1.0); Houston refers to city = 'Houston';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.`Consumer disputed?` = 'Yes' AND T1.city = 'Houston' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Find the number of service members who complained in Syracuse.",
        "question_ar": "",
        "evidence_en": "service members refers to client.client_id; Syracuse refers to city = 'Syracuse';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Servicemember' AND T1.city = 'Syracuse'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the calls from California, what percentage are priority 1?",
        "question_ar": "",
        "evidence_en": "California refers to state = 'California'; percentage = MULTIPLY(DIVIDE(SUM(priority = 1), COUNT(\"Complaint ID\"), 1.0));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the difference in the average age of elderly and middle-aged clients in the Northeast region.",
        "question_ar": "",
        "evidence_en": "difference in the average = SUBTRACT(AVG(age BETWEEN 35 AND 55), AVG( age > 65)); elderly refers to age > 65; middle-aged refers to age BETWEEN 35 AND 55;",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.age > 65 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END)) AS difference FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List by their ID number the 3 longest complaints.",
        "question_ar": "",
        "evidence_en": "ID number refers to \"Complaint ID\"; longest complaints refers to MAX(ser_time);",
        "evidence_ar": "",
        "SQL": "SELECT `Complaint ID` FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients have an email account other than gmail.com?",
        "question_ar": "",
        "evidence_en": "email account other than gmail.com refers to email not like '%@gmail.com';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(email) FROM client WHERE email NOT LIKE '%@gmail.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Identify by their ID all clients who did not give their consent permission.",
        "question_ar": "",
        "evidence_en": "did not give their consent permission refers to Consumer consent provided is null, 'N/A', or empty;",
        "evidence_ar": "",
        "SQL": "SELECT Client_ID FROM events WHERE `Consumer consent provided?` = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List by their ID the complaints received by the company on 25/09/2014 that took the longest.",
        "question_ar": "",
        "evidence_en": "ID of the complaints refers to \"Complaint ID\"; on 25/09/2014 refers to \"Date sent to company\" = '2014-09-25'; took the longest = MAX(SUBTRACT(\"Date sent to company\", \"Date received\"));",
        "evidence_ar": "",
        "SQL": "SELECT `Complaint ID` FROM events WHERE strftime('%J', `Date sent to company`) - strftime('%J', `Date received`) = ( SELECT MAX(strftime('%J', `Date sent to company`) - strftime('%J', `Date received`)) FROM events WHERE `Date sent to company` = '2014-09-25' ) AND `Date sent to company` = '2014-09-25'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List priority 2 complaints by date received.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT `Complaint ID` FROM callcenterlogs WHERE priority = 2 ORDER BY `Date received` DESC"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints are not in process with an agent?",
        "question_ar": "",
        "evidence_en": "not in process with an agent refers to outcome ! = 'AGENT';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(outcome) FROM callcenterlogs WHERE outcome != 'AGENT'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many Credit Card complaints did Sharon handle?",
        "question_ar": "",
        "evidence_en": "Credit Card refers to Product = 'Credit Card'; Sharon refers to server = 'SHARON';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Product = 'Credit card' AND T1.server = 'SHARON'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In which region have the most 1-star reviews been done?",
        "question_ar": "",
        "evidence_en": "most 1-star reviews refers to MAX(COUNT(stars = 1));",
        "evidence_ar": "",
        "SQL": "SELECT T3.Region FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.Stars = 1 GROUP BY T3.Region ORDER BY COUNT(T3.Region) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In what years were the clients who demanded more problems with Certificate of deposit born?",
        "question_ar": "",
        "evidence_en": "more problems with Certificate refers to MAX(COUNT(\"Sub-product\" = '(CD) Certificate of deposit'));",
        "evidence_ar": "",
        "SQL": "SELECT T1.year FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Sub-product` = '(CD) Certificate of deposit' GROUP BY T1.year ORDER BY COUNT(T1.year) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many cases of billing dispute issues occurred in the Mountain division?",
        "question_ar": "",
        "evidence_en": "billing dispute refers to issue = 'Billing disputes';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Issue) FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Issue = 'Billing disputes' AND T3.division = 'Mountain'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many male clients are from the state of Massachusetts?",
        "question_ar": "",
        "evidence_en": "male refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Lists the last name of all clients who made a PS-type complaint and were served by TOVA.",
        "question_ar": "",
        "evidence_en": "PS-type complaint refers to type = 'PS'; served by refers to server;\n\n",
        "evidence_ar": "",
        "SQL": "SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS' AND T2.server = 'TOVA'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients under the age of 35 gave Eagle National Mortgage 1 star?",
        "question_ar": "",
        "evidence_en": "age < 35; Eagle National Mortgage refers to Product = 'Eagle National Mortgage';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.age) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle National Mortgage' AND T1.Stars = 1 AND T2.age < 35"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many male clients born in the year 1977 were given priority 0 in their complaints?",
        "question_ar": "",
        "evidence_en": "male refers to sex = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.sex = 'Male' AND T2.priority = 0 AND T1.year = 1997"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List by name all customers who provided consent for the tag Older American.",
        "question_ar": "",
        "evidence_en": "name refers to first; provided consent refers to \"Consumer consent provided?\" not in ('N/A', null, 'empty');",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` != 'N/A' AND T2.`Consumer consent provided?` IS NOT NULL AND T2.`Consumer consent provided?` != ''"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the name of the state in which there have been the largest number of complaints with priority 0?",
        "question_ar": "",
        "evidence_en": "largest number of complaints refers to MAX(COUNT(\"Complaint ID\") WHERE priority = 0);",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T1.priority = 0 GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints made by women and served after 3 pm received a timely response from the company?",
        "question_ar": "",
        "evidence_en": "women refers to sex = 'Female'; served after 3 pm refers to ser_time BETWEEN '15:00:01' AND '23:59:59'; received a timely response refers to \"Timely response?\" = 'Yes';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.`Timely response?` = 'Yes'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints were served in 5 minutes or less by DORIT and responded to the customer with an explanation, were made by phone?",
        "question_ar": "",
        "evidence_en": "served in 5 minutes or less refers to ser_time < '00:05:00'; DORIT refers to server = 'DORIT'; responded with an explanation refers to \"Company response to consumer\" = 'Closed with explanation'; made by refers to \"Submitted via\";",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time < '00:05:00' AND T1.server = 'DORIT' AND T2.`Submitted via` = 'Phone' AND T2.`Company response to consumer` = 'Closed with explanation'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients with the last name Alvarado are from Maryland?",
        "question_ar": "",
        "evidence_en": "The abbreviation of Maryland is 'MD';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T1.state_abbrev = T3.StateCode WHERE T2.last = 'Alvarado' AND T2.state = 'MD'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many reviews by people between 30 and 50 years include the word 'great'?",
        "question_ar": "",
        "evidence_en": "between 30 and 50 years refers to age BETWEEN 30 AND 50; include the word great refers to Review like '%Great%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Reviews) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.age BETWEEN 30 AND 50 AND T1.Reviews LIKE '%great%'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the full address of the customers who, having received a timely response from the company, have dispute about that response?",
        "question_ar": "",
        "evidence_en": "full address = address_1, address_2; received a timely response refers to Timely response? = 'Yes'; have dispute refers to \"Consumer disputed?\" = 'Yes';",
        "evidence_ar": "",
        "SQL": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'Yes' AND T2.`Consumer disputed?` = 'Yes'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints from female clients born in the year 2000 were not sent through the web?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'Female'; sent through refers to \"Submitted via\"; not sent through web refers to \"Submitted via\" ! = 'Web';\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.`Submitted via`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T1.year = 2000 AND T2.`Submitted via` != 'Web'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List all the complaints narratives made by the customer named Brenda and last name Mayer.",
        "question_ar": "",
        "evidence_en": "complaints narratives refers to \"Consumer complaint narrative\";",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Consumer complaint narrative` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Brenda' AND T1.last = 'Mayer'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many complaints from customers with a gmail.com email were received by the company in February 2017?",
        "question_ar": "",
        "evidence_en": "gmail.com email refers to email like '%gmail.com'; in February 2017 refers to \"Date received\" BETWEEN '2017-01-02' AND '2017-02-28';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE (T2.`Date received` LIKE '2017-02%' OR T2.`Date received` LIKE '2017-01%') AND T1.email LIKE '%@gmail.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the average number of stars given by Oregon clients in their reviews?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(State = 'Oregon'), COUNT(district_id)); Oregon refers to state = 'Oregon';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.Stars) AS REAL) / COUNT(T3.Stars) AS average FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.State = 'Oregon'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What percentage of clients who sent their complaints by postal mail are age 50 and older?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(\"Submitted via\" = 'Postal mail'), COUNT(client_id)), 1.0); sent their complaints by refers to \"Submitted via\"; age > 50;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.`Submitted via`) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Postal mail'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the average age of Norwalk clients?",
        "question_ar": "",
        "evidence_en": "average age = AVG(age); Norwalk refers to city = 'Norwalk';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients who live in Kansas City provided a 1-star review?",
        "question_ar": "",
        "evidence_en": "1-star review refers stars = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Kansas City' AND T1.Stars = 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which state has the highest number of clients who gave a 5-star review?",
        "question_ar": "",
        "evidence_en": "highest number of clients refers to MAX(COUNT(client_id)); 5-star review refers to stars = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which region does Noah Thompson live in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Noah' AND T1.last = 'Thompson'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How did Kyran Muller submit his complaint?",
        "question_ar": "",
        "evidence_en": "how it was submitted refers to \"Submitted via\";",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Submitted via` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What are the products that people who were born after 2005 complain about?",
        "question_ar": "",
        "evidence_en": "year > 2005;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How long was Kendall Allen's complaint about her credit card?",
        "question_ar": "",
        "evidence_en": "how long refers to ser_time; credit card refers to Product = 'Credit Card';",
        "evidence_ar": "",
        "SQL": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What was the issue that the client with the longest server time faced?",
        "question_ar": "",
        "evidence_en": "longest server time refers to MAX(ser_time);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients who live in New York City submitted their complaints via fax?",
        "question_ar": "",
        "evidence_en": "submitted complaints via fax refers to \"Submitted via\" = 'Fax';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City' AND T2.`Submitted via` = 'Fax'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the percentage of male clients complaining about their credit cards?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(sex = 'Male'), COUNT(client_id)), 1.0); male refers to sex = 'Male'; credit cards refers to Product = 'Credit card';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission.",
        "question_ar": "",
        "evidence_en": "full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` IN (NULL, 'N/A', '') LIMIT 2"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the birth date of the youngest client?",
        "question_ar": "",
        "evidence_en": "birth date refers to year, month, day; youngest client refers to max(year, month, day)",
        "evidence_ar": "",
        "SQL": "SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many times does the consumer have no dispute over a non-timely response from the company?",
        "question_ar": "",
        "evidence_en": "no dispute refers to Consumer disputed? = 'No'; non-timely response refers to Timely response? = 'No'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(`Timely response?`) FROM events WHERE `Timely response?` = 'No' AND `Consumer disputed?` = 'No'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many of the complaints are longer than 15 minutes?",
        "question_ar": "",
        "evidence_en": "longer than 15 minutes refers to ser_time > '00:15:00'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ser_time) FROM callcenterlogs WHERE strftime('%M', ser_time) > '15'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the most common issue for the highest priority complaints?",
        "question_ar": "",
        "evidence_en": "most common refers to max(count(issue)); highest priority refers to priority = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the full names of all clients who live in the Pacific division.",
        "question_ar": "",
        "evidence_en": "full name refers to first, last",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.middle, T2.last FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.division = 'Pacific'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the social number of the person who made the most complaints?",
        "question_ar": "",
        "evidence_en": "social number refers to social; most complaints refers to max(count(event.Client_ID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.social FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID GROUP BY T1.client_id ORDER BY COUNT(T1.client_id) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which is the city where most of the 1 star reviews come from?",
        "question_ar": "",
        "evidence_en": "most refers to max(count(state_abbrev)); 1 star review refers to Stars = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 1 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the address of the client who made a complaint via postal mail on March 14, 2012?",
        "question_ar": "",
        "evidence_en": "address refers to address_1, address_2; via postal mail refers to Submitted via = 'Postal mail'; March 14 2012 refers to Date received = '2012-03-14'",
        "evidence_ar": "",
        "SQL": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-03-14' AND T2.`Submitted via` = 'Postal mail'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the female clients, how many of them have a complaint with a priority of 1?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'Female'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.sex = 'Female' AND T2.priority = 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List all the server of the phone complaints with a late response from the company.",
        "question_ar": "",
        "evidence_en": "phone complaint refers to Submitted via = 'Phone'; late response refers to Timely response? = 'No'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.`Submitted via` = 'Phone' AND T1.`Timely response?` = 'No'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List all the issues of the complaints made by Kaitlyn Eliza Elliott.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kaitlyn' AND T1.middle = 'Eliza' AND T1.last = 'Elliott'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the name of the state that the client with the email \"skylar.ramirez@gmail.com\" lives in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.state FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.email = 'skylar.ramirez@gmail.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which region has the second most clients?",
        "question_ar": "",
        "evidence_en": "region refers to division; second most refers to second max(client_id)",
        "evidence_ar": "",
        "SQL": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Who is the owner of the final phone number for the complaints on server \"MORIAH\" on 9/11/2013?",
        "question_ar": "",
        "evidence_en": "owner refers to first, middle, last; on 9/11/2013 refers to Date received = '2013-09-11'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'MORIAH' AND T2.`Date received` = '2013-09-11'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Compute the average time in minute for each age group",
        "question_ar": "",
        "evidence_en": "teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65; highest average time per complaint = max(divide(sum(ser_time), count(ser_time)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END) AS teenagerAverageMins, CAST(SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adultAverageMins , CAST(SUM(CASE WHEN T1.age > 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elderAverageMins FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client`"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What percentage of complaints are from the elderly?",
        "question_ar": "",
        "evidence_en": "elder refers to age < = 65; percentage refers to divide(sum(age < = 65) , count(client_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the percentage of male clients from Indianapolis City.",
        "question_ar": "",
        "evidence_en": "male refers to sex = 'Male'; Indianapolis City refers to city = 'Indianapolis'; percentage = divide(count(client_id where sex = 'Male' and city = 'Indianapolis') , count(client_id where city = 'Indianapolis')) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE city = 'Indianapolis'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the teenager clients who use Google account and Microsoft account, which group of client is more than the other?",
        "question_ar": "",
        "evidence_en": "teenager refers to 13 < age < = 19; Google account refers to email like '%@gmail.com'; Microsoft account refers to email like '%@outlook.com'",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the full name of client whose email address is emily.garcia43@outlook.com?",
        "question_ar": "",
        "evidence_en": "full name refers to first middle last",
        "evidence_ar": "",
        "SQL": "SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the first name of clients who have the highest priority?",
        "question_ar": "",
        "evidence_en": "first name refers to first; highest priority refers to priority = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.first FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.priority = ( SELECT MAX(priority) FROM callcenterlogs )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List down the email of client whose complaint is type \"PS\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the elderlies, state the last name of whose complaint is handled in server YIFAT?",
        "question_ar": "",
        "evidence_en": "elder refers to age < = 65; last name refers to last",
        "evidence_ar": "",
        "SQL": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.age > 65 AND T2.server = 'YIFAT'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many clients who live in New York City have the complaint outcome as \"AGENT\"?",
        "question_ar": "",
        "evidence_en": "New York City refers to city = 'New York City'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.`rand client`) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.city = 'New York City' AND T2.outcome = 'AGENT'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List down the full name of clients who have disputed the response from company.",
        "question_ar": "",
        "evidence_en": "full name refers to first, middle, last; disputed the response refers to Consumer disputed? = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Consumer disputed?` = 'Yes'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What are the complaint id of client who were born in 1931?",
        "question_ar": "",
        "evidence_en": "in 1931 refers to year = 1931",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Complaint ID` FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.year = 1931"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the percentage of complaints made by Google account client in server ZOHARI.",
        "question_ar": "",
        "evidence_en": "Google account refers to email like '%@gmail.com'; percentage = divide(count(Complaint ID where email like '%@gmail.com') , count(Complaint ID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'ZOHARI'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "State the full name of clients with server time of 20 minutes and above.",
        "question_ar": "",
        "evidence_en": "full name refers to first, middle, last; server time of 20 minutes and above refers to ser_time > '00:20:00'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE strftime('%M', T2.ser_time) > '20'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Pick 5 clients with 0 priority and write down their last name.",
        "question_ar": "",
        "evidence_en": "0 priority refers to priority = 0; last name refers to last",
        "evidence_ar": "",
        "SQL": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.priority = 0 LIMIT 5"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Write down the call id of clients whose first name start with alphabet \"B\".",
        "question_ar": "",
        "evidence_en": "first name start with alphabet \"B\" refers to first like 'B%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first LIKE 'B%'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the product complained by Alexander Bronx Lewis?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "State the first name of male clients who did not receive timely response from the call center.",
        "question_ar": "",
        "evidence_en": "first name refers to first; male refers to sex = 'Male'; did not receive timely response refers to Timely response? = 'No'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'No' AND T1.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which product received the most complaints from elder clients?",
        "question_ar": "",
        "evidence_en": "most complaints refers to max(client_id); elder client refers to age > 65",
        "evidence_ar": "",
        "SQL": "SELECT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age > 65 ORDER BY T1.client_id DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Complaint about Credit Card mostly came from clients of which age group?",
        "question_ar": "",
        "evidence_en": "about Credit Card refers to Product = 'Credit Card'; teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adult , SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elder FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List down the issues for complaint with server time of below 10 minutes.",
        "question_ar": "",
        "evidence_en": "server time of below 10 minutes refers to ser_time < '00:10:00'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%M', T1.ser_time) < '10'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Write down the date received of complaints sent via Fax.",
        "question_ar": "",
        "evidence_en": "sent via Fax refers to Submitted via = 'Fax'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Date received` FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Fax'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the full name of clients who have issue about balance transfer?",
        "question_ar": "",
        "evidence_en": "full name refers to first, middle, last; issue about balance transfer refers to Issue = 'Balance transfer'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Balance transfer'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the email address of clients who submitted their complaints via postal mail?",
        "question_ar": "",
        "evidence_en": "via postal mail refers to Submitted via = 'Postal mail'",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Submitted via` = 'Postal mail'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Calculate the average age of clients whose response is \"Closed with relief\".",
        "question_ar": "",
        "evidence_en": "average age = avg(age where Company response to consumer = 'Closed with relief'); response \"Closed with relief\" refers to Company response to consumer = 'Closed with relief'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'Closed with relief'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the average age of clients whose complaint type is \"TT\"?",
        "question_ar": "",
        "evidence_en": "average age = avg(age where type = 'TT')",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'TT'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014.",
        "question_ar": "",
        "evidence_en": "final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'",
        "evidence_ar": "",
        "SQL": "SELECT `Complaint ID`, call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', `Date received`) = '2014' AND server = 'AVIDAN'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Between 1/1/2017 and 4/1/2017, what is the average server time of calls under the server DARMON?",
        "question_ar": "",
        "evidence_en": "between 1/1/2017 and 4/1/2017 refers to Date received between '2017-01-01' and '2017-04-01'; average server time refers to avg(ser_time)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(SUBSTR(ser_time, 4, 2) AS REAL)) FROM callcenterlogs WHERE `Date received` BETWEEN '2017-01-01' AND '2017-04-01'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many times per year does a credit card customer complain about overlimit fees?",
        "question_ar": "",
        "evidence_en": "credit card customer refers to product = 'Credit card'; about overlimit fees refers to issue = 'Overlimit fee'",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%Y', `Date received`), COUNT(`Date received`) FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', `Date received`) HAVING COUNT(`Date received`)"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the clients in Middle Atlantic, how many are them are female and no more than 18 years old?",
        "question_ar": "",
        "evidence_en": "in Middle Atlantic refers to division = 'Middle Atlantic'; female refers to sex = 'Female'; no more than 18 refers to age < 18",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis .",
        "question_ar": "",
        "evidence_en": "full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'",
        "evidence_ar": "",
        "SQL": "SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the top five cities in terms of the number of 5-star ratings in 2016 reviews, in descending order.",
        "question_ar": "",
        "evidence_en": "5-star rating refers to Stars = 5; in 2016 refers to Date like '2016%'; most reviews refers to max(count(city))",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the longest server time when the call is about the issue of arbitration?",
        "question_ar": "",
        "evidence_en": "longest server time refers to max(ser_time)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.ser_time) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.issue = 'Arbitration'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Give me the social number and state of the client whose phone number is 100-121-8371.",
        "question_ar": "",
        "evidence_en": "social number refers to social",
        "evidence_ar": "",
        "SQL": "SELECT T1.social, T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.phone = '100-121-8371'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the full names and phone numbers of clients that were from the Pacific.",
        "question_ar": "",
        "evidence_en": "full name refers to first, middle, last; the Pacific refers to division = 'Pacific'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the social number of the client who has the longest delay in his/her complaint? Calculate the days of delay and state the company's response to the consumer.",
        "question_ar": "",
        "evidence_en": "social number refers to social; longest delay = max(subtract(Date sent to company, Date received)); days of delay = subtract(Date sent to company, Date received); company's response refers to 'Company response to consumer'",
        "evidence_ar": "",
        "SQL": "SELECT T1.social , 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)), T2.`Company response to consumer` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID ORDER BY 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many female clients are there older than 30?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'Female'; older than 30 refers to age > 30",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(sex) FROM client WHERE sex = 'Female' AND age > 30"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list all first and last names of clients who live in New York city.",
        "question_ar": "",
        "evidence_en": "New York City refers to city = 'New York City'",
        "evidence_ar": "",
        "SQL": "SELECT first, last FROM client WHERE city = 'New York City'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the oldest age of male clients?",
        "question_ar": "",
        "evidence_en": "oldest age refers to max(age); male refers to sex = 'Male'",
        "evidence_ar": "",
        "SQL": "SELECT MAX(age) FROM client WHERE sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please calculate the number of clients by each division.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the percentage of female clients in the Middle Atlantic?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'Female'; the Middle Atlantic refers to division = 'Middle Atlantic'; percentage = divide(count(client_id where sex = 'Female' and division = 'Middle Atlantic') , count(client_id where division = 'Middle Atlantic')) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the average age of clients in South Atlantic?",
        "question_ar": "",
        "evidence_en": "in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which city in the Midwest region has the least number of clients?",
        "question_ar": "",
        "evidence_en": "least number of clients refers to min(count(client_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "How many customers in the Northeast use Microsoft email?",
        "question_ar": "",
        "evidence_en": "the Northeast refers to Region = 'Northeast'; Microsoft email refers to email like '%@outlook.com'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast' AND T1.email LIKE '%@outlook.com'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which city in West North Central has the highest number of customers over the age of 60?",
        "question_ar": "",
        "evidence_en": "in North Central refers to Region = 'North Central'; highest number of customers refers to max(count(client_id)); over the age of 60 refers to age > 60",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the percentage of complaints about the late fee issue whose priority is 2 in 2017?",
        "question_ar": "",
        "evidence_en": "percentage = divide(count(Complaint ID where priority = 2) , count(Complaint ID)) * 100%; in 2017 refers to year(Date received) = 2017",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.priority = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%Y', T1.`Date received`) = '2017'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Which state has the most cities?",
        "question_ar": "",
        "evidence_en": "state refers to state_abbrev; most cities refers to max(count(city))",
        "evidence_ar": "",
        "SQL": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please give the first name and phone number of the client whose complaint id is CR0922485.",
        "question_ar": "",
        "evidence_en": "first name refers to first",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0922485'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list the emails of the clients whose complaint date received is 7/3/2014.",
        "question_ar": "",
        "evidence_en": "7/3/2014 refers to Date received = '2014-07-03'",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2014-07-03'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In 2012, how many complaints about Credit card product came from clients in Omaha?",
        "question_ar": "",
        "evidence_en": "in 2012 refers to Date received LIKE'2012%'; in Omaha refers to city = 'Omaha'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.`Date received`) = '2012' AND T2.Product = 'Credit card'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "From 2012 to 2015, how many complaints were submitted via email from female clients?",
        "question_ar": "",
        "evidence_en": "from 2012 to 2015 refers to Date received BETWEEN 2012 AND 2015; submitted via email refers to Submitted via = 'Email'; female refers to sex = 'Female'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) BETWEEN '2012' AND '2015' AND T2.`Submitted via` = 'Email' AND T1.sex = 'Male'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Please list all clients' phone numbers and complaint IDs which are still in progress.",
        "question_ar": "",
        "evidence_en": "in progress refers to Company response to consumer = 'In progress'",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone, T2.`Complaint ID` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In 2015, how many complaints about Billing disputes were sent by clients in Portland?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to Date received LIKE'2015%'; about Billing disputes refers to Issue = 'Billing disputes'; Portland refers to city = 'Portland'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Portland' AND T2.`Date received` LIKE '2015%' AND T2.Issue = 'Billing disputes'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In 2014, what is the percentage of complaints from consumers in Houston that the delay was over 5 days?",
        "question_ar": "",
        "evidence_en": "in 2014 refers to Date received LIKE'2014%'; Houston refers to city = 'Houston'; delay over 5 days refers to subtract(Date sent to company, Date received) > 5; percentage = divide(count(Complaint ID where subtract(Date sent to company , Date received) > 5) , count(Complaint ID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN strftime('%J', T2.`Date sent to company`) - strftime('%J', T2.`Date received`) > 5 THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Houston' AND strftime('%Y', T2.`Date received`) = '2014'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In the complains received in 2012, how many of them are submitted through email?",
        "question_ar": "",
        "evidence_en": "received in 2012 refers to Date received LIKE '2012%'; submitted through email refers to Submitted via = 'Email'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(`Submitted via`) FROM events WHERE strftime('%Y', `Date received`) = '2012' AND `Submitted via` = 'Email'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Give the client ID of the complaint received on April 16, 2014 and submitted through fax.",
        "question_ar": "",
        "evidence_en": "April 16, 2014 refers to Date received = '2014-04-16'; submitted through fax refers to Submitted via = 'Fax'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Fax' AND T1.`Date received` = '2014-04-16'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List date of the review of the Eagle Capital from Indianapolis, Indiana.",
        "question_ar": "",
        "evidence_en": "Eagle Capital refers to Product = 'Eagle Capital'; Indianapolis refers to city = 'Indianapolis'; Indiana refers to state_abbrev = 'IN'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Date FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Product = 'Eagle Capital' AND T1.city = 'Indianapolis' AND T1.state_abbrev = 'IN'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the complaints received in year 2015, what is total number of complaints timely response and closed with an explanation?",
        "question_ar": "",
        "evidence_en": "in year 2015 refers to Date received LIKE '2015%'; timely response refers to Timely response?\" = 'Yes'; closed with an explanation refers to Company response to consumer = 'Closed with explanation'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%Y', T1.`Date received`) = '2015' AND T2.`Timely response?` = 'Yes' AND T2.`Company response to consumer` = 'Closed with explanation'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the female clients that age between 20 to 40, list the date when their complaints were received.",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'Female'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Date received` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID INNER JOIN callcenterlogs AS T3 ON T2.`Complaint ID` = T3.`Complaint ID` WHERE T1.age BETWEEN 20 AND 40 AND T1.sex = 'Female'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the product reviewed with 1 star on March 14, 2016 from Newton, Massachusetts.",
        "question_ar": "",
        "evidence_en": "1 star refers to Stars = 1; on March 14, 2016 refers to Date = '2016-03-14'; Newton refers to city = 'Newton'; Massachusetts refers to state_abbrev = 'MA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In reviews for the Eagle National Bank product, how many of the 5 star reviews where from Nashville, Tennessee?",
        "question_ar": "",
        "evidence_en": "5 star refers to Stars = 5; Nashville refers to city = 'Nashville'; Tennessee refers to state_abbrev = 'TN'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What are the issues of the complains of male clients and products from age 25 and below?",
        "question_ar": "",
        "evidence_en": "male refers to sex = 'Male'; age 25 and below refers to age < 25",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25"
    },
    {
        "db_id": "retail_complains",
        "question_en": "Among the reviews from midwest region, what are the products that received 1 star?",
        "question_ar": "",
        "evidence_en": "1 star refers to Stars = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Product FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.Region = 'Midwest' AND T3.Stars = 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the products involved in the complaints received on March 2017 via TOVA server.",
        "question_ar": "",
        "evidence_en": "on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.server = 'TOVA' AND T2.`Date received` LIKE '2017-03%'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "What is the division of the review of 5 stars received on December 17, 2017 for the product Eagle National Mortgage?",
        "question_ar": "",
        "evidence_en": "5 stars refers to Stars = 5; on December 17 2017 refers to Date = '2017-12-17'",
        "evidence_ar": "",
        "SQL": "SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In complaints about the credit card product, list the phone number of the oldest client.",
        "question_ar": "",
        "evidence_en": "oldest refers to max(age)",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card' ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In complaints received in 2014, how many of them were submitted via call?",
        "question_ar": "",
        "evidence_en": "in 2014 refers to Date received LIKE '2014%'; submitted via call refers to Submitted via = 'Phone'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Phone' AND strftime('%Y', T1.`Date received`) = '2014'"
    },
    {
        "db_id": "retail_complains",
        "question_en": "List the product and its issues of the complains of clients with age greater than the 60% of average age of all clients.",
        "question_ar": "",
        "evidence_en": "age greater than the 60% of average age refers to age > multiply(avg(age) , 0.6)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Product, T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age * 100 > ( SELECT AVG(age) * 60 FROM client )"
    },
    {
        "db_id": "retail_complains",
        "question_en": "In reviews of product with 5 stars, what is the percentage of the reviews coming from the division of East North Central?",
        "question_ar": "",
        "evidence_en": "5 stars refers to Stars = 5; percentage = divide(count(division = 'East North Central', count(division)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.division = 'East North Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.division) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5"
    },
    {
        "db_id": "movies_4",
        "question_en": "Please list the names of the production company of the movie \"Four Rooms\".",
        "question_ar": "",
        "evidence_en": "names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many production companies does the movie \"Four Rooms\" have?",
        "question_ar": "",
        "evidence_en": "movie \"Four Rooms\" refers to title = 'Four Rooms'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )"
    },
    {
        "db_id": "movies_4",
        "question_en": "Please list the titles of all the movie produced by production company \"Universal Pictures\".",
        "question_ar": "",
        "evidence_en": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of the latest released movie produced by production company \"Universal Pictures\"?",
        "question_ar": "",
        "evidence_en": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'; latest released refers to max(release_date)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures' ORDER BY T3.release_date DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the name of the director of photography of the movie \"Pirates of the Caribbean: At World's End\"?",
        "question_ar": "",
        "evidence_en": "name of the director of photography refers to person_name where job = 'Director of Photography'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"?",
        "question_ar": "",
        "evidence_en": "movie \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\".",
        "question_ar": "",
        "evidence_en": "names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"?",
        "question_ar": "",
        "evidence_en": "worked as producer refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Please list the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".",
        "question_ar": "",
        "evidence_en": "names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'"
    },
    {
        "db_id": "movies_4",
        "question_en": "In how many movie does Dariusz Wolski work as the director of photography?",
        "question_ar": "",
        "evidence_en": "director of photography refers to job = 'Director of Photography'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote?",
        "question_ar": "",
        "evidence_en": "director of photography refers to job = 'Director of Photography'; highest average vote refers to max(vote_average)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "When was the release date of the latest movie in which Dariusz Wolski worked as a crew member?",
        "question_ar": "",
        "evidence_en": "release date of the latest movie refers to max(release_date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_date FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' ORDER BY T1.release_date DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0?",
        "question_ar": "",
        "evidence_en": "director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography?",
        "question_ar": "",
        "evidence_en": "director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Give the name of the movie with a revenue of 559852396.",
        "question_ar": "",
        "evidence_en": "name of the movie refers to title; revenue of 559852396 refers to revenue = '559852396'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie WHERE revenue = 559852396"
    },
    {
        "db_id": "movies_4",
        "question_en": "What was David Rubin's job in the movie \"Days of Thunder\"?",
        "question_ar": "",
        "evidence_en": "\"Days of Thunder\" refers to title = 'Days of Thunder'",
        "evidence_ar": "",
        "SQL": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies were directed by Michael Bay?",
        "question_ar": "",
        "evidence_en": "directed by refers to job = 'Director'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Michael Bay' AND T2.job = 'Director'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Show the total number of keywords of the movie \"I Hope They Serve Beer in Hell\".",
        "question_ar": "",
        "evidence_en": "\"I Hope They Serve Beer in Hell\" refers to title = 'I Hope They Serve Beer in Hell';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.keyword_id) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'I Hope They Serve Beer in Hell'"
    },
    {
        "db_id": "movies_4",
        "question_en": "For the movie \"Land of the Dead\", who is its director?",
        "question_ar": "",
        "evidence_en": "\"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Tell the number of movies made by Paramount Animation.",
        "question_ar": "",
        "evidence_en": "Paramount Animation refers to company_name = 'Paramount Animation'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Paramount Animation'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many female characters are there in the movie \"Spider-Man 3\"?",
        "question_ar": "",
        "evidence_en": "female characters refer to gender = 'Female'; \"Spider-Man 3\" refers to title = 'Spider-Man 3'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Spider-Man 3' AND T3.gender = 'Female'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the most used keyword in the movies.",
        "question_ar": "",
        "evidence_en": "most used keyword refers to keyword_name where max(count(keyword_name))",
        "evidence_ar": "",
        "SQL": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many producers does the movie \"The Amityville Horror\" have?",
        "question_ar": "",
        "evidence_en": "producers refers to job = 'Producer'; \"The Amityville Horror\" refers to title = 'The Amityville Horror'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the production company of the movie \"Crazy Heart\"?",
        "question_ar": "",
        "evidence_en": "movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Give the number of movies with \"saving the world\" as the keyword.",
        "question_ar": "",
        "evidence_en": "\"saving the world\" as the keyword refers to keyword_name = 'saving the world'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id WHERE keyword_name = 'saving the world'"
    },
    {
        "db_id": "movies_4",
        "question_en": "For all the movies which were produced by Cruel and Unusual Films, which one has the most popularity?",
        "question_ar": "",
        "evidence_en": "produced by Cruel and Unusual Films refers to company_name = 'Cruel and Unusual Films'; most popularity refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "For the movie \"Reign of Fire\", which department was Marcia Ross in?",
        "question_ar": "",
        "evidence_en": "movie \"Reign of Fire\" refers to title = 'Reign of Fire'; which department refers to department_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T3.person_name = 'Marcia Ross' AND T1.title = 'Reign of Fire'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Calculate the average budget of the movies directed by Jaume Collet-Serra.",
        "question_ar": "",
        "evidence_en": "directed by refers to job = 'Director'; average budget = AVG(budget)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the percentage of male characters in the movie \"Bride Wars\"?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'Male'; \"Bride Wars\" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of the movie that was made with the most money and resources?",
        "question_ar": "",
        "evidence_en": "made with the most money and resources refers to max(budget)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie ORDER BY budget DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies have made at least 1 Billion at the box office?",
        "question_ar": "",
        "evidence_en": "have made at least 1 Billion at the box office refers to revenue > 1000000000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000"
    },
    {
        "db_id": "movies_4",
        "question_en": "When was the first movie released?",
        "question_ar": "",
        "evidence_en": "when the first movie refers to release_date where min(release_date)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(release_date) FROM movie WHERE movie_status = 'Released'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many crew are named John Young?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(person_id) FROM person WHERE person_name = 'John Young'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the title of the movie that is most-liked by a large number of people.",
        "question_ar": "",
        "evidence_en": "most-liked by a large number of people refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Who is the person associated with the crew id 1325273?",
        "question_ar": "",
        "evidence_en": "Who is the person refers to person_name; crew id 1325273 refers to person_id = 1325273",
        "evidence_ar": "",
        "SQL": "SELECT person_name FROM person WHERE person_id = 1325273"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the name of the production company that made the most movies?",
        "question_ar": "",
        "evidence_en": "name of the production company refers to company_name; most movies refers to max(count(company_name))",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Who played Captain Jack Sparrow in all of the Pirates of the Caribbean movies?",
        "question_ar": "",
        "evidence_en": "Captain Jack Sparrow refers to character_name = 'Captain Jack Sparrow'; Pirates of the Caribbean movies refers to title LIKE 'Pirates of the Carribbean%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.character_name = 'Captain Jack Sparrow' AND T1.title LIKE 'Pirates of the Caribbean%'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is Walt Disney Pictures' most popular movie?",
        "question_ar": "",
        "evidence_en": "Walt Disney Pictures refers to company_name = 'Walt Disney Pictures'; most popular movie refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Walt Disney Pictures' ORDER BY T3.popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies did Universal Studios release?",
        "question_ar": "",
        "evidence_en": "Universal Studios refers to company_name = 'Universal Studios'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Universal Studios'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which production company produced the movie that made the most money at the box office?",
        "question_ar": "",
        "evidence_en": "Which production company refers to company_name; most money at the box office refers to max(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id GROUP BY T1.company_id ORDER BY SUM(T3.revenue) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many female crews are in the movie \"Mr. Smith Goes to Washington\"?",
        "question_ar": "",
        "evidence_en": "female crews refers to gender = 'Female'; \"Mr. Smith Goes to Washington\" refers to title = 'Mr. Smith Goes to Washington'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the names of the production companies that made at least 200 movies.",
        "question_ar": "",
        "evidence_en": "names of the production companies refers to company_name; at least 200 movies refers to COUNT(company_name) > = 200",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T2.movie_id) > 200"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies did Harrison Ford appear in total?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Harrison Ford'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of Jamie Foxx's most recent movie?",
        "question_ar": "",
        "evidence_en": "most recent movie refers to max(release_date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jamie Foxx' ORDER BY T1.release_date DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies released in 1995 did Quentin Tarantino appear in?",
        "question_ar": "",
        "evidence_en": "released in 1995 refers to release_date LIKE '1995%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of the first crime movie ever released?",
        "question_ar": "",
        "evidence_en": "first crime movie ever released refers to min(release_date) and genre_name = 'Crime'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many horror movies are there?",
        "question_ar": "",
        "evidence_en": "horror movies refers to genre_name = 'Horror'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id WHERE T2.genre_name = 'Horror'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the person IDs of the second film editors in Movie No. 12.",
        "question_ar": "",
        "evidence_en": "second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12",
        "evidence_ar": "",
        "SQL": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many animators does Movie No. 129 have?",
        "question_ar": "",
        "evidence_en": "animators refers to job = 'Animation'; Movie No. 129 refers to movie_id = 129",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_id) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation'"
    },
    {
        "db_id": "movies_4",
        "question_en": "In Movie No. 19, how many people are there in Department No. 7? Please give me their job.",
        "question_ar": "",
        "evidence_en": "Movie No. 19 refers to movie_id = 19; Department No. 7 refers to department_id = 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT job) FROM movie_crew WHERE movie_id = 19 AND department_id = 7"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285.",
        "question_ar": "",
        "evidence_en": "casts between order numbers 1 and 10 refers to cast_order BETWEEN 2 AND 9; Movie No. 285 refers to movie_id = 285",
        "evidence_ar": "",
        "SQL": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many times did Bob Peterson appear in the movie credits?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Tally the movie ID and character name in the movie starring Jim Carrey.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Give the names of the female cast in Movie No. 1865.",
        "question_ar": "",
        "evidence_en": "female cast refers to gender = 'Female'; name of cast refers to person_name; Movie No. 1865 refers to movie_id = 1865",
        "evidence_ar": "",
        "SQL": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN gender AS T3 ON T1.gender_id = T3.gender_id WHERE T1.movie_id = 1865 AND T3.gender = 'Female'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write me the titles of the movies starring Jim Carrey.",
        "question_ar": "",
        "evidence_en": "Jim Carrey is the person_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the director's name of the movies released between 1/01/1916 and 12/31/1925.",
        "question_ar": "",
        "evidence_en": "director's name refers to person_name where job = 'Director'; released between 1/01/1916 and 12/31/1925 refers to release_date BETWEEN '1916-01-02' AND '1925-12-30'",
        "evidence_ar": "",
        "SQL": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many films released between 1/2/1990 and 12/30/2000 starred Uma Thurman?",
        "question_ar": "",
        "evidence_en": "released between 1/2/1990 and 12/30/2000 refers to release_date BETWEEN '1990-01-02' AND '2000-12-30'; film has the same meaning as movie; starred Uma Thurman refers to person_name = 'Uma Thurman'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write the titles of horror films with a vote average of more than 7.",
        "question_ar": "",
        "evidence_en": "horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7"
    },
    {
        "db_id": "movies_4",
        "question_en": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015.",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20?",
        "question_ar": "",
        "evidence_en": "Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of the highest-budget film to date? Please include the revenue and name the country.",
        "question_ar": "",
        "evidence_en": "highest-budget film refers to max(budget); name the country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995.",
        "question_ar": "",
        "evidence_en": "movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average revenue of American movies in 2006?",
        "question_ar": "",
        "evidence_en": "American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006"
    },
    {
        "db_id": "movies_4",
        "question_en": "Calculate the 2016 gap between the average revenue for Indian and American films.",
        "question_ar": "",
        "evidence_en": "2016 refers to release_date LIKE '2016%'; Indian and American films refers to country_name = 'India' and country_name = 'United States of America'; gap between the average revenue refers to subtract(divide(sum(revenue), count(movie_id)) when country_name = 'United States of America', divide(sum(revenue), count(movie_id)) when country_name = 'India')",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CASE WHEN T3.COUNTry_name = 'United States of America' THEN T1.revenue END) - AVG(CASE WHEN T3.COUNTry_name = 'India' THEN T1.revenue END) AS CALCULATE FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2016"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the percentage of romance films among films produced in India in 2015?",
        "question_ar": "",
        "evidence_en": "romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which actor plays Optimus Prime?",
        "question_ar": "",
        "evidence_en": "Which actor refers to person_name; Optimus Prime refers to character_name = 'Optimus Prime (voice)'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name = 'Optimus Prime (voice)'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the gender of the character 'USAF Master Sgt. Epps?'",
        "question_ar": "",
        "evidence_en": "character 'USAF Master Sgt. Epps' refers to character_name = 'USAF Master Sgt. Epps'",
        "evidence_ar": "",
        "SQL": "SELECT T2.gender FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.character_name = 'USAF Master Sgt. Epps'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.'",
        "question_ar": "",
        "evidence_en": "all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'",
        "evidence_ar": "",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which movie did the company 'Radiant Film GmbH' work on?",
        "question_ar": "",
        "evidence_en": "Which movie refers to title; company 'Radiant Film GmbH' refers to company_name = 'Radiant Film GmbH'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What are the genres of Sky Captain and the World of Tomorrow?",
        "question_ar": "",
        "evidence_en": "genres refers to genre_name; Sky Captain and the World of Tomorrow refers to title = 'Sky Captain and the World of Tomorrow'",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write all the keywords belonging to the movie 'Sky Captain and the World of Tomorrow.'",
        "question_ar": "",
        "evidence_en": "keywords refers to keyword_name; movie 'Sky Captain and the World of Tomorrow' refers to title = 'Sky Captain and the World of Tomorrow'",
        "evidence_ar": "",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'"
    },
    {
        "db_id": "movies_4",
        "question_en": "The movie 'Gojira ni-sen mireniamu' is from which country?",
        "question_ar": "",
        "evidence_en": "movie 'Gojira ni-sen mireniamu' refers to title = 'Gojira ni-sen mireniamu'; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which movie has the keyword 'extremis?'",
        "question_ar": "",
        "evidence_en": "Which movie refers to title; keyword 'extremis' refers to keyword_name = 'extremis'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'extremis'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List 10 movie titles that were produced in France.",
        "question_ar": "",
        "evidence_en": "France refers to country_name = 'France'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10"
    },
    {
        "db_id": "movies_4",
        "question_en": "Who is the director for the movie 'Transformers?'",
        "question_ar": "",
        "evidence_en": "the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List 10 crews alongside their jobs who worked on the movie 'Mad Max: Fury Road.'",
        "question_ar": "",
        "evidence_en": "crews refers to person_name; movie 'Mad Max: Fury Road' refers to title = 'Mad Max: Fury Road'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Mad Max: Fury Road' LIMIT 10"
    },
    {
        "db_id": "movies_4",
        "question_en": "What percentage of movies that came from Japan belong in the 'animation' genre?",
        "question_ar": "",
        "evidence_en": "from Japan refers to country_name = 'Japan'; in the 'animation' genre refers to genre_name = 'animation'; percentage = divide(sum(movie_id) when genre_name = 'animation', count(movie_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'Japan'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'Male'; female refers to gender = 'Female'; movie 'Iron Man' refers to title = 'Iron Man'; ratio = divide(sum(gender = 'Female'), sum(gender = 'Male'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down five movie titles that were released before 2000.",
        "question_ar": "",
        "evidence_en": "released before 2000 refers to release_date < '2000-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) < 2000 LIMIT 5"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the keyword ID of the movie with the title of \"Sin City\"?",
        "question_ar": "",
        "evidence_en": "title of \"Sin City\" refers to title = 'Sin City'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword_id FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Sin City'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Look for the movie title with the keyword of \"angel\".",
        "question_ar": "",
        "evidence_en": "keyword of \"angel\" refers to keyword_name = 'angel'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'angel'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which keywords belong to the movie titles with the highest popularity?",
        "question_ar": "",
        "evidence_en": "Which keywords refers to keyword_name; highest popularity refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the genre ID of the movie with the title of \"The Dark Knight\".",
        "question_ar": "",
        "evidence_en": "movie with the title of \"The Dark Knight\" refers to title = 'The Dark Knight'",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_id FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Dark Knight'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down the movie titles within the genre of thriller.",
        "question_ar": "",
        "evidence_en": "genre of thriller refers to genre_name = 'Thriller'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Thriller'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write down five rumoured movie titles within the genre of Drama.",
        "question_ar": "",
        "evidence_en": "rumoured movie refers to movie_status = 'rumoured'; genre of Drama refers to genre_name = 'Drama'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.movie_status = 'Rumored' AND T3.genre_name = 'Drama' LIMIT 5"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the genre of the movie title with the lowest revenue generated?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; lowest revenue refers to min(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.revenue LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "State the genre of the movie title with a runtime of only 14 minutes.",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the genre of the movie title which was well-received by the audiences but made the lowest revenue?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; well-received by the audiences refers to max(vote_average); lowest revenue refers to min(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the genre of a movie title with a tagline of \"A long time ago in a galaxy far, far away…\".",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; tagline of \"A long time ago in a galaxy far, far away…\" refers to tagline = 'A long time ago in a galaxy far, far away…'",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the country ID of the movie with the title of \"Pirates of the Caribbean: Dead Man's Chest\"?",
        "question_ar": "",
        "evidence_en": "title of \"Pirates of the Caribbean: Dead Man's Chest\" refers to title = 'Pirates of the Caribbean: Dead Man''s Chest'",
        "evidence_ar": "",
        "SQL": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down the movie titles that were produced in Canada.",
        "question_ar": "",
        "evidence_en": "produced in Canada refers to country_name = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Accumulate the budget of the movie titles with the keyword of \"video game\".",
        "question_ar": "",
        "evidence_en": "keyword of \"video game\" refers to keyword_name = 'video game'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'"
    },
    {
        "db_id": "movies_4",
        "question_en": "For movies with the keyword of \"civil war\", calculate the average revenue generated by these movies.",
        "question_ar": "",
        "evidence_en": "keyword of \"civil war\" refers to keyword_name = 'civil war'; average revenue = AVG(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'civil war'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Find out the popularity of the movies with the highest vote count.",
        "question_ar": "",
        "evidence_en": "highest vote count refers to max(vote_count)",
        "evidence_ar": "",
        "SQL": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Among the zero-budget movie titles, which one has made the highest revenue?",
        "question_ar": "",
        "evidence_en": "zero-budget refers to budget = 0; highest revenue refers to max(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the ID of the production company which produced the movie \"Gladiator\"?",
        "question_ar": "",
        "evidence_en": "ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'",
        "evidence_ar": "",
        "SQL": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down the IDs of the production companies that released the movies in 1916.",
        "question_ar": "",
        "evidence_en": "IDs of the production companies refers to company_id; movies in 1916 refers to release_date LIKE '1916%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down the movies produced by Lucasfilm.",
        "question_ar": "",
        "evidence_en": "movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Among Warner Bros. Pictures' movies, which title made the highest revenue?",
        "question_ar": "",
        "evidence_en": "Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Write down the release date of the movies produced by Twentieth Century Fox Film Corporation.",
        "question_ar": "",
        "evidence_en": "produced by Twentieth Century Fox Film Corporation refers to company_name = 'Twentieth Century Fox Film Corporation'",
        "evidence_ar": "",
        "SQL": "SELECT T3.release_date FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Twentieth Century Fox Film Corporation'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the language ID of the movie \"Walk the Line\"?",
        "question_ar": "",
        "evidence_en": "movie \"Walk the Line\" refers to title = 'Walk the Line'",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Find out the language ID of the movie with the highest popularity.",
        "question_ar": "",
        "evidence_en": "highest popularity refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Tell the language of the movie \"C'era una volta il West\".",
        "question_ar": "",
        "evidence_en": "language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'",
        "evidence_ar": "",
        "SQL": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Are there any post-production movies in Nederlands?",
        "question_ar": "",
        "evidence_en": "post-production movies refers to movie_status = 'Post Production'; Nederlands refers to language_name = 'Nederlands';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List down the tagline of the Polski movies.",
        "question_ar": "",
        "evidence_en": "Polski movies refers to language_name = 'Polski'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.tagline FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Polski'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the homepage of the Bahasa Indonesia movies.",
        "question_ar": "",
        "evidence_en": "Bahasa Indonesia movies refers to language_name = 'Bahasa indonesia'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Work out the difference in revenues made between the English and Latin movies.",
        "question_ar": "",
        "evidence_en": "English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id"
    },
    {
        "db_id": "movies_4",
        "question_en": "Calculate the revenues made by Fantasy Films and Live Entertainment.",
        "question_ar": "",
        "evidence_en": "made by Fantasy Films refers to company_name = 'Fantasy Films'; Live Entertainment refers to company_name = 'Live Entertainment'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.revenue) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name IN ('Fantasy Films', 'Live Entertainment')"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average revenue made by Latin movies?",
        "question_ar": "",
        "evidence_en": "Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the most common first name?",
        "question_ar": "",
        "evidence_en": "most common first name refers to max(count(person_name))",
        "evidence_ar": "",
        "SQL": "SELECT person_name FROM person GROUP BY person_name ORDER BY COUNT(person_name) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average number of crews for a movie?",
        "question_ar": "",
        "evidence_en": "average number of crews = divide(count(person_id), COUNT(movie_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CD) AS REAL) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) AS CD FROM movie_crew GROUP BY movie_id )"
    },
    {
        "db_id": "movies_4",
        "question_en": "List all the keywords with \"christmas\" in them.",
        "question_ar": "",
        "evidence_en": "keywords with \"christmas\" in them refers to keyword_name LIKE '%christmas%'",
        "evidence_ar": "",
        "SQL": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the longest runtime of all movies?",
        "question_ar": "",
        "evidence_en": "longest runtime refers to max(runtime)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(runtime) FROM movie"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the iso code of \"Kyrgyz Republic\"?",
        "question_ar": "",
        "evidence_en": "iso code refers to country_iso_code; \"Kyrgyz Republic\" refers to country_name = 'Kyrgyz Republic'",
        "evidence_ar": "",
        "SQL": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the overview for the movie \"The Pacifier\".",
        "question_ar": "",
        "evidence_en": "movie \"The Pacifier\" refers to title = 'The Pacifier'",
        "evidence_ar": "",
        "SQL": "SELECT overview FROM movie WHERE title = 'The Pacifier'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies were produced by \"Eddie Murphy Productions\"?",
        "question_ar": "",
        "evidence_en": "produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List all the actors who have played characters with \"captain\" in their names.",
        "question_ar": "",
        "evidence_en": "List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the most common keyword among all the movies released in 2006?",
        "question_ar": "",
        "evidence_en": "most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'",
        "evidence_ar": "",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies have \"vi\" as their language code?",
        "question_ar": "",
        "evidence_en": "\"vi\" as their language code refers to language_code = 'vi'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie_languages AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_code = 'vi'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the third least common genre?",
        "question_ar": "",
        "evidence_en": "least common genre refers to min(count(genre_name))",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the original language of the movie with the tagline \"An offer you can't refuse.\"?",
        "question_ar": "",
        "evidence_en": "language refers to language_name; original language refers to language_role = 'Original'",
        "evidence_ar": "",
        "SQL": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.tagline LIKE 'An offer you can%t refuse.'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the average revenue of all the French movies.",
        "question_ar": "",
        "evidence_en": "French movies refers to country_name = 'France'; average revenue = AVG(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List all the unspecified gender characters.",
        "question_ar": "",
        "evidence_en": "characters refers to character_name; gender = 'Unspecified'",
        "evidence_ar": "",
        "SQL": "SELECT T1.character_name FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T2.gender = 'Unspecified'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What are the top 5 most popular movie directors?",
        "question_ar": "",
        "evidence_en": "directors refers to job = 'Director'; most popular refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the film with the highest budget in each genre.",
        "question_ar": "",
        "evidence_en": "highest budget refers to max(budget); each genre refers to genre_name; film also means movie; list the film refers to title of movie",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the title of the movie with the most keywords?",
        "question_ar": "",
        "evidence_en": "most keywords refers to max(count(keyword_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which department has the most people?",
        "question_ar": "",
        "evidence_en": "department refers to department_name; most people refers to max(count(department_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What percentage of films are made in the US?",
        "question_ar": "",
        "evidence_en": "films' and 'movies' are synonyms; made in the US refers to country_iso_code = 'US'; percentage = divide(sum(country_id) when country_iso_code = 'US', count(country_id)) * 100 as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.COUNTry_iso_code = 'US' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average ratio between female and male actors in a movie?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female'；male refers to gender = 'Male'; average ratio = divide(divide(sum(gender_id) when gender = 'Female', sum(gender_id) when gender = 'Male'), count(movie_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the movies released in 1945.",
        "question_ar": "",
        "evidence_en": "List the movies refers to title; released in 1945 refers to release_date LIKE '1945%'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the ID and ISO code of Belgium.",
        "question_ar": "",
        "evidence_en": "ID refers to country_id; ISO code refers to country_iso_code; Belgium refers to country_name = 'Belgium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNTry_id, COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Belgium'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the character names played by Catherine Deneuve.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Catherine Deneuve'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the movies in the Somali language.",
        "question_ar": "",
        "evidence_en": "List the movies refers to title; Somali language refers to language_name = 'Somali'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the release date and language of the most popular movie.",
        "question_ar": "",
        "evidence_en": "language refers to langauge_name; most popular movie refers to max(popularity)",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the original language of the \"Four Rooms\" movie?",
        "question_ar": "",
        "evidence_en": "language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'",
        "evidence_ar": "",
        "SQL": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the character names in the \"Open Water\" movie.",
        "question_ar": "",
        "evidence_en": "\"Open Water\" movie refers to title = 'Open Water'",
        "evidence_ar": "",
        "SQL": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie?",
        "question_ar": "",
        "evidence_en": "main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the names of camera supervisors in the crew.",
        "question_ar": "",
        "evidence_en": "names refers to person_name; camera supervisors refers to job = 'Camera Supervisor';",
        "evidence_ar": "",
        "SQL": "SELECT T1.person_name FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T2.job = 'Camera Supervisor'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the job titles of Sally Menke in the crew.",
        "question_ar": "",
        "evidence_en": "job titles refers to job",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Sally Menke'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie.",
        "question_ar": "",
        "evidence_en": "names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the titles and revenues of the movies produced by the DreamWorks company.",
        "question_ar": "",
        "evidence_en": "produced by the DreamWorks company refers to company_name = 'DreamWorks'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.revenue FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many movies were produced in Canada?",
        "question_ar": "",
        "evidence_en": "produced in Canada refers to country_name = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie_id) FROM COUNTry AS T1 INNER JOIN production_COUNTry AS T2 ON T1.COUNTry_id = T2.COUNTry_id WHERE T1.COUNTry_name = 'Canada'"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the genres of Forrest Gump movie.",
        "question_ar": "",
        "evidence_en": "genres refers to genre_name; Forrest Gump movie refers to title = 'Forrest Gump'",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Provide the production companies of the movie that has over 35% average running time per movie in 2016.",
        "question_ar": "",
        "evidence_en": "production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35",
        "evidence_ar": "",
        "SQL": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100"
    },
    {
        "db_id": "movies_4",
        "question_en": "Find the difference in percentage of the movies under keywords of \"woman director\" and \"independent film\".",
        "question_ar": "",
        "evidence_en": "under keywords of \"woman director\" and \"independent film\" refers to keyword_name = 'woman director' and keyword_name = 'independent film'; difference in percentage = divide(subtract(count(movie_id) when keyword_name = 'woman director', count(movie_id) when keyword_name = 'independent film'), count(movie_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which genre does the movie Dancer in the Dark belong to?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'",
        "evidence_ar": "",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many adventure movies are there that were released in 2000?",
        "question_ar": "",
        "evidence_en": "adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which movies did the company Paramount Pictures produce in 2000?",
        "question_ar": "",
        "evidence_en": "Which movies refers to title; company Paramount Pictures refers to company_name = 'Paramount Pictures'; in 2000 refers to release_date LIKE '2000%'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Paramount Pictures' AND CAST(STRFTIME('%Y', T3.release_date) AS INT) = 2000"
    },
    {
        "db_id": "movies_4",
        "question_en": "What keyword can the user use to search for the movie Finding Nemo?",
        "question_ar": "",
        "evidence_en": "What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'",
        "evidence_ar": "",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Name the horror movies with positive ratings greater than 7.",
        "question_ar": "",
        "evidence_en": "Name the horror movies refers to title where genre_name = 'horror'; positive ratings greater than 7 refers to vote_average > 7",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many production companies made more than 150 movies?",
        "question_ar": "",
        "evidence_en": "more than 150 movies refers to COUNT(company_name) > 150",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T1.company_name) > 150 )"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the role of Mark Hammel?",
        "question_ar": "",
        "evidence_en": "role refers to job",
        "evidence_ar": "",
        "SQL": "SELECT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Mark Hammel'"
    },
    {
        "db_id": "movies_4",
        "question_en": "How many main actors are there in the movie Pirates of the Caribbean: At World's End?",
        "question_ar": "",
        "evidence_en": "main actors refers to gender = 'male' and min(cast_order); Pirates of the Caribbean: At World's End refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which movies have the participation of actor Harrison Ford?",
        "question_ar": "",
        "evidence_en": "Which movies refers to title; actor refers to person_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Harrison Ford'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Which character did Orlando Bloom play in the movie Pirates of the Caribbean: The Curse of the Black Pearl?",
        "question_ar": "",
        "evidence_en": "Which character refers to character_name; movie Pirates of the Caribbean: The Curse of the Black Pearl refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'",
        "evidence_ar": "",
        "SQL": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'"
    },
    {
        "db_id": "movies_4",
        "question_en": "What is the average number of horror movies among all movies genre?",
        "question_ar": "",
        "evidence_en": "horror movies refers to genre_name = 'horror'; average number = divide(sum(movie_id) when genre_name = 'horror', count(movie_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.genre_name = 'Horror' THEN T1.movie_id ELSE NULL END) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id"
    },
    {
        "db_id": "movies_4",
        "question_en": "List the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".",
        "question_ar": "",
        "evidence_en": "List the names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'"
    },
    {
        "db_id": "movies_4",
        "question_en": "Calculate the average income made by movies using the keyword \"paris\". List the title of the movies.",
        "question_ar": "",
        "evidence_en": "income refers to revenue; keyword \"paris\" refers to keyword_name = 'paris'; average income = AVG(revenue)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.revenue), T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'paris'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many English language codes whose comments for the method are in the XML format?",
        "question_ar": "",
        "evidence_en": "English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the task of the method whose tokenized name is \"online median filter test median window filling\"?",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'online median filter test median window filling'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution.",
        "question_ar": "",
        "evidence_en": "highest sampling time refers to max(SampledAt); id number of the solution refers to SolutionId;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many followers do the most followed repository on Github have? Give the github address of the repository.",
        "question_ar": "",
        "evidence_en": "more forks refers to more people follow this repository; most followed repository refers to max(Forks);  the github address of the repository refers to Url;",
        "evidence_ar": "",
        "SQL": "SELECT Forks, Url FROM Repo WHERE Forks = ( SELECT MAX(Forks) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the id of the repository with the highest number of solution path?",
        "question_ar": "",
        "evidence_en": "highest number of solution path refers to max(count(Path)); id of the repository refers to RepoId",
        "evidence_ar": "",
        "SQL": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the most liked repository? Indicate its github address and the amount of stars it has received.",
        "question_ar": "",
        "evidence_en": "more stars mean more people like this repository; most liked refers to max(Stars); the github address of repository refers to Url;",
        "evidence_ar": "",
        "SQL": "SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the name of the solution path with the highest processed time?",
        "question_ar": "",
        "evidence_en": "highest processed time refers to max(ProcessedTime);",
        "evidence_ar": "",
        "SQL": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How much is the processed time of downloading the most popular repository?",
        "question_ar": "",
        "evidence_en": "more watchers mean that this repository is more popular;",
        "evidence_ar": "",
        "SQL": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?",
        "question_ar": "",
        "evidence_en": "github address of repository refers to Url;",
        "evidence_ar": "",
        "SQL": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.",
        "question_ar": "",
        "evidence_en": "longest amount of processed time refers to max(ProcessedTime); the repository can be implemented without needs of compilation refers to WasCompiled = 1;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?",
        "question_ar": "",
        "evidence_en": "Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "In the \"https://github.com/wallerdev/htmlsharp.git\", give all the linearized sequenced of API calls.",
        "question_ar": "",
        "evidence_en": "linearized sequenced of API calls refers to ApiCalls; 'https://github.com/wallerdev/htmlsharp.git' is url of repository",
        "evidence_ar": "",
        "SQL": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solution paths are there inside the 2nd most popular repository?",
        "question_ar": "",
        "evidence_en": "more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?",
        "question_ar": "",
        "evidence_en": "average processed time = avg(Solution.ProcessedTime);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the full comment on the method whose solution path is \"bmatzelle_nini\\Source\\Nini.sln\" with a tokenized name of \"alias text add alias\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?",
        "question_ar": "",
        "evidence_en": "linearized sequenced of API calls refers to ApiCalls;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?",
        "question_ar": "",
        "evidence_en": "needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How much is the processed time of the method whose tokenized name is \"about box1 dispose\"? Indicate the language of the method.",
        "question_ar": "",
        "evidence_en": "language refers to Lang;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "In \"maxild_playground\\Playground.sln\", what is the time of sampling for the method \"GitHubRepo.Cli.GitHubClientWrapper.GetReleases\"?",
        "question_ar": "",
        "evidence_en": "the time of sampling refers to SampledAt; 'maxild_playground\\Playground.sln' is the path of a solution",
        "evidence_ar": "",
        "SQL": "SELECT T2.SampledAt FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maxild_playgroundPlayground.sln' AND T2.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the language of the method used in the solution path \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"?",
        "question_ar": "",
        "evidence_en": "language refers to Lang;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What's the task of the method whose tokenized name is \"html parser feed\"?",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'html parser feed'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Are the comments for the method \"HtmlSharp.HtmlParser.Feed\" in XML format?",
        "question_ar": "",
        "evidence_en": "the comment for this method is not XML refers to CommentsXML = 0; the comments for this method is XML refers to CommentsXML = 1",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Which method has the summary \"Write a command to the log\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Method WHERE Summary = 'Write a command to the log'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solutions contain files found within the repository most people like?",
        "question_ar": "",
        "evidence_en": "more stars mean more people like this repository; most people like refers to max(Stars);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please list the path of the solution that contains files found within the repository most people like.",
        "question_ar": "",
        "evidence_en": "more stars mean more people like this repository; most people like refers to max(Stars);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the github address of the repository that contains files used by solution ID12?",
        "question_ar": "",
        "evidence_en": "github address refers to Url;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the solutions that contain files within the repository followed by over 1000 people, how many of them can be\nimplemented without needs of compilation?",
        "question_ar": "",
        "evidence_en": "followed by over 1000 people refers to Forks >1000; can be\nimplemented without needs of compilation refers to WasCompiled = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Which solution contains files within a more popular repository, the solution ID18 or solution ID19?",
        "question_ar": "",
        "evidence_en": "more watchers mean that this repository is more popular;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be\ncompiled if user wants to implement it?",
        "question_ar": "",
        "evidence_en": "longest processed time refers to max(Solution.ProcessedTime); needs to be compiled if user wants to implement it refers to WasCompiled = 0；",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the processed time to download the repository whose files are contained in the solution with the path \"jeffdik_tachy\\src\\Tachy.sln\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ProcessedTime FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'jeffdik_tachysrcTachy.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please give the url of the repository whose files are contained in solution ID 9?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 9"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please list all the paths of the solutions containing files within the repository whose url is \"https://github.com/maxild/playground.git\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000?",
        "question_ar": "",
        "evidence_en": "over 200 likes refers to Stars > 200; ProcessedTime<636439500080712000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please list the IDs of the solutions that contain files within the top 3 followed repositories.",
        "question_ar": "",
        "evidence_en": "more forks refers to more people follow this repository;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd?",
        "question_ar": "",
        "evidence_en": "average time = avg(ProcessedTime)；",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19?",
        "question_ar": "",
        "evidence_en": "followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn\"?",
        "question_ar": "",
        "evidence_en": "language refers to Lang；",
        "evidence_ar": "",
        "SQL": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Show the full Comment of the method \"DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List the summary of the method \"Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Give the tokenized name for the method \"Supay.Irc.Messages.KnockMessage.GetTokens\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many stars does the repository of the solution No. 45997 have?",
        "question_ar": "",
        "evidence_en": "repository of solution no. refers to Id",
        "evidence_ar": "",
        "SQL": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the repository which got '8094' Stars, how many solutions does it contain?",
        "question_ar": "",
        "evidence_en": "repository refers to Repo.Id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 8094"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the method which got the tokenized name as 'interp parser expr', what is the processed time for its solution?",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; NameTokenized = 'interp parser expr'; processed time for its solution refers to ProcessedTime;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'interp parser expr'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the repository number for the solution of method \"SCore.Poisson.ngtIndex\"?",
        "question_ar": "",
        "evidence_en": "repository number refers to RepoId; method refers to Name; Name = ‘SCore.Poisson.ngtIndex’",
        "evidence_ar": "",
        "SQL": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Tell the path of the solution for the method \"ExportToRTF.RTFStyleSheet.H6Write\".",
        "question_ar": "",
        "evidence_en": "path of the solution refers to Path; method refers to Name; Name = 'ExportToRTF.RTFStyleSheet.H6Write';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'ExportToRTF.RTFStyleSheet.H6Write'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the repository with '8094' watchers , how many solutions does it contain?",
        "question_ar": "",
        "evidence_en": "repository refers to Repo.Id and RepoId; solutions a repository contains refers to Solution.Id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Give the repository Url of the one with most solutions.",
        "question_ar": "",
        "evidence_en": "repository URL refers to Url; repository Url with most solutions refers to MAX(COUNT(Solution.Id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solutions does the repository which has 1445 Forks contain?",
        "question_ar": "",
        "evidence_en": "solutions refers to Solution.Id; repository refers to Repository.Id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among all the solution of the 'zh-cn' methods, which path is most often used?",
        "question_ar": "",
        "evidence_en": "solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Give the number of watchers that the repository of the solution No. 338082 have.",
        "question_ar": "",
        "evidence_en": "number of watchers refers to Watchers; solution number refers to Solution.Id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?",
        "question_ar": "",
        "evidence_en": "repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Show the solution path for the method \"Mosa.Platform.x86.Instructions.IMul.EmitLegacy\"?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; NameTokenized = 't jadwal entity get single mpic'; path time for its solution refers to ProcessedTime;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Give the repository ID for the solution of method \"Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal\".",
        "question_ar": "",
        "evidence_en": "repository ID refers to RepoID; method refers to Name; Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the method has the summary of \"Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.\", what is its solution path?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Summary = 'Refetches the Entity FROM the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Give the number of solutions that the repository which has 3060 Stars contains.",
        "question_ar": "",
        "evidence_en": "solutions refers to Solution.Id; repository refers to Repository.Id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "For the solution of the most 'sw' methods, what is its path?",
        "question_ar": "",
        "evidence_en": "solution refers to SolutionId; sw refers to Lang = 'sw'; solution with the most 'sw' methods refers to MAX(COUNT(Lang = 'sw'));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many percent more of the watchers for the repository of solution No.83855 than No.1502?",
        "question_ar": "",
        "evidence_en": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 83855), SUM(Solution.Id = 1502)), 100)), SUM(Soltution.Id = 1502);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Id = 83855 THEN T1.Watchers ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many percent more of the stars for the repository of solution No.51424 than No.167053?",
        "question_ar": "",
        "evidence_en": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 51424), SUM(Solution.Id = 167053)), 100)), SUM(Solution.Id = 167053);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Id = 51424 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many percent more of the Forks for the repository of solution No.53546 than No.1502?",
        "question_ar": "",
        "evidence_en": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 53546), SUM(Solution.Id = 1502)), 100)), SUM(Solution.Id = 1502);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the methods with a solution with a \"636449700980488000\" processed time.",
        "question_ar": "",
        "evidence_en": "methods refers to Name; solution refers to SolutionId;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"?",
        "question_ar": "",
        "evidence_en": "solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the total processed time of all solutions from the repository with the most forks?",
        "question_ar": "",
        "evidence_en": "total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the path of solution from all the \"it\" lang code method.",
        "question_ar": "",
        "evidence_en": "path of the solution refers to Path; solution refers to Solution.Id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the path of solution of \"spinachLexer.mT__55\" method?",
        "question_ar": "",
        "evidence_en": "path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What are the \"en\" methods with solutions from repository \"1093\"",
        "question_ar": "",
        "evidence_en": "en methods refers to lang = 'en'; solution refers to Solution.Id; repository refers to RepoId; RepoId = 1093;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.id FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 1093 AND T2.Lang = 'en'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What are the paths of solutions in repository \"https://github.com/ecoffey/Bebop.git\"",
        "question_ar": "",
        "evidence_en": "path of solutions refers to Path; https://github.com/ecoffey/Bebop.git refers to Url; Url = 'https://github.com/ecoffey/Bebop.git';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/ecoffey/Bebop.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the ids of repositories for solutions with \"ro\" methods.",
        "question_ar": "",
        "evidence_en": "ids of repositories refers to RepoId; ro refers to lang = 'ro';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the repository id of the method with tokenized name \"crc parameters get hash code\"?",
        "question_ar": "",
        "evidence_en": "repository id refers to RepoId; tokenized name refers to NameTokenized; NameTokenized = 'crc parameters get hash code';",
        "evidence_ar": "",
        "SQL": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many methods with solutions with path 'maravillas_linq-to-delicious\\tasty.sln'?",
        "question_ar": "",
        "evidence_en": "solution refers to SolutionId;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\\tasty.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the solutions ids of the repository with \"636430969128176000\" processed time",
        "question_ar": "",
        "evidence_en": "solution ids refers to Solution.Id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = 636430969128176000"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the url for repository that has the longest processed time solution?",
        "question_ar": "",
        "evidence_en": "Url for repository refers to Url; longest processed toe trefers to MAX(ProcessedTime);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the solutions of repositories with the Forks higher than half of the watchers.",
        "question_ar": "",
        "evidence_en": "solutions refers to Solution.Id; forks higher than half of the watchers refers tto Forks>(Watchers/2);;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the percentage of Forks to Stars of repository for solution \"104086\"?",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the id of the respository that the most people like.",
        "question_ar": "",
        "evidence_en": "repository that the most people like refers to MAX(Stars);",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the solution's path of method \"HtmlSharp.HtmlParser.Feed\"?",
        "question_ar": "",
        "evidence_en": "solution's path refers to Path; method refers to Name; Name = 'HtmlSharp.HtmlParser.Feed';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'HtmlSharp.HtmlParser.Feed'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the number of forks that the repository of the solution 35 have.",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.Id; Solution.Id = 35;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the id of the solution whose repository has the most watchers.",
        "question_ar": "",
        "evidence_en": "id of the solution refers to Solution.Id; repository has the most watchers refers to MAX(Watchers);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the number of stars that the repository of the solution 20 have.",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.ID; Solution.Id = 20;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 20"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled.",
        "question_ar": "",
        "evidence_en": "method refers to Name; solution refers to Solution.Id; Solution.Id = 1; solution needs to be compiled refers to WasCompiled = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SolutionId) , CASE WHEN T1.WasCompiled = 0 THEN 'Needs' ELSE 'NoNeeds' END needToCompile FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format?",
        "question_ar": "",
        "evidence_en": "comment is XML format refers to CommentIsXml = 1; solution needs to be compiled refesr to WasCompiled = 0; percentage = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please list the names of methods with the solution path \"wallerdev_htmlsharp\\HtmlSharp.sln\".",
        "question_ar": "",
        "evidence_en": "name of the methods refers to Name; solution path refers to Path; Path = 'wallerdev_htmlsharp\\HtmlSharp.sln';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the percentage of respositories that receive more than 2,000 stars?",
        "question_ar": "",
        "evidence_en": "stars>2000; percentage = DIVIDE(MULTIPLY(COUNT(Stars>2000), 100), COUNT(Id));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the url of solution 1?",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.Id; Solution.Id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the id of the respository that received the most forks among the respositories that receive 21 stars.",
        "question_ar": "",
        "evidence_en": "repository that received the most forks refers to MAX(Forks);",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM Repo WHERE Stars = 21 AND Forks = ( SELECT MAX(Forks) FROM Repo WHERE Stars = 21 )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What the percentage of the english methods among the methods whose comments is XML format?",
        "question_ar": "",
        "evidence_en": "english methods refers to lang = 'en'; comment is XML format refers to CommentIsXml = 1;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the path of solution of method whose tokenized name is html parser feed.",
        "question_ar": "",
        "evidence_en": "path of solution refers to Path; method refers to Name; tokenized name refers to NameTokenized; Name = ''html parser feed';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the solution id of the respository among the respository that receive 238 forks.",
        "question_ar": "",
        "evidence_en": "solution id of the repository refers to solution.Id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the english methods,please list the tokenized names of methods whose solutions need to be compiled.",
        "question_ar": "",
        "evidence_en": "english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;",
        "evidence_ar": "",
        "SQL": "SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solutions whose repository's stars are a third more than forks?",
        "question_ar": "",
        "evidence_en": "solutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide the path of solution of method whose full comment is Feeds data into the parser.",
        "question_ar": "",
        "evidence_en": "path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Among the repository \"3\", how many methods whose comments is XML format?",
        "question_ar": "",
        "evidence_en": "repository refers to RepoId; RepoId = 3; method refers to Name; method whose comment is XML format refers to CommentIsXml = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the percentage of solutions for the method that needs to be compiled in the English methods?",
        "question_ar": "",
        "evidence_en": "method that needs to be compiled refers to WasCompiled = 0; English method refers to Lang = 'en'; percentage of solutions = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Lang) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'en'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many more stars in percentage are there for the repository of solution \"1\" than solution \"2\"?",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.Id; Solution.Id = 1 OR 2; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 1), SUM(Solution.Id = 2)), 100)), SUM(Solution.Id = 2);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solutions are there whose respositories received the number of stars more than one third of the number of forks?",
        "question_ar": "",
        "evidence_en": "number of solutions are there whose repositories received the number of stars more than one third of the number of forks refers to Stars>DIVIDE(Forks, 3);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars > CAST(T1.Forks AS REAL) / 3"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the task of method number 2?",
        "question_ar": "",
        "evidence_en": "task of the method refers to the second part of the Name after the \".\"; method number refers to Method_100k.Id; Method_100k.Id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Id = 2"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What format does the method number 8's comment have?",
        "question_ar": "",
        "evidence_en": "format refers CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 8;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please provide a link to the most well-known repository's Github address.",
        "question_ar": "",
        "evidence_en": "link refers to Url; well-known repository refers to MAX(Watchers);",
        "evidence_ar": "",
        "SQL": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the task of the method that is in the Czech language?",
        "question_ar": "",
        "evidence_en": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; Czech language refers to Lang = 'cs'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the solution path for method number 3?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the language of method number 28 that can be found in the repository number 3?",
        "question_ar": "",
        "evidence_en": "language of method refers to Lang; method number refers to Method_100k.Id; Method_100k.Id = 28; repository number refers to RepoId; RepoID = 3;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is solution 1's processing time and how many methods have been using this solution?",
        "question_ar": "",
        "evidence_en": "solution refers to Solution.Id and SolutionId; Solution.Id = 1; SolutionId = 1; processing time refers to ProcessedTime; methods refers to Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many methods in the same repository share a tokenized name that begins with \"query language...\"?",
        "question_ar": "",
        "evidence_en": "methods refers to Name; tokenized name refers to NameTokenized; NameTokenized LIKE 'query language%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Please state the API calls for method number 10 and its intended course of action.",
        "question_ar": "",
        "evidence_en": "method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many methods in repository 150 did not have a comment and a summary?",
        "question_ar": "",
        "evidence_en": "methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the comment format of method number 50 with the solution path \"managedfusion_managedfusion\\ManagedFusion.sln\"?",
        "question_ar": "",
        "evidence_en": "comment format refers to CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 50; solution path refers to Path; Path = 'managedfusion_managedfusion\\ManagedFusion.sln';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN T2.CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 50 AND T1.Path = 'managedfusion_managedfusionManagedFusion.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the task method of the tokenized name \"string extensions to pascal case\n\"?",
        "question_ar": "",
        "evidence_en": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; tokenized name refers to NameTokenized; NameTokenized = 'string extensions to pascal case';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'string extensions to pascal case'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Provide the tokenized name of the method \"Sky.Excel.ExcelBook.TypeConvert\".",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';",
        "evidence_ar": "",
        "SQL": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many path does the github address \"https://github.com/jeffdik/tachy.git\" have?",
        "question_ar": "",
        "evidence_en": "github address refers to Url; Url = 'https://github.com/jeffdik/tachy.git';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List 5 github address that the solutions can be implemented without the need of compilation.",
        "question_ar": "",
        "evidence_en": "github address refers to Url; solution can be implemented without the need of compliation refers to WasCompiled = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.WasCompiled = 1 LIMIT 5"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What are the solution path of the tokenized name \"matrix multiply\"?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path; tokenized name refers to NameTokenized; NameTokenized = 'matrix multiply';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many XML format does the github address \"https://github.com/dogeth/vss2git.git\" have?",
        "question_ar": "",
        "evidence_en": "Xml format refers to CommentisXml, github address refers to Url; Url = 'https://github.com/dogeth/vss2git.git';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.CommentIsXml) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/dogeth/vss2git.git' AND T3.CommentIsXml = 1"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List 5 solution path that has sampling time of 636431758961741000.",
        "question_ar": "",
        "evidence_en": "solution path refers to Path; sampling time refers to SampledAt; SampledAt = '636431758961741000';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the github address of the solution path \"joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln\"?",
        "question_ar": "",
        "evidence_en": "github address refers to Url; solution path refers to Path; Path = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the method name of the solution path \"graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln\n\".",
        "question_ar": "",
        "evidence_en": "method name refers to Name; solution path refers to Path; Path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "List all the tokenized name of the solution path \"jurney_P4Backup\\P4Backup\\P4Backup.sln\n\".",
        "question_ar": "",
        "evidence_en": "tokenized name refers to NameTokenized; solution path refers to Path; Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'jurney_P4BackupP4BackupP4Backup.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "Provide the github address with the summary of method \"A test for Decompose\n\".",
        "question_ar": "",
        "evidence_en": "github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many liked by people does the solution path \"ninject_Ninject\\Ninject.sln\n\" have?",
        "question_ar": "",
        "evidence_en": "how many liked by people refers to Stars; solution path refers to Path; Path = 'ninject_Ninject\\Ninject.sln';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?",
        "question_ar": "",
        "evidence_en": "solution path refers to Path;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "What is the average processed time of the solution with a repository of 254 likes, 88 followers, and 254 watchers?",
        "question_ar": "",
        "evidence_en": "average processed time = AVG(ProcessedTime);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 254 AND T1.Forks = 88 AND T1.Watchers = 254"
    },
    {
        "db_id": "codebase_comments",
        "question_en": "How many language code of method is used for the github address \"https://github.com/managedfusion/managedfusion.git\n\"?",
        "question_ar": "",
        "evidence_en": "language code of method refers to Lang; github address refers to Url; Url = 'https://github.com/managedfusion/managedfusion.git';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'"
    },
    {
        "db_id": "trains",
        "question_en": "How many trains are there that run in the east direction?",
        "question_ar": "",
        "evidence_en": "east is a direction",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM trains WHERE direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "How many cars are there on train no.1?",
        "question_ar": "",
        "evidence_en": "train no.1 refers to train_id = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cars WHERE train_id = 1"
    },
    {
        "db_id": "trains",
        "question_en": "What is the shape of the tail car on train no.1?",
        "question_ar": "",
        "evidence_en": "train no.1 refers to train_id = 1; tail car refers to position = 4",
        "evidence_ar": "",
        "SQL": "SELECT shape FROM cars WHERE train_id = 1 AND position = 4"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the IDs of all the trains with at least one car in a non-regular shape.",
        "question_ar": "",
        "evidence_en": "non-regular shape refers to shape in ('elipse', 'bucket')",
        "evidence_ar": "",
        "SQL": "SELECT train_id FROM cars WHERE shape IN ('elipse', 'bucket') GROUP BY train_id"
    },
    {
        "db_id": "trains",
        "question_en": "How many cars on train no.1 have the roof open?",
        "question_ar": "",
        "evidence_en": "train no. 1 refers to train_id = 1; roof open refers to roof = 'none'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cars WHERE train_id = 1 AND roof = 'none'"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the IDs of all the cars on train no.1 that have 2 wheels.",
        "question_ar": "",
        "evidence_en": "train no.1 refers to train_id = 1; 2 wheels refers to wheels = 2",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?",
        "question_ar": "",
        "evidence_en": "non-regular shape refers to shape in ('elipse', 'bucket')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars.",
        "question_ar": "",
        "evidence_en": "less than 4 cars refers to carsNum < 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the IDs of all the cars with double sides on trains that run in the west direction.",
        "question_ar": "",
        "evidence_en": "double sides on trains refers to sides = 'double'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains that run in the east direction, how many of them have more than 2 long cars?",
        "question_ar": "",
        "evidence_en": "more than 2 long cars refers to longCarsNum > 2",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.longCarsNum > 2 THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS longCarsNum FROM cars WHERE len = 'long' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'west'"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the directions in which the trains with at least one empty-loaded car run.",
        "question_ar": "",
        "evidence_en": "at least one empty-loaded car run refers to load_num = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0"
    },
    {
        "db_id": "trains",
        "question_en": "In which direction does the train with an ellipse-shape car run?",
        "question_ar": "",
        "evidence_en": "shape = 'ellipse'",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'ellipse'"
    },
    {
        "db_id": "trains",
        "question_en": "What is the total number of short cars on all the trains that run in the east direction?",
        "question_ar": "",
        "evidence_en": "short cars refers to len = 'short'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the shapes of all the head cars on the trains that run in the east direction.",
        "question_ar": "",
        "evidence_en": "head cars refers to position = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape"
    },
    {
        "db_id": "trains",
        "question_en": "How many cars on a train that runs in the east direction have a flat roof?",
        "question_ar": "",
        "evidence_en": "flat roof refers to roof = 'flat'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape?",
        "question_ar": "",
        "evidence_en": "flat roof refers to roof = 'flat'; load_shape = 'circle'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat' "
    },
    {
        "db_id": "trains",
        "question_en": "Trains that run in which direction have more rectangle-shaped cars in total?",
        "question_ar": "",
        "evidence_en": "more rectangle-shaped cars refers to MAX(rectCarsNum)",
        "evidence_ar": "",
        "SQL": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC"
    },
    {
        "db_id": "trains",
        "question_en": "Please list the directions in which the trains with 4 short cars run.",
        "question_ar": "",
        "evidence_en": "short refers to len = 'short'; 4 cars run refers to position = 4",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4"
    },
    {
        "db_id": "trains",
        "question_en": "What is the average number of cars on trains that run in the east direction?",
        "question_ar": "",
        "evidence_en": "calculation = DIVIDE(count(id), count(train_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains that have at least one non-regular shaped car, what is the percentage of it running in the east direction?",
        "question_ar": "",
        "evidence_en": "non-regular shaped car refers to shape in ('bucket', 'ellipse'); calculation = MULTIPLY(DIVIDE(count(direction = 'east' then train_id)), count(train_id), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')"
    },
    {
        "db_id": "trains",
        "question_en": "How many short cars are in the shape of hexagon?",
        "question_ar": "",
        "evidence_en": "short cars refers to len = 'short'; in the shape of hexagon refers to shape = 'hexagon'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short'"
    },
    {
        "db_id": "trains",
        "question_en": "How many trains are running west?",
        "question_ar": "",
        "evidence_en": "west is a direction",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM trains WHERE direction = 'west'"
    },
    {
        "db_id": "trains",
        "question_en": "What are the load shapes of all the short ellipse cars?",
        "question_ar": "",
        "evidence_en": "short refers to len = 'short'; ellipse cars refers to shape = 'ellipse'",
        "evidence_ar": "",
        "SQL": "SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short'"
    },
    {
        "db_id": "trains",
        "question_en": "What are the ids of the train running east?",
        "question_ar": "",
        "evidence_en": "east is a direction",
        "evidence_ar": "",
        "SQL": "SELECT id FROM trains WHERE direction = 'east'"
    },
    {
        "db_id": "trains",
        "question_en": "How many wheels do the long cars have?",
        "question_ar": "",
        "evidence_en": "long cars refers to len = 'long'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(wheels) FROM cars WHERE len = 'long'"
    },
    {
        "db_id": "trains",
        "question_en": "Which direction do the majority of the trains are running?",
        "question_ar": "",
        "evidence_en": "majority of train refers to MAX(count(id))",
        "evidence_ar": "",
        "SQL": "SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains running east, how many trains have at least 4 cars?",
        "question_ar": "",
        "evidence_en": "east is a direction; at least 4 cars refers to carsNum > = 4",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4"
    },
    {
        "db_id": "trains",
        "question_en": "Which direction do most of the trains with rectangle-shaped second cars run?",
        "question_ar": "",
        "evidence_en": "most of the trains refers to MAX(count(id)); second cars refers to position = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1"
    },
    {
        "db_id": "trains",
        "question_en": "How many trains running west have double sided cars in 3rd position?",
        "question_ar": "",
        "evidence_en": "west is a direction; double sided cars refers to sides = 'double'; 3rd position refers to position = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T"
    },
    {
        "db_id": "trains",
        "question_en": "How many eastbound trains have rectangular-shaped head cars?",
        "question_ar": "",
        "evidence_en": "eastbound refers to direction = 'east'; head cars refers to position = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T2.direction = 'east' AND T1.shape = 'rectangle' GROUP BY T1.train_id)as T"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains running west, how many trains have no more than one car with an open roof?",
        "question_ar": "",
        "evidence_en": "running west refers to direction = 'west'; open roof refers to roof = 'none'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1 ) AS T2 ON T1.id = T2.train_id "
    },
    {
        "db_id": "trains",
        "question_en": "Which direction does the majority of the trains that have 3 cars are running?",
        "question_ar": "",
        "evidence_en": "3 cars refers to carsNum = 3",
        "evidence_ar": "",
        "SQL": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id HAVING carsNum = 3 ) AS T2 ON T1.id = T2.train_id GROUP BY T1.direction"
    },
    {
        "db_id": "trains",
        "question_en": "How many trains with fully loaded head cars are running east?",
        "question_ar": "",
        "evidence_en": "fully loaded refers to load_num = 3; head cars refers to position = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3"
    },
    {
        "db_id": "trains",
        "question_en": "How many cars running east have double-sided tail cars?",
        "question_ar": "",
        "evidence_en": "east is an direction; double-sided refers to sides = 'double'; tail refers to carsposition = trailPosi",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM trains AS T1 INNER JOIN cars AS T2 ON T1.id = T2.train_id INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T3 ON T1.id = T3.train_id WHERE T1.direction = 'east' AND T2.position = T3.trailPosi AND T2.sides = 'double'"
    },
    {
        "db_id": "trains",
        "question_en": "List all the directions of the trains that have empty cars.",
        "question_ar": "",
        "evidence_en": "empty cars refers to load_num = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0"
    },
    {
        "db_id": "trains",
        "question_en": "What is the direction of the train with a diamond-shaped load in its 2nd car?",
        "question_ar": "",
        "evidence_en": "2nd car refers to position = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'"
    },
    {
        "db_id": "trains",
        "question_en": "Among the trains running west, how many trains have three-wheeled, jagged roof cars?",
        "question_ar": "",
        "evidence_en": "west is an direction; three-wheeled refers to wheels = 3; jagged roof refers to roof = 'jagged'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.wheels = 3 AND T1.roof = 'jagged'"
    },
    {
        "db_id": "trains",
        "question_en": "Provide the directions for all the trains that have 2 or less cars.",
        "question_ar": "",
        "evidence_en": "2 or less cars refers to trailPosi < = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2"
    },
    {
        "db_id": "trains",
        "question_en": "What is the percentage of all the trains with at least 4 cars? List the directions of the said trains.",
        "question_ar": "",
        "evidence_en": "at least 4 cars refers to trailPosi > = 4; calculation = MULTIPLY(DIVIDE(count(trailPosi > = 4 then id), count(id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.trailPosi >= 4 THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id UNION ALL SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars t GROUP BY train_id ) AS T2 ON T1.id = T2.train_id AND T2.trailPosi >= 4"
    },
    {
        "db_id": "trains",
        "question_en": "List all the load shapes of all head cars of each train and identify which load shape has the highest number. Calculate the percentage of the trains with the said head car that are running eas",
        "question_ar": "",
        "evidence_en": "which load shape has the highest number refers to MAX(load_shape); head car refers to position = 1; east is a direction; calculation = MULTIPLY(DIVIDE(count(direction = 'east' where MAX(load_shape) where position = 1 then id), count(id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC ) AS T3 UNION ALL SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 UNION ALL SELECT (CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.id)) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_shape = ( SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars AS T WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 )"
    },
    {
        "db_id": "movie",
        "question_en": "Please list the names of the characters in the movie Look Who's Talking.",
        "question_ar": "",
        "evidence_en": "movie Look Who's Talking refers to title = 'Look Who's Talking'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'"
    },
    {
        "db_id": "movie",
        "question_en": "Which character has the longest screen time in the movie Batman?",
        "question_ar": "",
        "evidence_en": "longest screen time refers to max(screentime); movie Batman refers to title = 'Batman'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman' ORDER BY T2.screentime DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "Which actor played the role of Joker in the movie Batman?",
        "question_ar": "",
        "evidence_en": "role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'"
    },
    {
        "db_id": "movie",
        "question_en": "Please list the names of the actors who played a role in the movie Batman.",
        "question_ar": "",
        "evidence_en": "movie Batman refers to title = 'Batman'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'"
    },
    {
        "db_id": "movie",
        "question_en": "Which movie is the character Dr. Archibald 'Moonlight' Graham from?",
        "question_ar": "",
        "evidence_en": "movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Dr. Archibald ''Moonlight'' Graham'"
    },
    {
        "db_id": "movie",
        "question_en": "Please list the names of the movies starring Tom Cruise.",
        "question_ar": "",
        "evidence_en": "movie name refers to title; starring Tom Cruise refers to name = 'Tom Cruise'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'"
    },
    {
        "db_id": "movie",
        "question_en": "How many movies starring Morgan Freeman are suggested by parental guidance?",
        "question_ar": "",
        "evidence_en": "'suggested by parental guidance' refers to mpaa_rating = 'PG'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.`MPAA Rating` = 'PG'"
    },
    {
        "db_id": "movie",
        "question_en": "Among the movies starring Tom Cruise, which one of them has the best quality?",
        "question_ar": "",
        "evidence_en": "starring Tom Cruise refers to name = 'Tom Cruise'; best quality refers to max(rating)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?",
        "question_ar": "",
        "evidence_en": "played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'"
    },
    {
        "db_id": "movie",
        "question_en": "Please list the names of all the characters played by Tom Cruise.",
        "question_ar": "",
        "evidence_en": "played by Tom Cruise refers to name = 'Tom Cruise'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Character Name` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'"
    },
    {
        "db_id": "movie",
        "question_en": "Among the actors who starred in the movie Batman, which one of them is the tallest?",
        "question_ar": "",
        "evidence_en": "movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.`Height (Inches)` DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "How many movies star a male African American actor?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'Male'; African American refers to ethnicity = 'African American'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Gender = 'Male' AND T2.Ethnicity = 'African American'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the average rating of all the movies starring Tom Cruise?",
        "question_ar": "",
        "evidence_en": "starring Tom Cruise refers to name = 'Tom Cruise'; average rating = divide(sum(rating where name = 'Tom Cruise'), count(movieid where name = 'Tom Cruise'))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Rating) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'"
    },
    {
        "db_id": "movie",
        "question_en": "How much longer in percentage is the screen time of the most important character in Batman than the least important one?",
        "question_ar": "",
        "evidence_en": "most important character refers to max(screentime); least important character refers to min(screentime); movie Batman refers to title = 'Batman'; percentage = divide(subtract(max(screentime) , min(screentime)) , min(screentime)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'"
    },
    {
        "db_id": "movie",
        "question_en": "Which movie had the biggest budget? Give the name of the movie.",
        "question_ar": "",
        "evidence_en": "biggest budget refers to max(Budget); name of the movie refers to Title",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM movie ORDER BY Budget DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it?",
        "question_ar": "",
        "evidence_en": "MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted",
        "evidence_ar": "",
        "SQL": "SELECT T1.`MPAA Rating` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Peter Quill'"
    },
    {
        "db_id": "movie",
        "question_en": "Give the name of the No.1 character in the credit list from the highest rating thriller movie.",
        "question_ar": "",
        "evidence_en": "No.1 character in the credit list refers to creditOrder = '1'; highest rating refers to max(rating); thriller movie refers to Genre = 'Thriller'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "Who was the actor that played in the movie \"Batman\" with the longest screentime?",
        "question_ar": "",
        "evidence_en": "movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "How many movies has the highest networth actor acted in?",
        "question_ar": "",
        "evidence_en": "highest networth refers to max(networth)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T2.NetWorth, ',', ''), '$', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(REPLACE(NetWorth, ',', ''), '$', '') AS REAL)) FROM actor)"
    },
    {
        "db_id": "movie",
        "question_en": "Who played the character named \"Chanice Kobolowski\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Chanice Kobolowski'"
    },
    {
        "db_id": "movie",
        "question_en": "When is the birthday of the actor who played \"Sully\"?",
        "question_ar": "",
        "evidence_en": "birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Date of Birth` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Sully'"
    },
    {
        "db_id": "movie",
        "question_en": "Show the birth city of the actor who played \"Gabriel Martin\".",
        "question_ar": "",
        "evidence_en": "\"Gabriel Martin\" refers to Character Name = 'Gabriel Martin'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Birth City` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Gabriel Martin'"
    },
    {
        "db_id": "movie",
        "question_en": "Give the biography of the actor who played \"Michael Moscovitz\".",
        "question_ar": "",
        "evidence_en": "\"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Michael Moscovitz'"
    },
    {
        "db_id": "movie",
        "question_en": "How tall is the actor who played \"Lurch\"?",
        "question_ar": "",
        "evidence_en": "tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Height (Inches)` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Lurch'"
    },
    {
        "db_id": "movie",
        "question_en": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\".",
        "question_ar": "",
        "evidence_en": "No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'"
    },
    {
        "db_id": "movie",
        "question_en": "Who played the No.2 character in the credit list of the movie \"American Hustle\"?",
        "question_ar": "",
        "evidence_en": "No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'"
    },
    {
        "db_id": "movie",
        "question_en": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"?",
        "question_ar": "",
        "evidence_en": "No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`Release Date` = '2015-10-26' AND T2.creditOrder = '1'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"?",
        "question_ar": "",
        "evidence_en": "USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.`Birth Country` = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Birth Country`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the percentage of the actors that showed up in the credit list of movie \"Dawn of the Planet of the Apes\" that were born after \"1970/1/1\"?",
        "question_ar": "",
        "evidence_en": "movie \"Dawn of the Planet of the Apes\" refers to Title = 'Dawn of the Planet of the Apes'; born after \"1970/1/1\" refers to Date of Birth > '1970/1/1'; percentage = divide(count(ActorID where Date of Birth > '1970/1/1'), count(ActorID))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.`Date of Birth` > '1970-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Date of Birth`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Dawn of the Planet of the Apes'"
    },
    {
        "db_id": "movie",
        "question_en": "List down the movie ID of movie with a budget of 15000000 and a rating between 7 to 8.",
        "question_ar": "",
        "evidence_en": "a budget of 15000000 refers to Budget = 15000000; rating between 7 to 8 refers to Rating BETWEEN 7 and 8",
        "evidence_ar": "",
        "SQL": "SELECT MovieID FROM movie WHERE Rating BETWEEN 7 AND 8 AND Budget = 15000000"
    },
    {
        "db_id": "movie",
        "question_en": "In rated PG movies, how many of them released in June 1990?",
        "question_ar": "",
        "evidence_en": "rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movie WHERE `MPAA Rating` = 'PG' AND `Release Date` LIKE '1990-06%'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the name of male and white actor with actor ID 439?",
        "question_ar": "",
        "evidence_en": "male refers to Gender = 'Male'; white refers to Ethnicity = 'White'",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White'"
    },
    {
        "db_id": "movie",
        "question_en": "Among the actors born in New York City, list the genre of their movie with a rating greater than 5.",
        "question_ar": "",
        "evidence_en": "born in New York City refers to Birth City = 'New York City'; rating greater than 5 refers to Rating > 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.`Birth City` = 'New York City' AND T1.Rating > 5"
    },
    {
        "db_id": "movie",
        "question_en": "In romantic movies, how many of them starred by John Travolta?",
        "question_ar": "",
        "evidence_en": "romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'"
    },
    {
        "db_id": "movie",
        "question_en": "List the height and net worth of actors starred in Three Men and a Little Lady.",
        "question_ar": "",
        "evidence_en": "Three Men and a Little Lady refers to Title = 'Three Men and a Little Lady'",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Height (Inches)`, T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the genre of PG rated movie starred by the actor with highest net worth?",
        "question_ar": "",
        "evidence_en": "PG rated refers to MPAA Rating = 'PG';  highest net worth refers to max(NetWorth)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`MPAA Rating` = 'PG' ORDER BY CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall?",
        "question_ar": "",
        "evidence_en": "Misery refers to Title = 'Misery'; height ranging from 60 to 70 inches refers to Height (Inches) BETWEEN 60 and 70",
        "evidence_ar": "",
        "SQL": "SELECT T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Misery' AND T3.`Height (Inches)` BETWEEN 60 AND 70 AND T3.Gender = 'Male'"
    },
    {
        "db_id": "movie",
        "question_en": "Count the male actors born in USA that starred in Ghost.",
        "question_ar": "",
        "evidence_en": "male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.`Birth Country` = 'USA'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the MPAA rating and title of the movie starred by Leonardo DiCaprio with highest budget?",
        "question_ar": "",
        "evidence_en": "starred by Leonardo DiCaprio refers to Name = 'Leonardo Dicaprio'; highest budget refers to max(Budget)",
        "evidence_ar": "",
        "SQL": "SELECT T1.`MPAA Rating`, T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1"
    },
    {
        "db_id": "movie",
        "question_en": "Among the actors starred in Die Hard 2, list their net worth and birth date of actors with a height between 60 to 65.",
        "question_ar": "",
        "evidence_en": "Die Hard 2 refers to Title = 'Die Hard 2'; height between 60 to 65 refers to Height (Inches) BETWEEN 60 AND 65",
        "evidence_ar": "",
        "SQL": "SELECT T3.NetWorth, T3.`Date of Birth` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.`Height (Inches)` BETWEEN 60 AND 65"
    },
    {
        "db_id": "movie",
        "question_en": "List the runtime of movies starred by an African-American actor born on December 28, 1954.",
        "question_ar": "",
        "evidence_en": "African-American refers to Ethnicity = 'African American'; born on December 28 1954 refers to Date of Birth = '1954-12-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.`Date of Birth` = '1954-12-28'"
    },
    {
        "db_id": "movie",
        "question_en": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062.",
        "question_ar": "",
        "evidence_en": "actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.`Character Name` = 'Don Altobello' AND T1.Genre = 'Drama'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the gross of a comedy movie with a rating lower than 7 and starred by an actor with a net worth greater than $375,000,000.00?",
        "question_ar": "",
        "evidence_en": "comedy movie refers to Genre = 'Comedy'; rating lower than 7 refers to Rating < 7; net worth greater than $375,000,000.00 refers to NetWorth > '$375,000,000.00'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'"
    },
    {
        "db_id": "movie",
        "question_en": "What is the runtime of the movie starred by Jackie Chan with a rating greater than 7?",
        "question_ar": "",
        "evidence_en": "starred by Jackie Chan refers to Name = 'Jackie Chan'; rating greater than 7 refers to Rating > 7",
        "evidence_ar": "",
        "SQL": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Jackie Chan' AND T1.Rating > 7"
    },
    {
        "db_id": "movie",
        "question_en": "Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00?",
        "question_ar": "",
        "evidence_en": "drama genre refers to Genre = 'Drama'; net worth greater than $400,000,000.00 refers to NetWorth > '$400,000,000.00'; percentage = divide(count(ActorID where NetWorth > '$400,000,000.00'), COUNT(ActorID))*100%",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 400000000 THEN 1 ELSE 0 END) - SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) < 400000000 THEN 1 ELSE 0 END) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Drama'"
    },
    {
        "db_id": "movie",
        "question_en": "List the character's name of actress born in Sherman Oaks and starred in the movie Bruce Almighty with height greater than the 50% of average height of all actors listed.",
        "question_ar": "",
        "evidence_en": "actress refers to Gender = 'Female'; born in Sherman Oaks refers to Birth City = 'Sherman Oaks'; movie Bruce Almighty refers to Title = 'Bruce Almighty'; height greater than the 50% of average height refers to Height (Inches) > multiply(avg(Height (Inches)), 0.5)",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Gender = 'Female' AND T1.Title = 'Godzilla' AND T3.`Birth City` = 'Sherman Oaks' AND T3.`Height (Inches)` * 100 > ( SELECT AVG(`Height (Inches)`) FROM actor ) * 50"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets are in English?",
        "question_ar": "",
        "evidence_en": "english is the language and refers to Lang = 'en'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Lang = 'en'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of all the tweets that are reshared.",
        "question_ar": "",
        "evidence_en": "reshared refers to Isreshare = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT text FROM twitter WHERE IsReshare = 'TRUE'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets are seen by more than 1000 unique users?",
        "question_ar": "",
        "evidence_en": "seen by more than 1000 unique users refers to Reach > 1000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets that have a positive sentiment, how many of them are posted on Thursday?",
        "question_ar": "",
        "evidence_en": "positive sentiment refers to Sentiment > 0; posted on Thursday refers to Weekday = 'Thursday'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the text of the tweet that got the most `likes`?",
        "question_ar": "",
        "evidence_en": "got the most like refers to Max(Likes)",
        "evidence_ar": "",
        "SQL": "SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list all the cities in Argentina.",
        "question_ar": "",
        "evidence_en": "\"Argentina\" is the Country",
        "evidence_ar": "",
        "SQL": "SELECT City FROM location WHERE City IS NOT NULL AND Country = 'Argentina'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets in total were posted by a user in Argentina?",
        "question_ar": "",
        "evidence_en": "\"Argentina\" is the Country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Users in which city of Argentina post the most tweets?",
        "question_ar": "",
        "evidence_en": "\"Argentina\" is the Country; post the most tweets refers to Max(Count(TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' GROUP BY T2.City ORDER BY COUNT(T1.TweetID) DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets that are reshared, how many of them are posted by a user in Buenos Aires?",
        "question_ar": "",
        "evidence_en": "reshared refers to Isreshare = 'TRUE'; 'Buenos Aires' is the City",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.IsReshare = 'TRUE'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment.",
        "question_ar": "",
        "evidence_en": "\"Buenos Aires\" is the City; positive sentiment refers to Sentiment > 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'"
    },
    {
        "db_id": "social_media",
        "question_en": "From which country is the tweet with the most likes posted?",
        "question_ar": "",
        "evidence_en": "tweet with the most likes refers to Max(Likes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Users in which country has posted more numbers of positive tweets, Argentina or Australia?",
        "question_ar": "",
        "evidence_en": "\"Argentina\" and \"Australia\" are both Country; positive tweets refers to Sentiment > 0; Country posted more number of tweets refers to Country where Max(Count(TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays?",
        "question_ar": "",
        "evidence_en": "\"Buenos Aires\" is the City; posted on Thursday refers to Weekday = 'Thursday'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the users that have posted a tweet with over 1000 likes, how many of them are male?",
        "question_ar": "",
        "evidence_en": "over 1000 likes refers to Likes > 1000; 'Male' is the Gender of user",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets have the male users posted in total?",
        "question_ar": "",
        "evidence_en": "male users refers to Gender = 'Male'; total tweets refers to Count(TweetID)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users?",
        "question_ar": "",
        "evidence_en": "seen by the most number of unique users refers to Max(Reach)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets are posted by male users in Argentina?",
        "question_ar": "",
        "evidence_en": "\"Argentina\" is the Country; male user refers to Gender = 'Male'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of all the tweets posted by male users from Buenos Aires.",
        "question_ar": "",
        "evidence_en": "\"Buenos Aires\" is the City; male user refers to Gender = 'Male'",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the average number of tweets posted by the users in a city in Argentina?",
        "question_ar": "",
        "evidence_en": "\"Argentina\" is the Country; average number of tweets in a city = Divide (Count(TweetID where Country = 'Argentina'), Count (City))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.City = 'Buenos Aires' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS avg FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina'"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets with a positive sentiment, what is the percentage of those posted by a male user?",
        "question_ar": "",
        "evidence_en": "positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; percentage = Divide (Count(TweetID where Gender = 'Male'), Count (TweetID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS per FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Sentiment > 0"
    },
    {
        "db_id": "social_media",
        "question_en": "Give the number of users who do not show their genders.",
        "question_ar": "",
        "evidence_en": "do not show their gender refers to Gender = 'Unknown'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(UserID) AS user_number FROM user WHERE Gender = 'Unknown'"
    },
    {
        "db_id": "social_media",
        "question_en": "State the number of states in the United Kingdom.",
        "question_ar": "",
        "evidence_en": "\"United Kingdom\" is the Country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(State) AS State_number FROM location WHERE Country = 'United Kingdom'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the code of Gwynedd State?",
        "question_ar": "",
        "evidence_en": "code refers to StateCode",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'"
    },
    {
        "db_id": "social_media",
        "question_en": "Give the location id of West Sussex State.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT LocationID FROM location WHERE State = 'West Sussex'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many reshared tweets are there in Texas?",
        "question_ar": "",
        "evidence_en": "reshared tweet refers to IsReshare = 'TRUE'; 'Texas' is the State",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Texas' AND T1.IsReshare = 'TRUE'"
    },
    {
        "db_id": "social_media",
        "question_en": "For the tweet which got a reach number of 547851, which country did it come from?",
        "question_ar": "",
        "evidence_en": "reach number of 547851 refers to Reach = 547851",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Reach = 547851"
    },
    {
        "db_id": "social_media",
        "question_en": "State the number of positive tweets from Ha Noi.",
        "question_ar": "",
        "evidence_en": "positive tweet refers to Sentiment > 0; 'Ha Noi' is the State",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.State = 'Ha Noi'"
    },
    {
        "db_id": "social_media",
        "question_en": "Show the text of the tweet with the highest klout from Connecticut.",
        "question_ar": "",
        "evidence_en": "highest klout refers to Max(Klout); 'Connecticut' is the State",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Connecticut' ORDER BY T1.Klout DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "How many female Twitter users are there from Wisconsin?",
        "question_ar": "",
        "evidence_en": "female users refers to Gender = 'Female'; 'Wisconsin' is the State",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the gender of the user who tweeted `tw-715909161071091712`?",
        "question_ar": "",
        "evidence_en": "\"tw-715909161071091712\" is the TweetID",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'"
    },
    {
        "db_id": "social_media",
        "question_en": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`.",
        "question_ar": "",
        "evidence_en": "\"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the gender of the user whose tweet got 535 retweets?",
        "question_ar": "",
        "evidence_en": "tweet got 535 retweets refers to RetweetCount = 535",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount = 535"
    },
    {
        "db_id": "social_media",
        "question_en": "Give the gender of the user who made the highest klout tweet on Wednesdays.",
        "question_ar": "",
        "evidence_en": "highest klout refers to Max(Klout); 'Wednesday' is the Weekday",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Weekday = 'Wednesday' ORDER BY T1.Klout DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "For the tweet which got the most likes, state the gender of the user who tweeted it.",
        "question_ar": "",
        "evidence_en": "most likes refers to Max(Likes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "State the number of tweets from Michigan on Thursdays.",
        "question_ar": "",
        "evidence_en": "\"Michigan\" is the State; 'Thursday' is the Weekday; number of tweets refers to Count(TweetID)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Weekday = 'Thursday' AND T2.State = 'Michigan'"
    },
    {
        "db_id": "social_media",
        "question_en": "Which state was the tweet `tw-685681052912873473` from? Give the state code.",
        "question_ar": "",
        "evidence_en": "tw-685681052912873473' is the TweetID",
        "evidence_ar": "",
        "SQL": "SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the percentage of male Twitter users from Florida?",
        "question_ar": "",
        "evidence_en": "\"Florida\" is the State; male user refers to Gender = 'Male'; percentage = Divide (Count(UserID where Gender = 'Male'), Count (UserID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Florida'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the percentage of the tweets from California are positive?",
        "question_ar": "",
        "evidence_en": "\"California\" is the State; positive tweet refers to Sentiment > 0; percentage = Divide (Count(TweetID where Sentiment > 0), Count (TweetID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the day of the week that tweet with ID tw-682712873332805633 was posted?",
        "question_ar": "",
        "evidence_en": "\"tw-682712873332805633\" is the TweetID; day of the week refers to Weekday",
        "evidence_ar": "",
        "SQL": "SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`?",
        "question_ar": "",
        "evidence_en": "\"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach",
        "evidence_ar": "",
        "SQL": "SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'"
    },
    {
        "db_id": "social_media",
        "question_en": "Count the total number of tweet IDs in `en`.",
        "question_ar": "",
        "evidence_en": "\"en\" is the language and refers to Lang = 'en'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Lang = 'en'"
    },
    {
        "db_id": "social_media",
        "question_en": "Is 3751 the location ID for tweet with ID tw-682714048199311366?",
        "question_ar": "",
        "evidence_en": "\"tw-682714048199311366\" is the TweetID",
        "evidence_ar": "",
        "SQL": "SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets have been posted on Wednesday?",
        "question_ar": "",
        "evidence_en": "\"Wednesday\" is the Weekday",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(TweetID) FROM twitter WHERE Weekday = 'Wednesday'"
    },
    {
        "db_id": "social_media",
        "question_en": "List down all of the texts posted on Twitter on Thursday.",
        "question_ar": "",
        "evidence_en": "\"Thursday\" is the Weekday",
        "evidence_ar": "",
        "SQL": "SELECT text FROM twitter WHERE Weekday = 'Thursday'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the gender of the user who posted a tweet with ID tw-682714583044243456?",
        "question_ar": "",
        "evidence_en": "\"tw-682714583044243456\" is the TweetID",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-682714583044243456'"
    },
    {
        "db_id": "social_media",
        "question_en": "List down the text of tweets posted by unknown gender users.",
        "question_ar": "",
        "evidence_en": "unknown gender user refers to Gender = 'Unknown'",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'"
    },
    {
        "db_id": "social_media",
        "question_en": "Calculate the total number of male tweet IDs.",
        "question_ar": "",
        "evidence_en": "\"Male\" is the Gender",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "What gender of users posted the most tweets in `en`?",
        "question_ar": "",
        "evidence_en": "\"en\" is the language and refers to Lang = 'en'; most tweet in 'en' refers to Max(Count(text where Lang = 'en'))",
        "evidence_ar": "",
        "SQL": "SELECT T.Gender FROM ( SELECT T2.Gender, COUNT( text) AS num FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'en' GROUP BY T2.Gender ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "What gender of users retweet more than 30 times?",
        "question_ar": "",
        "evidence_en": "retweet more than 30 times refers to RetweetCount > 30",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount > 30"
    },
    {
        "db_id": "social_media",
        "question_en": "How many female users reshared their tweets?",
        "question_ar": "",
        "evidence_en": "female users refers to Gender = 'Female'; reshare refers to IsReshare = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'"
    },
    {
        "db_id": "social_media",
        "question_en": "Which country's tweets collected the most likes?",
        "question_ar": "",
        "evidence_en": "country collected the most likes refers to Country where Max(Sum(Likes))",
        "evidence_ar": "",
        "SQL": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Tweet with ID tw-682723090279841798 was posted from which country?",
        "question_ar": "",
        "evidence_en": "\"tw-682723090279841798\" is the TweetID",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'"
    },
    {
        "db_id": "social_media",
        "question_en": "List down all the tweet text posted from Australia.",
        "question_ar": "",
        "evidence_en": "\"Australia\" is the Country",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Australia'"
    },
    {
        "db_id": "social_media",
        "question_en": "Write down the tweet text posted from Rawang, Selangor, Malaysia.",
        "question_ar": "",
        "evidence_en": "\"Rawang\" is the City; \"Selangor\" is the State; \"Malaysia\" is the Country",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City = 'Rawang' AND T2.State = 'Selangor' AND T2.Country = 'Malaysia'"
    },
    {
        "db_id": "social_media",
        "question_en": "Tweets that were posted from Brazil are in what languague?",
        "question_ar": "",
        "evidence_en": "\"Brazil\" is the Country; language refers to Lang",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'"
    },
    {
        "db_id": "social_media",
        "question_en": "State the country where the most positive sentiment tweets were posted.",
        "question_ar": "",
        "evidence_en": "country with the most positive sentiment tweet refers to Country where Max(Count(Sentiment > 0))",
        "evidence_ar": "",
        "SQL": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Sentiment) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Sentiment > 0 GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Calculate the total likes collected by tweets in `ru` posted by male users.",
        "question_ar": "",
        "evidence_en": "'ru' refers to Lang = 'ru'; male user refers to Gender = 'Male'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "Calculate the average number of male users who posted tweets in a week.",
        "question_ar": "",
        "evidence_en": "male user refers to Gender = 'Male'; average tweet in a week per user refers to Divide ( Divide(Count(TweetID), Count (UserID)), Divide(31, 7))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Day BETWEEN 1 AND 31"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets have a klout of over 50?",
        "question_ar": "",
        "evidence_en": "klout of over 50 refers to Klout > 50",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Klout > 50"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of all the tweets that are not in English.",
        "question_ar": "",
        "evidence_en": "not in English refers to Lang <> en'",
        "evidence_ar": "",
        "SQL": "SELECT text FROM twitter WHERE Lang != 'en'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please give the user ID of the user who has posted the most tweets.",
        "question_ar": "",
        "evidence_en": "users with the most tweet refers to UserID where Max(Count (TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(DISTINCT TweetID) DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets posted on Mondays, how many of them are reshared?",
        "question_ar": "",
        "evidence_en": "\"Monday\" is the Weekday; reshare refers to IsReshare = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet.",
        "question_ar": "",
        "evidence_en": "the most number of unique users seeing refers to Max(Reach)",
        "evidence_ar": "",
        "SQL": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3"
    },
    {
        "db_id": "social_media",
        "question_en": "How many reshared tweets have over 100 likes?",
        "question_ar": "",
        "evidence_en": "over 100 likes refers to Likes > 100; reshare tweet refers to IsReshare = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the total number of tweets sent by male users on Mondays?",
        "question_ar": "",
        "evidence_en": "male user refers to Gender = 'Male; 'Monday' is the Weekday; total number of tweet refers to Count (TweetID)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the gender of the user who has posted the tweet that got the most likes?",
        "question_ar": "",
        "evidence_en": "tweet got the most likes refers to Max(Likes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the texts of all the tweets in French posted by male users.",
        "question_ar": "",
        "evidence_en": "\"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'",
        "evidence_ar": "",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'"
    },
    {
        "db_id": "social_media",
        "question_en": "How many tweets in French were posted from Australia?",
        "question_ar": "",
        "evidence_en": "\"French\" is the language and refers to Lang = 'fr'; 'Australia' is the Country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets with a positive sentiment, how many of them were posted by male users in Australia?",
        "question_ar": "",
        "evidence_en": "tweet with positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; 'Australia' is the Country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0"
    },
    {
        "db_id": "social_media",
        "question_en": "How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?",
        "question_ar": "",
        "evidence_en": "positive sentiment tweet refers to Sentiment > 0; neutral sentiment refers to Sentiment = 0; male user refers to Gender = 'Male'; difference = Subtract (Count (TweetID where Sentiment > 0), Count (TweetID where Sentiment = 0))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'"
    },
    {
        "db_id": "social_media",
        "question_en": "From which city was the tweet with the most number of retweets posted?",
        "question_ar": "",
        "evidence_en": "tweet with most number of retweet post refers to Max(RetweetCount)",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "From which city were more tweets posted, Bangkok or Chiang Mai?",
        "question_ar": "",
        "evidence_en": "\"Bangkok\" and \"Chiang Mai\" are both City",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "db_id": "social_media",
        "question_en": "Among the tweets posted from Santa Fe state in Argentina, how many of them were posted on 31st?",
        "question_ar": "",
        "evidence_en": "\"Sante Fe\" is the State; \"Argentina\" is the Country; posted on 31st refers to Day = 31",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list the top 3 cities with the most number of tweets posted in Canada.",
        "question_ar": "",
        "evidence_en": "\"Canada\" is the Country; city with most number of tweets refers to City where Max(Count(TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT T.City FROM ( SELECT T2.City, COUNT(T1.TweetID) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Canada' GROUP BY T2.City ) T ORDER BY T.num DESC LIMIT 3"
    },
    {
        "db_id": "social_media",
        "question_en": "Please list all the cities from where tweets with neutral sentiments were posted.",
        "question_ar": "",
        "evidence_en": "neutral sentiment refers to Sentiment = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0"
    },
    {
        "db_id": "social_media",
        "question_en": "Among all the tweets sent by male users in Argentina, what is the text of the one with the most number of likes?",
        "question_ar": "",
        "evidence_en": "male user refers to Gender = 'Male'; 'Argentina' is the Country; most number of likes refers to Max(Likes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM user AS T1 INNER JOIN twitter AS T2 ON T1.UserID = T2.UserID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.Country = 'Argentina' AND T1.Gender = 'Male' ORDER BY T2.Likes DESC LIMIT 1"
    },
    {
        "db_id": "social_media",
        "question_en": "What is the average number of likes for a tweet posted by a male user on Mondays?",
        "question_ar": "",
        "evidence_en": "male user refers to Gender = 'Male'; 'Monday' is the Weekday; average number of likes = Divide (Sum(Likes), Count(TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'"
    },
    {
        "db_id": "social_media",
        "question_en": "Tweets posted from which city has a higher number of average likes, Bangkok or Chiang Mai?",
        "question_ar": "",
        "evidence_en": "\"Bangkok\" and \"Chiang Mai\" are both City; average number of like = Divide (Sum(Likes), Count(TweetID))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which course is more difficult, Intro to BlockChain or Computer Network?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; diff is higher means the course is more difficult;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Please list the names of the courses that are less important than Machine Learning Theory.",
        "question_ar": "",
        "evidence_en": "lower credit means less important;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many professors are more popular than Zhou Zhihua?",
        "question_ar": "",
        "evidence_en": "higher popularity means the professor is more popular;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the phone number of Kerry Pryor?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many research assistants does Sauveur Skyme have?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Please list the full names of all the students who are research assistants with the highest research capability.",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; the highest research capability refers to capability = 5; full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many research assistants of Ogdon Zywicki have an average salary?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; average salary refers to salary = 'med';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Please list the full names of all the students who took the course Machine Learning Theory.",
        "question_ar": "",
        "evidence_en": "full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3?",
        "question_ar": "",
        "evidence_en": "B refers to grade; GPA is an abbreviated name of Grade Point Average where over 3 refers to gpa > 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Please list the names of the courses taken by Laughton Antonio.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which student failed the course Intro to Database 2? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "If grade is NULL, it means that this student fails to pass the course; full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?",
        "question_ar": "",
        "evidence_en": "sat refers to student's satisfaction degree with the course; more satisfied refers to MAX(sat);",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the professors who have more than 3 research assistants, how many of them are male?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students who took the course Machine Learning Theory, how many of them are undergraduates?",
        "question_ar": "",
        "evidence_en": "UG is an abbreviated name of undergraduate student in which type = 'UG';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor’s ID; full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average gpa of Ogdon Zywicki's research assistants?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor’s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average satisfying degree of the course Machine Learning Theory?",
        "question_ar": "",
        "evidence_en": "sat refers to student's satisfaction degree with the course;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the number of research postgraduate students.",
        "question_ar": "",
        "evidence_en": "RPG is an abbreviated name of research postgraduate student in which type = 'RPG';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which student has the highest gpa? Give the full name.",
        "question_ar": "",
        "evidence_en": "GPA is an abbreviated name of Grade Point Average where highest GPA = MAX(gpa); full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "For the 3-credit course with the easiest difficulty, how many students get an \"A\" in that course?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; diff is higher means the course is more difficult in which easiest difficulty refers to diff = 1; 3-credit course refers to credit = '3'; get an \"A\" refers to grade = 'A' for the course;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.credit = '3' AND T2.diff = 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students took the hardest course?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; diff is higher means the course is more difficult in which hardest difficulty is expressed as diff = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which professor is Oliy Spratling working with? Give the full name.",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "For the professor who is working with Harrietta Lydford, how is his popularity?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; higher popularity means more popular; prof_id refers to professor’s ID;",
        "evidence_ar": "",
        "SQL": "SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many research assistants does the female professor with the lowest teaching ability have?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; professor with the lowest teaching ability refers to prof_id where teachability = '1';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.",
        "question_ar": "",
        "evidence_en": "professor advising more than 2 students refers to COUNT(student_id) > 2; higher teachability refers to MAX(teachingability); full name refers to f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the grade score for Rik Unsworth in \"Computer Network\".",
        "question_ar": "",
        "evidence_en": "Academic grades awarded for participation in a course are A, B, C, D and F where Grade 'A' means excellent, Grade 'B' means good, Grade 'C' means fair, Grade 'D' means poorly pass, if grade is null or empty, it means that this student fails to pass this course in which grade = NULL;",
        "evidence_ar": "",
        "SQL": "SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many courses does Alvera McQuillin take?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "State the name of research postgraduate student among Professor Zhihua Zhou's research assistants.",
        "question_ar": "",
        "evidence_en": "research postgraduate student refers to type = 'RPG'; research assistant refers to the student who serves for research where the abbreviation is RA;",
        "evidence_ar": "",
        "SQL": "SELECT T3.f_name, T3.l_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Zhihua' AND T3.type = 'RPG' AND T1.last_name = 'Zhou'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Provide the number of students enrolled in the \"Statistical Learning\" course.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Statistical learning'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Who were the students who failed the course \"Applied Deep Learning\"? Give the full name.",
        "question_ar": "",
        "evidence_en": "If grade is null or empty, it means that this student fails to pass the course in which grade = NULL;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the phone number of the only student who obtained \"A\" in the course \"Intro to BlockChain\".",
        "question_ar": "",
        "evidence_en": "A refers to an excellent grade in which grade = 'A' for the course;",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone_number FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain' AND T2.grade = 'A'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students?",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the percentage of students who get a \"B\" in the course \"Computer Network\"?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(student_id(grade = 'B' and name = 'Computer Network')), COUNT(student_id where name = ' Computer Network')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many courses have the highest difficulty?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; diff is higher means the course is more difficult in which highest difficulty is expessed as diff = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE diff = 5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the full name of the professor who graduated from an Ivy League School?",
        "question_ar": "",
        "evidence_en": "Ivy League school is assembled by 8 universities: Brown University, Columbia University, Cornell University, Dartmouth College, Harvard University, Princeton University, University of Pennsylvania and Yale University;",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the most important courses, what is the name of the most difficult course?",
        "question_ar": "",
        "evidence_en": "Higher credit means more important in which most important refers to MAX(credit); diff refers to difficulty; the most difficult course refers to MAX(diff);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students have the highest intelligence among those taking a bachelor's degree?",
        "question_ar": "",
        "evidence_en": "bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the most popular professors, how many are females?",
        "question_ar": "",
        "evidence_en": "the most popular professors refers to prof_id where MAX(popularity); female refers to gender;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many research postgraduate students are there?",
        "question_ar": "",
        "evidence_en": "research postgraduate student refers to type = 'RPG';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students got an A in Applied Deep Learning?",
        "question_ar": "",
        "evidence_en": "A refers to an excellent grade in which grade = 'A' for the course;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'A' AND T1.name = 'Applied Deep Learning '"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What are the GPAs of the unpaid Research Assistants?",
        "question_ar": "",
        "evidence_en": "Unpaid Research Assistants undertake their work without payment in which salary = 'free';",
        "evidence_ar": "",
        "SQL": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the easiest courses, what is the name of the course where most students got an A?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many courses does the student with the highest GPA this semester take?",
        "question_ar": "",
        "evidence_en": "student with the highest GPA refers to student_id where MAX(gpa);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students does Ogdon Zywicki advise?",
        "question_ar": "",
        "evidence_en": "Ogdon Zywicki is a professor;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the name of the course with the highest satisfaction from students?",
        "question_ar": "",
        "evidence_en": "sat refers to student's satisfaction degree with the course where sat = 5 stands for the highest satisfaction;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?",
        "question_ar": "",
        "evidence_en": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Which of the two courses, \"Advanced Operating System\" or \"Intro to BlockChain', did most of the students receive an A in?",
        "question_ar": "",
        "evidence_en": "A refers to an excellent grade in which grade = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the popularity of the professor who advises the highest number of students with the highest research ability?",
        "question_ar": "",
        "evidence_en": "professor with the highest research ability refers to prof_id where MAX(capability);",
        "evidence_ar": "",
        "SQL": "SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average number of students who registered for the courses with a difficulty of 4?",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; DIVIDE(COUNT(student_id where diff = 4), COUNT(course_id where diff = 4));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.student_id) AS REAL) / COUNT(DISTINCT T2.course_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 4"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students, who have a GPA between 3 to 4, failed a course?",
        "question_ar": "",
        "evidence_en": "GPA is an abbreviated name of Grade Point Average where GPA between 3 to 4 refers to gpa BETWEEN 3 AND 4; If grade is null or empty, it means that this student fails to pass this course;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade IS NULL AND T1.gpa BETWEEN 3 AND 4"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many students taking a bachelor's degree received an A in all of the courses that they took?",
        "question_ar": "",
        "evidence_en": "bachelor's degree is an undergraduate degree in which type = 'UG'; A refers to an excellent grade in which grade = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average GPA of the students with the highest research capability and high salary? List the full names of the students.",
        "question_ar": "",
        "evidence_en": "the highest research capability refers to capability = 5; high salary refers to salary = 'high'; prof_id refers to professor’s ID; GPA is an abbreviated name of Grade Point Average where average GPA refers to AVG(gpa);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the professors' IDs and students' IDs with the lowest research ability.",
        "question_ar": "",
        "evidence_en": "the lowest research ability refers to MIN(capability); professor’s ID refers to prof_id;",
        "evidence_ar": "",
        "SQL": "SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Name the professor who got graduation from the University of Boston.",
        "question_ar": "",
        "evidence_en": "Name the professor refers to full name which includes f_name and l_name;",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the courses' IDs and students' IDs who failed to pass the course.",
        "question_ar": "",
        "evidence_en": "If grade is null or empty, it means that this student fails to pass the course;",
        "evidence_ar": "",
        "SQL": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the male and female ratio among the professors?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(prof_id where gender = 'Male'), COUNT(prof_id where gender = 'Female'));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the names and credits of the least difficult courses.",
        "question_ar": "",
        "evidence_en": "diff refers to difficulty; the least difficult courses refer to MIN(diff);",
        "evidence_ar": "",
        "SQL": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the students' full names and GPAs under the supervision of the most popular professor.",
        "question_ar": "",
        "evidence_en": "student's full names = f_name, l_name; most popular refers to MAX(popularity);",
        "evidence_ar": "",
        "SQL": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Provide the full names and emails of unpaid research assistants.",
        "question_ar": "",
        "evidence_en": "full names = f_name, l_name; research assistant refers to the student who serves for research where the abbreviation is RA; unpaid research assistant refers to salary = 'free';",
        "evidence_ar": "",
        "SQL": "SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.",
        "question_ar": "",
        "evidence_en": "research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the students' full names and grades in Intro to BlockChain course.",
        "question_ar": "",
        "evidence_en": "student's full names = f_name, l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among students registered for the most difficult course, list the students' full names who got grade A.",
        "question_ar": "",
        "evidence_en": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the full names and graduated universities of the professors who advised Olia Rabier.",
        "question_ar": "",
        "evidence_en": "full names of the professors = first_name, last_name; graduated universities of the professors refers to graduate_from;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Name the students of the Advanced Database Systems course with the highest satisfaction.",
        "question_ar": "",
        "evidence_en": "full the students = f_name, l_name; course refers to name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Advanced Database Systems' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Calculate the GPA of the semester for Laughton Antonio.",
        "question_ar": "",
        "evidence_en": "GPA of the semester = DIVIDE(SUM(MULTIPLY(credit, grade)), SUM(credit)); grade 'A' refers to gpa = 4; grade 'B' refers to gpa = 3; grade 'C' refers to gpa = 2; grade 'D' refers to gpa = 1;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.credit * CASE T1.grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 WHEN 'D' THEN 1 ELSE 1 END) AS REAL) / COUNT(T3.credit) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T2.f_name = 'Laughton' AND T2.l_name = 'Antonio'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Provide the registered courses' names by undergraduate students with GPA of 3.7 and above.",
        "question_ar": "",
        "evidence_en": "Undergraduate students refers to type = 'UG'; GPA of 3.7 and above refers to gpa > 3.7;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the names and capability of the students who were advised by professors from the University of Washington.",
        "question_ar": "",
        "evidence_en": "names of the students = f_name, l_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Describe the full names, emails and intelligence of the students with the highest capability and salary.",
        "question_ar": "",
        "evidence_en": "full names of the students = f_name; l_name; highest capability refers to MAX(capability); highest salary refers to salary = 'high';",
        "evidence_ar": "",
        "SQL": "SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability.",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female'; highest teaching ability refers to MAX(teachingability);",
        "evidence_ar": "",
        "SQL": "SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "How many of the professors are female?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the name of the most difficult course?",
        "question_ar": "",
        "evidence_en": "difficulty of a course refers to diff; most difficult course refers to MAX(diff);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students with a gpa of 3.1 to 3.7, how many of them are undergraduate students?",
        "question_ar": "",
        "evidence_en": "gpa of 3.1 to 3.7 refers to gpa BETWEEN 3.1 AND 3.7; undergraduate students refers to type = 'UG';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the credit of the course named \"Computer Vision\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT credit FROM course WHERE name = 'Computer Vision'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the student's last name that gave the highest student satisfaction for the course \"Intro to Database 2\".",
        "question_ar": "",
        "evidence_en": "student's last name refers to l_name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "evidence_ar": "",
        "SQL": "SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students with high salary, what is total number of students with a GPA higher than 3?",
        "question_ar": "",
        "evidence_en": "high salary refers to salary = 'high'; GPA higher than 3 refers to gpa > 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T2.gpa > 3"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among undergraduate students, list the name of the course with the highest student satisfaction.",
        "question_ar": "",
        "evidence_en": "Undergraduate students refers to type = 'UG'; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the capability of research postgraduate students with an intellegence level of 4 and above.",
        "question_ar": "",
        "evidence_en": "research postgraduate students refers to type = 'RPG'; intelligence level of 4 and above refers to intelligence > = 4;",
        "evidence_ar": "",
        "SQL": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4"
    },
    {
        "db_id": "cs_semester",
        "question_en": "In students with a grade of B, how many of them have an intellegence level of 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?",
        "question_ar": "",
        "evidence_en": "difficulty of the course refers to diff;",
        "evidence_ar": "",
        "SQL": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among professors with the highest popularity, how many of their students have research capability of 5?",
        "question_ar": "",
        "evidence_en": "highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the course's name where students acquired a grade of D.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the capability on research of the student named Alvera McQuillin?",
        "question_ar": "",
        "evidence_en": "capability on research refers to capability;",
        "evidence_ar": "",
        "SQL": "SELECT T2.capability FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T1.f_name = 'Alvera' AND T1.l_name = 'McQuillin'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Of courses with 3 credit, how many students have GPA of 3.2?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among students with low salary, how many of them have a gpa of 3.5?",
        "question_ar": "",
        "evidence_en": "low salary refers to salary = 'low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses.",
        "question_ar": "",
        "evidence_en": "difficulty refers to diff; course with difficulty greater than the 80% of average difficulty refers to diff > MULTIPLY(AVG(diff), 80%);",
        "evidence_ar": "",
        "SQL": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?",
        "question_ar": "",
        "evidence_en": "teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Find the most important and most difficult courses.",
        "question_ar": "",
        "evidence_en": "most important refers to MAX(credit); most difficult refers to MAX(diff);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average teaching ability of the most popular professors?",
        "question_ar": "",
        "evidence_en": "average = AVG(teachingability); most popular professor refers to MAX(popularity);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Calculate the average satisfaction of the good students with their courses.",
        "question_ar": "",
        "evidence_en": "average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students with less than four intelligence, list the full name and phone number of students with a greater than 3 GPA.",
        "question_ar": "",
        "evidence_en": "intelligence < 4; full name = f_name, l_name; gpa > 3;",
        "evidence_ar": "",
        "SQL": "SELECT f_name, l_name, phone_number FROM student WHERE gpa > 3 AND intelligence < 4"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Name the students with above-average capability.",
        "question_ar": "",
        "evidence_en": "name of the students = f_name, l_name; above average-capability refers to capability > AVG(capability);",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability > ( SELECT AVG(capability) FROM RA )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA.",
        "question_ar": "",
        "evidence_en": "full name of the students = f_name, l_name; gpa < 3;",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name, T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.intelligence = 5 AND T1.gpa < 3"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the average capability of students with less than a 2.5 GPA?",
        "question_ar": "",
        "evidence_en": "average capability = AVG(capability); gpa < 2.5;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.capability) AS REAL) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa < 2.5"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the full name of the professors who advised students with intelligence 1.",
        "question_ar": "",
        "evidence_en": "full name of the professors = first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the difference in the average GPA of students who took the hardest and easiest courses?",
        "question_ar": "",
        "evidence_en": "difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Give the full name and capability of students who failed in any courses.",
        "question_ar": "",
        "evidence_en": "full name of students = f_name, l_name; failed refers to grade IS NULL;",
        "evidence_ar": "",
        "SQL": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Of the students with high salaries, how many took the computer vision course?",
        "question_ar": "",
        "evidence_en": "high salaries refers to salary = 'High';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Find the full name and popularity of the professor who advises the most number of students.",
        "question_ar": "",
        "evidence_en": "full name of the professor = first_name, last_name; most number of students refers to MAX(COUNT(student_id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course.",
        "question_ar": "",
        "evidence_en": "most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Calculate the difference between the average satisfaction of the students with high salaries and no salary.",
        "question_ar": "",
        "evidence_en": "average satisfaction difference = SUBTRACT(AVG(sat where salary = 'high')), (AVG(sat where salary = 'free')); satisfaction refers to sat; no salary refers to salary = 'free';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.sat) - ( SELECT AVG(T2.sat) FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free' ) AS diff FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Find the university from which the professor who advised most undergraduate students graduated.",
        "question_ar": "",
        "evidence_en": "university from which the professor graduated refers to graduate_from; undergraduate students refers to type = 'UG';",
        "evidence_ar": "",
        "SQL": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students.",
        "question_ar": "",
        "evidence_en": "more than average teaching ability refers to teachingability > AVG(teachingability); full_name of the professor = first_name, last_name; email address of the professor refers to email; advises two or more students refers to COUNT(student_id) > = 2;\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What percentage of students are highly satisfied with the Intro to Database 2 course?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the first and last name of students with highest gpa?",
        "question_ar": "",
        "evidence_en": "first name refers of students refers to f_name; last name of students refers to l_name; highest gpa refers to MAX(gpa);",
        "evidence_ar": "",
        "SQL": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among professors with the highest teachability, how many of their students have high salary?",
        "question_ar": "",
        "evidence_en": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question_en": "What is the salary range of the student with an email of grosellg@hku.hk?",
        "question_ar": "",
        "evidence_en": "salary range refers to salary;",
        "evidence_ar": "",
        "SQL": "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among students that gave satisfaction of value 4 for the course named \"Statistical Learning\", how many of them have a gpa of 3.8?",
        "question_ar": "",
        "evidence_en": "satisfaction refers to sat;\n\nsat = 4; gpa = 3.8 ",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among courses with difficulty of 3, how many students have intellegence level of 2?",
        "question_ar": "",
        "evidence_en": "difficulty of 3 refers to diff = 3; intelligence = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2"
    },
    {
        "db_id": "cs_semester",
        "question_en": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".",
        "question_ar": "",
        "evidence_en": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';",
        "evidence_ar": "",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1.",
        "question_ar": "",
        "evidence_en": "research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question_en": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?",
        "question_ar": "",
        "evidence_en": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the average number of students for each advisor?",
        "question_ar": "",
        "evidence_en": "students refers to advisedBy.p_id; advisor refers to p_id_dummy; average number = avg(count(advisedBy.p_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(p_id) AS REAL) / COUNT(DISTINCT p_id_dummy) AS avgnum FROM advisedBy GROUP BY p_id_dummy"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many professors are teaching course ID 18?",
        "question_ar": "",
        "evidence_en": "professors refers to taughtBy.p_id; course ID 18 refers to taughtBy.course_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18"
    },
    {
        "db_id": "computer_student",
        "question_en": "List all the course IDs for professional or master/graduate courses.",
        "question_ar": "",
        "evidence_en": "professional or master/graduate courses refers to courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many courses are there for basic or medium undergraduate courses?",
        "question_ar": "",
        "evidence_en": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the ID of all professors who are not faculty member along with the courses taught by him/her.",
        "question_ar": "",
        "evidence_en": "ID of all professors refers to person.p_id where professor = 1; not faculty member refers to hasPosition = 0; courses refers to taughtBy.course_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0"
    },
    {
        "db_id": "computer_student",
        "question_en": "Provide the ID of professors who are teaching high-level or harder undergraduate course.",
        "question_ar": "",
        "evidence_en": "ID of professors refers to taughtBy.p_id; high-level or harder undergraduate course refers to courseLevel = 'Level_400'",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'"
    },
    {
        "db_id": "computer_student",
        "question_en": "What are the courses taught by the advisors who gave advice to student with ID 376?",
        "question_ar": "",
        "evidence_en": "courses refers to course_id; advisors refers to p_id_dummy and taughtBy.p_id; student with ID 376 refers to advisedBy.p_id = 376",
        "evidence_ar": "",
        "SQL": "SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141"
    },
    {
        "db_id": "computer_student",
        "question_en": "Name the advisors for students in Year 3 of the program.",
        "question_ar": "",
        "evidence_en": "advisors refers to p_id_dummy; students in Year 3 of the program refers to yearsInProgram = 'Year_3'",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which level of courses is taught by professor ID 297?",
        "question_ar": "",
        "evidence_en": "professor ID 297 refers to taughtBy.p_id = 297",
        "evidence_ar": "",
        "SQL": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297"
    },
    {
        "db_id": "computer_student",
        "question_en": "What level is course 165? List the professors who teach the course.",
        "question_ar": "",
        "evidence_en": "course 165 refers to course_id = 165; professors refers to taughtBy.p_id",
        "evidence_ar": "",
        "SQL": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the ID and years in program for students taught by advisor with ID 5.",
        "question_ar": "",
        "evidence_en": "advisor with ID 5 refers to p_id_dummy = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5"
    },
    {
        "db_id": "computer_student",
        "question_en": "State the courses and level of courses by professors who are faculty employees.",
        "question_ar": "",
        "evidence_en": "professors who are faculty employees refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'",
        "evidence_ar": "",
        "SQL": "SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Find the ID of advisor of student ID 80 and state the level of courses taught by him/her.",
        "question_ar": "",
        "evidence_en": "ID of advisor refers to p_id_dummy; student ID 80 refers to advisedBy.p_id = 80; level of courses refers to courseLevel",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80"
    },
    {
        "db_id": "computer_student",
        "question_en": "Provide the ID of professors who teach in both harder undergraduate course and master/graduate courses.",
        "question_ar": "",
        "evidence_en": "harder undergraduate course refers to courseLevel = 'Level_400'; master/graduate courses refers to courseLevel = 'Level_500'; ID of professors refers to taughtBy.p_id",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' OR T1.courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Who are the professors who gave advice to students in the 12th years of program?",
        "question_ar": "",
        "evidence_en": "professors refers to p_id_dummy; 12th years of program refers to yearsInProgram = 'Year_12'",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which are the courses with the most number of professors? State the course ID and the level of the course.",
        "question_ar": "",
        "evidence_en": "courses refers taughtBy.course_id; most number of professors  refers to max(count(taughtBy.p_id)); level of the course refers to courseLevel",
        "evidence_ar": "",
        "SQL": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.courseLevel ORDER BY COUNT(T1.course_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many basic and medium undergraduate courses are there?",
        "question_ar": "",
        "evidence_en": "basic and medium undergraduate courses refers to courseLevel = 'Level_300' and courses refers to course.course_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many people teaches course no.11?",
        "question_ar": "",
        "evidence_en": "people refers to taughtBy.p_id; course no.11 refers to course_id = 11",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM taughtBy WHERE course_id = 11"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which course has more teachers, course no.16 or course no.18?",
        "question_ar": "",
        "evidence_en": "teachers refers to taughtBy.p_id; course no.16 refers to course_id = 16; course no.18 refers to course_id = 18",
        "evidence_ar": "",
        "SQL": "SELECT course_id FROM taughtBy WHERE course_id = 11 OR course_id = 18 GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many teachers are faculty employees?",
        "question_ar": "",
        "evidence_en": "teachers refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the IDs of the teachers who have advised more than 4 others to teach.",
        "question_ar": "",
        "evidence_en": "teachers refers to p_id_dummy; have advised more than 4 others refers to count(advisedBy.p_id) > 4",
        "evidence_ar": "",
        "SQL": "SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id_dummy) > 4"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many basic or medium undergraduate courses are taught by a professor?",
        "question_ar": "",
        "evidence_en": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; professor refers to professor = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.professor = 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the IDs of all the faculty employees who teaches a basic or medium undergraduate course.",
        "question_ar": "",
        "evidence_en": "faculty employees refers to hasPosition = 'Faculty_eme'; basic or medium undergraduate course refers to courseLevel = 'Level_300'",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Is the teacher who teaches course no.9 a faculty member?",
        "question_ar": "",
        "evidence_en": "teacher refers to taughtBy.p_id; course no.9 refers to taughtBy.course_id = 9; faculty member refers to hasPosition ! = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.hasPosition FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.course_id = 9"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the levels of the all courses taught by teacher no.79.",
        "question_ar": "",
        "evidence_en": "levels of the all courses refers to courseLevel; teacher no.79 refers to taughtBy.p_id = 79",
        "evidence_ar": "",
        "SQL": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 79"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the IDs of the advisors of the students who are in the 5th year of their program.",
        "question_ar": "",
        "evidence_en": "IDs of the advisors refers to p_id_dummy; in the 5th year of their program refers to yearsInProgram = 'Year_5'",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_5'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many students are advised to teach by a professor teaching basic or medium undergraduate courses?",
        "question_ar": "",
        "evidence_en": "students refers to advisedBy.p_id; professor refers to p_id_dummy and taughtBy.p_id and professor = 1; basic or medium undergraduate courses refers to courseLevel = 'Level_300'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T4.p_id) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id INNER JOIN advisedBy AS T4 ON T4.p_id = T1.p_id WHERE T1.professor = 1 AND T3.courseLevel = 'Level_300'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Among the courses that are basic or medium undergraduate courses, how many of them are taught by a faculty member?",
        "question_ar": "",
        "evidence_en": "courses that are basic or medium undergraduate courses refers to courseLevel = 'Level_300'; faculty member refers to hasPosition ! = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T3.professor = 1 AND T1.courseLevel = 'Level_300'"
    },
    {
        "db_id": "computer_student",
        "question_en": "For the professor who advised student no.6, please list the IDs of the courses he or she teaches.",
        "question_ar": "",
        "evidence_en": "professor refers to p_id_dummy and professor = 1; student no.6 refers to advisedBy.p_id = 6; IDs of the courses refers to taughtBy.course_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.course_id FROM taughtBy AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN advisedBy AS T3 ON T3.p_id = T1.p_id WHERE T1.p_id = 9"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the level of the course with the most number of teachers?",
        "question_ar": "",
        "evidence_en": "level of the course refers to courseLevel; course with most number of teachers refers to course_id = max(count(taughtBy.p_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the IDs of the professors that teaches more than 3 courses.",
        "question_ar": "",
        "evidence_en": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches more than 3 courses  refers to count(course_id) > 3",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id HAVING COUNT(DISTINCT T1.course_id) > 3"
    },
    {
        "db_id": "computer_student",
        "question_en": "Please list the IDs of the top 3 professors that teaches the most courses.",
        "question_ar": "",
        "evidence_en": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches the most courses refers to max(count(course_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "db_id": "computer_student",
        "question_en": "In total, all the students in the 3rd year of their program are advised by how many professors?",
        "question_ar": "",
        "evidence_en": "3rd year of their program refers to yearsInProgram = 'Year_3'; professors refers to p_id_dummy",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the average number of courses taught by a professor?",
        "question_ar": "",
        "evidence_en": "professor refers to professor = 1; average number of courses = divide(count(taughtBy.course_id), count(taughtBy.p_id) where professor = 1 )",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) AS num FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the ratio of professors and students?",
        "question_ar": "",
        "evidence_en": "professors refers to professor = 1; students refers to student = 1; ratio = divide(count(person.p_id) when professor = 1, count(person.p_id) when student = 1)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN professor = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN student = 1 THEN 1 ELSE 0 END) AS per FROM person"
    },
    {
        "db_id": "computer_student",
        "question_en": "Calculate the percentage of high-level undergraduate course.",
        "question_ar": "",
        "evidence_en": "high-level undergraduate course refers to courseLevel = 'Level_400'; percentage = divide(count(course.course_id) when courseLevel = 'Level_400', count(course.course_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN courseLevel = 'Level_400' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM course"
    },
    {
        "db_id": "computer_student",
        "question_en": "List down all the person IDs who taught course ID of 18.",
        "question_ar": "",
        "evidence_en": "person IDs refers to taughtBy.p_id; course ID of 18  refers to taughtBy.course_id = 18",
        "evidence_ar": "",
        "SQL": "SELECT p_id FROM taughtBy WHERE course_id = 18"
    },
    {
        "db_id": "computer_student",
        "question_en": "Provide the position status and IDs of professor who advised student ID \"303\".",
        "question_ar": "",
        "evidence_en": "position status refers to hasPosition; IDs of professor refers to p_id_dummy; student ID \"303\" refers to advisedBy.p_id = 303",
        "evidence_ar": "",
        "SQL": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the person IDs and course levels of the affiliated professors in faculty.",
        "question_ar": "",
        "evidence_en": "person IDs refers to person.p_id; affiliated professors in faculty refers to professor = 1 and hasPosition = 'Faculty_aff'",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Describe the year in program and in phase status for the student with most number in advisor.",
        "question_ar": "",
        "evidence_en": "student refers to advisedBy.p_id; most number in advisor refers to max(count(p_id_dummy))",
        "evidence_ar": "",
        "SQL": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "List down the advised student IDs and IDs of employing professor in faculty.",
        "question_ar": "",
        "evidence_en": "advised student IDs refers to person.p_id; IDs of employing professor in faculty refers to p_id_dummy and hasPosition = 'Faculty_eme'",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T2.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE hasPosition = 'Faculty_eme'"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the course IDs and levels of person IDs from 40 to 50.",
        "question_ar": "",
        "evidence_en": "course IDs and levels refers to course.course_id and courseLevel; person IDs from 40 to 50 refers to taughtBy.p_id between 40 and 50",
        "evidence_ar": "",
        "SQL": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id BETWEEN 40 AND 50"
    },
    {
        "db_id": "computer_student",
        "question_en": "Describe the course level and list of person IDs who taught course ID of 147.",
        "question_ar": "",
        "evidence_en": "person IDs refers to taughtBy.p_id; course ID of 147 refers to course.course_id = 147",
        "evidence_ar": "",
        "SQL": "SELECT T1.courseLevel, T1.course_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 141"
    },
    {
        "db_id": "computer_student",
        "question_en": "Mention the person ID of faculty professor who taught course ID 104 and the course level.",
        "question_ar": "",
        "evidence_en": "person ID refers to person.p_id; faculty professor refers to professor = 1 and hasPosition ! = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0"
    },
    {
        "db_id": "computer_student",
        "question_en": "Find the professor ID and position in faculty who taught high-level undergraduate course of less than 10 in ID.",
        "question_ar": "",
        "evidence_en": "professor ID refers to person.p_id when professor = 1; position in faculty refers to hasPosition; high-level undergraduate course refers to courseLevel = 'Level_400'; less than 10 in ID refers to course.course_id < 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.courseLevel = 'Level_400' AND T2.course_id < 10"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the professor ID who taught the course ID from 121 to 130 of basic undergraduate courses.",
        "question_ar": "",
        "evidence_en": "professor ID refers to taughtBy.p_id; course ID from 121 to 130 of basic undergraduate courses refers to courseLevel = 'Level_300' and course.course_id between 121 and 130",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300' AND T1.course_id > 121 AND T1.course_id < 130"
    },
    {
        "db_id": "computer_student",
        "question_en": "List the advisor IDs for students with eighth year of program and position status in faculty of those professors.",
        "question_ar": "",
        "evidence_en": "advisor IDs refers to p_id_dummy and person.p_id where professor = 1; eighth year of program refers to yearsInprogram = 'Year_8'; position status in faculty of those professors refers to hasPosition",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id_dummy, T2.hasPosition FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_8'"
    },
    {
        "db_id": "computer_student",
        "question_en": "List any five of course IDs with professor IDs who taught master courses.",
        "question_ar": "",
        "evidence_en": "professor IDs refers to taughtBy.p_id; master course refers to courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT T1.course_id, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' LIMIT 5"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many students are under advisor 415?",
        "question_ar": "",
        "evidence_en": "advisor 415 refers to p_id_dummy = 415",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM advisedBy WHERE p_id_dummy = 415"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many professional or master/graduate courses are there?",
        "question_ar": "",
        "evidence_en": "professional or master/graduate courses refers to courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many non-faculty members are not undergoing the phase of qualifications?",
        "question_ar": "",
        "evidence_en": "non-faculty members refers to hasPosition = 0; are not undergoing the phase of qualifications refers to inPhase = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which professor taught the least amount of courses?",
        "question_ar": "",
        "evidence_en": "professor refers to taughtBy.p_id; least amount of courses refers to min(count(course_id))",
        "evidence_ar": "",
        "SQL": "SELECT p_id FROM taughtBy GROUP BY p_id ORDER BY COUNT(course_id) ASC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "Among the students being advised by Advisor 5, how many students are in the 5th year?",
        "question_ar": "",
        "evidence_en": "Advisor 5 refers to p_id_dummy = 5; are in the 5th year refers to yearsInProgram = 'Year_5'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5 AND T2.student = 1 AND T2.yearsInProgram = 'Year_5'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which professor teaches the highest number of professional or master/graduate courses?",
        "question_ar": "",
        "evidence_en": "professor refers to taughtBy.p_id; highest number of professional or master/graduate courses refers to max(count(taughtBy.course_id)) where courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "Among the faculty affiliated professor, how many professors teaches professional or master/undergraduate courses?",
        "question_ar": "",
        "evidence_en": "faculty affiliated professor refers to professor = 1 and hasPosition = 'Faculty_aff'; professional or master/undergraduate courses refers to courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff' AND T1.professor = 1 AND T3.courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses?",
        "question_ar": "",
        "evidence_en": "professors refers to course.p_id; highest number of professional or master/undergraduate courses refers to max(count(course.course_id)) where courseLevel = 'Level_500'",
        "evidence_ar": "",
        "SQL": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.p_id) DESC LIMIT 5"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many advisors are in charge of advising all the students in 1st year?",
        "question_ar": "",
        "evidence_en": "advisors refers to p_id_dummy; students in 1st year refers to student = 1 and yearsInProgram = 'Year_1'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_1' AND T2.student = 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many professors teaches no more than two high-level or harder undergraduate courses?",
        "question_ar": "",
        "evidence_en": "professors refers to taughtBy.p_id; high-level or harder undergraduate courses  refers to courseLevel = 'Level_400' ; no more than two refers to count(taughtBy.course_id) < = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT COUNT(T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' GROUP BY T2.p_id HAVING COUNT(DISTINCT T1.course_id) <= 2 )"
    },
    {
        "db_id": "computer_student",
        "question_en": "Between the faculty employee professors, how many teaches high-level or harder undergraduate courses? Indicate each of the professors unique identifying number.",
        "question_ar": "",
        "evidence_en": "faculty employee professors refers to hasPosition = 'Faculty_eme' and professor = 1; high-level or harder undergraduate courses refers to courseLevel = 'Level_400'; professors unique identifying number refers to person.p_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_eme' AND T1.professor = 1 AND T3.courseLevel = 'Level_400'"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the position in the faculty of the professor who teaches the highest number of courses?",
        "question_ar": "",
        "evidence_en": "position in the faculty refers to hasPosition; professor refers to professor = 1; teaches the highest number of courses refers to max(count(taughtBy.course_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "What year in the program do the students with more than 2 advisors are in?",
        "question_ar": "",
        "evidence_en": "students refers to student = 1; more than 2 advisors refers to count(p_id_dummy) > 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.p_id HAVING COUNT(T2.p_id) > 2"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many professors teaches basic or medium undergraduate courses?",
        "question_ar": "",
        "evidence_en": "professors refers to taughtBy.p_id; basic or medium undergraduate courses refers to couresLevel = 'Level_300'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300'"
    },
    {
        "db_id": "computer_student",
        "question_en": "Among the students being advised by advisors, which students' year in the program do the advisors advise the majority of?",
        "question_ar": "",
        "evidence_en": "students refers to student = 1; students' year in the program do the advisors advise the majority of refers to max(count(yearsInProgram))",
        "evidence_ar": "",
        "SQL": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.yearsInProgram ORDER BY COUNT(T1.p_id_dummy) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many students that are undergoing the pre-phase of qualification have advisors?",
        "question_ar": "",
        "evidence_en": "students refers to student = 1 and ; undergoing the phase of pre-qualification refers to inPhase = 'Pre-Quals'; have advisors refers to advisedBy.p_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.inPhase = 'Pre_Quals' AND T2.student = 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the average number of professional or master/undergraduate courses being taught by each professor?",
        "question_ar": "",
        "evidence_en": "professional or master/undergraduate courses refers to courseLevel = 'Level_500'; average number = divide(count(taughtBy.course_id), count(taughtBy.p_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many courses were taught by more than 4 people?",
        "question_ar": "",
        "evidence_en": "courses refers to taughtBy.course_id; more than 4 people refers to count(taughtBy.p_id) > 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT COUNT(course_id) FROM taughtBy GROUP BY course_id HAVING COUNT(course_id) > 4 )"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the total of professional courses available at the university? List out all the course id.",
        "question_ar": "",
        "evidence_en": "professional courses refers to courseLevel = 'Level_500'; course id refers to course.course_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "db_id": "computer_student",
        "question_en": "What is the sum of year 1 and year 2 students?",
        "question_ar": "",
        "evidence_en": "year 1 and year 2 students refers to yearsInProgram = 'Year_1' and yearsInProgram = 'Year_2' and student = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person WHERE yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2'"
    },
    {
        "db_id": "computer_student",
        "question_en": "How many courses were taught by a professor who is currently the member of faculty?",
        "question_ar": "",
        "evidence_en": "professor refers to professor = 1;  member of faculty refers to hasPosition <> 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which professor taught the most courses and what is the position of this person in the university?",
        "question_ar": "",
        "evidence_en": "professor refers to taughtBy.p_id; most courses refers to max(taughtBy.p_id); position refers to hasPosition",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which courses were taught by a professor who is not a faculty member?",
        "question_ar": "",
        "evidence_en": "courses refers to taughtBy.course_id; professor refers to professor = 1; is not a faculty member refers to hasPosition = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition = 0"
    },
    {
        "db_id": "computer_student",
        "question_en": "Which member of the faculty are teaching the most courses and what is his/her general course level?",
        "question_ar": "",
        "evidence_en": "member of the faculty refers to hasPosition <> 0, most courses refers to max(count(course.course_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the device id of the oldest user?",
        "question_ar": "",
        "evidence_en": "oldest user refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events were held at coordinate 97,40?",
        "question_ar": "",
        "evidence_en": "coordinate 97,40 refers to longitude = 97 AND latitude = 40;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM `events` WHERE latitude = 40 AND longitude = 97"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users are in the age group of M32-38?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; age group refers to group; `group` = 'M32-38';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(gender) FROM gender_age WHERE gender = 'M' AND `group` = 'M32-38'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many female users over the age of 50 are there?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; over the age of 50 refers to age > 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(gender) FROM gender_age WHERE age > 50 AND gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many active users were there in the event id 2?",
        "question_ar": "",
        "evidence_en": "active users refers to is_active = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(is_active) FROM app_events WHERE event_id = 2 AND is_active = 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the gender of the youngest user?",
        "question_ar": "",
        "evidence_en": "youngest user refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT gender FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the name of the category which most users belong to?",
        "question_ar": "",
        "evidence_en": "most users belong to refers to MAX(COUNT(app_id)); name of category refers to category;",
        "evidence_ar": "",
        "SQL": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the model of the oldest user's device?",
        "question_ar": "",
        "evidence_en": "model of the device refers to device_model; oldest user refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id ORDER BY T2.age DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users are there in the Home Decoration category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Home Decoration'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users are active in the events held on 5/1/2016?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; active refers to is_active = 1; on 5/1/2016 refers to timestamp LIKE '2016-05-01%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many female users use ZenFone 5 devices?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; ZenFone 5 refers to device_model = 'ZenFone 5';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31?",
        "question_ar": "",
        "evidence_en": "oldest user refers to MAX(age); active user refers to is_active = 1; on 5/6/2016 refers to timestamp LIKE '2016-05-06%'; coordinates 121, 31 refers to longitude = 121 AND latitude = 31;",
        "evidence_ar": "",
        "SQL": "SELECT T3.age FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE T1.is_active = 1 AND T2.longitude = 121 AND T2.latitude = 31 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06' ORDER BY T3.age DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the most common device model among female users between the ages 27 to 28?",
        "question_ar": "",
        "evidence_en": "most common device model refers to MAX(COUNT(device_id)); female refers to gender = 'F'; between the ages 27 to 28 refers to group = 'F27-28';",
        "evidence_ar": "",
        "SQL": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'F27-28' AND T1.gender = 'F' ORDER BY T2.device_id DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the categories of the top 2 oldest events?",
        "question_ar": "",
        "evidence_en": "oldest event refers to MIN(timestamp);",
        "evidence_ar": "",
        "SQL": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the gender of the majority of Vivo phone users?",
        "question_ar": "",
        "evidence_en": "majority of Vivo phone users refers to MAX(COUNT(phone_brand = 'vivo'));",
        "evidence_ar": "",
        "SQL": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which category has the highest number of users?",
        "question_ar": "",
        "evidence_en": "highest number of users refers to MAX(COUNT(app_id));",
        "evidence_ar": "",
        "SQL": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users belong to the MOBA category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'MOBA'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the percentage of female OPPO users against the male OPPO users?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'F'), 100), COUNT(device_id)), '%') AS 'the percentage of female OPPO users'; DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'M'), 100), COUNT(device_id)), '%') AS 'the percentage of male OPPO users';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.gender = 'F', 1, 0)) * 100 / COUNT(T2.device_id) AS perFemale , SUM(IIF(T2.gender = 'M', 1, 0)) * 100 / COUNT(T2.device_id) AS perMale FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'OPPO'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What were the locations of the events on 8th May, 2016?",
        "question_ar": "",
        "evidence_en": "location = longitude, latitude; on 8th May, 2016 refers to `timestamp` LIKE '2016-05-08%';",
        "evidence_ar": "",
        "SQL": "SELECT longitude, latitude FROM `events` WHERE SUBSTR(`timestamp`, 1, 10) = '2016-05-08'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List the app users IDs and installed status for the event ID of 844.",
        "question_ar": "",
        "evidence_en": "app user IDs refers to app_id; is_installed = 1 means the app status is installed; is_installed = 0 means the app status is not installed;",
        "evidence_ar": "",
        "SQL": "SELECT app_id , IIF(is_installed = 1, 'YES', 'NO') AS status FROM app_events WHERE event_id = 844"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events were there on 30th April, 2016?",
        "question_ar": "",
        "evidence_en": "on 30th April, 2016 refers to `timestamp` LIKE '2016-04-30%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(`timestamp`, 1, 10) = '2016-04-30'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users used Vivo Xplay3S model?",
        "question_ar": "",
        "evidence_en": "Vivo Xplay3S model refers to phone_brand = 'vivo' AND device_model = 'Xplay3S';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'Xplay3S' AND phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ratio of male and female users in 27-28 age group?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(COUNT(device_id WHERE gender = 'M' AND `group` = 'M27-28'), COUNT(device_id WHERE gender = 'F' AND `group` = 'F27-28')); 27-28 age group refers to `group` = 'F27-28';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(gender = 'M' AND `group` = 'M27-28', 1, 0)) / SUM(IIF(gender = 'F' AND `group` = 'F27-28', 1, 0)) AS r FROM gender_age"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the labels' IDs of online shopping and online malls categories?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls')"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Describe the phone brands and models of the users who participated in events on 5th May, 2016 at the coordinates of (112,44).",
        "question_ar": "",
        "evidence_en": "models refers to device_model; on 5th May, 2016 refers to timestamp LIKE '2016-05-05%'; coordinates of (112,44) refers to longitude = 112 AND latitude = 44;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.timestamp LIKE '2016-05-05%' AND T1.longitude = 112 AND T1.latitude = 44"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the app users IDs and time for the event ID of 82.",
        "question_ar": "",
        "evidence_en": "app user IDs refers to app_id; time refers to timestamp;",
        "evidence_ar": "",
        "SQL": "SELECT T1.app_id, T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 82"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Describe the device user gender and age of the event ID of 15251.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.gender, T1.age FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.event_id = 15251"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events did the 88-years-old male users participate on 4th May,2016?",
        "question_ar": "",
        "evidence_en": "88-years-old refers to age = 88; male refers to gender = 'M'; on 4th May, 2016 refers to timestamp LIKE '2016-05-04%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTR(`timestamp`, 1, 10) = '2016-05-04' AND T1.age = 88"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38).",
        "question_ar": "",
        "evidence_en": "coordinates of (-102,38) refers to longitude = -102, latitude = 38;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.age, T1.gender, COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN `events` AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = -102 AND T2.latitude = 38 GROUP BY T1.age, T1.gender, T2.longitude, T2.latitude"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the phone brands and models of the users who were at the coordinates of (80,44).",
        "question_ar": "",
        "evidence_en": "models refers to device_model; coordinates of (80,44) refers to longitude = 80 AND latitude = 44;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = 80 AND T2.latitude = 44"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List the included categories in the event ID of 155.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id INNER JOIN app_events AS T3 ON T3.app_id = T2.app_id WHERE T3.event_id = 155"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among HTC Butterfly phone users, list any five devices' IDs used by females.",
        "question_ar": "",
        "evidence_en": "HTC Butterfly refers to phone_brand = 'HTC' AND device_model = 'Butterfly'; females refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT T2.device_id FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Butterfly' AND T2.gender = 'F' AND T1.phone_brand = 'HTC' LIMIT 5"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many app IDs were included under science fiction category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'science fiction'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the ages and genders of the LG L70 users?",
        "question_ar": "",
        "evidence_en": "LG L70 refers to phone_brand = 'LG' AND device_model = 'L70';",
        "evidence_ar": "",
        "SQL": "SELECT T2.age, T2.gender FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG' AND T1.device_model = 'L70'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Calculate the percentage of the app user IDs under Industry tag category.",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(app_id WHERE category = 'Industry tag'), 100), COUNT(app_id)),'%');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.category = 'Industry tag', 1, 0)) * 100 / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the LG brand users, calculate the percentage of the Nexus 5 model user. What is the ratio of male and female users of it?",
        "question_ar": "",
        "evidence_en": "LG brand refers to phone_brand = 'LG'; percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE device_model = 'Nexus 5'), 100), COUNT(device_id)),'%'); ratio = DIVIDE(COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'M'), COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'F')); Nexus 5 model refers to device_model = 'Nexus 5';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.device_model = 'Nexus 5', 1, 0)) * 100 / COUNT(T1.device_id) AS per , SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'M', 1, 0)) / SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'F', 1, 0)) AS r FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users of the app were not active when event no.2 happened?",
        "question_ar": "",
        "evidence_en": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM app_events WHERE event_id = 2 AND is_active = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events in total have happened on the devices in 2016?",
        "question_ar": "",
        "evidence_en": "in 2016 refers to `timestamp` LIKE '2016%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM `events` WHERE SUBSTR(`timestamp`, 1, 4) = '2016'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events have happened on device no.29182687948017100 in 2016?",
        "question_ar": "",
        "evidence_en": "device no. refers to device_id; device_id = 29182687948017100; in 2016 refers to `timestamp` LIKE '2016%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM `events` WHERE SUBSTR(`timestamp`, 1, 4) = '2016' AND device_id = 29182687948017100"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many device users are male?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM gender_age WHERE gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age of the oldest device user?",
        "question_ar": "",
        "evidence_en": "oldest device user refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(age) FROM gender_age"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the female users of the devices, how many of them are under 30?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; under 30 refers to age < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM gender_age WHERE age < 30 AND gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the users who use a Galaxy Note 2, how many of them are female?",
        "question_ar": "",
        "evidence_en": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2'; female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T2.gender = 'F' AND T1.device_model = 'Galaxy Note 2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the ages of all the users who use a Galaxy Note 2.",
        "question_ar": "",
        "evidence_en": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2';",
        "evidence_ar": "",
        "SQL": "SELECT T2.age FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Galaxy Note 2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the device model of the device used by the oldest user?",
        "question_ar": "",
        "evidence_en": "oldest user refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age ) )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "To which user group do most of the users who uses a vivo device belong?",
        "question_ar": "",
        "evidence_en": "user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT T.`group` FROM ( SELECT T2.`group`, COUNT(`group`) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.`group` ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many app users belong to the category of Securities?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Securities'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "To which categories does app user no.1977658975649780000 belong?",
        "question_ar": "",
        "evidence_en": "app no. refers to app_id; app_id = 1977658975649780000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 1977658975649780000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the categories of the app users who are not active when event no.2 happened.",
        "question_ar": "",
        "evidence_en": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the location coordinates of all the devices with an inactive app user when event no.2 happened.",
        "question_ar": "",
        "evidence_en": "location coordinates = longitude, latitude; inactive refers to is_active = 0; event no. refers to event_id; event_id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 2 AND T1.is_active = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among all the times event no.2 happened when the app user was not active, when was the earliest time this situation happened?",
        "question_ar": "",
        "evidence_en": "event no. refers to event_id; event_id = 2; not active refers to is_active = 0; earliest time refers to MIN(timestamp);",
        "evidence_ar": "",
        "SQL": "SELECT T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T1.is_active = 0 AND T2.event_id = 2 ORDER BY T2.timestamp LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the IDs of the events happened on all the vivo devices.",
        "question_ar": "",
        "evidence_en": "IDs of the events refers to event_id; vivo devices refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_id FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the devices with event no.2 happening, how many of them are vivo devices?",
        "question_ar": "",
        "evidence_en": "event no. refers to event_id; event_id = 2; vivo devices refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' AND T2.event_id = 2"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the time when event no.2 happened on a vivo device.",
        "question_ar": "",
        "evidence_en": "time refers to timestamp; event no. refers to event_id; event_id = '2'; vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT T1.timestamp FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.event_id = '2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events in total have happened on all the vivo devices in the year 2016?",
        "question_ar": "",
        "evidence_en": "vivo devices refers to phone_brand = 'vivo'; in the year 2016 refers to year(timestamp) = 2016;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE STRFTIME('%Y', T1.timestamp) = '2016' AND T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the users who uses a vivo device, how many of them are female and under 30?",
        "question_ar": "",
        "evidence_en": "vivo device refers to phone_brand = 'vivo'; female refers to gender = 'F'; under 30 refers to age < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'vivo' AND T1.age < 30"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the category that the most app users belong to?",
        "question_ar": "",
        "evidence_en": "most app users refers to MAX(COUNT(app_id));",
        "evidence_ar": "",
        "SQL": "SELECT T.category FROM ( SELECT T1.category, COUNT(T2.app_id) AS num FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id GROUP BY T1.label_id ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the brand of the device used by the youngest female user?",
        "question_ar": "",
        "evidence_en": "brand of the device refers to phone_brand; youngest refers to MIN(age); female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN ( SELECT * FROM ( SELECT device_id FROM gender_age WHERE gender = 'F' ORDER BY age LIMIT 1 ) AS T )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users in user group M23-26 use a vivo device?",
        "question_ar": "",
        "evidence_en": "user group M23-26 refers to group = 'M23-26'; vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'M23-26' AND T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among all the users who use a vivo device, what is the percentage of the users in the M23-26 user group?",
        "question_ar": "",
        "evidence_en": "vivo device refers to phone_brand = 'vivo'; percentage = MULTIPLY(DIVIDE(COUNT(phone_brand = 'vivo WHERE group = 'M23-26), COUNT(phone_brand = 'vivo)), 100); M23-26 user group refers to group = 'M23-26';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.`group` = 'M23-26', 1.0, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among all the devices with event no.2 happening, what is the percentage of the device being a vivo phone?",
        "question_ar": "",
        "evidence_en": "event no. refers to event_id; event_id = '2'; percentage = SUM(IF(phone_brand = 'vivo',1,0)), COUNT(device_id) WHERE event_id = '2'; vivo phone refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.phone_brand = 'vivo', 1, 0)) / COUNT(T1.device_id) AS per FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T1.event_id = '2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the average age of all the vivo device users?",
        "question_ar": "",
        "evidence_en": "average age = AVG(age); vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many female users belong to the age group of 27 to 28?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; age group of 27 to 28 refers to `group` = 'F27-28';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM gender_age WHERE `group` = 'F27-28' AND gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age of the oldest male user of the app?",
        "question_ar": "",
        "evidence_en": "oldest user refers to MAX(age); male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT MAX(age) FROM gender_age WHERE gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users installed the app but are not active?",
        "question_ar": "",
        "evidence_en": "installed refers to is_installed = 1; not active refers to is_active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(app_id) FROM app_events WHERE is_installed = 1 AND is_active = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age of the youngest female user of the app?",
        "question_ar": "",
        "evidence_en": "youngest user refers to MIN(age); female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many models does the VIVO phone brand released?",
        "question_ar": "",
        "evidence_en": "models refers to device_model;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List at least 15 phone models released under the OPPO brand.",
        "question_ar": "",
        "evidence_en": "phone models refers to device_model; OPPO brand refers to phone_brand = 'OPPO';",
        "evidence_ar": "",
        "SQL": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List at least 10 device models that male users over the age of 39 usually use.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; over the age of 39 refers to group = 'M39+';",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.`group` = 'M39+' AND T2.gender = 'M' LIMIT 10"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List 5 device models that users use to install the app and are active in using the app.",
        "question_ar": "",
        "evidence_en": "install refers to is_installed = 1; active refers to is_active = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id INNER JOIN app_events AS T3 ON T2.event_id = T3.event_id WHERE T3.is_active = 1 AND T3.is_installed = 1 LIMIT 5"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users belong to \"Financial Information\" category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Financial Information'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users belong to \"game-Art Style\" category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'game-Art Style'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the total number of the male users that use OPPO as their phone brand.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND T1.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the brand of the youngest user's device?",
        "question_ar": "",
        "evidence_en": "brand of the device refers to phone_brand; youngest user refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List at least 3 categories with the lowest number of users.",
        "question_ar": "",
        "evidence_en": "lowest number of users refers to MIN(COUNT(label_id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id ORDER BY T2.label_id LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users use the Galaxy Ace Plus model?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; Galaxy Ace Plus refers to device_model = 'Galaxy Ace Plus';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Ace Plus' AND T1.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age group of most OPPO users?",
        "question_ar": "",
        "evidence_en": "age group refers to group; most OPPO users refers to MAX(COUNT(phone_brand = 'OPPO')); OPPO users refers to phone_brand = 'OPPO';",
        "evidence_ar": "",
        "SQL": "SELECT T.`group` FROM ( SELECT T1.`group`, COUNT(T1.`group`) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' GROUP BY T1.`group` ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List at least 5 device models that are commonly used by female users.",
        "question_ar": "",
        "evidence_en": "device models that are commonly used refers to MAX(COUNT(device_model)); female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 5"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Calculate the ratio in percentage between the average number of app users belonging to \"80s Japanese comic\" and \"90s Japanese comic\".",
        "question_ar": "",
        "evidence_en": "ratio in percentage = DIVIDE(SUM(IF(category = '80s Japanese comic',1,0)), COUNT(app_id)) as '80s'; DIVIDE(SUM(IF(category = '90s Japanese comic',1,0)), COUNT(app_id)) as '90s'; 80s Japanese comic refers to category = '80s Japanese comic'; 90s Japanese comic refers to category = '80s Japanese comic';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.category = '80s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J8 , SUM(IIF(T1.category = '90s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J9 FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the female users that uses OPPO as their phone brand, what is the percentage of them of the user that uses R815T model to install the app?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; percentage = DIVIDE(SUM(IF(phone_brand = 'OPPO',1,0)), SUM(IF(device_id = 'R815T',1,0))); R815T refers to device_id = 'R815T';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.phone_brand = 'OPPO', 1, 0)) / SUM(IIF(T1.device_id = 'R815T', 1, 0)) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the phone brand of the device model \"坚果手机\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '坚果手机'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the number of device models for \"中兴\" phone brand.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = '中兴'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which group does age 24 belong to?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT `group` FROM gender_age WHERE age = '24'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the time stamp for event No.887711.",
        "question_ar": "",
        "evidence_en": "event no. refers to event_id; event_id = '887711';",
        "evidence_ar": "",
        "SQL": "SELECT timestamp FROM events WHERE event_id = '887711'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the number of events that happened on 2016/5/6.",
        "question_ar": "",
        "evidence_en": "on 2016/5/6 refers to timestamp = '2016/5/6 XX:XX:XX';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(`timestamp`, 1, 10) = '2016-05-06'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "For the event which happened at 23:55:16 on 2016/5/7, in the location coordinate(113, 28), on what device did it happen? Give the name of the device model.",
        "question_ar": "",
        "evidence_en": "at 23:55:16 on 2016/5/7 refers to timestamp = '2016/5/7 23:55:16'; location coordinate (113, 28) refers to longitude = '113' AND latitude = '28';",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id WHERE T2.longitude = '113' AND T2.latitude = '28' AND T2.timestamp = '2016-05-07 23:55:16'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the number of \"game-Fishing\" apps.",
        "question_ar": "",
        "evidence_en": "game-Fishing refers to category = 'game-Fishing';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Fishing'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "State the number of the \"魅蓝Note 2\" users who are in the \"F29-32\" group.",
        "question_ar": "",
        "evidence_en": "魅蓝Note 2 refers to device_model = '魅蓝Note 2';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'F29-32' AND T2.device_model = '魅蓝Note 2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the number of 30-year-old users who were active in the events on 2016/5/2.",
        "question_ar": "",
        "evidence_en": "30-year-old refers to age = '30'; active refers to is_active = 1; on 2016/5/2 refers to timestamp = '2016/5/2 XX:XX:XX';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.device_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE SUBSTR(`timestamp`, 1, 10) = '2016-05-02' AND T1.is_active = 1 AND T3.age = '30'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "For the event which happened at 23:33:34 on 2016/5/6, how many installed apps were involved?",
        "question_ar": "",
        "evidence_en": "at 23:33:34 on 2016/5/6 refers to timestamp = '2016/5/6 23:33:34'; installed refers to is_installed = '1';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTR(T2.`timestamp`, 1, 10) = '2016-05-06' AND T1.is_installed = '1'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the number of female users of \"E派\" brand devices.",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; E派 brand refers to phone_brand = 'E派';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'E派'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users of the \"Galaxy S5\" device model?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_model = 'Galaxy S5' AND T2.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users from the group \"F29-32\" who were active in the events on 2016/5/7?",
        "question_ar": "",
        "evidence_en": "active users refers to is_active = '1'; on 2016/5/7 refers to timestamp = '2016/5/7 XX:XX:XX';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.event_id = T3.device_id WHERE SUBSTR(T2.`timestamp`, 1, 10) = '2016-05-07' AND T1.is_active = '1' AND T3.`group` = 'F29-32'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which category does the app id No.894384172610331000 belong to?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = '894384172610331000'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?",
        "question_ar": "",
        "evidence_en": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many times is the number of active apps in the event that happened at 7:50:28 on 2016/5/2 than in the event that happened at 7:41:03 on 2016/5/2?",
        "question_ar": "",
        "evidence_en": "how many times = DIVIDE(SUM(IF(timestamp = '2016/5/2 7:50:28', 1,0)), SUM(IF(timestamp = '2016/5/2 7:41:03',1,0))); active refers to is_active = '1'; at 7:50:28 on 2016/5/2 refers to timestamp = '2016/5/2 7:50:28'; at 7:41:03 on 2016/5/2 refers to timestamp = '2016/5/2 7:41:03';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(timestamp = '2016-05-02 7:50:28', 1, 0)) / SUM(IIF(timestamp = '2016-05-02 7:41:03', 1, 0)) AS num FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.is_active = '1'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many devices are of the brand vivo?",
        "question_ar": "",
        "evidence_en": "brand vivo refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many more devices are there of the brand vivo than of the brand LG?",
        "question_ar": "",
        "evidence_en": "how many more = SUBTRACT(SUM(IF(phone_brand = 'vivo',1,0)), SUM(IF(phone_brand = 'LG',1,0))); brand vivo refers to phone_brand = 'vivo'; brand LG refers to phone_brand = 'LG';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(phone_brand = 'vivo', 1, 0)) - SUM(IIF(phone_brand = 'LG', 1, 0)) AS num FROM phone_brand_device_model2"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ID of the device used by the youngest user?",
        "question_ar": "",
        "evidence_en": "ID of the device refers to device_id; youngest user refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the female users of the devices, how many of them are over 30?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; over 30 refers to age > 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM gender_age WHERE age > 30 AND gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Is the oldest device user male or female?",
        "question_ar": "",
        "evidence_en": "MAX(Age) AND gender = 'M' means that the oldest device user is male; MAX(Age) AND gender = 'F' means that the oldest device user is female;",
        "evidence_ar": "",
        "SQL": "SELECT gender FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age of the youngest female device user?",
        "question_ar": "",
        "evidence_en": "youngest refers to MIN(age); female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among all the users who use a vivo device, what is the age of the youngest user?",
        "question_ar": "",
        "evidence_en": "vivo device refers to phone_brand = 'vivo'; youngest refers to MIN(age);",
        "evidence_ar": "",
        "SQL": "SELECT T1.age FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' ORDER BY T1.age LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the app IDs of all the users in the Securities category.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Securities'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "For the device with an event occurring on 2016/5/1 at 0:55:25, what is the gender of its user?",
        "question_ar": "",
        "evidence_en": "on 2016/5/1 at 0:55:25 refers to timestamp = '2016-05-01 00:55:25';",
        "evidence_ar": "",
        "SQL": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-01 00:55:25'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the devices with an event occurring in 2016, how many of them are owned by a user in the M23-26 user group?",
        "question_ar": "",
        "evidence_en": "in 2016 refers to year(timestamp) = 2016; M23-26 user group refers to `group` = 'M23-26';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE STRFTIME('%Y', T2.timestamp) = '2016' AND T1.`group` = 'M23-26'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the brand of the device used by the most users in the M23-26 user group?",
        "question_ar": "",
        "evidence_en": "brand of the device refers to phone_brand; M23-26 user group refers to `group` = 'M23-26';",
        "evidence_ar": "",
        "SQL": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'M23-26' GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the location coordinates of all the Galaxy Note 2 devices when an event happened.",
        "question_ar": "",
        "evidence_en": "location coordinates = longitude, latitude; Galaxy Note 2 refers to device_model = 'Galaxy Note 2';",
        "evidence_ar": "",
        "SQL": "SELECT T1.longitude, T1.latitude FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list all the models of the devices used by a female user.",
        "question_ar": "",
        "evidence_en": "models of the devices refers to device_model; female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the categories that app user ID7324884708820020000 belongs to?",
        "question_ar": "",
        "evidence_en": "app user ID refers to app_id; app_id = 7324884708820020000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 7324884708820020000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the app users who were not active when event no.2 happened, how many of them belong to the category Property Industry 1.0?",
        "question_ar": "",
        "evidence_en": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.is_active = 0 AND T1.category = 'Property Industry 1.0' AND T3.event_id = 2"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many categories in total do the app users who were not active when event no.2 happened belong to?",
        "question_ar": "",
        "evidence_en": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT COUNT(DISTINCT T1.category) AS result FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0 GROUP BY T1.category ) T"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the device model used by the most female users over 30?",
        "question_ar": "",
        "evidence_en": "female users refers to gender = 'F'; most female users refers to MAX(COUNT(gender = 'F')); over 30 refers to age > 30;",
        "evidence_ar": "",
        "SQL": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 30 AND T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the models of all the devices with an event under the location coordinates (121, 31).",
        "question_ar": "",
        "evidence_en": "models of the devices refers to device_model; location coordinates (121, 31) refers to longitude = 121 AND latitude = 31;",
        "evidence_ar": "",
        "SQL": "SELECT T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.longitude = 121 AND T1.latitude = 31"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the top 3 categories with the most app users?",
        "question_ar": "",
        "evidence_en": "most app users refers to MAX(COUNT(app_id));",
        "evidence_ar": "",
        "SQL": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id GROUP BY T2.category ) AS T ORDER BY T.num DESC LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the event IDs of the events that have happened on the device of the oldest user.",
        "question_ar": "",
        "evidence_en": "oldest user refers to MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_id FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events have happened on the device of the youngest female user?",
        "question_ar": "",
        "evidence_en": "youngest refers to MIN(age); female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F' GROUP BY T1.event_id, T2.age ORDER BY T2.age LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the devices on which an event happened on 2016/5/1, how many of them are used by a male user?",
        "question_ar": "",
        "evidence_en": "on 2016/5/1 refers to timestamp = '2016-05-01'; male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016-05-01' AND T2.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which category has more app users, Securities or Finance?",
        "question_ar": "",
        "evidence_en": "more app users refers to SUBTRACT(IF(SUM(category = 'Securities'), SUM(category = 'Finance')) > 0,'Securities','Finance') as more;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(IIF(T2.category = 'Securities', 1, 0)) - SUM(IIF(T2.category = 'Finance', 1, 0)) > 0, 'Securities', 'Finance') AS diff FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list the device models of all the devices used by a user in the M23-26 user group.",
        "question_ar": "",
        "evidence_en": "M23-26 user group refers to `group` = 'M23-26';",
        "evidence_ar": "",
        "SQL": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'M23-26'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the average age of the female users who uses a vivo device?",
        "question_ar": "",
        "evidence_en": "average age = AVG(age); female refers to gender = 'F'; vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ratio of female users to male users who uses a vivo device?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ratio of the number of app users that belong to the Securities category to the number of app users that belong to the Finance category?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(category = 'Securities'), SUM(category = 'Finance'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.category = 'Securities', 1, 0)) / SUM(IIF(T2.category = 'Finance', 1, 0)) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the label ID of \"Third-party card management\" category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT label_id FROM label_categories WHERE category = 'Third-party card management'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ratio of active and inactive app users of the event ID \"58\"?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(is_active = 1, 1, 0)) / SUM(IIF(is_active = 0, 1, 0)) AS per FROM app_events WHERE event_id = 58"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events did the device ID \"3915082290673130000\" join?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE device_id = 3915082290673130000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Calculate the percentage of male users among all device users.",
        "question_ar": "",
        "evidence_en": "percentage = DVIDE(SUM(gender = 'M'), COUNT(device_id)); male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(gender = 'M', 1, 0)) / COUNT(device_id) AS per FROM gender_age"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events were participated by the users at longitude of \"-156\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE longitude = -156"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many app users belong to label ID of \"48\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 48"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many category names start with the word \"game\"?",
        "question_ar": "",
        "evidence_en": "category names refers to category; start with the word game refers to category like 'game%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(label_id) FROM label_categories WHERE category LIKE 'game%'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the number of events participated by the device users at coordinates of (80,37).",
        "question_ar": "",
        "evidence_en": "coordinates of (80,37) refers to longitude = 80 and latitude = 37;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List down the labels' IDs and categories of the app ID \"5758400314709850000\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.label_id, T2.category FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T1.app_id = 5758400314709850000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List down the app IDs under the category of game-Rowing .",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Rowing'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the label IDs and app IDs of the Chinese Classical Mythology category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Describe the number of app IDs and location of the event ID \"79641\".",
        "question_ar": "",
        "evidence_en": "location = longitude, latitude;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id), T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 79641 GROUP BY T2.longitude, T2.latitude"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Provide the locations and times of the events of app ID \"8715964299802120000\".",
        "question_ar": "",
        "evidence_en": "locations = longitude, latitude; times of the events refers to timestamp;",
        "evidence_ar": "",
        "SQL": "SELECT T1.longitude, T1.latitude, T1.timestamp FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = 8715964299802120000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many OPPO users participated in events which were held around 12 AM on 1st May,2016?",
        "question_ar": "",
        "evidence_en": "OPPO refers to phone_brand = 'OPPO'; around 12 AM on 1st May, 2016 refers to timestamp is '2016-05-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND STRFTIME('%Y-%m-%d', T1.`timestamp`) = '2016-05-01'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the ratio of male and female users of vivo X5pro model?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(gender = 'M' WHERE device_model = 'X5Pro'), SUM(gender = 'F' WHERE device_model = 'X5Pro')); male refers to gender = 'M'; female refers to gender = 'F'; vivo X5pro model refers to phone_brand = 'vivo' AND device_model = 'X5Pro';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T2.device_model = 'X5Pro'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many females use ZUK Z1 phones in the age group under 23?",
        "question_ar": "",
        "evidence_en": "females refers to gender = 'F'; ZUK Z1 refers to phone_brand = 'ZUK' AND device_model = 'Z1'; under 23 refers to `group` = 'F23-' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'Z1' AND T1.`group` = 'F23-' AND T2.phone_brand = 'ZUK'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List the phone brands and models of the users under 10 years of age.",
        "question_ar": "",
        "evidence_en": "models refers to device_model; under 10 years of age refers to age < 10;",
        "evidence_ar": "",
        "SQL": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the HTC users, calculate the percentage of female users who are over 80.",
        "question_ar": "",
        "evidence_en": "HTC refers to phone_brand = 'HTC'; percentage = DIVIDE(SUM(gender = 'F' AND age > 80), COUNT(device_id)); female refers to gender = 'F'; over 80 refers to age > 80",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which phone brand and model was used for event ID \"6701\"?",
        "question_ar": "",
        "evidence_en": "model refers to device_model;",
        "evidence_ar": "",
        "SQL": "SELECT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.event_id = 6701"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Between device ID of \"-9215352913819630000\" and \"-9222956879900150000\", mention the age and gender of device user who participated more events.",
        "question_ar": "",
        "evidence_en": "more events refers to MAX(COUNT(event_id));",
        "evidence_ar": "",
        "SQL": "SELECT T.age, T.gender FROM ( SELECT T2.age, T2.gender, COUNT(T1.device_id) AS num FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id BETWEEN -9215352913819630000 AND -9222956879900150000 GROUP BY T2.age, T2.gender ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List out the time of the event id 12.",
        "question_ar": "",
        "evidence_en": "time refers to timestamp;",
        "evidence_ar": "",
        "SQL": "SELECT timestamp FROM events WHERE event_id = 12"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many active users are there in the event?",
        "question_ar": "",
        "evidence_en": "active refers to is_active = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(app_id) FROM app_events WHERE is_active = 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many devices belong to model \"A51\"?",
        "question_ar": "",
        "evidence_en": "model refers to device_model; device_model = 'A51';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'A51'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "State the gender of users who use the device \"-9222956879900150000\".",
        "question_ar": "",
        "evidence_en": "device refers to device_id; device_id = -9222956879900150000;",
        "evidence_ar": "",
        "SQL": "SELECT gender FROM gender_age WHERE device_id = -9222956879900150000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many labels belong to the game-card category?",
        "question_ar": "",
        "evidence_en": "labels refers to label_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(label_id) FROM label_categories WHERE category = 'game-card'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age group of users who use phone brand of vivo?",
        "question_ar": "",
        "evidence_en": "age group refers to group;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users who are under 30 years old use device model of Galaxy Note 2?",
        "question_ar": "",
        "evidence_en": "under 30 refers to age < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2' AND T1.age < 30"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the users who use OPPO, calculate the percentage of those who are under 50 years old.",
        "question_ar": "",
        "evidence_en": "OPPO refers to phone_brand = 'OPPO'; percentage = MULTIPLY(DIVIDE(SUM(age < 50), COUNT(device_id)), 1.0); under 50 years old refers to age < 50;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.age < 50, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the average age of the users who use model device of R7?",
        "question_ar": "",
        "evidence_en": "average age = AVG(age);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.age) / COUNT(T1.device_id) AS avg FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'R7'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the category of the label that represented the behavior category of app id 5902120154267990000?",
        "question_ar": "",
        "evidence_en": "label that represented the behavior category refers to label_id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Mention the group of age of users who use phone brand of LG.",
        "question_ar": "",
        "evidence_en": "group of age refers to group;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "State the category of the label that represented the behavior category of app id 4955831798976240000.",
        "question_ar": "",
        "evidence_en": "label that represented the behavior category refers to label_id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 4955831798976240000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many female users use device model of MI 3?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'MI 3'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the male users, how many users use device model of Desire 820?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 820' AND T1.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the users who are above 20, how many users use device model of ELIFE E7 Mini?",
        "question_ar": "",
        "evidence_en": "above 20 refers to age > 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'ELIFE E7 Mini' AND T1.age > 20"
    },
    {
        "db_id": "talkingdata",
        "question_en": "State the number of users who are under 50 and above 20 use device model of Galaxy Premier.",
        "question_ar": "",
        "evidence_en": "under 50 and above 20 refers to age BTWEEEN 20 AND 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 50 AND T2.device_model = 'Galaxy Premier'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Give the number of male users who use phone branded HTC.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T2.phone_brand = 'HTC'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users who are between 20 and 60 use phone brand of TCL?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 60 AND T2.phone_brand = 'TCL'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Among the users who use SUGAR, calculate the percentage of those who are above 20 years old.",
        "question_ar": "",
        "evidence_en": "SUGAR refers to phone_brand = 'SUGAR'; percentage = MULTIPLY(DIVIDE(SUM(age > 20), COUNT(device_id)) 1.0); above 20 years old refers to age > 20;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.age > 20, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Indicate the location of all the events that occurred on April 30, 2016.",
        "question_ar": "",
        "evidence_en": "location = longitude, latitude; on April 30, 2016 refers timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';",
        "evidence_ar": "",
        "SQL": "SELECT longitude, latitude FROM events WHERE date(timestamp) = '2016-04-30'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many different models does the HTC brand have?",
        "question_ar": "",
        "evidence_en": "models refers to device_model; HTC brand refers to phone_brand = 'HTC';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'HTC'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Identify all installed and activated apps by their id.",
        "question_ar": "",
        "evidence_en": "installed refers to is_installed = 1; activated refers to is_active = 1; id refers to app_id;",
        "evidence_ar": "",
        "SQL": "SELECT app_id FROM app_events WHERE is_active = 1 AND is_installed = 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many apps are labeled 7?",
        "question_ar": "",
        "evidence_en": "labeled 7 refers to label_id = 7;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 7"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Identify by their id all the devices that are used by women who are in the age range of 29 to 31 years.",
        "question_ar": "",
        "evidence_en": "id refers to device_id; women refers to gender = 'F'; age range of 29 to 31 years refers to age between 29 and 31;",
        "evidence_ar": "",
        "SQL": "SELECT device_id FROM gender_age_train WHERE age BETWEEN 29 AND 31 AND gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Identify by their id all the apps that belong to the game-stress reliever category.",
        "question_ar": "",
        "evidence_en": "id refers to device_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-stress reliever'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "On what date were the most events logged on devices for 40-year-old male users?",
        "question_ar": "",
        "evidence_en": "date refers to timestamp; most events refers to MAX(COUNT(event_id)); 40-year-old  refers to age = 40; male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT T.timestamp FROM ( SELECT T2.timestamp, COUNT(T2.event_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T1.age = 40 GROUP BY T2.timestamp ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "On which brand of phone are the most applications installed?",
        "question_ar": "",
        "evidence_en": "brand of phone refers to phone_brand; most applications are installed refers to MAX(COUNT(is_installed = 1));",
        "evidence_ar": "",
        "SQL": "SELECT T.phone_brand FROM ( SELECT T1.phone_brand, COUNT(T4.is_active) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id INNER JOIN events_relevant AS T3 ON T2.device_id = T3.device_id INNER JOIN app_events_relevant AS T4 ON T3.event_id = T4.event_id WHERE T4.is_active = 1 GROUP BY T1.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many men under the age of 23 have apps installed but are not active on their devices?",
        "question_ar": "",
        "evidence_en": "men refers to gender = 'M'; under the age of 23 refers to age < 23; installed refers to is_installed = 1; not active refers to is_active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.gender = 'M' AND T3.is_active = 0 AND T1.age < 23"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many women have apps from the game-Finding fault category installed on their device?",
        "question_ar": "",
        "evidence_en": "women refers to gender = 'F'; installed refers to is_installed = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.age < 23 AND T1.gender = 'F' AND T3.is_active = 0 AND T3.is_installed = 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which gender logged in the most to an event in the first 10 days of May 2016?",
        "question_ar": "",
        "evidence_en": "gender that logged in the most refers to MAX(COUNT(gender)); first 10 days of May 2016 refers to timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59';",
        "evidence_ar": "",
        "SQL": "SELECT T.gender FROM ( SELECT T1.gender, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE date(T2.timestamp) BETWEEN '2016-05-01' AND '2016-05-10' GROUP BY T1.gender ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What age group is the most using SM-T2558 model phones?",
        "question_ar": "",
        "evidence_en": "age group using SM-T2558 model phones the most refers to MAX(COUNT(group WHERE device_model = 'SM-T2558')); SM-T2558 model phones refers to device_model = 'SM-T2558';",
        "evidence_ar": "",
        "SQL": "SELECT T.`group` FROM ( SELECT T1.`group`, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'SM-T2558' GROUP BY T1.`group` ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many people over the age of 50 do not have HTC One M8 Eye phones?",
        "question_ar": "",
        "evidence_en": "over the age of 50 refers to age > 50; do not have HTC One M8 Eye phones refers to phone_brand ! = 'HTC' AND device_model ! = 'One M8 Eye';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 50 AND T2.device_model != 'One M8 Eye' AND T2.phone_brand != 'HTC'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Locate all events on devices of women under 30 years old.",
        "question_ar": "",
        "evidence_en": "locate = longitude, latitude; women refers to gender = 'F'; under 30 years old refers to age < 30;",
        "evidence_ar": "",
        "SQL": "SELECT T1.device_id FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T1.age < 30"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What percentage of women do not have applications installed on their mobile with respect to men?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(gender = 'F'), SUM(gender = 'M')), 1.0); women refers to gender = 'F'; not installed refers to is_installed = 0; men refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.gender = 'F', 1, 0)) / SUM(IIF(T1.gender = 'M', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Calculate the average age of people who have apps installed but are not active on their devices.",
        "question_ar": "",
        "evidence_en": "average age = AVG(age); installed refers to is_installed = 1; not active refers to is_active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 1 AND T3.is_active = 0"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list any three events that happened on the 1st of May 2016 that have the same latitude of 31.",
        "question_ar": "",
        "evidence_en": "on the 1st of May 2016 refers to timestamp like '2016-05-01%';",
        "evidence_ar": "",
        "SQL": "SELECT event_id FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list any three events that have the longitude and latitude of 0.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the difference between the events of device number -9222956879900150000 that can be located and those that are unable to be located?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(latitude! = 0 and longitude! = 0), SUM(latitude = 0 and longitude = 0)); device number refers to device_id; device_id = -922956879900150000; can be location refers to latitude ! = 0 and longitude ! = 0; unable to be location refers to latitude = 0 and longitude = 0;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(latitude != 0 AND longitude != 0, 1, 0)) - SUM(IIF(latitude = 0 AND longitude = 0, 1, 0)) AS diff FROM events WHERE device_id = '-922956879900150000'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list any three devices that are owned by female users.",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list any five app categories that are related to games, along with their label ID.",
        "question_ar": "",
        "evidence_en": "app categories refers to category; related to games refers to category like '%game%';",
        "evidence_ar": "",
        "SQL": "SELECT category, label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please list any three OPPO device models.",
        "question_ar": "",
        "evidence_en": "OPPO refers to phone_brand = 'OPPO';",
        "evidence_ar": "",
        "SQL": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the percentage of users who experienced event number 6 who have the app installed but do not use the app?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(is_installed = 1 and is_active = 0), COUNT(app_id)), 1.0); event number refers to event_id = 6; installed refers to is_installed = 1; do not use refers to is_active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(is_installed = 1 AND is_active = 0, 1, 0)) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which gender owned more of the Galaxy Note 2 device model?",
        "question_ar": "",
        "evidence_en": "gender that owned more = SUBTRACT(IF(SUM(gender = 'M'), SUM(gender = 'F'),'M','F'));",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(IIF(T1.gender = 'M', 1, 0)) - SUM(IIF(T1.gender = 'F', 1, 0)) > 0, 'M', 'F') AS gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "When did event number 2 happen and how many users were active?",
        "question_ar": "",
        "evidence_en": "event number refers to event_id; event_id = 2; active refers to is_active = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) AS num FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 2 AND T1.is_active = 1 GROUP BY T2.timestamp"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which behavior category does user number 5902120154267990000 belong to?",
        "question_ar": "",
        "evidence_en": "behavior category refers to category; number refers to app_id; app_id = 5902120154267990000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many users belong to the same behavior category as comics?",
        "question_ar": "",
        "evidence_en": "behavior category refers to category; category = 'comics';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'comics'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the age and gender of the person who uses the device number 29182687948017100 on event number 1?",
        "question_ar": "",
        "evidence_en": "device number refers to device_id; device_id = 29182687948017100; event number refers to event_id; and event_id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users have the log of events at the same longitude of 114?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "When did event number 7 happen for user number -8022267440849930000?",
        "question_ar": "",
        "evidence_en": "event number refers to event_id; event_id = 7; user number refers to app_id; app_id = -8022267440849930000;",
        "evidence_ar": "",
        "SQL": "SELECT T1.timestamp FROM events_relevant AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = -8022267440849930000 AND T1.event_id = 7"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What are the behavior categories that user number -9222198347540750000 belongs to?",
        "question_ar": "",
        "evidence_en": "behavior categories refers to category; user number refers to app_id; app_id = -9222198347540750000;",
        "evidence_ar": "",
        "SQL": "SELECT T3.category FROM app_all AS T1 INNER JOIN app_labels AS T2 ON T1.app_id = T2.app_id INNER JOIN label_categories AS T3 ON T2.label_id = T3.label_id WHERE T1.app_id = -9222198347540750000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please provide the age group of any LG Nexus 4 device users.",
        "question_ar": "",
        "evidence_en": "age group refers to `group`; LG Nexus 4 refers to phone_brand = 'LG' AND device_model = 'Nexus 4';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Please provide the gender of at least one user who owns an HTC Desire 826 device.",
        "question_ar": "",
        "evidence_en": "HTC Desire 826 refers to phone_brand = 'HTC' AND device_model = 'Desire 826';",
        "evidence_ar": "",
        "SQL": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 826' AND T2.phone_brand = 'HTC'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the percentage of users who are in the same behavior category as \"Academic Information\"?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(category = 'Academic Information'), COUNT(app_id)), 1.0); behavior category refers to category; category = 'Academic Information';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.category = 'Academic Information', 1.0, 0)) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.`group` = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many OPPO devices are there?",
        "question_ar": "",
        "evidence_en": "OPPO devices refers to phone_brand = 'OPPO';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What is the most common age group among all device users?",
        "question_ar": "",
        "evidence_en": "most common age group refers to MAX(COUNT(`group`));",
        "evidence_ar": "",
        "SQL": "SELECT T.num FROM ( SELECT `group`, COUNT(`group`) AS num FROM gender_age GROUP BY `group` ) T"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many events does the device \"4069764298338760000\" have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE device_id = 4069764298338760000"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many of the apps belong in the \"Equity Fund\" category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Equity Fund'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List all females aged 24 to 26 devices' locations.",
        "question_ar": "",
        "evidence_en": "females refers to gender = 'F'; aged 24 to 26 refers to `group` = 'F24-26';",
        "evidence_ar": "",
        "SQL": "SELECT T2.longitude, T2.latitude FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'F24-26' AND T1.gender = 'F'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "How many male users have a Galaxy Note 3?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; Galaxy Note 3 refers to device_model = 'Galaxy Note 3';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 3' AND T1.gender = 'M'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "List all the devices' brands and models of events on 5/7/2016 at 6:03:22 AM.",
        "question_ar": "",
        "evidence_en": "devices' brands refers to phone_brand; models refers to device_model; on 5/7/2016 at 6:03:22 AM refers to timestamp = '2016-05-07 06:03:22';",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-07 06:03:22'"
    },
    {
        "db_id": "talkingdata",
        "question_en": "Which brand is most common among people in their twenties?",
        "question_ar": "",
        "evidence_en": "brand refers to phone_brand; brand that is most common refers to MAX(COUNT(phone_brand)); twenties refers to age BETWEEN 20 AND 30;",
        "evidence_ar": "",
        "SQL": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T2.phone_brand) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "talkingdata",
        "question_en": "What percentage of vivo devices belong to users with no information?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(gender = NULL and age = NULL and `group` = NULL), COUNT(device_id)), 1.0); vivo devices refers to phone_brand = 'vivo'; no information refers to gender = NULL AND age = NULL AND `group` = NULL;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.gender IS NULL AND T1.age IS NULL AND T1.`group` IS NULL, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Please list all the keywords of the episode \"Refuge: Part 1\".",
        "question_ar": "",
        "evidence_en": "episode \"Refuge: Part 1\" refers to title = 'Refuge: Part 1'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many keywords are there for season 9, episode 23 of law_and_order?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.season = 9 AND T1.episode = 23"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episode with the keyword \"laundering money\"?",
        "question_ar": "",
        "evidence_en": "keyword \"laundering money\" refers to keyword = 'laundering money'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'laundering money'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Please list all the keywords for the episodes with a rating of over 8.",
        "question_ar": "",
        "evidence_en": "a rating of over 8 refers to rating > 8",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.rating > 8"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many 10-star votes were given to the episode titled \"Cherished\"?",
        "question_ar": "",
        "evidence_en": "10-star vote refers to stars = 10; titled \"Cherished\" refers to title = 'Cherished'",
        "evidence_ar": "",
        "SQL": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.stars = 10"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many votes did the episode titled \"Cherished\" get in total?",
        "question_ar": "",
        "evidence_en": "titled \"Cherished\" refers to title = 'Cherished'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episode that got the most 10-star votes?",
        "question_ar": "",
        "evidence_en": "the most refers to max(votes); 10-star refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 ORDER BY T2.votes DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Park Dietz was credited in which role in the episode titled \"Cherished\"?",
        "question_ar": "",
        "evidence_en": "credited refers to credited = 'true'; titled \"Cherished\" refers to title = 'Cherished'",
        "evidence_ar": "",
        "SQL": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people had filled a role in the episode titled \"Cherished\", but did not show up in the on-screen credits?",
        "question_ar": "",
        "evidence_en": "titled \"Cherished\" refers to title = 'Cherished'; did not show up in the on-screen credits refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.credited = 'false'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who was credited as \"technical advisor\" in the episode titled \"Cherished\"?",
        "question_ar": "",
        "evidence_en": "who refers to name; credited refers to credited = 'true'; as \"technical advisor\" refers to role = 'technical advisor'; titled \"Cherished\" refers to title = 'Cherished'",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T2.credited = 'true' AND T2.role = 'technical advisor'"
    },
    {
        "db_id": "law_episode",
        "question_en": "For how many times was Park Dietz credited?",
        "question_ar": "",
        "evidence_en": "credited refers to credited = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Please list the titles of all the episodes in which Park Dietz was credited.",
        "question_ar": "",
        "evidence_en": "credited refers to credited = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Was Anthony Azzara's role in episode tt0629204 displayed in the credits at the end of the episode?",
        "question_ar": "",
        "evidence_en": "episode tt0629204 refers to episode_id = 'tt0629204'; credited refers to credited = 'true'; not credited refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT T1.credited FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Anthony Azzara' AND T1.episode_id = 'tt0629204'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many keywords are there in the episode Disciple?",
        "question_ar": "",
        "evidence_en": "episode Disciple refers to title = 'Disciple'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episode got the most 1 star votes? Give its title.",
        "question_ar": "",
        "evidence_en": "the most refers to max(votes); 1 star refers to stars = '1'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 1 ORDER BY T1.votes DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many nominations did Law and Order season 9, episode 20 get?",
        "question_ar": "",
        "evidence_en": "Law and Order refers to series = 'Law and Order'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20"
    },
    {
        "db_id": "law_episode",
        "question_en": "For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit?",
        "question_ar": "",
        "evidence_en": "Law and Order refers to series = 'Law and Order'; included in the credit refers to credited = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 17 AND T2.credited = 'true'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Describe what happened in the episode of award no.296.",
        "question_ar": "",
        "evidence_en": "description of what happened refers to summary; award no.296 refers to award_id = '296'",
        "evidence_ar": "",
        "SQL": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.award_id = 296"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which role did Joseph Blair play in the show?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Joseph Blair'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many awards has Rene Balcer been nominated for?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer'"
    },
    {
        "db_id": "law_episode",
        "question_en": "For the episode with the most votes, give its air date.",
        "question_ar": "",
        "evidence_en": "the most votes refers to max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id GROUP BY T2.episode_id ORDER BY SUM(T1.votes) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who was nominated for award no.313? Give the full name.",
        "question_ar": "",
        "evidence_en": "award no.313 refers to award_id = '313'; full name refers to name",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award_id = 313"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many episodes did J.K. Simmons' role appear on the show?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'J.K. Simmons'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Display the number of 9-star votes the episode Sideshow received.",
        "question_ar": "",
        "evidence_en": "9-star vote refers to stars = '9'; episode Sideshow refers to title = 'Sideshow'",
        "evidence_ar": "",
        "SQL": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 9 AND T1.title = 'Sideshow'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many times is the number of keywords in \"Refuge: Part 1\" episode than \"Shield\" episode?",
        "question_ar": "",
        "evidence_en": "\"Refuge: Part 1\" episode refers to title = 'Refuge: Part 1'; \"Shield\" episode refers to title = 'Shield'; times = divide(count(keyword where title = 'Refuge: Part 1'), count(keyword where title = 'Shield'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.title = 'Refuge: Part 1' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Shield' THEN 1 ELSE 0 END) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id"
    },
    {
        "db_id": "law_episode",
        "question_en": "Calculate the average number of cast members that appeared in the credit from the 185th to the 193rd episode.",
        "question_ar": "",
        "evidence_en": "appeared in the credit refers to credited = 'TRUE'; from the 185th to the 193rd episode refers to number_in_series between 185 and 193; cast refers to category = 'Cast'; average number = divide(count(episode_id), 9)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.episode_id) AS REAL) / (193 - 185 + 1) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T1.credited = 'true' AND T2.number_in_series BETWEEN 185 AND 193"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the names of the person that were not credited at the end of episode tt0629391?",
        "question_ar": "",
        "evidence_en": "not credited refers to credited = ''; episode tt0629391 refers to episode_id = 'tt0629391'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.credited = 'false' AND T1.episode_id = 'tt0629391'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people have won at least 3 awards?",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; at least 3 awards refers to count(result) > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.result = 'Winner' GROUP BY T1.person_id HAVING COUNT(T2.award_id) >= 3"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the script supervisor of the series in episode tt0629204?",
        "question_ar": "",
        "evidence_en": "who refers to name; script supervisor refers to role = 'script supervisor'; episode tt0629204 refers to episode_id = 'tt0629204'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629204' AND T1.role = 'script supervisor'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many awards has Julia Roberts been nominated for?",
        "question_ar": "",
        "evidence_en": "been nominated refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Julia Roberts' AND T2.result = 'Nominee'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the tallest camera operator?",
        "question_ar": "",
        "evidence_en": "who refers to name; the tallest refers to max(height_meters); camera operator refers to role = 'camera operator'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'camera operator' ORDER BY T2.height_meters DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people, who were born in Canada, won an award in 1999?",
        "question_ar": "",
        "evidence_en": "born in Canada refers to birth_country = 'Canada'; in 1999 refers to year = 1999",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people gave the most enjoyed episode a 10-star rating?",
        "question_ar": "",
        "evidence_en": "the most enjoyed refers max(rating); 10-star refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the keywords of the \"Shield\" episode?",
        "question_ar": "",
        "evidence_en": "\"Shield\" episode refers to title = 'Shield'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the percentage of people who gave the \"True North\" episode a 1-star rating?",
        "question_ar": "",
        "evidence_en": "the \"True North\" episode refers to title = 'True North'; 1-star refers to stars = 1; percentage = divide(count(episode_id where stars = 1), count(episode_id)) * 100% where title = 'True North'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episode with the highest number of keywords?",
        "question_ar": "",
        "evidence_en": "the highest number of keywords refers to max(count(keyword))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Among the episodes that were aired in 1998, how many won an International Monitor Awards?",
        "question_ar": "",
        "evidence_en": "aired in 1998 refers to air_date like '1998%'; won refers to result = 'Winner'; International Monitor Awards refers to organization = 'International Monitor Awards'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many times did the episode titled \"Agony\" win an award?",
        "question_ar": "",
        "evidence_en": "titled \"Agony\" refers to title = 'Agony'; win an award refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many episodes are there in the 9th season of Law and Order? Calculate the average number of casts per season of the said series.",
        "question_ar": "",
        "evidence_en": "the 9th season refers to season = 9; Law and Order refers to series = 'Law and Order'; cast refers to category = 'Cast'; average number of casts per season = divide(count(person_id), count(episode_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.episode_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T2.series = 'Law and Order'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the keywords of the episode which received the 2nd-highest number of votes?",
        "question_ar": "",
        "evidence_en": "the 2nd-highest number of votes refers to second max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.votes NOT IN ( SELECT MAX(T1.votes) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ) ORDER BY T1.votes DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many awards did the \"Agony\" win?",
        "question_ar": "",
        "evidence_en": "the \"Agony\" refers to title = 'Agony'; win refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the narrator of the \"Flight\" episode?",
        "question_ar": "",
        "evidence_en": "who refers to name; narrator refers to role = 'Narrator'; the \"Flight\" episode refers to title = 'Flight'",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Flight' AND T2.role = 'Narrator'"
    },
    {
        "db_id": "law_episode",
        "question_en": "In which organization did Constantine Makris win the most awards?",
        "question_ar": "",
        "evidence_en": "win refers to result = 'Winner'; the most awards refers to max(count(award_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.organization FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Constantine Makris' AND T2.result = 'Winner' GROUP BY T2.organization ORDER BY COUNT(T2.award_id) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the stunt coordinator in episode 3?",
        "question_ar": "",
        "evidence_en": "who refers to name; stunt coordinator refers to role = 'stunt coordinator'",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 3 AND T2.role = 'stunt coordinator'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people were not credited at the end of the \"Admissions\" episode?",
        "question_ar": "",
        "evidence_en": "not credited refers to credited = ''; the \"Admissions\" episode refers to title = 'Admissions'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Admissions' AND T2.credited = 'false'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episode that has the highest number of crews in the Art Department?",
        "question_ar": "",
        "evidence_en": "the highest number of crews refers to max(count(person_id)); in the Art Department refers to category = 'Art Department'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many roles did Julia Roberts play in the series?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Julia Roberts'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the titles of the top 3 episodes that received no less than 30 votes in its 10-star rating?",
        "question_ar": "",
        "evidence_en": "no less than 30 votes refers to votes > = 30; 10-star rating refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.votes >= 30 AND T1.stars = 10 ORDER BY T1.votes DESC LIMIT 3"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the youngest person to ever play a \"clerk\" role in the series?",
        "question_ar": "",
        "evidence_en": "who refers to name; the youngest person refers to max(birthdate); a \"clerk\" role refers to role = 'Clerk'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'Clerk' AND T2.birthdate IS NOT NULL ORDER BY T2.birthdate LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people did not enjoy the finale episode?",
        "question_ar": "",
        "evidence_en": "did not enjoy refers to stars = 1; the finale episode refers to episode = 24",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 24 AND T2.stars = 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "List the names of all the cast members in the series.",
        "question_ar": "",
        "evidence_en": "cast member refers to category = 'Cast'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the person who appeared the most in the series? Calculate in percentage how many times he or she appeared.",
        "question_ar": "",
        "evidence_en": "who refers to name; appear the most refers to max(count(person_id)); percentage = divide(count(person_id where max(count(person_id))), count(person_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT T2.person_id, CAST(COUNT(T2.person_id) AS REAL) * 100 / ( SELECT COUNT(T2.person_id) AS num FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id ) AS per FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episodes of the Law & Order have been nominated for the Primetime Emmy Awards?",
        "question_ar": "",
        "evidence_en": "episode refers to award; the Primetime Emmy Awards refers to award_category like 'Primetime Emmy'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT episode_id FROM Award WHERE award_category = 'Primetime Emmy'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many episodes have not won any Law & Order series awards?",
        "question_ar": "",
        "evidence_en": "have not won any award refers to Result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What roles have not been credited at the end of the episodes?",
        "question_ar": "",
        "evidence_en": "have not been credited refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the 3 worst rated episodes?",
        "question_ar": "",
        "evidence_en": "worst rated refers to min(rating)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM Episode ORDER BY rating LIMIT 3"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the full place of birth of Rene Chenevert Balcer?",
        "question_ar": "",
        "evidence_en": "full place of birth refers to birth_place, birth_region; Rene Chenevert Balcer refers to birth_name = 'Rene Chenevert Balcer'",
        "evidence_ar": "",
        "SQL": "SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the name of the actors born in the USA?",
        "question_ar": "",
        "evidence_en": "born in the USA refers to birth_country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE birth_country = 'USA'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episodes that were least enjoyed?",
        "question_ar": "",
        "evidence_en": "least enjoyed refers to stars = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the names of the two people who won an award for their role as directors?",
        "question_ar": "",
        "evidence_en": "won an award refers to result = 'Winner'; role as director refers to role = 'director'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Winner' AND T2.role = 'director'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many votes did the episode titled Juvenile get?",
        "question_ar": "",
        "evidence_en": "the episode titled Juvenile refers to title = 'Juvenile'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Juvenile'"
    },
    {
        "db_id": "law_episode",
        "question_en": "In which episodes was Anthony Azzara not credited?",
        "question_ar": "",
        "evidence_en": "which episode refers to title; not credited refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'false' AND T3.name = 'Anthony Azzara'"
    },
    {
        "db_id": "law_episode",
        "question_en": "In what year did the episodes titled DWB get an award?",
        "question_ar": "",
        "evidence_en": "titled DWB refers to title = 'DWB'; get an award refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'DWB' AND T1.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "In which region were the assistant location managers born?",
        "question_ar": "",
        "evidence_en": "region refers to birth_region; assistant location manager refers to role = 'assistant location manager'",
        "evidence_ar": "",
        "SQL": "SELECT T2.birth_region FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'president of NBC West Coast'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many stars did the episodes in which Donna Villella worked?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Donna Villella'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What role was Julia Roberts nominated for?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Nominee' AND T1.name = 'Julia Roberts'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What role does the tallest person play?",
        "question_ar": "",
        "evidence_en": "the tallest refers to max(height_meters)",
        "evidence_ar": "",
        "SQL": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the title of the episode with the most nominations?",
        "question_ar": "",
        "evidence_en": "the most nominations refers to max(count(episode_id where result = 'Nominee'))",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "What was the rating of the episodes that Jace Alexander worked on?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Jace Alexander'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the names of all the people who worked on episode 19 of season 9?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 19 AND T1.season = 9"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the average star rating of the episodes Jim Bracchitta has worked on?",
        "question_ar": "",
        "evidence_en": "average star rating = divide(sum(stars), count(episode_id)) where name = 'Jim Bracchitta'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.episode_id) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 AND T1.name = 'Jim Bracchitta'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What percentage of people have worked on the True North episode as additional crew?",
        "question_ar": "",
        "evidence_en": "the True North episode refers to title = 'True North'; additional crew refers to role = 'Additional Crew'; percentage = divide(count(episode_id where role = 'Additional Crew'), count(episode_id)) * 100% where title = 'True North'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Write down the title, summary, and air date of the episode that garnered 72 10-star votes.",
        "question_ar": "",
        "evidence_en": "72 10-star votes refers to stars = 10 and votes = 72",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T2.summary, T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10 AND T1.votes = 72"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many 6-star votes did episode 12 get? Please include the air date and rating.",
        "question_ar": "",
        "evidence_en": "6-star vote refers to stars = 6",
        "evidence_ar": "",
        "SQL": "SELECT T2.air_date, T2.rating FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 6 AND T2.episode = 12"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who is the winner of the Best Television Episode award for the Edgar category in 2000? Include his or her name and role.",
        "question_ar": "",
        "evidence_en": "the Best Television Episode award refers to award = 'Best Television Episode'; the Edgar category refers to award_category = 'Edgar'; in 2000 refers to year = 2000",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 2000 AND T2.award_category = 'Edgar' AND T2.award = 'Best Television Episode'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Write down the organization, year, award, and award category in which Rene Balcer is the winner.",
        "question_ar": "",
        "evidence_en": "Rene Balcer refers to name = 'Rene Balcer'; the winner refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T2.organization, T2.year, T2.award, T2.award_category FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer' AND T2.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Give me the years and episode IDs in which Constantine Makris was the winner of the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years.",
        "question_ar": "",
        "evidence_en": "the winner refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
        "evidence_ar": "",
        "SQL": "SELECT t3.years, t3.episode_id FROM ( SELECT DISTINCT T2.year AS years, T2.episode_id, row_number() OVER (PARTITION BY T2.episode_id ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T1.name = 'Constantine Makris' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.episode_id HAVING COUNT(t3.years - t3.rm) >= 2"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years?",
        "question_ar": "",
        "evidence_en": "who refers to name; writer refers to role = 'writer'; won refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
        "evidence_ar": "",
        "SQL": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'nominee'; the Law and Order series refers to series = 'Law and Order'; the Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; in 1999 refers to year = 1999",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.year = 1999 AND T2.result = 'Nominee' AND T1.episode = 20 AND T2.organization = 'Primetime Emmy Awards' AND T1.series = 'Law and Order'"
    },
    {
        "db_id": "law_episode",
        "question_en": "On what episode did Julia Roberts win the \"Outstanding Guest Actress in a Drama Series\" award during the 1999 Primetime Emmy Awards? Tell me her role.",
        "question_ar": "",
        "evidence_en": "win refers to result = 'Winner'; the \"Outstanding Guest Actress in a Drama Series\" award refers to award = 'Outstanding Guest Actress in a Drama Series'; the 1999 refers to year = 1999; Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'",
        "evidence_ar": "",
        "SQL": "SELECT T3.episode_id, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id WHERE T2.year = 1999 AND T2.award = 'Outstanding Guest Actress in a Drama Series' AND T2.organization = 'Primetime Emmy Awards' AND T1.name = 'Julia Roberts' AND T2.result = 'Nominee'"
    },
    {
        "db_id": "law_episode",
        "question_en": "List the titles and air dates of episodes that were produced by Billy Fox.",
        "question_ar": "",
        "evidence_en": "produced refers to role = 'producer'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.air_date FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.category = 'Produced by' AND T2.role = 'producer' AND T3.name = 'Billy Fox'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Among the American casts, how many were uncredited on episode ID tt0629228?",
        "question_ar": "",
        "evidence_en": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; uncredited refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629228' AND T1.category = 'Cast' AND T1.credited = 'false' AND T2.birth_country = 'USA'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What was the role of Jason Kuschner in episode 9?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 9 AND T2.name = 'Jason Kuschner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who played the role of the \"president of NBC West Coast\" in the first episode?",
        "question_ar": "",
        "evidence_en": "who refers to name; the role of the \"president of NBC West Coast\" refers to role = 'president of NBC West Coast'; the first episode refers to episode = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 1 AND T1.role = 'president of NBC West Coast'"
    },
    {
        "db_id": "law_episode",
        "question_en": "List down the titles of the top 3 episodes, from highest to lowest, in terms of their weighted stars.",
        "question_ar": "",
        "evidence_en": "weighted stars = divide(sum(stars, percent), 100)",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the ratio of American casts on episode 2 of the series? Please include their roles.",
        "question_ar": "",
        "evidence_en": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; ratio = divide(count(person_id where birth_country = 'USA'), total(category)) where category = 'Cast'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category = 'Cast' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category), T1.role FROM Award AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id INNER JOIN Person AS T4 ON T2.person_id = T4.person_id WHERE T3.episode = 2 AND T4.birth_country = 'USA'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many people from Canada are nominated for an award?",
        "question_ar": "",
        "evidence_en": "from Canada refers to birth_country = Canada; nominated refers to award is NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many episodes are credited to Jerry Orbach?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'"
    },
    {
        "db_id": "law_episode",
        "question_en": "List out all the credit names for episode 9.",
        "question_ar": "",
        "evidence_en": "credit name refers to name",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 9"
    },
    {
        "db_id": "law_episode",
        "question_en": "List out all award titles nominated for episode 20.",
        "question_ar": "",
        "evidence_en": "award title refers to title; nominated refers to result = 'Winner' or result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T2.award FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 20 AND T2.result IN ('Winner', 'Nominee')"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which role have won at least two awards for the entire season and list out the name?",
        "question_ar": "",
        "evidence_en": "at least two awards refers to count(role) >1",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id GROUP BY T2.role HAVING COUNT(T2.award_id) > 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "List out director names that received an award along with the episode number.",
        "question_ar": "",
        "evidence_en": "director refers to role = 'director'; received an award refers to result = 'Winner'; episode number refers to episode",
        "evidence_ar": "",
        "SQL": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episodes are nominated for an awards but not win?",
        "question_ar": "",
        "evidence_en": "nominated for an award but not win refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Nominee'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the average rating for each episode in season 9?",
        "question_ar": "",
        "evidence_en": "average rating = divide(sum(rating), count(episode_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(rating) / COUNT(episode_id) FROM Episode WHERE season = 9"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the difference of 10 stars votes between the first episode and the last episode?",
        "question_ar": "",
        "evidence_en": "the first episode refers to episode = 1; the last episode refers to episode = 24; 10 stars vote refers to stars = 10; the difference = subtract(votes where episode = 1, votes where episode = 24) where stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.episode = 24 THEN T1.votes ELSE 0 END) - SUM(CASE WHEN T2.episode = 1 THEN T1.votes ELSE 0 END) FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the episode rating with the most award won?",
        "question_ar": "",
        "evidence_en": "the most award won refers to max(episode_id where result = 'Winner')",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many credits have been displayed from episode 1 until 10?",
        "question_ar": "",
        "evidence_en": "credit displayed refers to credited = 'true'; from episode 1 until 10 refers to episode > = 1 AND episode < = 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the episode that has mafia keyword?",
        "question_ar": "",
        "evidence_en": "mafia keyword refers to Keyword = 'mafia'",
        "evidence_ar": "",
        "SQL": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.Keyword = 'mafia'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the average star with highest percentage for episodes that have received award?",
        "question_ar": "",
        "evidence_en": "received award refers to result = 'Winner'; the highest percentage refers to max(percent); average star = divide(sum(stars), count(episode_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.person_id FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.percent DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the average ranking episodes that are nominated for an award?",
        "question_ar": "",
        "evidence_en": "average ranking = divide(sum(rating), sum(episode_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.rating) / COUNT(T1.episode) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id"
    },
    {
        "db_id": "law_episode",
        "question_en": "How many winners have been awarded a Television award by the \"American Bar Association Silver Gavel Awards for Media and the Arts\"?",
        "question_ar": "",
        "evidence_en": "winner refers to result = 'Winner'; Television award refers to award = 'Television'; the \"American Bar Association Silver Gavel Awards for Media and the Arts\" refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which continent was Michael Preston born on?",
        "question_ar": "",
        "evidence_en": "continent refers to birth_country",
        "evidence_ar": "",
        "SQL": "SELECT birth_country FROM Person WHERE name = 'Michael Preston'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who was the nominee playing the role of Katrina Ludlow in the Law & Order series?",
        "question_ar": "",
        "evidence_en": "nominee refers to result = 'Nominee'; the role of Katrina Ludlow refers to role = 'Katrina Ludlow'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Nominee' AND T1.role = 'Katrina Ludlow' AND T1.series = 'Law and Order'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who played the role of a teleplay in the episode that won \"Best Television Episode\"?",
        "question_ar": "",
        "evidence_en": "the role of a teleplay refers to role = 'teleplay'; won refers to result = 'Winner'; \"Best Television Episode\" refers to award = 'Best Television Episode'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T1.award = 'Best Television Episode'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What is the date of birth of the actor who played the role of a \"writer\"?",
        "question_ar": "",
        "evidence_en": "date of birth refers to birthdate",
        "evidence_ar": "",
        "SQL": "SELECT T2.birthdate FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'writer'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episode was nominated for the award for \"Outstanding Costume Design for a Series\"?",
        "question_ar": "",
        "evidence_en": "episode refers to title; \"Outstanding Costume Design for a Series\" refers to award = 'Outstanding Costume Design for a Series'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Costume Design for a Series'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episode has the highest total number of viewer votes?",
        "question_ar": "",
        "evidence_en": "episode refers to title; the highest total number of viewer votes refers to max(sum(votes))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.title ORDER BY SUM(T1.votes) DESC LIMIT 1"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who was the actor who was portraying \"Alex Brown\" and has been credited?",
        "question_ar": "",
        "evidence_en": "who refers to name; portraying \"Alex Brown\" refers to role = 'Alex Brown'; has been credited refers to credited = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T2.role = 'Alex Brown' AND T2.credited = 'true'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Where is the place of birth of the actor with the number nm0007064 who has not been credited for playing the role of a \"Narrator\"?",
        "question_ar": "",
        "evidence_en": "place of birth refers to birth_place; actor with the number nm0007064 refers to person_id = 'nm007064'; has not been credited refers to credited = ''; the role of a \"Narrator\" refers to role = 'narrator'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id = 'nm0007064' AND T2.role = 'Narrator' AND T2.credited = 'false'"
    },
    {
        "db_id": "law_episode",
        "question_en": "What are the keywords of the episode \"Shield\"?",
        "question_ar": "",
        "evidence_en": "the episode \"Shield\" refers to title = 'Shield'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'"
    },
    {
        "db_id": "law_episode",
        "question_en": "Who are the actors with a height of over 1.80m in an episode that won an award?",
        "question_ar": "",
        "evidence_en": "who refers to name; a height of over 1.80m refers to height_meters > 1.80; won an award refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episode has the two keywords \"nun\" and \"priest\"?",
        "question_ar": "",
        "evidence_en": "episode refers to title; the two keywords \"nun\" and \"priest\" refers to keyword = 'nun' or keyword = 'priest';",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('nun', 'priest')"
    },
    {
        "db_id": "law_episode",
        "question_en": "Which episode number has the second highest positive viewer comments and has been awarded \"Best Television Episode\"?",
        "question_ar": "",
        "evidence_en": "episode number refers to episode_id; awarded \"Best Television Episode\" refers to award = 'Best Television Episode' and result = 'Winner'; the second highest positive viewer comments refers to rating = 8.5",
        "evidence_ar": "",
        "SQL": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best Television Episode' AND T1.result = 'Winner' ORDER BY T2.rating DESC LIMIT 2"
    },
    {
        "db_id": "law_episode",
        "question_en": "Please list any three episodes that were most enjoyed by the viewers.",
        "question_ar": "",
        "evidence_en": "episode refers to title; most enjoyed by the viewers refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3"
    },
    {
        "db_id": "synthea",
        "question_en": "According to the observation on 2008/3/11, what was the height of Elly Koss?",
        "question_ar": "",
        "evidence_en": "2008/3/11 refers to date = '2008-03-11'; height refers to DESCRIPTION = 'Body Height' from observations;",
        "evidence_ar": "",
        "SQL": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.date = '2008-03-11' AND T2.description = 'Body Height'"
    },
    {
        "db_id": "synthea",
        "question_en": "By how much did Elly Koss's weight increase from the observation in 2008 to the observation in 2009?",
        "question_ar": "",
        "evidence_en": "SUBTRACT((DATE like '2009%'), (DATE like '2008%')) where DESCRIPTION = 'Body Weight';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN strftime('%Y', T2.date) = '2009' THEN T2.VALUE END) - SUM(CASE WHEN strftime('%Y', T2.date) = '2008' THEN T2.VALUE END) AS increase , T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Height'"
    },
    {
        "db_id": "synthea",
        "question_en": "During all the observations of Elly Koss, what was the highest Systolic Blood Pressure observed?",
        "question_ar": "",
        "evidence_en": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations;",
        "evidence_ar": "",
        "SQL": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "For how many times had Elly Koss have her Systolic Blood Pressure observed?",
        "question_ar": "",
        "evidence_en": "Systolic Blood Pressure refers to DESCRIPTION = 'Systolic Blood Pressure';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.description) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure'"
    },
    {
        "db_id": "synthea",
        "question_en": "The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations; full name refers to first, last;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.VALUE = ( SELECT MAX(VALUE) FROM observations WHERE description = 'Systolic Blood Pressure' ) LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "For how long was Elly Koss required to take Acetaminophen?",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION like 'Acetaminophen%';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'"
    },
    {
        "db_id": "synthea",
        "question_en": "Please list all the medication that are prescribed to Elly Koss.",
        "question_ar": "",
        "evidence_en": "medication that are prescribed refers to DESCRIPTION from medications;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss'"
    },
    {
        "db_id": "synthea",
        "question_en": "Why did Elly Koss need to take Acetaminophen?",
        "question_ar": "",
        "evidence_en": "why need to take Acetaminophen refers to REASONDESCRIPTION  where DESCRIPTION like 'Acetaminophen%' from medications;",
        "evidence_ar": "",
        "SQL": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'"
    },
    {
        "db_id": "synthea",
        "question_en": "What medication did Elly Koss take when she had Streptococcal sore throat?",
        "question_ar": "",
        "evidence_en": "medication refers to DESCRIPTION from medications; Streptococcal sore throat refers to REASONDESCRIPTION like 'Streptococcal sore throat%';",
        "evidence_ar": "",
        "SQL": "SELECT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.reasondescription = 'Streptococcal sore throat (disorder)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Please give the full names of all the patients who had been prescribed with Acetaminophen.",
        "question_ar": "",
        "evidence_en": "full name refers to first, last; prescribed with Acetaminophen refer to DESCRIPTION like 'Acetaminophen%' from medications;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.description LIKE 'Acetaminophen%'"
    },
    {
        "db_id": "synthea",
        "question_en": "What was the condition of Elly Koss on 2009/1/8?",
        "question_ar": "",
        "evidence_en": "condition on 2009/1/8 refers to DESCRIPTION from conditions where START = '2009-01-08';",
        "evidence_ar": "",
        "SQL": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'"
    },
    {
        "db_id": "synthea",
        "question_en": "For how long did Elly Koss's cystitis last?",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION = 'Cystitis';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Cystitis'"
    },
    {
        "db_id": "synthea",
        "question_en": "According to all the observations of Elly Koss, what was her average weight?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(VALUE), COUNT(VALUE)) WHERE DESCRIPTION = 'Body Weight';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.VALUE), T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Weight'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among all the patients who once had cystitis, what was the percentage of them being married?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(marital = 'M'), COUNT(patient)) as percentage where DESCRIPTION = 'Cystitis';\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.marital = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.description = 'Cystitis'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give the body height status of Mr. Vincent Wyman on 2010/8/2.",
        "question_ar": "",
        "evidence_en": "body height status refers to DESCRIPTION = 'Body Height' from observations; on 2010/8/2 refers to DATE = '2010-08-02';",
        "evidence_ar": "",
        "SQL": "SELECT T2.description, T2.VALUE, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Vincent' AND T1.last = 'Wyman' AND T2.date = '2010-08-02' AND T2.description = 'Body Height'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many care plans has Mrs. Norman Berge taken?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Norman' AND T1.last = 'Berge'"
    },
    {
        "db_id": "synthea",
        "question_en": "Why did Mrs. Annabelle Pouros take leucovorin 100 mg injection on 1970/12/19? State the reason.",
        "question_ar": "",
        "evidence_en": "reason why take leucovorin 100 mg injection refers to REASONDESCRIPTION where DESCRIPTION = 'Leucovorin 100 MG Injection'; on 1970/12/19 refers to START = '1970-12-19';",
        "evidence_ar": "",
        "SQL": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the prevalence percentage of condition no. 64859006?",
        "question_ar": "",
        "evidence_en": "condition no. 64859006 refers to conditions where CODE = '64859006';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.\"PREVALENCE PERCENTAGE\" FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '64859006'"
    },
    {
        "db_id": "synthea",
        "question_en": "State the prevalence rate of condition no. 368581000119106.",
        "question_ar": "",
        "evidence_en": "condition no. 368581000119106 refers to conditions where CODE = '368581000119106';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.\"PREVALENCE RATE\" FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '368581000119106'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give the procedure description of Ms. Jacquelyn Shanahan on 2009/8/9.",
        "question_ar": "",
        "evidence_en": "on 2009/8/9 refers to DATE = '2009-08-09';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DATE = '2009-08-09'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give the number of claims did Ms. Abbie Cole have in the year of 2011.",
        "question_ar": "",
        "evidence_en": "in the year of 2011 refers to BILLABLEPERIOD between '2010-12-31' and '2012-01-01';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BILLABLEPERIOD) FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Abbie' AND T1.last = 'Cole' AND T2.BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many allergies does Mrs. Saundra Monahan have?",
        "question_ar": "",
        "evidence_en": "allergies refer to PATIENT from allergies;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.code) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Saundra' AND T1.last = 'Monahan'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the name of the patient who had a claim on 1947/9/11.",
        "question_ar": "",
        "evidence_en": "name of the patient implies full name and refers to first, last; on 1947/9/11 refers to BILLABLEPERIOD = '1947-09-11';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.billableperiod = '1947-09-11'"
    },
    {
        "db_id": "synthea",
        "question_en": "Describe the encounter of Mr. Hubert Baumbach on 2008/10/25.",
        "question_ar": "",
        "evidence_en": "encounter refers to DESCRIPTION from encounters; on 2008/10/25 refers to DATE = '2008-10-25';",
        "evidence_ar": "",
        "SQL": "SELECT T2.description FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Hubert' AND T1.last = 'Baumbach' AND T2.date = '2008-10-25'"
    },
    {
        "db_id": "synthea",
        "question_en": "What kind of condition did Keven Kuhn have from 2016/9/24 to 2016/10/10? Describe the condition.",
        "question_ar": "",
        "evidence_en": "kind of condition refers to DESCRIPTION from conditions; from 2016/9/24 to 2016/10/10 refers to START = '2016-09-24' and STOP = '2016-10-10';",
        "evidence_ar": "",
        "SQL": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'"
    },
    {
        "db_id": "synthea",
        "question_en": "When did Mrs. Ira Deckow have the standard pregnancy test?",
        "question_ar": "",
        "evidence_en": "standard pregnancy test refers to DESCRIPTION = 'Standard pregnancy test' from procedures;",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the average period of Mr. Wesley Lemke's care plans.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(stop time - start time), COUNT(ID)));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Wesley' AND T1.last = 'Lemke'"
    },
    {
        "db_id": "synthea",
        "question_en": "State the average period of Ms. Angelena Kertzmann's several normal pregnancies.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(stop time - start time), COUNT(DESCRIPTION = 'Normal pregnancy')));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Angelena' AND T1.last = 'Kertzmann' AND T2.description = 'Normal pregnancy'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the id of the patient who has the longest allergy period?",
        "question_ar": "",
        "evidence_en": "id of the patient refers to PATIENT from allergies where STOP is not null; the longest allergy period refers to MAX(SUBTRACT((SUBSTR(STOP, - 2, 1)! = '9' then substr(STOP, length(STOP) - 1) + 2000 end), (SUBSTR(START, - 2, 1) = '9' then substr(START, length(START) - 1) + 1900 else substr(START, length(START) - 1) + 2000 end)));\n",
        "evidence_ar": "",
        "SQL": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients have diabetes that started in 1988?",
        "question_ar": "",
        "evidence_en": "diabetes that started in 1988 refers to DESCRIPTION = 'Diabetes' from conditions and START like '1988%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(PATIENT) FROM conditions WHERE DESCRIPTION = 'Diabetes' AND strftime('%Y', START) = '1988'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients are allergic to eggs?",
        "question_ar": "",
        "evidence_en": "allergic to eggs refer to DESCRIPTION = 'Allergy to eggs' from allergies;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(PATIENT) FROM allergies WHERE DESCRIPTION = 'Allergy to eggs'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the id of the patient whose hypertension started most recently?",
        "question_ar": "",
        "evidence_en": "id of the patient refers to PATIENT from conditions;  hypertension refers to DESCRIPTION = 'Hypertension'; most recently refers to MAX(START);",
        "evidence_ar": "",
        "SQL": "SELECT PATIENT FROM conditions WHERE START = ( SELECT MAX(START) FROM conditions WHERE DESCRIPTION = 'Hypertension' )"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the most common allergy among patients?",
        "question_ar": "",
        "evidence_en": "the most common allergy refers to MAX(COUNT(DESCRIPTION)) from allergies;",
        "evidence_ar": "",
        "SQL": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is/are the ids of the tallest patient/s?",
        "question_ar": "",
        "evidence_en": "id of the tallest patient/s refers to PATIENT from observations where MAX(DESCRIPTION = 'Body Height');",
        "evidence_ar": "",
        "SQL": "SELECT PATIENT FROM observations WHERE DESCRIPTION = 'Body Height' AND UNITS = 'cm' ORDER BY VALUE DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the most common condition among the female Americans?",
        "question_ar": "",
        "evidence_en": "the most common condition refers to MAX(COUNT(DESCRIPTION)); among the female Americans refer to PATIENT where gender = 'F' and ethnicity = 'american';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients that started taking Ibuprofen 200mg Oral Tablet in 2016, how many Dominican patients stopped taking the medicine after exactly one month?",
        "question_ar": "",
        "evidence_en": "Ibuprofen 200mg Oral Tablet refers to DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' from medications; started in 2016 refers to START like '2016%'; Dominican patients refer to ethnicity = 'dominican'; stopped taking the medicine after exactly one month refers to SUBTRACT(strftime('%m', STOP), strftime('%m', START)) = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1"
    },
    {
        "db_id": "synthea",
        "question_en": "How many of the patients born in 1920s had pneumonia?",
        "question_ar": "",
        "evidence_en": "patients born in 1920s refer to patient where birthdate like '192%'; pneumonia refers to DESCRIPTION = 'Pneumonia' from conditions;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE DESCRIPTION = 'Pneumonia' AND strftime('%Y', T1.birthdate) LIKE '192%'"
    },
    {
        "db_id": "synthea",
        "question_en": "What are the full names of the patients who started taking Yaz 28 Day Pack in 2011?",
        "question_ar": "",
        "evidence_en": "full name refers to first, last; Yaz 28 Day Pack refers to DESCRIPTION = 'Yaz 28 Day Pack' from medications; started taking in 2011 refers to START like '2011%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last, T1.suffix FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Yaz 28 Day Pack' AND strftime('%Y', T2.START) = '2011'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many Black patients were immunized with DTaP in 2013?",
        "question_ar": "",
        "evidence_en": "Black patients refer to patient where race = 'black'; immunized with DTaP refers to DESCRIPTION = 'DTaP' from immunizations; in 2013 refers to DATE like '2013%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many immunizations did the patient with the most prevalent condition that started recently get?",
        "question_ar": "",
        "evidence_en": "patient with the most prevalent condition refers to patient where MAX(PREVALENCE RATE); started recently refers to MAX(START);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients have the most prevalent conditions?",
        "question_ar": "",
        "evidence_en": "the most prevalent conditions refer to MAX(PREVALENCE RATE);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) ORDER BY T1.\"PREVALENCE RATE\" DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization?",
        "question_ar": "",
        "evidence_en": "the most common condition refers to MAX(DESCRIPTION) from conditions; patients who received influenza seasonal injectable preservative free immunization refer to PATIENT where DESCRIPTION = 'Influenza seasonal injectable preservative free' from immunizations;",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "List the ids of all the patients with condition that has a prevalence percentage of 18.8%.",
        "question_ar": "",
        "evidence_en": "ids of the patients refer to PATIENT from conditions; condition that has a prevalence percentage of 18.8% refers to PREVALENCE PERCENTAGE = 18.8;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.PATIENT FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T2.ITEM) = lower(T1.DESCRIPTION) WHERE T2.\"PREVALENCE PERCENTAGE\" = CAST(18.8 AS float)"
    },
    {
        "db_id": "synthea",
        "question_en": "How many conditions did Tyree Eichmann have?",
        "question_ar": "",
        "evidence_en": "conditions refer to DESCRIPTION from conditions;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Tyree' AND T1.last = 'Eichmann'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?",
        "question_ar": "",
        "evidence_en": "immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients with prediabetes, how many are female?",
        "question_ar": "",
        "evidence_en": "patients with prediabetes refer to PATIENT from conditions where DESCRIPTION = 'Prediabetes'; female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'F' AND T1.DESCRIPTION = 'Prediabetes'"
    },
    {
        "db_id": "synthea",
        "question_en": "Indicate the patient's full name with the lowest body mass index in kg/m2.",
        "question_ar": "",
        "evidence_en": "full name refers to first, last; the lowest body mass index in kg/m2 refers to DESCRIPTION = Body Mass Index from observations where MIN(VALUE) and UNITS = 'kg/m2';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' AND T2.UNITS = 'kg/m2' ORDER BY T2.VALUE LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the age of the patient with hypertension named Giovanni Russel?",
        "question_ar": "",
        "evidence_en": "age refers to SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)); hypertension refers to conditions where DESCRIPTION = 'Hypertension';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) AS age FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Giovanni' AND T2.last = 'Russel' AND T1.DESCRIPTION = 'Hypertension'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many Asian female patients take oxaliplatin 5 MG/ML [Eloxatin]?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; oxaliplatin 5 MG/ML [Eloxatin] refers to medications where DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]' AND T2.race = 'asian' AND T2.gender = 'F'"
    },
    {
        "db_id": "synthea",
        "question_en": "Count all of the living patients that had a stroke.",
        "question_ar": "",
        "evidence_en": "if deathdate is null, it means this patient is still alive or living; stroke refers to conditions where DESCRIPTION = 'Stroke';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.description = 'Stroke' AND T2.deathdate IS NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the total number of Asian patients who are allergic to peanuts?",
        "question_ar": "",
        "evidence_en": "Asian refers to race like 'asian%'; allergic to peanuts refers to allergies where DESCRIPTION = 'Allergy to peanuts'; \n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients with hypertension, what is the average of their diastolic blood pressure?",
        "question_ar": "",
        "evidence_en": "hypertension refers to conditions where DESCRIPTION = 'Hypertension'; average diastolic blood pressure refers to AVG(VALUE) where DESCRIPTION = 'Diastolic Blood Pressure' from observations;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN conditions AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Hypertension' AND T1.DESCRIPTION = 'Diastolic Blood Pressure'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the medicine prescribed for the patient with social security number 999-94-3751?",
        "question_ar": "",
        "evidence_en": "medicine prescribed refers to DESCRIPTION from medications; social security number 999-94-3751 refers to ssn = '999-94-3751';",
        "evidence_ar": "",
        "SQL": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-94-3751'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give the social security number of the female Irish patient allergic to grass pollen.",
        "question_ar": "",
        "evidence_en": "social security number refers to ssn; female refers to gender = 'F'; Irish refers to ethnicity = 'irish'; allergic to grass pollen refers to allergies where DESCRIPTION = 'Allergy to grass pollen';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'"
    },
    {
        "db_id": "synthea",
        "question_en": "Who is the patient involved in the care plan with code 311791003?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients that died, what is the condition of the oldest patient?",
        "question_ar": "",
        "evidence_en": "if deathdate is not null, it means this patient died; condition refers to DESCRIPTION from conditions; the oldest patient refers to MAX(SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)));",
        "evidence_ar": "",
        "SQL": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the code of the prevalent disease with the highest occurrences?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.code FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T1.ITEM = T2.DESCRIPTION ORDER BY T1.OCCURRENCES DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the glucose level of the patient that lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US?",
        "question_ar": "",
        "evidence_en": "glucose level refers to VALUE, UNITS where DESCRIPTION = 'Glucose' from observations; lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US refers to address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose' AND T1.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide at least 5 social security numbers of patients with a prevalent disease with a prevalence percentage lower than 30% of the average prevalence percentage of conditions.",
        "question_ar": "",
        "evidence_en": "social security number refers to ssn; prevalence percentage lower than 30% of the average prevalence percentage of conditions refers to PREVALENCE PERCENTAGE < MULTIPLY(0.3, AVG(PREVALENCE PERCENTAGE));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ssn FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON lower(T1.DESCRIPTION) = lower(T3.ITEM) WHERE CAST(T3.\"PREVALENCE PERCENTAGE\" AS REAL) * 100 / ( SELECT AVG('PREVALENCE PERCENTAGE') FROM all_prevalences ) < 30 LIMIT 5"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients with acute bronchitis, what is the percentage of Asian women?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(PATIENT where gender = 'F' and race = 'asian'), COUNT(PATIENT)) as percentage where DESCRIPTION = 'Acute bronchitis (disorder)' ;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' AND T2.race = 'asian' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Acute bronchitis (disorder)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the number of encounters for Major D'Amore.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "db_id": "synthea",
        "question_en": "List the procedures received by Emmy Waelchi.",
        "question_ar": "",
        "evidence_en": "procedures refer to DESCRIPTION from procedures;",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Emmy' AND T1.last = 'Waelchi'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the patients' full names who received the extraction of wisdom tooth.",
        "question_ar": "",
        "evidence_en": "patient's full name refers to first, last; extraction of wisdom tooth refers to DESCRIPTION = 'Extraction of wisdom tooth' from procedures;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Extraction of wisdom tooth'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the body weight of Elly Koss in every observation.",
        "question_ar": "",
        "evidence_en": "body weight VALUE and UNITS where DESCRIPTION = 'Body Weight' from observations;",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.DESCRIPTION = 'Body Weight'"
    },
    {
        "db_id": "synthea",
        "question_en": "Name the patients who had an allergy to soy.",
        "question_ar": "",
        "evidence_en": "allergy to soy refers to allergies where DESCRIPTION = 'Allergy to soya';",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to soya'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many times did Keven Kuhn receive DTaP immunization?",
        "question_ar": "",
        "evidence_en": "DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'"
    },
    {
        "db_id": "synthea",
        "question_en": "Who had to take Clopidogrel 75 MG Oral Tablet for over 10 years?",
        "question_ar": "",
        "evidence_en": "Who implies the full name of the patient which refers to first, last; Clopidogrel 75 MG Oral Tablet refers to medications where DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet'; for over 10 years refers to SUBTRACT(strftime('%Y', STOP), strftime('%Y', START)) > 10;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND strftime('%Y', T2.STOP) - strftime('%Y', T2.START) > 10"
    },
    {
        "db_id": "synthea",
        "question_en": "Which procedures and medications were received by the patient with the third-degree burn?",
        "question_ar": "",
        "evidence_en": "procedures refer to DESCRIPTION from procedures; medications refers to DESCRIPTION from medications; third-degree burn refers to conditions where DESCRIPTION = 'Third degree burn';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.DESCRIPTION, T3.DESCRIPTION FROM procedures AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN medications AS T3 ON T2.patient = T3.PATIENT WHERE T2.DESCRIPTION = 'Third degree burn'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide medications received by patients with an allergy to mould on 6th June 2016.",
        "question_ar": "",
        "evidence_en": "medications refers to DESCRIPTION from medications; allergy to mould refers to allergies where DESCRIPTION = 'Allergy to mould'; on 6th June 2016 refers to START = '6/6/16';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'"
    },
    {
        "db_id": "synthea",
        "question_en": "Describe the care plans received by the patient with secondary malignant neoplasm of the colon.",
        "question_ar": "",
        "evidence_en": "care plans refer to DESCRIPTION from careplans; secondary malignant neoplasm of the colon refers to conditions where DESCRIPTION = 'Secondary malignant neoplasm of colon';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Secondary malignant neoplasm of colon'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the prevalence rate of the patients' diseases started on 9th May 2014?",
        "question_ar": "",
        "evidence_en": "diseases started on 9th May 2014 refer to DESCRIPTION from conditions where START = '5/9/2014';",
        "evidence_ar": "",
        "SQL": "SELECT T2.\"PREVALENCE RATE\" FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T1.DESCRIPTION) = lower(T2.ITEM) WHERE T1.START = '2014-05-09'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg.",
        "question_ar": "",
        "evidence_en": "name implies the patient's full name which refers to first, last; age refers to deathdate is null then SUBTRACT(strftime('%Y', DATE), strftime('%Y', birthdate)); Systolic Blood Pressures are 200mmHg refers to DESCRIPTION = 'Systolic Blood Pressure' and VALUE = 200 and UNITS = 'mmHg' from observations; in 2011 refers to DATE like '2011%';",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(PATIENT when DESCRIPTION = 'Influenza seasonal injectable preservative free'), COUNT(PATIENT)) as percentage where strftime('%Y', 2017); English refers ethnicity = 'english';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the first name of patients who encountered normal pregnancy.",
        "question_ar": "",
        "evidence_en": "encountered normal pregnancy refers to encounters where REASONDESCRIPTION = 'Normal pregnancy';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Normal pregnancy'"
    },
    {
        "db_id": "synthea",
        "question_en": "What are the birth date of patients who took outpatient encounter care plan?",
        "question_ar": "",
        "evidence_en": "outpatient encounter care plan refers to careplans where DESCRIPTION = 'Outpatient Encounter';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.birthdate FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Outpatient Encounter'"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the first name of patients who have cystitis condition.",
        "question_ar": "",
        "evidence_en": "cystitis refers to conditions where DESCRIPTION = 'Cystitis';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Cystitis'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many stroke patients have married?",
        "question_ar": "",
        "evidence_en": "stroke refers to conditions where DESCRIPTION = 'Stroke'; married refers to the marital status of the patient in which marital = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Stroke' AND T1.marital = 'M'"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the address of patients who have billable period in 2010.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.address FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.BILLABLEPERIOD LIKE '2010%'"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the last name of patients who are allergic to dairy products.",
        "question_ar": "",
        "evidence_en": "allergic to dairy products refers to allergies where DESCRIPTION = 'Allergy to dairy product';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to dairy product'"
    },
    {
        "db_id": "synthea",
        "question_en": "When the allergy starts for Angelo Buckridge.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.START FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Adolfo' AND T1.last = 'Schmitt' AND T2.STOP IS NOT NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "How many of the male patients are allergic to house dust mites?",
        "question_ar": "",
        "evidence_en": "male patients refer to PATIENT where gender = 'M'; allergic to house dust mites refers to allergies where DESCRIPTION = 'House dust mite allergy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'"
    },
    {
        "db_id": "synthea",
        "question_en": "What kind of allergy is most common among white people?",
        "question_ar": "",
        "evidence_en": "kind of allergy is most common refers to MAX(COUNT(DESCRIPTION)) from allergies; white refers to race = 'white';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'white' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the first name of patients who received \"Influenza seasonal injectable preservative free\" immunization.",
        "question_ar": "",
        "evidence_en": "\"Influenza seasonal injectable preservative free\" immunization refers to immunizations where DESCRIPTION = 'Influenza seasonal injectable preservative free';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the number of female patients who accepted \"HPV quadrivalent\" immunization.",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; \"HPV quadrivalent\" immunization refers to immunizations where DESCRIPTION = 'HPV quadrivalent';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'F'"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the encounter descriptions of patients who were born in Pittsfield MA US.",
        "question_ar": "",
        "evidence_en": "born in Pittsfield MA US refers to birthplace = 'Pittsfield MA US';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pittsfield MA US'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the total type of allergies for German people.",
        "question_ar": "",
        "evidence_en": "type of allergies refers to DESCRIPTION from allergies; German people refer to PATIENT where ethnicity = 'german';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the average age of patients with prediabetes care plan.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(SUM(deathdate), SUM(birthdate)), COUNT(patient) where REASONDESCRIPTION = 'Prediabetes' from careplans;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN strftime('%Y', T2.STOP) - strftime('%Y', T1.birthdate) ELSE strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate) END) AS REAL) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many of the patients who have stopped taking medication for 'coronary heart disease' are still alive?",
        "question_ar": "",
        "evidence_en": "patients who have stopped taking medication for 'coronary heart disease' refer to PATIENT where REASONDESCRIPTION = 'Coronary Heart Disease' and STOP is not null from medications; if deathdate is null, it means this patient is still alive;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Coronary Heart Disease' AND T1.STOP IS NOT NULL AND T2.deathdate IS NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "How many of the patients who underwent a 'bone immobilization' procedure have a driver's license?",
        "question_ar": "",
        "evidence_en": "patients who underwent a 'bone immobilization' procedure refer to PATIENT from procedures where DESCRIPTION = 'Bone immobilization'; have a driver's license refers to drivers is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Bone immobilization' AND T1.drivers IS NOT NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "Indicate the full name of the patients who have 3 different allergies.",
        "question_ar": "",
        "evidence_en": "full name refers to first, last; have 3 different allergies refer to allergies where COUNT(DESCRIPTION) > 3;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT GROUP BY T1.patient ORDER BY COUNT(DISTINCT T2.DESCRIPTION) > 3"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients with 'allergy to eggs' have been immunized with 'Td (adult) preservative free'?",
        "question_ar": "",
        "evidence_en": "allergy to eggs' refers to allergies where DESCRIPTION = 'Allergy to eggs'; immunized with 'Td (adult) preservative free' refers to immunizations where DESCRIPTION = 'Td (adult) preservative free';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN immunizations AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Allergy to eggs' AND T3.DESCRIPTION = 'Td (adult) preservative free'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients with a body weight of more than 100 kg have a 'diabetes self-management plan' care plan?",
        "question_ar": "",
        "evidence_en": "body weight of more than 100 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg'; diabetes self-management plan refers to careplans.DESCRIPTION = 'Diabetes self management plan';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN observations AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Body Weight' AND T1.DESCRIPTION = 'Diabetes self management plan' AND T3.VALUE > 100 AND T3.UNITS = 'kg'"
    },
    {
        "db_id": "synthea",
        "question_en": "What gender is more prone to 'dander (animal) allergy'?",
        "question_ar": "",
        "evidence_en": "gender who is more prone to dander (animal) allergy refers to MAX(COUNT(Gender WHERE allergies.DESCRIPTION = 'Dander (animal) allergy'));",
        "evidence_ar": "",
        "SQL": "SELECT T1.gender FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Dander (animal) allergy' GROUP BY T1.gender ORDER BY COUNT(T1.gender) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "On what dates did the billable period begin for patients with the last name Dickinson?",
        "question_ar": "",
        "evidence_en": "dates when the billable period begin refers to BILLABLEPERIOD;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.BILLABLEPERIOD FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.last = 'Dickinson'"
    },
    {
        "db_id": "synthea",
        "question_en": "List the full name of all patients with 'otitis media'.",
        "question_ar": "",
        "evidence_en": "full name = first, last; otitis media refers to conditions.DESCRIPTION = 'Otitis media';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Otitis media'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients of Irish ethnicity take medication for 'myocardial infarction'?",
        "question_ar": "",
        "evidence_en": "take medication for myocardial infarction refers to medications.REASONDESCRIPTION = 'Myocardial Infarction';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Myocardial Infarction' AND T1.ethnicity = 'irish'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients with care plan for 'concussion with loss of consciousness' are married?",
        "question_ar": "",
        "evidence_en": "concussion with loss of consciousness refers to careplans.DESCRIPTION = 'Concussion with loss of consciousness'; married refers to marital = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND T2.REASONDESCRIPTION = 'Concussion with loss of consciousness'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients immunized against 'monovalent rotavirus' ceased their care plan on 11/23/2013?",
        "question_ar": "",
        "evidence_en": "immunized against monovalent rotavirus refers to immunizations.DESCRIPTION = 'rotavirus monovalent'; ceased their care plan on 11/23/2013 refers to careplans.STOP = '2013-11-23';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many women need to take 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'?",
        "question_ar": "",
        "evidence_en": "women refers to gender = 'F'; Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual] refers to medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]' AND T1.gender = 'F'"
    },
    {
        "db_id": "synthea",
        "question_en": "What percentage of patients born in 'Pembroke MA US' have 'allergy to grass pollen'?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(patient WHERE allergies.DESCRIPTION = 'Allergy to grass pollen'), COUNT(patient) WHERE birthplace = 'Pembroke MA US'), 100.0); born in Pembroke MA US refers to birthplace = 'Pembroke MA US'; allergy to grass pollen refers to allergies.DESCRIPTION = 'Allergy to grass';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) AS REL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pembroke MA US'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the average body weight of Asian patients?",
        "question_ar": "",
        "evidence_en": "average = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Weight' AND observations.UNITS = 'kg'); body weight refers to observations.DESCRIPTION = 'Body Weight'; Asian refers to race = 'asian';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.VALUE) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'asian' AND T2.DESCRIPTION = 'Body Weight' AND T2.UNITS = 'kg'"
    },
    {
        "db_id": "synthea",
        "question_en": "Write down the Social Security numbers of patients who have latex allergies.",
        "question_ar": "",
        "evidence_en": "Social Security numbers refers to ssn; latex allergies refers to allergies.DESCRIPTION = 'Latex allergy';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ssn FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Latex allergy'"
    },
    {
        "db_id": "synthea",
        "question_en": "How long did Isadora Moen's allergy last? Tell me what kind of allergy she has.",
        "question_ar": "",
        "evidence_en": "how long the allergies last = SUBTRACT(allergies.STOP, allergies.START); kind of allergy refers to allergies.DESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUBSTR(T1.STOP, -2, 1) != '9' THEN SUBSTR(T1.STOP, LENGTH(T1.STOP) - 1) + 2000 END - CASE WHEN SUBSTR(T1.START, -2, 1) = '9' THEN SUBSTR(T1.START, LENGTH(T1.START) - 1) + 1900 ELSE SUBSTR(T1.START, LENGTH(T1.START) - 1) + 2000 END AS years , T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T2.patient = T1.PATIENT WHERE T1.STOP IS NOT NULL AND T1.START IS NOT NULL AND T2.first = 'Isadora' AND T2.last = 'Moen'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many times was Elly Koss given a care plan between 1/11/2009 and 10/23/2010?",
        "question_ar": "",
        "evidence_en": "between 1/11/2009 and 10/23/2010 refers to careplans.START between '2009-11-1' and '2010-10-23';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'"
    },
    {
        "db_id": "synthea",
        "question_en": "In 2009, who among the married patients had undergone a care plan for more than 60 days?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year(careplans.START) = 2009; married patients refers to marital = 'M'; undergone a care plan for more than 60 days refers to SUBTRACT(careplans.STOP, careplans.START) > 60;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND strftime('%J', T2.STOP) - strftime('%J', T2.START) > 60"
    },
    {
        "db_id": "synthea",
        "question_en": "Please provide the dates on which Elly Koss was immunized with the influenza seasonal injectable preservative-free vaccine.",
        "question_ar": "",
        "evidence_en": "date of immunization refers to immunizations.DATE; immunized with the influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Elly' AND T1.last = 'Koss'"
    },
    {
        "db_id": "synthea",
        "question_en": "From 7/9/2010 to 10/29/2013, how many black patients were immunized with the meningococcal MCV4P vaccine?",
        "question_ar": "",
        "evidence_en": "From 7/9/2010 to 10/29/2013 refers to DATE between '2010-07-09' and '2013-10-29'; black patients refers to race = 'black'; immunized with the meningococcal MCV4P vaccine refers to immunizations.DESCRIPTION = 'meningococcal MCV4P';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'meningococcal MCV4P' AND T2.DATE BETWEEN '2010-07-09' AND '2013-10-29' AND T1.race = 'black'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give me the immunization codes and dates on which Ms. Jacquelyn Shanahan was immunized with influenza seasonal injectable preservative-free vaccine.",
        "question_ar": "",
        "evidence_en": "immunization codes refers to immunizations.CODE; immunization dates refers to immunizations.DATE; immunized with influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'; 4 consecutive years refers to 4 succeeding years;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CODE, T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'"
    },
    {
        "db_id": "synthea",
        "question_en": "How long did Berry Keebler take the Acetaminophen 160 MG when he was admitted due to acute bronchitis?",
        "question_ar": "",
        "evidence_en": "how long = SUBTRACT(medications.STOP, medications.START); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG'; acute bronchitis refers to medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'"
    },
    {
        "db_id": "synthea",
        "question_en": "In 2010, how many single patients took Nitrofurantoin 5 mg/ML [Furadantin] to cure cystitis?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to substr(medications.START, 1, 4) = '2010' AND substr(medications.stop, 1, 4) = '2010'; Nitrofurantoin 5 mg/ML [Furadantin] refers to medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'; cystitis refers to medications.REASONDESCRIPTION = 'Cystitis';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'S' AND T2.REASONDESCRIPTION = 'Cystitis' AND T2.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' AND strftime('%Y', T2.START) = '2010'"
    },
    {
        "db_id": "synthea",
        "question_en": "Tell me the reason for Lavelle Vandervort's encounter on 11/20/2013?",
        "question_ar": "",
        "evidence_en": "reason for encounter refers to encounters.REASONDESCRIPTION; on 11/20/2013 refers to encounters.DATE = '2013-11-20';",
        "evidence_ar": "",
        "SQL": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'"
    },
    {
        "db_id": "synthea",
        "question_en": "From 1/9/2011 to 8/29/2012, how many German patients have their outpatient encounters?",
        "question_ar": "",
        "evidence_en": "From 1/9/2011 to 8/29/2012 refers to encounters.DATE between '2011-09-01' and '2012-08-29'; German patients refers to ethnicity = 'german'; outpatient encounters refers to encounters.DESCRIPTION = 'Outpatient Encounter';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german' AND T2.DATE BETWEEN '2011-01-09' AND '2012-08-29' AND T2.DESCRIPTION = 'Outpatient Encounter'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008?",
        "question_ar": "",
        "evidence_en": "social security number refers to ssn; encountered viral sinusitis refers to encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'; on 6/13/2008 refers to encounters.DATE = '2008-06-13';",
        "evidence_ar": "",
        "SQL": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'"
    },
    {
        "db_id": "synthea",
        "question_en": "Give me the reason, name of the drug, and duration of medication under encounter ID 23c293ec-dbae-4a22-896e-f12cf3c8bac3. Tell me if the patient is still alive.",
        "question_ar": "",
        "evidence_en": "reason refers to medications.REASONDESCRIPTION; name of the drug refers to medications.DESCRIPTION; duration of medication = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); ecounter ID refers to encounters.ID; encounters.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'; if patients.deathdate is null then the patient is alive; if patients.deathdate is not null then the patient is not alive;",
        "evidence_ar": "",
        "SQL": "SELECT T2.REASONDESCRIPTION, T2.DESCRIPTION , strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days , CASE WHEN T1.deathdate IS NULL THEN 'alive' ELSE 'dead' END FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients with shellfish allergies died when they were under 12 years old? Please give their full names.",
        "question_ar": "",
        "evidence_en": "shellfish allergies refers to allergies.DESCRIPTION = 'Shellfish allergy'; died under 12 years old = DIVIDE(SUBTRACT(julianday(patients.deathdate), julianday(patients.birthdate)), 365) < 12; full names = first, last;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12"
    },
    {
        "db_id": "synthea",
        "question_en": "How long was Mr. Major D'Amore prescribed with Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]?",
        "question_ar": "",
        "evidence_en": "how long = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin] refers to medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = ' Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many types of medication have been prescribed to Mr. Major D'Amore since his visit to the hospital?",
        "question_ar": "",
        "evidence_en": "types of medications refers to medications.DESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out all the observation information collected for the patient named Bella Rolfson.",
        "question_ar": "",
        "evidence_en": "observation information refers to observations.DESCRIPTION AND observations.VALUE AND observations.UNITS;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Bella' AND T1.last = 'Rolfson'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out patient names with calcium deficiency.",
        "question_ar": "",
        "evidence_en": "patient names = first, last; calcium deficiency refers to observations.DESCRIPTION = 'Calcium' and observations.VALUE < 8.6;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Calcium' AND T2.VALUE < 8.6"
    },
    {
        "db_id": "synthea",
        "question_en": "List out 5 most common conditions for underweight patient.",
        "question_ar": "",
        "evidence_en": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); underweight patient refers to MIN(observations.VALUE WHERE observations.DESCRIPTION = 'Body Mass Index');",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' GROUP BY T2.VALUE ORDER BY COUNT(T2.VALUE) LIMIT 5"
    },
    {
        "db_id": "synthea",
        "question_en": "How many mothers have taken immunization during prenatal visit?",
        "question_ar": "",
        "evidence_en": "expecting mothers can be attributed to encounters.REASONDESCRIPTION = 'Normal pregnancy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.PATIENT) FROM encounters AS T1 INNER JOIN immunizations AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.REASONDESCRIPTION = 'Normal pregnancy' AND T1.DATE = T2.DATE"
    },
    {
        "db_id": "synthea",
        "question_en": "What care plans have been received by Mrs. Elly Koss during year 1970?",
        "question_ar": "",
        "evidence_en": "during year 1970 refers to substr(careplans.START, 1, 4) = '1970' and substr(careplans.STOP, 1, 4) = '1970';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND strftime('%Y', T2.START) = '2013'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the care plan, procedure, medication and the patient's full name for encounter 6f2e3935-b203-493e-a9c0-f23e847b9798?",
        "question_ar": "",
        "evidence_en": "car plan refers to careplans.DESCRIPTION; procedure refers to procedures.DESCRIPTION; medication refers to medications.DESCRIPTION; full name = first, last; encounter refers to encounters.ID; encounters.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.DESCRIPTION, T4.DESCRIPTION, T5.DESCRIPTION, T1.first, T1.last FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT INNER JOIN careplans AS T3 ON T1.patient = T3.PATIENT INNER JOIN procedures AS T4 ON T1.patient = T4.PATIENT INNER JOIN medications AS T5 ON T1.patient = T5.PATIENT WHERE T2.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many male patients are diagnosed with hypertension as compared to female patients?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; diagnosed with hypertension refers to conditions.DESCRIPTION = 'Hypertension'; female refers to gender = 'F'; number of male patients with hypertension = count(patient WHERE gender = 'M' AND conditions.DESCRIPTION = 'Hypertension'); number of female patients with hypertension = count(patient WHERE gender = 'F' AND conditions.DESCRIPTION = 'Hypertension');",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN T2.gender = 'M' THEN T2.patient END) AS Male , COUNT(DISTINCT CASE WHEN T2.gender = 'F' THEN T2.patient END) AS Female FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many unmarried women were checked for normal pregnancy?",
        "question_ar": "",
        "evidence_en": "unmarried refers to marital = 'S'; women refers to gender = 'F'; normal pregnancy refers to conditions.DESCRIPTION = 'normal pregnancy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Normal pregnancy' AND T2.gender = 'F' AND T2.marital = 'S'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out the procedure and medicine prescribed for drug overdose patients.",
        "question_ar": "",
        "evidence_en": "procedure refers to procedures.DESCRIPTION; medicine prescribed refers to medications.DESCRIPTION; drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION, T3.DESCRIPTION FROM encounters AS T1 INNER JOIN procedures AS T2 ON T1.PATIENT = T2.PATIENT INNER JOIN medications AS T3 ON T1.PATIENT = T3.PATIENT WHERE T1.REASONDESCRIPTION = 'Drug overdose'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the average body mass index for patients with higher total cholesterol?",
        "question_ar": "",
        "evidence_en": "average body mass index = DIVIDE(SUM(observations.VALUE), COUNT(PATIENT) WHERE observations.DESCRIPTION = 'Body Mass Index'); body mass index refers to observations.DESCRIPTION = 'Body Mass Index'; higher total cholesterol refers to observations.DESCRIPTION = 'Total Cholesterol' and observations.VALUE > = 200;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.VALUE) / COUNT(T1.PATIENT) FROM observations AS T1 INNER JOIN ( SELECT DISTINCT PATIENT FROM observations WHERE DESCRIPTION = 'Total Cholesterol' AND VALUE > 200 ) AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.DESCRIPTION = 'Body Mass Index'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the difference between average glucose reading for patients in the 20s and 50s?",
        "question_ar": "",
        "evidence_en": "sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end)-sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.PATIENT END) - SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.PATIENT END) AS difference FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the percentage of the most common conditions for patients age 60 and above?",
        "question_ar": "",
        "evidence_en": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); age 60 and above refers to SUBTRACT(conditions.START, birthdate) > 60; percentage = MULTIPLY(DIVIDE(SUM(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)) AND SUBTRACT(conditions.START, birthdate) > 60))), COUNT(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)), 10);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60"
    },
    {
        "db_id": "synthea",
        "question_en": "Name the reason Walter Bahringer visited medical professionals in July 2009.",
        "question_ar": "",
        "evidence_en": "reason for visiting medical professionals refers to encounters.REASONDESCRIPTION;  in July 2009 refers to  substr(encounters.DATE, 1, 7) = '2009-07' ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer' AND T2.DATE LIKE '2009-07%'"
    },
    {
        "db_id": "synthea",
        "question_en": "How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose?",
        "question_ar": "",
        "evidence_en": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What drug is administered more often to treat child attention deficit disorder?",
        "question_ar": "",
        "evidence_en": "drug that was administered refers to medications.DESCRIPTION; child attention deficit disorder refers to medications.REASONDESCRIPTION = 'Child attention deficit disorder';",
        "evidence_ar": "",
        "SQL": "SELECT DESCRIPTION FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "Please include the full name of the patient who received a lung transplant.",
        "question_ar": "",
        "evidence_en": "full name = first, last; lung transplant refers to procedures.DESCRIPTION = 'Transplant of lung (procedure)';",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last FROM procedures AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Transplant of lung (procedure)'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients on average receive combined chemotherapy and radiation therapy procedures each year?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(procedures.PATIENT), COUNT(substr(procedures.DATE, 1, 4))); combined chemotherapy and radiation therapy refers to procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT strftime('%Y', DATE)) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Indicate the time frame and details of the most recent care plan suggested to Jacquelyn Shanahan.",
        "question_ar": "",
        "evidence_en": "time frame = SUBTRACT(JULIANDAY(careplans.STOP), JULIANDAY(careplans.START)); details of care plan refers to careplans.DESCRIPTION; most recent care plan refers to MIN(careplans.STAR);",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS timeFrame , T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' ORDER BY T2.START DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "Identify the allergy period for Isadora Moen and what triggered it.",
        "question_ar": "",
        "evidence_en": "allergy period = SUBTRACT(allergies.START, allergies.STOP); what triggered the allergy refers to allergies.DESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT T2.START, T2.STOP, T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Isadora' AND T1.last = 'Moen'"
    },
    {
        "db_id": "synthea",
        "question_en": "How old was Mrs. Laronda Bernier at the time of her most recent medical encounter?",
        "question_ar": "",
        "evidence_en": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); most recent medical encounter refers to MIN(encounters.DATE);",
        "evidence_ar": "",
        "SQL": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Laronda' AND T1.last = 'Bernier' ORDER BY T2.DATE DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What condition forced Mrs. Joye Homenick to seek medical attention in 2017?",
        "question_ar": "",
        "evidence_en": "condition refers to conditions.DESCRIPTION; in 2017 refers to substr(conditions.START, 1, 4) = '2017';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Joye' AND T1.last = 'Homenick' AND strftime('%Y', T2.START) = '2017'"
    },
    {
        "db_id": "synthea",
        "question_en": "When did Mrs. Joye Homenick receive her most recent influenza seasonal vaccine?",
        "question_ar": "",
        "evidence_en": "when a patient received her most recent vaccine refers to MAX(immunications.DATE); influenza seasonal vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';",
        "evidence_ar": "",
        "SQL": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Joye' AND T1.last = 'Homenick' ORDER BY T2.DATE DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "How long did Elly Koss have to take Acetaminophen 160 MG?",
        "question_ar": "",
        "evidence_en": "how long = SUBTRACT(julianday(medications.stop), julianday(medications.START)); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG';",
        "evidence_ar": "",
        "SQL": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND last = 'Koss' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients sought medical attention due to a second-degree burn? Describe the care plan recommended to them.",
        "question_ar": "",
        "evidence_en": "second-degree burn refers to encounters.REASONDESCRIPTION = 'Second degree burn'; ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.PATIENT), T2.DESCRIPTION FROM encounters AS T1 INNER JOIN careplans AS T2 ON T1.PATIENT = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Second degree burn'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among all patients who sought medical attention in 2010 due to contact dermatitis, identify the percentage of females.",
        "question_ar": "",
        "evidence_en": "in 2010 refers to substr(encounters.DATE, 1, 4) = '2010'; contact dermatitis refers to encounters.REASONDESCRIPTION = 'Contact dermatitis'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.PATIENT WHERE gender = 'F'), count(encounters.PATIENT) WHERE encounters.REASONDESCRIPTION = 'Contact dermatitis'), 1.0) females refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.DATE) = '2010' AND T1.REASONDESCRIPTION = 'Contact dermatitis'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many interactions did Lorri Simons have with medical professionals between 2010 and 2017? What percentage of encounters are attributed to prenatal visits?",
        "question_ar": "",
        "evidence_en": "between 2010 and 2017 refers to substr(encounters.DATE, 1, 4) between '2010' and '2017'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.ID WHERE DESCRIPTION = 'Prenatal visit'), count(encounters.ID)), 1.0); prenatal visits refers to encounters.DESCRIPTION = 'Prenatal visit';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.patient) , CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Prenatal visit' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Lorri' AND T1.last = 'Simonis' AND strftime('%Y', T2.DATE) BETWEEN '2010' AND '2017'"
    },
    {
        "db_id": "synthea",
        "question_en": "State description of medication taken by Joe Homenick.",
        "question_ar": "",
        "evidence_en": "description of medication refers to medications.DESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Joye' AND T2.last = 'Homenick'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the start date of the care plan of the patient whose maiden name is Adams?",
        "question_ar": "",
        "evidence_en": "start date of the care plan refers to careplans.START;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.maiden = 'Adams'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the male patients, who has the earliest starting date of the care plan?",
        "question_ar": "",
        "evidence_en": "male patients refers to gender = 'M'; earliest starting date of the care plan refers to MIN(careplans.START);",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'M' ORDER BY T1.START LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the percentage of Hispanic patients who stopped their care plan in 2011?",
        "question_ar": "",
        "evidence_en": "Hispanic patients refers to ethnicity = 'hispanic'; percentage = MULTIPLY(DIVIDE(COUNT(careplans.PATIENT WHERE ethnicity = 'hispanic'), COUNT(careplans.PATIENT)), 1.0); stopped their care plan in 2011 refers to substr(careplans.stop, 1, 4) = '2011';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.race = 'hispanic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.stop) = '2011'"
    },
    {
        "db_id": "synthea",
        "question_en": "State the description of the reason why Angelo Buckridge needs the care plan.",
        "question_ar": "",
        "evidence_en": "description of the reason of the care plan refers to careplans.REASONDESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'"
    },
    {
        "db_id": "synthea",
        "question_en": "Mention the description of the care plan of American patients.",
        "question_ar": "",
        "evidence_en": "American refers to ethnicity = 'american';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'"
    },
    {
        "db_id": "synthea",
        "question_en": "What are the medical encounter ids of patients who were born in Pembroke MA US?",
        "question_ar": "",
        "evidence_en": "medical encounter ids careplans.ID; born in Pembroke MA US refers to birthplace = 'Pembroke MA US';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out the start date of the care plan of alive patients.",
        "question_ar": "",
        "evidence_en": "start of the care plan refers to careplans.START; alive patients refers to deathdate is null;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "How many white patients have the reason code of 10509002?",
        "question_ar": "",
        "evidence_en": "white refers to race = 'white'; reason code of 10509002 refers to careplans.REASONCODE = '10509002';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out full name of patients who have \"Diabetic diet\" in the description of the care plan.",
        "question_ar": "",
        "evidence_en": "full name = first, last; Diabetic diet refers to careplans.DESCRIPTION = 'Diabetic diet';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetic diet'"
    },
    {
        "db_id": "synthea",
        "question_en": "List out the stop date of the care plan of dead patients.",
        "question_ar": "",
        "evidence_en": "stop date of the care plan refers to careplans.STOP; dead patients refers to deathdate is not null;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL"
    },
    {
        "db_id": "synthea",
        "question_en": "How many Italian patients have the care plan code of 304510005?",
        "question_ar": "",
        "evidence_en": "Italian patients refers to ethnicity = 'italian';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'italian' AND T1.CODE = '304510005'"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the percentage of female patients who started the care plan in 2010?",
        "question_ar": "",
        "evidence_en": "female patients refers to gender = 'F'; started the care plan in 2010 refers to substr(careplans.START, 1, 4) = '2010'; percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE patients.gender = 'F'), COUNT(patients.patient) WHERE substr(careplans.START, 1, 4) = '2010'), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.START) = '2010'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many black patients stopped their care plan in 2017?",
        "question_ar": "",
        "evidence_en": "black refers to race = 'black'; stopped their care plan in 2017 refers to substr(careplans.STOP, 1, 4) = '2017';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'black' AND strftime('%Y', T1.STOP) = '2017'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many male patients have prediabetes condition?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; prediabetes condition refers to conditions.DESCRIPTION = 'Prediabetes';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 WHERE T2.DESCRIPTION = 'Prediabetes' AND T1.gender = 'M'"
    },
    {
        "db_id": "synthea",
        "question_en": "List the full names of patients with nut allergy.",
        "question_ar": "",
        "evidence_en": "full names = first, last; nut allergy refers to allergies.DESCRIPTION = 'Allergy to nut';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to nut'"
    },
    {
        "db_id": "synthea",
        "question_en": "Describe the condition of patient Wilmer Koepp.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wilmer' AND T1.last = 'Koepp'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.",
        "question_ar": "",
        "evidence_en": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the full names of patients who have been taking Penicillin V Potassium 250 MG since 1948.",
        "question_ar": "",
        "evidence_en": "full names = first, last; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; since 1948 refers to substr(medications.START, 1, 4) > = '1948';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND strftime('%Y', T2.START) >= '1948'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many white patients whose birth year is 1935 have a stroke?",
        "question_ar": "",
        "evidence_en": "white refers to race = 'white'; birth year is 1935 refers to substr(birthdate, 1, 4) = '1935'; stroke refers to conditions.DESCRIPTION = 'Stroke';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE strftime('%Y', T1.birthdate) = '1935' AND T1.race = 'white' AND T2.DESCRIPTION = 'Stroke'"
    },
    {
        "db_id": "synthea",
        "question_en": "Which conditions the patient has when receiving the IPV immunization?",
        "question_ar": "",
        "evidence_en": "IPV immunization refers to immunizations.DESCRIPTION = 'IPV';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'"
    },
    {
        "db_id": "synthea",
        "question_en": "List the patient ids whose disease has the most occurrences.",
        "question_ar": "",
        "evidence_en": "patient ids refers to patients.patient; disease with the most occurrence refers to MAX(all_prevalences.OCCURENCES);",
        "evidence_ar": "",
        "SQL": "SELECT T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN all_prevalences AS T3 ON T3.ITEM = T2.DESCRIPTION ORDER BY T3.OCCURRENCES DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "List all the full names of patients with a condition described as cystitis.",
        "question_ar": "",
        "evidence_en": "full names = first, last; condition described as cystitis refers to conditions.DESCRIPTION = ''Cystitis';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE T2.DESCRIPTION = 'Cystitis'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many male patients have been described as immune to quadrivalent HPV?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; immune to quadrivalent HPV refers to immunizations.DESCRIPTION = 'HPV quadrivalent';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'M'"
    },
    {
        "db_id": "synthea",
        "question_en": "Indicate the start date of patient Walter Bahringer's care plan.",
        "question_ar": "",
        "evidence_en": "start date of the care plan refers to careplans.START;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.start FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer'"
    },
    {
        "db_id": "synthea",
        "question_en": "Describe the care plans of patient Major D'Amore's plan of care.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the percentage of male patients with viral sinusitis condition.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE gender = 'M'), COUNT(patients.patient) WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder))), 100); male patients refers to gender = 'M'; viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the patients who have been using Penicillin V Potassium 250 MG, what percentage of patients are female?",
        "question_ar": "",
        "evidence_en": "Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; percentage = MULTIPLY(DIVIDE(patients.patient WHERE gender = 'F'), COUNT(patients.patient) WHERE medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'), 100) female refers to gender = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG'"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the white patients, what is the average body height of the patients?",
        "question_ar": "",
        "evidence_en": "white refers to race = 'white'; average body height = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Height'); body height refers to observations.DESCRIPTION = 'Body Height';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.DESCRIPTION = 'Body Height'"
    },
    {
        "db_id": "synthea",
        "question_en": "Indicate the care plan needed for the patient living at 179 Sydni Roads, Taunton, MA 02780 US.",
        "question_ar": "",
        "evidence_en": "living at 179 Sydni Roads, Taunton, MA 02780 US refers to address = '179 Sydni Roads Taunton MA 02780 US';",
        "evidence_ar": "",
        "SQL": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the allergen of the Dominican patient named Dirk Languish.",
        "question_ar": "",
        "evidence_en": "allergen refers to allergies.DESCRIPTION;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Dirk' AND T2.last = 'Langosh' AND T2.ethnicity = 'dominican'"
    },
    {
        "db_id": "synthea",
        "question_en": "How many patients who are allergic to peanuts have asthma?",
        "question_ar": "",
        "evidence_en": "allergic to peanuts refers to allergies.DESCRIPTION = 'Allergy to peanuts'; asthma refers to conditions.DESCRIPTION = 'Asthma';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN allergies AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Asthma' AND T3.DESCRIPTION = 'Allergy to peanuts'"
    },
    {
        "db_id": "synthea",
        "question_en": "Who is the 44-year-old patient diagnosed with drug overdose?",
        "question_ar": "",
        "evidence_en": "44-year-old = DIVIDE(SUBTRACT(julianday(conditions.START), julianday(patients.birthdate)), 365, 0) = 44;",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Drug overdose' AND ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) = 44"
    },
    {
        "db_id": "synthea",
        "question_en": "Provide the social security number of the patient with the highest systolic blood pressure.",
        "question_ar": "",
        "evidence_en": "social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');",
        "evidence_ar": "",
        "SQL": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the care plan description of the prevalent disease with the highest prevalence percentage?",
        "question_ar": "",
        "evidence_en": "highest prevalence percentage refers to MAX(PREVALENCE PERCENTAGE);",
        "evidence_ar": "",
        "SQL": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.\"PREVALENCE PERCENTAGE\" DESC LIMIT 1"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the care plan for the patient with social security number 999-15-3685?",
        "question_ar": "",
        "evidence_en": "social security number refers to ssn; ssn = '999-15-3685';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-15-3685'"
    },
    {
        "db_id": "synthea",
        "question_en": "Calculate the average age of the male patients that have hypertension.",
        "question_ar": "",
        "evidence_en": "average age = AVG(DIVIDE(SUBTRACT(deathdate is null WHERE (julianday(substr(datetime('now'), 1, 10)))), julianday(patients.birthdate)), 365); male refers to gender = 'M'; hypertension refers to conditions.DESCRIPTION = 'Hypertension'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.deathdate IS NULL THEN ROUND((strftime('%J', date('now')) - strftime('%J', T2.birthdate)) / 365) ELSE ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) END) / COUNT(T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension' AND T2.gender = 'M'"
    },
    {
        "db_id": "synthea",
        "question_en": "List 5 patients' name that need medication due to streptococcal sore throat disorder.",
        "question_ar": "",
        "evidence_en": "patients name = first, last; streptococcal sore throat disorder refers to medications.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5"
    },
    {
        "db_id": "synthea",
        "question_en": "Who is the patient with a body weight of 61.97 kg?",
        "question_ar": "",
        "evidence_en": "body weight of 61.97 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97; observations.UNITS = 'kg'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first, T2.last FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Body Weight' AND T1.UNITS = 'kg' AND T1.VALUE = 61.97"
    },
    {
        "db_id": "synthea",
        "question_en": "Among the male patients, list down 5 birth dates of patients taking the medication \"Penicillin V Potassium 250 MG\".",
        "question_ar": "",
        "evidence_en": "male patients refers to gender = 'M'; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5"
    },
    {
        "db_id": "synthea",
        "question_en": "List down the full name of Irish patients diagnosed with the prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions.",
        "question_ar": "",
        "evidence_en": "full name = first, last; Irish refers to ethnicity = 'irish'; prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions = OCCURRENCES > (AVG(MULTIPLY(all_prevalences.OCCURRENCES, 0.96)));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON T1.DESCRIPTION = T3.ITEM WHERE T2.ethnicity = 'irish' AND 100 * CAST(T3.OCCURRENCES AS REAL) / ( SELECT AVG(OCCURRENCES) FROM all_prevalences ) > 96"
    },
    {
        "db_id": "synthea",
        "question_en": "What is the difference between the number of married patients and the number of single patients with diabetes?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(patients.patient WHERE marital = 'M'), COUNT(patients.patient WHERE marital = 'S') WHERE conditions.DESCRIPTION = 'Diabetes'); married patients refers to marital = 'M'; single patients refers to marital = 'S'; diabetes refers to conditions.DESCRIPTION = 'Diabetes';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.marital = 'M' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.marital = 'S' THEN 1 ELSE 0 END) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetes'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List the country and how many customers are there.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT country, COUNT(customerNumber) FROM customers GROUP BY country"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
        "question_ar": "",
        "evidence_en": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?",
        "question_ar": "",
        "evidence_en": "Mini Gifts Distributors Ltd. Is the customer name; shippedDate between '2003-01-01' and '2003-12-31'; total price = MULTIPLY(quantityOrdered, priceEach);",
        "evidence_ar": "",
        "SQL": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many employees are there in Sydney?",
        "question_ar": "",
        "evidence_en": "sales agent and sales representative are synonyms; Sydney is a city;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers.",
        "question_ar": "",
        "evidence_en": "reportsTO' is the leader of the 'employeeNumber';",
        "evidence_ar": "",
        "SQL": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?",
        "question_ar": "",
        "evidence_en": "paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.",
        "question_ar": "",
        "evidence_en": "highest paying customer refers to MAX(amount); entire address = addressLine1+addressLine2;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many checks were issued by Euro+ Shopping Channel in the year 2004?",
        "question_ar": "",
        "evidence_en": "Euro+ Shopping Channel is a customer name; year(paymentDate) = '2004';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers?",
        "question_ar": "",
        "evidence_en": "classic car is a product line; most ordered product refers to MAX(quantityOrdered);",
        "evidence_ar": "",
        "SQL": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productScale = '1:18' AND T1.productLine = 'Classic Cars' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?",
        "question_ar": "",
        "evidence_en": "creditLimit < = 100000; total payment amount refers to amount; highest total payment amount refers to MAX(amount); year(paymentDate) = '2004';",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.",
        "question_ar": "",
        "evidence_en": "Tokyo is a city; 'reportsTO' is the leader of the 'employeeNumber'; highest payment refers to MAX(amount); total amount of payments = SUM(amount);",
        "evidence_ar": "",
        "SQL": "SELECT T2.customerName, T2.contactFirstName, T2.contactLastName, SUM(T3.amount) FROM employees AS T1 INNER JOIN customers AS T2 ON T2.salesRepEmployeeNumber = T1.employeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN offices AS T4 ON T1.officeCode = T4.officeCode WHERE T4.city = 'Tokyo' AND T1.reportsTo = 1056 GROUP BY T2.customerName, T2.contactFirstName, T2.contactLastName ORDER BY amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which two products has the highest and lowest expected profits? Determine the total price for each product in terms of the largest quantity that was ordered.",
        "question_ar": "",
        "evidence_en": "expected profits = SUBTRACT(msrp, buyPrice); total price = MULTIPLY(quantityOrdered, priceEach)",
        "evidence_ar": "",
        "SQL": "SELECT T2.productName, SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice DESC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode UNION SELECT T2.productName, SUM(quantityOrdered * priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice ASC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many different orders with a total price greater than 4000 are cancelled?",
        "question_ar": "",
        "evidence_en": "total price = MULTIPLY(quantityOrdered, priceEach) > 4000; cancelled orders refer to status = 'Cancelled';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many distinct orders were there in 2003 when the quantity ordered was less than 30?",
        "question_ar": "",
        "evidence_en": "year(orderDate) = '2003'; quantityOrdered < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND STRFTIME('%Y', T2.orderDate) = '2003'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the total value of cancelled orders?",
        "question_ar": "",
        "evidence_en": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); cancelled orders refers to status = 'Cancelled';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T2.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please calculate the total value of Motorcycles orders.",
        "question_ar": "",
        "evidence_en": "Motorcycle is a product line; total value = SUM(MULTIPLY(quantityOrdered, priceEach));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Motorcycles'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many Planes orders were there?",
        "question_ar": "",
        "evidence_en": "Planes is a product line;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Planes'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many orders which expected profits greater than 100?",
        "question_ar": "",
        "evidence_en": "expected profits greater than 100 = (SUBTRACT(msrp, buyPrice))>100;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.MSRP - T2.buyPrice > 100"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please calculate the average total price of orders from Exoto Designs Vendor in 2005.",
        "question_ar": "",
        "evidence_en": "average total price = DIVIDE(SUM(MULTIPLY(quantityOrdered, priceEach))), COUNT(orderNumber)); year(orderDate) = '2005';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many sales representatives who have office code is 1?",
        "question_ar": "",
        "evidence_en": "sales representative refers to jobTitle = 'Sales Rep';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(officeCode) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list different customer names with the payment amount of over 50,000.",
        "question_ar": "",
        "evidence_en": "amount > 50000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.customerName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.amount > 50000"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please calculate the total payment amount of customers who come from the USA.",
        "question_ar": "",
        "evidence_en": "USA is a country; total amount payment refers to SUM(amount);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What are the total payments of customers with no credit limit in 2003?",
        "question_ar": "",
        "evidence_en": "total payment refers to SUM(amount); no credit limit refers to creditLimit = 0; year(paymentDate) = '2003';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(amount) FROM payments WHERE STRFTIME('%Y', paymentDate) = '2003' AND customerNumber IN ( SELECT customerNumber FROM customers WHERE creditLimit = 0 )"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list the name and phone number of the customer whose order was cancelled.",
        "question_ar": "",
        "evidence_en": "cancelled order refers to status = 'Cancelled';",
        "evidence_ar": "",
        "SQL": "SELECT T2.customerName, T2.phone FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many French customers shipped 2 orders which have been cancelled?",
        "question_ar": "",
        "evidence_en": "French is a nationality of country = 'France'; cancelled orders refers to status = 'Cancelled';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.country) FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Shipped' AND T2.country = 'France' GROUP BY T2.customerNumber HAVING COUNT(T1.status) = 2"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please calculate the average total price of shipped orders from German customers.",
        "question_ar": "",
        "evidence_en": "average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out full name of employees who are working in Tokyo?",
        "question_ar": "",
        "evidence_en": "Tokyo is a city; full name = firstName+lastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many Sales Rep who are working in Tokyo? List out email and full name of those employees.",
        "question_ar": "",
        "evidence_en": "Sales Rep is a job title; Tokyo is a city; full name = firstName+lastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco",
        "question_ar": "",
        "evidence_en": "staff of refers to reportsTO; San Francisco is a city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1002 AND T2.city = 'San Francisco'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Determine the email and Code of employee who are working at United State, state MA",
        "question_ar": "",
        "evidence_en": "code of employee refers to employeeNumber; United States of America refers to country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.state = 'MA' AND T2.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many Sales Manager who are working in Sydney? List out their email.",
        "question_ar": "",
        "evidence_en": "Sales Manager is a job title; Sydney is a city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.jobTitle LIKE '%Sales Manager%' AND T2.city = 'Sydney'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many employees who are living in Australia and have the credit limit under 200000? State their email address and countries where they are working.",
        "question_ar": "",
        "evidence_en": "Australia is a country; creditLimit < 20000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.email, T3.country FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber INNER JOIN offices AS T3 ON T2.officeCode = T3.officeCode WHERE T3.country = 'Australia' AND T1.creditLimit < 200000 AND T2.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "State 10 emails of UK Sales Rep who have the lowest credit limit.",
        "question_ar": "",
        "evidence_en": "UK is a country; Sales Rep is a job title;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' ORDER BY T1.creditLimit LIMIT 10"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many Australian customers who have credit line under 220000?",
        "question_ar": "",
        "evidence_en": "Australian is a nationality of country = 'Australia'; credit line refers to creditLimit; creditLimit < 220000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out 3 customer numbers who have highest amount payment",
        "question_ar": "",
        "evidence_en": "amount of payment refers to amount;",
        "evidence_ar": "",
        "SQL": "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question_en": "Determine the email and Code of employee who are working at United State, state CA",
        "question_ar": "",
        "evidence_en": "United States of America refers to country = 'USA'; code of employee refers to employeeNumber;",
        "evidence_ar": "",
        "SQL": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.country = 'USA' AND T2.state = 'CA' GROUP BY T1.email, T1.officeCode"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out full name of employees who are working in Boston?",
        "question_ar": "",
        "evidence_en": "full name = contactFirstName, contactLastName; Boston is a city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Boston'"
    },
    {
        "db_id": "car_retails",
        "question_en": "State top 3 emails of UK Sales Rep who have the highest credit limit.",
        "question_ar": "",
        "evidence_en": "UK is a country; Sales Rep is a job title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' GROUP BY T1.customerName, T2.email ORDER BY SUM(T1.creditLimit) DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many customers who are in Norway and have credit line under 220000?",
        "question_ar": "",
        "evidence_en": "Norway is a country; credit line refers to creditLimit; creditLimit<220000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out full name and email of employees who are working in Paris?",
        "question_ar": "",
        "evidence_en": "full name = firstName+LastName; Paris is a city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List the product code of the top five motorcycles, by descending order, the number of quantity in stock.",
        "question_ar": "",
        "evidence_en": "motorcycle is a product line;",
        "evidence_ar": "",
        "SQL": "SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question_en": "Among the German customers, how many of the them has credit limit of zero?",
        "question_ar": "",
        "evidence_en": "German is a nationality of country = 'Germany'; CREDITLIMIT = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customerNumber) FROM customers WHERE creditLimit = 0 AND country = 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question_en": "From 2003 to 2004, how many customers have paid more than three times?",
        "question_ar": "",
        "evidence_en": "paymentdate BETWEEN '2003-01-01' AND '2004-12-31'; customers who have paid more than three times refers to (COUNT(customernumber)>3);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE STRFTIME('%Y', paymentDate) >= '2003' AND STRFTIME('%Y', paymentDate) <= '2004' GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the average actual profit by 1937 Lincoln Berline?",
        "question_ar": "",
        "evidence_en": "average actual profit = AVG(SUBTRACT(priceEach, buyPrice)); 1937 Lincoln Berline is a product name;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.priceEach - T2.buyPrice) / COUNT(*) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productName = '1937 Lincoln Berline'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers?",
        "question_ar": "",
        "evidence_en": "motorcycle is a product line; American is a nationality of country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T1.productLine = 'Motorcycles' AND T1.productScale = '1:10' AND T4.country = 'USA' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers.",
        "question_ar": "",
        "evidence_en": "paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'"
    },
    {
        "db_id": "car_retails",
        "question_en": "For the planes which has the hightest total price, how much it exceeds the average?",
        "question_ar": "",
        "evidence_en": "plane is a product line; total price = MULTIPLY(quantityOrdered, priceEach); how much the total price exceeds the average = SUBTRACT(MAX(MULTIPLY(quantityOrdered, priceEach))), AVG(priceEach));",
        "evidence_ar": "",
        "SQL": "SELECT MAX(quantityOrdered * priceEach) - AVG(priceEach) FROM orderdetails WHERE productCode IN ( SELECT productCode FROM products WHERE productLine = 'Planes' )"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the total value of shipped vintage car orders from 2003-2004?",
        "question_ar": "",
        "evidence_en": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); shipped orders refers to status = 'Shipped'; vintage car is a product line; year(orderDate) between 2003 and 2004;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Who is the sales agent of the customer who has made the highest payment? Include the full names of employee and his/her supervisor.",
        "question_ar": "",
        "evidence_en": "payment refers to amount; full name = firstName+lastName; supervisor refers to reportsTO; 'reportsTO' is the leader of the 'employeeNumber';",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount.",
        "question_ar": "",
        "evidence_en": "Boston is a city; amount of order = MULTIPLY(quantityOrdered, priceEach);",
        "evidence_ar": "",
        "SQL": "SELECT T2.productName, T1.quantityOrdered * T1.priceEach FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T1.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T4.city = 'Boston' AND T4.salesRepEmployeeNumber IN ( SELECT employeeNumber FROM employees WHERE jobTitle = 'Sales Rep' ) ORDER BY T1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the total actual profit gained from orders made by American customers from 2003-01-06 to 2005-05-09?",
        "question_ar": "",
        "evidence_en": "total actual profit = SUM(SUBTRACT(priceEach, buyPrice)); American is a nationality of country = 'USA'; orderDate BETWEEN '2003-01-06' AND '2005-05-09';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.priceEach - T1.buyPrice) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T3.orderDate > '2003-01-05' AND T3.orderDate < '2005-05-10'"
    },
    {
        "db_id": "car_retails",
        "question_en": "From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number.",
        "question_ar": "",
        "evidence_en": "orderDate between '2005-01-01' and '2005-12-31'; full address = addressLine1+addressLine2;",
        "evidence_ar": "",
        "SQL": "SELECT T3.addressLine1, T3.addressLine2, T3.phone FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber INNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber INNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode WHERE STRFTIME('%Y', T2.orderDate) = '2005' AND T4.jobTitle = 'Sales Rep' ORDER BY T1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany?",
        "question_ar": "",
        "evidence_en": "last name of contact person starts with M refers to lastName LIKE 'M%'; Germany is a country; not from Germany refers to country<>'Germany';",
        "evidence_ar": "",
        "SQL": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Calculate the average amount of payments made by customers during the first half of 2004.",
        "question_ar": "",
        "evidence_en": "average amount of payments = DIVIDE(SUM(amount), COUNT(customerNumber); first half of 2014 refers to paymentDate > = '2004-01-01' AND paymentDate < '2004-07-01;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-06-30'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186?",
        "question_ar": "",
        "evidence_en": "shipped orders refers to status = 'shipped'; year(shippedDate) = 2005; percentage = DIVIDE(SUM(customerNumber = 186)), COUNT(orderNumber)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many customers with a canceled shipment have a credit limit greater than 115,000?",
        "question_ar": "",
        "evidence_en": "cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000"
    },
    {
        "db_id": "car_retails",
        "question_en": "On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.paymentDate FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber WHERE T1.firstName = 'Barry' AND T1.lastName = 'Jones' AND T1.jobTitle = 'Sales Rep' ORDER BY T2.creditLimit ASC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "To whom does the employee have to inform that is the sales representative of the French customer?",
        "question_ar": "",
        "evidence_en": "inform refers to reportsTo; 'reportsTO' is the leader of the 'employeeNumber'; France is a country; country = 'France';",
        "evidence_ar": "",
        "SQL": "SELECT T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber WHERE T2.country = 'France'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the full address of the customer who commented that DHL be used for the order that was shipped on April 4, 2005?",
        "question_ar": "",
        "evidence_en": "full address = addressLine1+addressLine2; shippedDate = '2005-04-04';",
        "evidence_ar": "",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.shippedDate = '2005-04-04' AND T2.status = 'Shipped'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?",
        "question_ar": "",
        "evidence_en": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City.",
        "evidence_ar": "",
        "SQL": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the full address of the office where 4 people work and one of them is Sales Representation?",
        "question_ar": "",
        "evidence_en": "full address = addressLine1+addressLine2; Sales Manager is a job title;",
        "evidence_ar": "",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What profit can the seller Carousel DieCast Legends make from the sale of the product described as \"The perfect holiday or anniversary gift for executives\"?",
        "question_ar": "",
        "evidence_en": "seller and product vendor are synonyms; Carousel DieCast Legends is a product vendor; profit = SUM(SUBTRACT(msrp, buyPrice));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.MSRP - T2.buyPrice) FROM productlines AS T1 INNER JOIN products AS T2 ON T1.productLine = T2.productLine WHERE T2.productVendor = 'Carousel DieCast Legends' AND T1.textDescription LIKE '%perfect holiday or anniversary gift for executives%'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment.",
        "question_ar": "",
        "evidence_en": "average amount payment = AVG(amount);",
        "evidence_ar": "",
        "SQL": "SELECT T1.customerNumber FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.city = 'Boston' GROUP BY T1.customerNumber ORDER BY SUM(T2.amount) / COUNT(T2.paymentDate) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price.",
        "question_ar": "",
        "evidence_en": "18th Century Vintage Horse Carriage is a product name; average price = AVG(priceEach);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.quantityOrdered) , SUM(T2.quantityOrdered * T2.priceEach) / SUM(T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productName = '18th Century Vintage Horse Carriage'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many kinds of products did order No. 10252 contain?",
        "question_ar": "",
        "evidence_en": "Products refer to productCode;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t.productCode) FROM orderdetails t WHERE t.orderNumber = '10252'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Who is the sales representative that made the order which was sent to 25 Maiden Lane, Floor No. 4?",
        "question_ar": "",
        "evidence_en": "Sales representative is an employee;",
        "evidence_ar": "",
        "SQL": "SELECT T2.firstName, T2.lastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T1.addressLine1 = '25 Maiden Lane' AND T1.addressLine2 = 'Floor No. 4'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Where's Foon Yue Tseng's office located at? Give the detailed address.",
        "question_ar": "",
        "evidence_en": "Detailed address comprises addressLine1 and addressLine2;",
        "evidence_ar": "",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value?",
        "question_ar": "",
        "evidence_en": "2005-04-08 and two days later refer to orderDate = '2005-04-08' and orderDate = '2005-04-10'; order with a higher value refers to MAX(Total price) = MULTIPLY(quantityOrdered, priceEach); ",
        "evidence_ar": "",
        "SQL": "SELECT T2.orderDate FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-08' OR STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-10' ORDER BY T1.quantityOrdered * T1.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many products with the highest expected profits were sold in total?",
        "question_ar": "",
        "evidence_en": "Products refer to productCode; Expected profits = SUBTRACT(MSRP, buyPrice);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM orderdetails AS t2 INNER JOIN ( SELECT t1.productCode FROM products AS t1 ORDER BY t1.MSRP - t1.buyPrice DESC LIMIT 1 ) AS t3 ON t2.productCode = t3.productCode"
    },
    {
        "db_id": "car_retails",
        "question_en": "How much did Petit Auto pay on 2004-08-09?",
        "question_ar": "",
        "evidence_en": "Petit Auto is name of customer; paymentDate = '2004-08-09';",
        "evidence_ar": "",
        "SQL": "SELECT t1.amount FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Petit Auto' AND t1.paymentDate = '2004-08-09'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What was the contact name for the check \"NR157385\"?",
        "question_ar": "",
        "evidence_en": "Contact name refers to customerName;",
        "evidence_ar": "",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'NR157385'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which customer made the order No. 10160? Give the contact name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Where was the order No. 10383 shipped to? Show me the address.",
        "question_ar": "",
        "evidence_en": "Address comprises addressLine1 and addressLine2;",
        "evidence_ar": "",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'"
    },
    {
        "db_id": "car_retails",
        "question_en": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'"
    },
    {
        "db_id": "car_retails",
        "question_en": "If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to?",
        "question_ar": "",
        "evidence_en": "E-mail address belongs to employee; customerName = 'Dragon Souveniers, Ltd.';",
        "evidence_ar": "",
        "SQL": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many French customers does Gerard Hernandez take care of?",
        "question_ar": "",
        "evidence_en": "Gerakd Hermandez is an employee; French customer refers to customer from France where country = 'France'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.country = 'France' AND t2.firstName = 'Gerard' AND t2.lastName = 'Hernandez'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What was the latest order that customer No.114 made? Give the name of the product.",
        "question_ar": "",
        "evidence_en": "The latest refers to the most recent orderDate;",
        "evidence_ar": "",
        "SQL": "SELECT t3.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t1.productCode = t3.productCode WHERE t2.customerNumber = '114' ORDER BY t2.orderDate DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(MSRP, priceEach)), MSRP); product No. S18_3482 refers to productCode = 'S18_3482'",
        "evidence_ar": "",
        "SQL": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'"
    },
    {
        "db_id": "car_retails",
        "question_en": "To whom does Steve Patterson report? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "reportsTO' is the leader of the 'employeeNumber';",
        "evidence_ar": "",
        "SQL": "SELECT t2.firstName, t2.lastName FROM employees AS t1 INNER JOIN employees AS t2 ON t2.employeeNumber = t1.reportsTo WHERE t1.firstName = 'Steve' AND t1.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How do I contact the President of the company?",
        "question_ar": "",
        "evidence_en": "President refers to the jobTitle;",
        "evidence_ar": "",
        "SQL": "SELECT t.email FROM employees t WHERE t.jobTitle = 'President'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name.",
        "question_ar": "",
        "evidence_en": "Sales representative refers to jobTitle = 'Sales Rep'; Muscle Machine Inc is name of customer;",
        "evidence_ar": "",
        "SQL": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "db_id": "car_retails",
        "question_en": "If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive?",
        "question_ar": "",
        "evidence_en": "Muscle Machine Inc is name of customer; superior refers to 'reportsTO', who is the leader of the 'employeeNumber'",
        "evidence_ar": "",
        "SQL": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list all the customers that have Steve Patterson as their sales representitive.",
        "question_ar": "",
        "evidence_en": "Steve Patterson is an employee;",
        "evidence_ar": "",
        "SQL": "SELECT t1.customerName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Steve' AND t2.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many customers have an employee who reports to William Patterson as their sales representitive?",
        "question_ar": "",
        "evidence_en": "reportsTO' is the leader of the 'employeeNumber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'William' AND t2.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list the phone numbers of the top 3 customers that have the highest credit limit and have Leslie Jennings as their sales representitive.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t1.phone FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Leslie' AND t2.lastName = 'Jennings' ORDER BY t1.creditLimit DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many sales representitives are based in the offices in the USA?",
        "question_ar": "",
        "evidence_en": "Sales representative refers to jobTitle = 'Sales Rep'; country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Where can I find the office of the President of the company?",
        "question_ar": "",
        "evidence_en": "Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle",
        "evidence_ar": "",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What's the postal code of the office the VP Sales is at?",
        "question_ar": "",
        "evidence_en": "VP Sales refers to jobTitle",
        "evidence_ar": "",
        "SQL": "SELECT t2.postalCode FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'VP Sales'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the total price of the order made by Cruz & Sons Co. on 2003/3/3?",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(quantityOrdered, priceEach)) where orderDate = '2003-03-03'; customerName = 'Cruz & Sons Co.'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which product did Cruz & Sons Co. order on 2003/3/3?",
        "question_ar": "",
        "evidence_en": "Cruz & Sons Co. is name of customer; 2003/3/3 refers to orderDate;",
        "evidence_ar": "",
        "SQL": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which product did Cruz & Sons Co. ask for the biggest amount in a single order?",
        "question_ar": "",
        "evidence_en": "Cruz & Sons Co. is name of customer; the biggest amount refers to MAX(quantityOrdered).",
        "evidence_ar": "",
        "SQL": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' ORDER BY t1.priceEach * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?",
        "question_ar": "",
        "evidence_en": "Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;",
        "evidence_ar": "",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the amount of customers of 1957 Chevy Pickup by customers in a month?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.customerNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.productCode IN ( SELECT productCode FROM products WHERE productName = '1957 Chevy Pickup' )"
    },
    {
        "db_id": "car_retails",
        "question_en": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.",
        "question_ar": "",
        "evidence_en": "The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);",
        "evidence_ar": "",
        "SQL": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "List all the name of customers who have orders that are still processing.",
        "question_ar": "",
        "evidence_en": "Still processing refers to status = 'In Process';",
        "evidence_ar": "",
        "SQL": "SELECT t2.customerName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.status = 'In Process'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Among all orders shipped, calculate the percentage of orders shipped at least 3 days before the required date.",
        "question_ar": "",
        "evidence_en": "Orders shipped refer to status = 'Shipped'; at least 3 days before the required date refers to SUBTRACT(shippedDate, requiredDate)>3; DIVIDE(COUNT(orderNumber where SUBTRACT(shippedDate, requiredDate)>3), (COUNT(orderNumber) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN JULIANDAY(t1.shippeddate) - JULIANDAY(t1.requireddate) > 3 THEN T1.customerNumber ELSE NULL END) FROM orders AS T1 INNER JOIN orderdetails AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.status = 'Shipped'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Find the customer who made the highest payment in 2005.",
        "question_ar": "",
        "evidence_en": "The highest payment refers to max(amount); 2005 refers to year(paymentDate);",
        "evidence_ar": "",
        "SQL": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which is the most ordered quantity product? What is its expected profit margin per piece?",
        "question_ar": "",
        "evidence_en": "The most ordered quantity product refers to productName where Max(quantityOrdered); SUBTRACT(MSRP, buyPrice);",
        "evidence_ar": "",
        "SQL": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )"
    },
    {
        "db_id": "car_retails",
        "question_en": "For the order has the most product ordered, name the customer who placed the order.",
        "question_ar": "",
        "evidence_en": "The largest order in terms of total price refers to MAX(SUM(MULTIPLY(quantityOrdered, priceEach)).",
        "evidence_ar": "",
        "SQL": "SELECT T2.firstName, T2.lastName FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.employeeNumber = ( SELECT MAX(employeeNumber) FROM employees )"
    },
    {
        "db_id": "car_retails",
        "question_en": "List all customer names with orders that are disputed.",
        "question_ar": "",
        "evidence_en": "Orders that are disputed refer to status = 'Disputed'; the sales representative means employees; names refers to firstName, lastName.",
        "evidence_ar": "",
        "SQL": "SELECT t3.firstName, t3.lastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN employees AS t3 ON t2.salesRepEmployeeNumber = t3.employeeNumber WHERE t1.status = 'Disputed'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the percentage of employees are in Paris office?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode"
    },
    {
        "db_id": "car_retails",
        "question_en": "Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to?",
        "question_ar": "",
        "evidence_en": "Sales Manager refers to jobTitle; Europe, Middle East, and Africa region refers to territory = 'EMEA';",
        "evidence_ar": "",
        "SQL": "SELECT t2.firstName, t2.lastName FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t2.jobTitle = 'Sale Manager (EMEA)'"
    },
    {
        "db_id": "car_retails",
        "question_en": "List the name of employees in Japan office and who are they reporting to.",
        "question_ar": "",
        "evidence_en": "Japan is the name of the country; 'reportsTO' is the leader of the 'employeeNumber';",
        "evidence_ar": "",
        "SQL": "SELECT t2.firstName, t2.lastName, t2.reportsTo FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t1.country = 'Japan'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which customer ordered 1939 'Chevrolet Deluxe Coupe' at the highest price?",
        "question_ar": "",
        "evidence_en": "1939 'Chevrolet Deluxe Coupe' refers to productName; the highest price refers to MAX(priceEach)",
        "evidence_ar": "",
        "SQL": "SELECT t4.customerName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber WHERE t1.productName = '1939 Chevrolet Deluxe Coupe' ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the percentage of the payment amount in 2004 was made by Atelier graphique?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(amount) where customerName = 'Atelier graphique'), (SUM(amount)) as percentage where year(paymentDate) = 2004;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t2.paymentDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Calculate the actual profit for order number 10100.",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(quantityOrdered (SUBTRACT (priceEach, buyPrice));",
        "evidence_ar": "",
        "SQL": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How much did customer 103 pay in total?",
        "question_ar": "",
        "evidence_en": "Pay in total refers to SUM(amount);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'"
    },
    {
        "db_id": "car_retails",
        "question_en": "What is the total price of the order 10100?",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(quantityOrdered, priceEach)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list the top three product names with the highest unit price.",
        "question_ar": "",
        "evidence_en": "The highest unit price refers to MAX(priceEach)",
        "evidence_ar": "",
        "SQL": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question_en": "Among the customers of empolyee 1370, who has the highest credit limit?Please list the full name of the contact person.",
        "question_ar": "",
        "evidence_en": "Employee 1370 refers to employeeNumber = '1370';",
        "evidence_ar": "",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM employees AS t1 INNER JOIN customers AS t2 ON t1.employeeNumber = t2.salesRepEmployeeNumber WHERE t1.employeeNumber = '1370' ORDER BY t2.creditLimit DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many 2003 Harley-Davidson Eagle Drag Bikes were ordered?",
        "question_ar": "",
        "evidence_en": "2003 Harley-Davidson Eagle Drag Bikes refers to productName; how many ordered refers to COUNT(quantityOrdered);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'"
    },
    {
        "db_id": "car_retails",
        "question_en": "When was the product with the highest unit price shipped?",
        "question_ar": "",
        "evidence_en": "The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;",
        "evidence_ar": "",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many motorcycles have been ordered in 2004?",
        "question_ar": "",
        "evidence_en": "Motorcycles refer to productLine = 'motorcycles'; ordered in 2004 refers to year(orderDate) = 2004;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE t3.productLine = 'motorcycles' AND STRFTIME('%Y', t1.orderDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Please list the order number of the customer whose credit card has a limit of 45300.",
        "question_ar": "",
        "evidence_en": "Credit card does not have a limit refers to creditLimit = 45300;",
        "evidence_ar": "",
        "SQL": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300"
    },
    {
        "db_id": "car_retails",
        "question_en": "For Which order was the most profitable, please list the customer name of the order and the profit of the order.",
        "question_ar": "",
        "evidence_en": "Most profitable order can be computed as MAX(MULTIPLY(quantityOrdered, SUBTRACT(priceEach, buyPrice)).",
        "evidence_ar": "",
        "SQL": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many transactions payment made by customer that is lower than 10000. Group the result by year.",
        "question_ar": "",
        "evidence_en": "Transactions payment lower than 10000 refer to COUNT(amount) < 1000; by year refers to YEAR(paymentDate)",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out 3 best seller products during year 2003 with their total quantity sold during 2003.",
        "question_ar": "",
        "evidence_en": "Best selling products refer to products with MAX(quantityOrdered); 2003 refers to year(orderDate) = 2003;",
        "evidence_ar": "",
        "SQL": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question_en": "List out sale rep that has sold 1969 Harley Davidson Ultimate Chopper. List out their names and quantity sold throughout the year.",
        "question_ar": "",
        "evidence_en": "1969 Harley Davidson Ultimate Chopper refers to the name of the product; sale rep refers to employee; 2003 refers to year(orderDate) = 2003; quantity sold refers to quantityOrdered; their names refer to the name of customers; ",
        "evidence_ar": "",
        "SQL": "SELECT t5.firstName, t5.lastName, SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber INNER JOIN employees AS t5 ON t4.salesRepEmployeeNumber = t5.employeeNumber WHERE t1.productName = '1969 Harley Davidson Ultimate Chopper' GROUP BY t5.lastName, t5.firstName"
    },
    {
        "db_id": "car_retails",
        "question_en": "Who are the sales representatives in New York City? List their full names.",
        "question_ar": "",
        "evidence_en": "New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';",
        "evidence_ar": "",
        "SQL": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Identify the customer and list down the country with the check number GG31455.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many 2001 Ferrari Enzo were ordered?",
        "question_ar": "",
        "evidence_en": "2001 Ferrari Enzo refers to productName;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t1.orderNumber) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t2.productName = '2001 Ferrari Enzo'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Which 5 products has the lowest amount of orders? List the product names.",
        "question_ar": "",
        "evidence_en": "The lowest amount of orders refers to MIN(quantityOrdered);",
        "evidence_ar": "",
        "SQL": "SELECT t2.productName FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode GROUP BY t2.productName ORDER BY SUM(t1.quantityOrdered) ASC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question_en": "List down the customer names with a disputed order status.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t1.customerName FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'Disputed'"
    },
    {
        "db_id": "car_retails",
        "question_en": "How many countries from the USA have an In Process order status?",
        "question_ar": "",
        "evidence_en": "country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question_en": "Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products.",
        "question_ar": "",
        "evidence_en": "SUM(MULTIPLY(quantityOrdered, priceEach)) where productLine = 'Classic Cars'; status = 'Shipped'; customername = 'Land of Toys Inc';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t3.priceEach * t3.quantityOrdered) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN orderdetails AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN products AS t4 ON t3.productCode = t4.productCode WHERE t4.productLine = 'Classic Cars' AND t1.customerName = 'Land of Toys Inc.' AND t2.status = 'Shipped'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants have not obtained a minimum of 3 in their reviews?",
        "question_ar": "",
        "evidence_en": "have not obtained a minimum of 3 in review refers to review < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE review < 3"
    },
    {
        "db_id": "restaurant",
        "question_en": "What types of food are served at the 4 top-reviewed restaurants?",
        "question_ar": "",
        "evidence_en": "top-reviewed refers to review = 4; type of food refers to food_type\n\n",
        "evidence_ar": "",
        "SQL": "SELECT food_type FROM generalinfo WHERE review = ( SELECT MAX(review) FROM generalinfo ) LIMIT 4"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants in the city of Richmond serve Mediterranean food?",
        "question_ar": "",
        "evidence_en": "Mediterranean food refers to food_type =   'mediterranean'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all the cities in Sonoma County.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE county = 'sonoma county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What counties are not in the Bay Area Region?",
        "question_ar": "",
        "evidence_en": "not in the Bay Area region refers to region ! = 'bay area'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT county FROM geographic WHERE region != 'bay area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all cities in the Northern California Region.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE region = 'northern california'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List by its ID number all restaurants on 11th Street in Oakland.",
        "question_ar": "",
        "evidence_en": "11th Street refers to street_name = '11th street'; Oakland refers to city = 'oakland'; ID number of restaurant refers to id_restaurant\n\n",
        "evidence_ar": "",
        "SQL": "SELECT id_restaurant FROM location WHERE city = 'oakland' AND street_name = '11th street'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants can we find at number 871 on its street?",
        "question_ar": "",
        "evidence_en": "number 871 on its street refers to street_num = 871",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM location WHERE street_num = 871"
    },
    {
        "db_id": "restaurant",
        "question_en": "At what numbers on 9th Avenue of San Francisco there are restaurants?",
        "question_ar": "",
        "evidence_en": "9th Avenue refers to street_name = '9th avenue'; San Francisco refers to City = 'san francisco'",
        "evidence_ar": "",
        "SQL": "SELECT id_restaurant FROM location WHERE City = 'san francisco' AND street_name = '9th avenue'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What type of food is there in the restaurants on Adeline Street in Berkeley city?",
        "question_ar": "",
        "evidence_en": "Adeline Street refers to street_name = 'adeline st'; type of food refers to food_type\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which regions are there no African food restaurants?",
        "question_ar": "",
        "evidence_en": "no African food restaurants refers to food_type <> 'african'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which counties are there A&W Root Beer Restaurants?",
        "question_ar": "",
        "evidence_en": "A&W Root Beer Restaurant refers to label = 'a & w root beer'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Indicate street and number of the Adelitas Taqueria Restaurants.",
        "question_ar": "",
        "evidence_en": "street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County?",
        "question_ar": "",
        "evidence_en": "3140 Alpine Road at San Mateo County refers to street_num = 3140 AND street_name = 'alpine rd' AND County = 'san mateo county'; type of food refers to food_type",
        "evidence_ar": "",
        "SQL": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which streets of the city of San Francisco are there restaurants that serve seafood?",
        "question_ar": "",
        "evidence_en": "street refers to street_name; seafood refers to food_type = 'seafood'",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all counties where there is no Bakers Square Restaurant & Pie Shop.",
        "question_ar": "",
        "evidence_en": "no Bakers Square Restaurant & Pie Shop refers to label <> 'bakers square restaurant & pie shop'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In how many counties is there a street called Appian Way?",
        "question_ar": "",
        "evidence_en": "a street called Appian Way refers to street_name = 'appian way'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the rating of each restaurant reviews on Atlantic Ave?",
        "question_ar": "",
        "evidence_en": "Atlantic Ave refers to street_name = 'atlantic ave'; rating refers to review",
        "evidence_ar": "",
        "SQL": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Identify all restaurants in Contra Costa County by id.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Identify all the restaurants in Yolo County by their label.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What restaurant on Drive Street in San Rafael doesn't serve American food?",
        "question_ar": "",
        "evidence_en": "Drive Street refers to street_name = 'drive'; San Rafael refers to city = 'san rafael'; American food refers to food_type <> 'american'",
        "evidence_ar": "",
        "SQL": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'drive' AND T1.food_type != 'american' AND T2.city = 'san rafael'"
    },
    {
        "db_id": "restaurant",
        "question_en": "On which streets in the city of San Francisco are there restaurants with a review of 1.7?",
        "question_ar": "",
        "evidence_en": "street refers to street_name; review of 1.7 refers to review = 1.7",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which restaurant on the street Alameda de las Pulgas in the city of Menlo Park is the worst rated?",
        "question_ar": "",
        "evidence_en": "restaurant refers to label; street Alameda de las Pulgas refers to street_name = 'avenida de las pulgas'; the worst rated refers to min(review)",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'avenida de las pulgas' AND T2.city = 'menlo park' ORDER BY review LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "On what street in Tuolumne County is Good Heavens restaurant located?",
        "question_ar": "",
        "evidence_en": "street refers to street_name; Good Heavens restaurant refers to label = 'good heavens'",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T2.label = 'good heavens' AND T3.county = 'tuolumne county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Indicate the street numbers where Aux Delices Vietnamese Restaurant are located.",
        "question_ar": "",
        "evidence_en": "street numbers refers to street_num; Aux Delices Vietnamese Restaurant refers to label = 'aux delices vietnamese restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'aux delices vietnamese restaurant'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Identify all the restaurants in Marin County by their id.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which regions are there no pizza restaurants?",
        "question_ar": "",
        "evidence_en": "no pizza restaurants refers to food_type = 'pizza'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'pizza' AND T2.region != 'unknown'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Calculate the average rating of reviews for restaurants in Santa Cruz County.",
        "question_ar": "",
        "evidence_en": "average rating = divide(sum(review where county = 'santa cruz county'), count(id_restaurant where county = 'santa cruz county'))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What percentage of restaurants in Monterey County have Mexican food?",
        "question_ar": "",
        "evidence_en": "Mexican food refers to food_type = 'mexican'; percentage = divide(count(id_restaurant where food_type = 'mexican'), count(id_restaurant)) where county = 'monterey county' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What percentage of streets named 11th Street are in Alameda County?",
        "question_ar": "",
        "evidence_en": "street named 11th Street refers to street_name = '11th st'; percentage = divide(count(street_name = '11th st' and County = 'alameda county'), count(street_name where County = 'alameda county')) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.street_name = '11th st', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.County = 'alameda county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please list all of the restaurants that serve European food.",
        "question_ar": "",
        "evidence_en": "restaurant refers to label; European food refers to food_type = 'european'",
        "evidence_ar": "",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = 'european'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What cities are located in Northern California?",
        "question_ar": "",
        "evidence_en": "Northern California refers to region = 'northern california'",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE region = 'northern california'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What does the one and only 24-hour diner's name?",
        "question_ar": "",
        "evidence_en": "24-hour diner refers to food_type = '24 hour diner'; diner name refers to label",
        "evidence_ar": "",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please list any five cities that have an unidentified county and region.",
        "question_ar": "",
        "evidence_en": "unidentified county and region refers to county = 'unknown' AND region = 'unknown'",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the county and region of Davis City?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT county, region FROM geographic WHERE city = 'Davis'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please list all of the street names in Clayton City.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT street_name FROM location WHERE city = 'Clayton'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What are the most popular restaurants in San Francisco among diners?",
        "question_ar": "",
        "evidence_en": "the most popular refers to max(review); restaurant refers to label; San Francisco refers to city = 'San Francisco'",
        "evidence_ar": "",
        "SQL": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many American food restaurants are unpopular in Carmel?",
        "question_ar": "",
        "evidence_en": "American Food Restaurant refers to food_type = 'ameraican'; unpopular refers to min(review); Carmel refers to city = 'Carmel'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' AND review = ( SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' )"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the percentage of restaurants that serve American food in Dublin city?",
        "question_ar": "",
        "evidence_en": "American food refers to food_type = 'american food'; percentage = divide(count(id_restaurant), count(id_restaurant where food_type = 'american food')) where city = 'dublin' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(food_type = 'american food', 1, 0)) AS REAL) * 100 / COUNT(id_restaurant) FROM generalinfo WHERE city = 'dublin'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the full address of Albert's Café?",
        "question_ar": "",
        "evidence_en": "full address = street_num, street_name, city; Albert's Café refers to label = 'Albert's Café'",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Café'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What are the restaurants that are located at \"19th St. Oakland\"?",
        "question_ar": "",
        "evidence_en": "restaurant refers to label; \"19th St. Oakland\" refers to street_name = '19th St' AND city = 'Oakland'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What kind of restaurants can be found at \"106 E 25th Ave\"?",
        "question_ar": "",
        "evidence_en": "kind of restaurant refers to food_type; \"106 E 25th Ave\" refers to street_name = 'e 25th ave'",
        "evidence_ar": "",
        "SQL": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 106 AND T2.street_name = 'e 25th ave'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please name any three restaurants that have an unidentified region.",
        "question_ar": "",
        "evidence_en": "restaurant name refers to label; unidentified region refers to region = 'unknown'",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.region = 'unknown' LIMIT 3"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the name of the Chinese restaurant that can be found at 104 San Tomas Aquino Road, Campbell?",
        "question_ar": "",
        "evidence_en": "restaurant name refers to label; Chinese restaurant refers to food_type = 'chinese'; 104 San Tomas Aquino Road Campbell refers to street_num = 104 AND street_name = 'san tomas aquino road' AND city = 'campbell'",
        "evidence_ar": "",
        "SQL": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 104 AND T1.city = 'campbell' AND T2.street_name = 'san tomas aquino road'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many Thai restaurants can be found in San Pablo Ave, Albany?",
        "question_ar": "",
        "evidence_en": "Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the county and region of Plearn-Thai Cuisine restaurant?",
        "question_ar": "",
        "evidence_en": "Plearn-Thai Cuisine restaurant refers to label = 'plearn-thai cuisine'",
        "evidence_ar": "",
        "SQL": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region?",
        "question_ar": "",
        "evidence_en": "restaurant name refers to label",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which county and region does the street E. El Camino Real belong to?",
        "question_ar": "",
        "evidence_en": "street E. El Camino Real refers to street_name = 'E. El Camino Real'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.county, T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'E. El Camino Real'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?",
        "question_ar": "",
        "evidence_en": "restaurant name refers to label; the least popular refers to min(review); Indian restaurant refers to food_type = 'Indian restaurant'; Shattuck Avenue in Berkeley refers to street_name = 'shattuck ave' and city = 'berkeley'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'berkeley' AND T2.street_name = 'shattuck ave' AND T1.food_type = 'Indian restaurant' ORDER BY T1.review LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the percentage of restaurants in the Bay Area region that scored over 4 for the review rating?",
        "question_ar": "",
        "evidence_en": "scored over 4 refers to review > 4; percentage = divide(count(id_restaurant where region = 'bay area' and review > 4), count(id_restaurant where region = 'Bay Area')) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List every city in San Mateo County.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE county = 'san mateo county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants have more than 4 star reviews?",
        "question_ar": "",
        "evidence_en": "more than 4 star review refers to review > 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) AS cnt FROM generalinfo WHERE review > 4"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which street has the most restaurants?",
        "question_ar": "",
        "evidence_en": "street refers to street_name; the most restaurants refers to max(count(street_name))",
        "evidence_ar": "",
        "SQL": "SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(street_name) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which chicken restaurant has the highest review?",
        "question_ar": "",
        "evidence_en": "chicken restaurant refers to food_type = 'chicken'; the highest review refers to max(review)",
        "evidence_ar": "",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = 'chicken' ORDER BY review DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which county is El Cerrito from?",
        "question_ar": "",
        "evidence_en": "El Cerrito refers to city = 'el cerrito'",
        "evidence_ar": "",
        "SQL": "SELECT county FROM geographic WHERE city = 'el cerrito'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants are on Irving Street?",
        "question_ar": "",
        "evidence_en": "Irving Street refers to street_name = 'irving'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM location WHERE street_name = 'irving'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Provide a list of restaurants from Marin county.",
        "question_ar": "",
        "evidence_en": "restaurant refers to label",
        "evidence_ar": "",
        "SQL": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the address of the Peking Duck restaurant?",
        "question_ar": "",
        "evidence_en": "address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all the streets with more than 10 restaurants in Alameda county.",
        "question_ar": "",
        "evidence_en": "street refers to street_name; more than 10 restaurants refers to count(id_restaurant) > 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.county = 'alameda county' GROUP BY T2.street_name HAVING COUNT(T2.id_restaurant) > 10"
    },
    {
        "db_id": "restaurant",
        "question_en": "What are the regions with Greek restaurants?",
        "question_ar": "",
        "evidence_en": "Greek restaurant refers to food_type = 'greek'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all of the restaurant addresses from an unknown region.",
        "question_ar": "",
        "evidence_en": "restaurant address refers to street_num, street_name; unknown region refers to region = 'unknown'",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'unknown'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the review of the restaurant at 8440 Murray Ave?",
        "question_ar": "",
        "evidence_en": "8440 Murray Ave refers to street_num = 8440 and street_name = 'murray ave'",
        "evidence_ar": "",
        "SQL": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'murray ave' AND T1.street_num = 8440"
    },
    {
        "db_id": "restaurant",
        "question_en": "What type of restaurant is most common in Monterey county?",
        "question_ar": "",
        "evidence_en": "type refers to food_type; most common refers to max(count(food_type))",
        "evidence_ar": "",
        "SQL": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'Monterey' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which street in San Francisco has the most burger restaurants?",
        "question_ar": "",
        "evidence_en": "street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the region of 1149 El Camino Real?",
        "question_ar": "",
        "evidence_en": "1149 El Camino Real refers to street_num = 1149 and street_name = 'el camino real'",
        "evidence_ar": "",
        "SQL": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the county of the Sankee restaurant?",
        "question_ar": "",
        "evidence_en": "Sankee restaurant refers to label = 'sankee'",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'sankee'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many streets with restaurants are there in the Northern California region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'northern california'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all of the restaurants on Park St.",
        "question_ar": "",
        "evidence_en": "restaurant refers to label; Park St refers to street_name = 'park st'",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What percentage of restaurants are from the Bay Area?",
        "question_ar": "",
        "evidence_en": "Bay Area refers to region = 'bay area'; percentage = divide(count(id_restaurant where region = 'bay area'), count(id_restaurant)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all the average reviews of Chinese restaurants for each county from highest to lowest.",
        "question_ar": "",
        "evidence_en": "Chinese restaurant refers to food_type = 'chinese'; average review refers to divide(sum(review), count(review))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.review) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'chinese' GROUP BY T1.id_restaurant ORDER BY AVG(T1.review) DESC"
    },
    {
        "db_id": "restaurant",
        "question_en": "List street names in San Francisco city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT street_name FROM location WHERE city = 'San Francisco'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List restaurant ids located in Danville city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT id_restaurant FROM location WHERE city = 'Danville'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many cities are located in the Bay Area?",
        "question_ar": "",
        "evidence_en": "the Bay Area refers to region = 'bay area'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many labels of the restaurant have an unknown country?",
        "question_ar": "",
        "evidence_en": "unknown county refers to county = 'unknown'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.label) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'unknown'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please indicate the street names of restaurants with food type is American.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'American'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Please indicate which labels have the city located in Santa Cruz.",
        "question_ar": "",
        "evidence_en": "Santa Cruz refers to county = 'Santa Cruz county'",
        "evidence_ar": "",
        "SQL": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Give the review of the restaurant at 430, Broadway.",
        "question_ar": "",
        "evidence_en": "430 Broadway refers to street_num = 430 and street_name = 'Broadway'",
        "evidence_ar": "",
        "SQL": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'Broadway' AND T2.street_num = 430"
    },
    {
        "db_id": "restaurant",
        "question_en": "Indicate the address of the restaurant with the most popular reviews.",
        "question_ar": "",
        "evidence_en": "address refers to street_num, street_name; the most popular review refers to max(review)",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_num, T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which country has the most restaurants with Italian food?",
        "question_ar": "",
        "evidence_en": "Italian food refers to food_type = 'Italian'",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Find the percentage of restaurant in Napa Valley.",
        "question_ar": "",
        "evidence_en": "Napa Valley refers to region = 'Napa Valley'; percentage = divide(count(id_restaurant where region = 'Napa Valley'), count(id_restaurant)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(region = 'Napa Valley', 1, 0)) AS REAL) * 100 / COUNT(region) FROM geographic"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many of the cities are in a Bay Area?",
        "question_ar": "",
        "evidence_en": "Bay Area refers to region = 'bay area'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List down the cities with unknown country.",
        "question_ar": "",
        "evidence_en": "unknown county refers to county = 'unknown'",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE county = 'unknown'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the city located in Bay Area of Santa Clara?",
        "question_ar": "",
        "evidence_en": "Bay Area refers to region = 'bay area'; Santa Clara refers to county = 'santa clara county'",
        "evidence_ar": "",
        "SQL": "SELECT city FROM geographic WHERE region = 'bay area' AND county = 'santa clara county'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List down the restaurant ID of restaurants located in Sunnyvale.",
        "question_ar": "",
        "evidence_en": "Sunnyvale refers to city = 'sunnyvale'",
        "evidence_ar": "",
        "SQL": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among the restaurants on street number below 1000, how many of them are in Railroad St.?",
        "question_ar": "",
        "evidence_en": "street number below 1000 refers to street_num < 1000; Railroad St. refers to street_name = 'railroad'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(city) FROM location WHERE street_name = 'railroad' AND street_num < 1000"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the name of the 24 hour diner at San Francisco?",
        "question_ar": "",
        "evidence_en": "name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'",
        "evidence_ar": "",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Give the review of the restaurant located in Ocean St., Santa Cruz.",
        "question_ar": "",
        "evidence_en": "Ocean St. refers to street_name = 'ocean st'; Santa Cruz refers to city = 'santa cruz'",
        "evidence_ar": "",
        "SQL": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'santa cruz' AND T1.street_name = 'ocean st'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Give the street number of a bar in Oakland with a 2.7 review.",
        "question_ar": "",
        "evidence_en": "street number refers to street_num; bar refers to food_type = 'bar'; Oakland refers to city = 'oakland'; 2.7 review refers to review = 2.7",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_num FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.review = 2.7 AND T2.city = 'oakland' AND T1.food_type = 'bar'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?",
        "question_ar": "",
        "evidence_en": "bakery refers to food_type = 'bakery'; University Avenue refers to street_name = 'university ave.'; Palo Alto refers to city = 'palo alto'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among the listed winery, what is the street number of the winery named \"Tulocay Winery\"?",
        "question_ar": "",
        "evidence_en": "winery refers to food_type = 'winery'; street number refers to street_num; \"Tulocay Winery\" refers to label = 'Tulocay winery'",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List the review and label of the restaurants in Mission Blvd., Hayward.",
        "question_ar": "",
        "evidence_en": "Mission Blvd. refers to street_name = 'mission blvd'; Hayward refers to city = 'hayward'",
        "evidence_ar": "",
        "SQL": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label?",
        "question_ar": "",
        "evidence_en": "indian restaurant refers to food_type = 'indian'; Castro St. refers to street_name = 'castro st'; Mountainview refers to city = 'mountainview'; have the word \"Indian\" in label refers to label = 'indian'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'castro st' AND T1.city = 'mountain view' AND T2.food_type = 'indian' AND T2.label LIKE '%cookhouse%'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In restaurants with a review of 2, how many restaurants have a street number below 500?",
        "question_ar": "",
        "evidence_en": "review of 2 refers to review = 2; street number below 500 refers to street_num < 500",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385?",
        "question_ar": "",
        "evidence_en": "asian restaurant refers to food_type = 'asian'; N. Milpitas Blvd. refers to street_name = 'n milpitas blvd'; Milpitas refers to city = 'milpitas'; restaurant ID greater than 385 refers to id_restaurant > 385",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?",
        "question_ar": "",
        "evidence_en": "restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'",
        "evidence_ar": "",
        "SQL": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the full address of the restaurant named \"Sanuki Restaurant\"?",
        "question_ar": "",
        "evidence_en": "full address refers to city, street_num, street_name; restaurant named \"Sanuki Restaurant\" refers to label = 'sanuki restaurant'",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List the food type of the restaurant located in 22779 6th St., Hayward City.",
        "question_ar": "",
        "evidence_en": "22779 refers to street_num = 22779; 6th St. refers to street_name = '6th St'",
        "evidence_ar": "",
        "SQL": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St' AND T2.city = 'hayward'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many American restaurants are located in Front, San Francisco?",
        "question_ar": "",
        "evidence_en": "American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.food_type = 'american') FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'front'"
    },
    {
        "db_id": "restaurant",
        "question_en": "List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000.",
        "question_ar": "",
        "evidence_en": "American restaurant refers to food_type = 'american'; street number greater than 2000 refers to street_num > 2000; review greater than the 70% of average review refers to review > multiply(avg(review), 0.7)",
        "evidence_ar": "",
        "SQL": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'american' AND T1.street_num > 2000 GROUP BY T1.id_restaurant ORDER BY AVG(T2.review) * 0.7 DESC"
    },
    {
        "db_id": "restaurant",
        "question_en": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?",
        "question_ar": "",
        "evidence_en": "street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the name of the most popular restaurant serving Asian foods in San Francisco?",
        "question_ar": "",
        "evidence_en": "the most popular refers to max(review); Asian food refers to food_type = 'asian'; San Francisco refers to city = 'san francisco'",
        "evidence_ar": "",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many cities are there in Monterey?",
        "question_ar": "",
        "evidence_en": "Monterey refers to region = 'monterey'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many deli in Belmont have a review rating of 2 or more?",
        "question_ar": "",
        "evidence_en": "deli ris a food type; Belmont refers to city = 'belmont'; review rating of 2 or more refers to review > 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which county in northern California has the highest number of cities?",
        "question_ar": "",
        "evidence_en": "northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))",
        "evidence_ar": "",
        "SQL": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants can you find in Concord?",
        "question_ar": "",
        "evidence_en": "Concord refers to city = 'concord'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id_restaurant) FROM location WHERE city = 'concord'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which region can you find the top 4 most popular restaurants?",
        "question_ar": "",
        "evidence_en": "the top 4 most popular restaurant refers to top 4 max(review)",
        "evidence_ar": "",
        "SQL": "SELECT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY T1.review DESC LIMIT 4"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many Chinese restaurants are there on 1st st, Livermore?",
        "question_ar": "",
        "evidence_en": "Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many Indian restaurants are there in the Los Angeles area?",
        "question_ar": "",
        "evidence_en": "Indian restaurant refers to food_type = 'indian'; the Los Angeles area refers to region = 'los angeles area'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'indian' AND T1.region = 'los angeles area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In the Bay Area, what is the most common type of food served by restaurants?",
        "question_ar": "",
        "evidence_en": "the Bay Area refers to region = 'bay area'; the most common type of food refers to max(count(food_type))",
        "evidence_ar": "",
        "SQL": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many restaurants in Broadway, Oakland received a review of no more than 3?",
        "question_ar": "",
        "evidence_en": "Broadway refers to street_name = 'broadway';  Oakland refers to city = 'oakland'; a review of no more than 3 refers to review < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which region can you find the highest number of Baskin Robbins restaurants?",
        "question_ar": "",
        "evidence_en": "the highest number refers to max(count(city)); Baskin Robbins restaurant refers to label = 'baskin robbins'",
        "evidence_ar": "",
        "SQL": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "List all the streets where pizza-serving restaurants are found in San Jose.",
        "question_ar": "",
        "evidence_en": "street refers to street_name; pizza-serving restaurant refers to food_type = 'pizza'; San Jose refers to city = 'san jose'",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'pizza' AND T1.city = 'san jose'"
    },
    {
        "db_id": "restaurant",
        "question_en": "How many types of restaurants are there in the Yosemite and Mono Lake area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.food_type) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'yosemite and mono lake area'"
    },
    {
        "db_id": "restaurant",
        "question_en": "What is the full address of the most popular restaurant among the diners?",
        "question_ar": "",
        "evidence_en": "full address refers to street_num, street_name, city; the most popular refers to max(review)",
        "evidence_ar": "",
        "SQL": "SELECT T2.street_name, T2.street_num, T2.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "In which counties can you find the restaurant with the highest number of branches?",
        "question_ar": "",
        "evidence_en": "restaurant refers to label; the highest number of branches refers to max(count(city))",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "Which region has the highest number of restaurants?",
        "question_ar": "",
        "evidence_en": "the highest number refers to max(count(id_restaurant))",
        "evidence_ar": "",
        "SQL": "SELECT T1.region FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant",
        "question_en": "List the full address of all the American restaurants with a review of 4 or more?",
        "question_ar": "",
        "evidence_en": "full address refers to street_num, street_name, city; American restaurant refers to food_type = 'american'; a review of 4 or more refers to review > 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.street_num, T1.street_name, T1.city FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.review >= 4"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players were born after the year 1985?",
        "question_ar": "",
        "evidence_en": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Id) FROM Player WHERE SUBSTR(DOB, 1, 4) > 1985"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were there in May, 2008?",
        "question_ar": "",
        "evidence_en": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "For how many times has player no.41 won the \"man of the match\" award?",
        "question_ar": "",
        "evidence_en": "player no.41 won the \"man of the match\" refers to Man_of_the_Match = 41",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE Man_of_the_Match = 41"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Please list the IDs of all the matches in the year 2008.",
        "question_ar": "",
        "evidence_en": "ID of matches refers to Match_Id; in the year 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008'",
        "evidence_ar": "",
        "SQL": "SELECT Match_Id FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2008'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players are from Australia?",
        "question_ar": "",
        "evidence_en": "Australia refers to Country_Name = 'Australia'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.Country_Name = 'Australia' THEN T1.Player_Id ELSE NULL END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which country is the oldest player from?",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name; the oldest refers to min(DOB)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the bowling skill of SC Ganguly?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players who use the right hand as their batting hand, how many of them were born after 1985?",
        "question_ar": "",
        "evidence_en": "right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; born after 1985 refers to SUBSTR(DOB, 1, 4) > 1985",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(T1.DOB, 1, 4) > 1985 THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_Hand = 'Right-hand bat'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Please list the names of the players who use the right hand as their batting hand and are from Australia.",
        "question_ar": "",
        "evidence_en": "name of player refers to Player_Name; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; Australia refers to Country_Name = 'Australia'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_id INNER JOIN Batting_Style AS T3 ON T2.Batting_hand = T3.Batting_Id WHERE T1.Country_Name = 'Australia' AND T3.Batting_Hand = 'Right-hand bat'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Please list the bowling skills of all the players from Australia.",
        "question_ar": "",
        "evidence_en": "Australia refers to Country_Name = 'Australia'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players whose bowling skill is \"Legbreak\", when was the oldest one of them born?",
        "question_ar": "",
        "evidence_en": "the oldest refers to min(DOB); date of birth refers to DOB",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the bowling skill used by most players?",
        "question_ar": "",
        "evidence_en": "bowling skill used by most players refers to max(count(Bowling_Skill))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the player who won the \"man of the match\" award in the match on 2008/4/18?",
        "question_ar": "",
        "evidence_en": "name of player refers to Player_Name; on 2008/4/18 refers to Match_Date = '2008-04-18'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T1.Match_Date = '2008-04-18'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "For how many times has SC Ganguly played as team captain in a match?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; team captain refers to Role_Desc = 'Captain'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the role of SC Ganguly in the match on 2008/4/18?",
        "question_ar": "",
        "evidence_en": "role refers to of Role_Id; SC Ganguly refers to Player_Name = 'SC Ganguly'; on 2008/4/18 refers to Match_Date = '2008-04-18'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Role_Id FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Match AS T4 ON T2.Match_Id = T4.Match_Id WHERE T1.Player_Name = 'SC Ganguly' AND T4.Match_Date = '2008-04-18'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among all the matches SC Ganguly has played in, what is the highest winning margin?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the highest winning margin refers to max(Win_Margin)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T3.Win_Margin) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the average winning margin of all the matches SC Ganguly has played in?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the average winning margin = divide(sum(Win_Margin), count(Match_Id)) where Player_Name = 'SC Ganguly'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.Win_Margin) AS REAL) / COUNT(*) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand?",
        "question_ar": "",
        "evidence_en": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_Hand = 'Right-hand bat'), count(Player_Id)) * 100% where SUBSTR(DOB, 1, 4) > 1985",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the name of the youngest player.",
        "question_ar": "",
        "evidence_en": "name of player refers to Player_Name; the youngest refers to max(DOB)",
        "evidence_ar": "",
        "SQL": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times has Sunrisers Hyderabad been the toss winner of a game?",
        "question_ar": "",
        "evidence_en": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; time of toss winner refers to count(Toss_Winner)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Toss_Winner = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad' ) THEN 1 ELSE 0 END) FROM `Match`"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the name of the striker in the match no. 419169, over no.3, ball no.2, inning no.2.",
        "question_ar": "",
        "evidence_en": "name of the striker refers to Player_Name; match no. 419169 refers to Match_Id = 419169; over no.3 refers to Over_Id = 3; ball no.2 refers to Ball_Id = 2; inning no.2 refers to Innings_No = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the name of venue for the game with a win margin of 138 points.",
        "question_ar": "",
        "evidence_en": "name of venue refers to Venue_Name; a win margin of 138 points refers to Win_Margin = 138",
        "evidence_ar": "",
        "SQL": "SELECT T2.Venue_Name FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Win_Margin = 138"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "For the game on 2008/5/12, who was the man of the match?",
        "question_ar": "",
        "evidence_en": "on 2008/5/12 refers to Match_Date = '2008-05-12'; name refers to Player_Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Match_Date = '2008-05-12'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "State the name of captain keeper of the match no.419117.",
        "question_ar": "",
        "evidence_en": "name refers to Player_Name; captain keeper refers to Role_Desc = 'CaptainKeeper'; match no.419117 refers to Match_Id = '419117'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T1.Match_Id = '419117' AND T2.Role_Desc = 'CaptainKeeper'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who was the man of the series in 2013? Give the full name.",
        "question_ar": "",
        "evidence_en": "full name refers to Player_Name; in 2013 refers to Season_Year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2013"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the date of birth of the 2014 Orange Cap winner.",
        "question_ar": "",
        "evidence_en": "date of birth refers to DOB; 2014 refers to Season_Year = 2014; Orange Cap winner refers to Orange_Cap IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT T2.DOB FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2014 AND T1.Orange_Cap IS NOT NULL"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the nationality of the 7th season Purple Cap winner?",
        "question_ar": "",
        "evidence_en": "nationality refers to Country_Name; the 7th season refers to Season_Id = 7; Purple Cap winner refers to Purple_Cap IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Id = 7 AND T1.Purple_Cap IS NOT NULL"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which country does Ranchi city belong to?",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name; Ranchi city refers to City_Name = 'Ranchi'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country_Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id WHERE T1.City_Name = 'Ranchi'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many Indian cities are there in the database?",
        "question_ar": "",
        "evidence_en": "Indian refers to Country_Name = 'India'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "State the name of the city with the most venues.",
        "question_ar": "",
        "evidence_en": "name of the city refers to City_Name; the most venues refers to max(count(Venue_Id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T1.City_Id = T2.City_Id GROUP BY T1.City_Id ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the batting hand of MK Pandey?",
        "question_ar": "",
        "evidence_en": "MK Pandey refers to Player_Name = 'MK Pandey'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Batting_hand FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T1.Player_Name = 'MK Pandey'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In the database, how many times is the number of Indian cities to the South African cities?",
        "question_ar": "",
        "evidence_en": "Indian refers to Country_Name = 'India'; South African refers to Country_Name = 'South Africa'; how many times = divide(count(City_Id where Country_Name = 'India'), count(City_Id where Country_Name = 'South Africa'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times does M Chinnaswamy Stadium host games than Maharashtra Cricket Association Stadium?",
        "question_ar": "",
        "evidence_en": "M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'; Maharashtra Cricket Association Stadium refers to Venue_Name = 'Maharashtra Cricket Association Stadium'; how many times = divide(count(Match_Id where Venue_Name = 'M Chinnaswamy Stadium'), count(Match_Id where Venue_Name = 'Maharashtra Cricket Association Stadium'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the oldest player?",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; the oldest refers to min(DOB)",
        "evidence_ar": "",
        "SQL": "SELECT Player_Name FROM Player ORDER BY DOB ASC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were played on May 2008?",
        "question_ar": "",
        "evidence_en": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(Match_Date, 7, 1) = '5' THEN 1 ELSE 0 END) FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2008'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players were born in the 90s?",
        "question_ar": "",
        "evidence_en": "born in the 90s refers to DOB > = '1990-01-01' AND DOB < = '1999-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Id) AS cnt FROM Player WHERE DOB BETWEEN '1990-01-01' AND '1999-12-31'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did Team 10 play in 2012?",
        "question_ar": "",
        "evidence_en": "Team 10 refers to Team_1 = 10 OR Team_2 = 10; in 2012 refers to SUBSTR(Match_Date, 1, 4) = '2012'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Team_1 = 10 OR Team_2 = 10 THEN 1 ELSE 0 END) FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2012'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the id of the player who won the Orange Cap for 2 consecutive seasons.",
        "question_ar": "",
        "evidence_en": "id of the player who won the Orange Cap refers to Orange_Cap; for 2 consecutive seasons refers to count(Season_Year) > 1",
        "evidence_ar": "",
        "SQL": "SELECT Orange_Cap FROM Season GROUP BY Orange_Cap HAVING COUNT(Season_Year) > 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were played in Season 7?",
        "question_ar": "",
        "evidence_en": "Season 7 refers to Season_Id = 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE Season_Id = 7"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many umpires are from South Africa?",
        "question_ar": "",
        "evidence_en": "South Africa refers to Country_Name = 'South Africa'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN Umpire AS T2 ON T1.Country_ID = T2.Umpire_Country"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the player with the highest number of outstanding player awards in a particular match?",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; the highest number of outstanding player awards refers to max(count(Man_of_the_Match))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In which country do the majority of the players are from?",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name; the majority of the players  refers to max(count(Country_Name))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name GROUP BY T2.Country_Name ORDER BY COUNT(T2.Country_Name) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many Orange Cap awards were won by CH Gayle?",
        "question_ar": "",
        "evidence_en": "CH Gayle refers to Player_Name = 'CH Gayle'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Player_Name = 'CH Gayle' THEN 1 ELSE 0 END) AS cnt FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Orange_Cap"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which season played the highest number of matches at M Chinnaswamy Stadium?",
        "question_ar": "",
        "evidence_en": "season refers to Season_Id; the highest number of matches refers to max(count(Season_Id)); M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Season_Id FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium' GROUP BY T1.Season_Id ORDER BY COUNT(T1.Season_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the team that won the most number of matches in season 1?",
        "question_ar": "",
        "evidence_en": "name of the team refers to Team_Name; the most number of matches refers to max(count(Match_Winner)); season 1 refers to season_Id = 1",
        "evidence_ar": "",
        "SQL": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM `Match` WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which venue did Kolkata Knight Riders play most of their matches as a Team 1?",
        "question_ar": "",
        "evidence_en": "venue refers to Venue_Name; Kolkata Knight Riders refers to Team_Name = 'Kolkata Knight Riders'; most of their matches refers to max(count(Venue_Id)); Team 1 refers to Team_Id = Team_1",
        "evidence_ar": "",
        "SQL": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which team has the highest number of losses of all time?",
        "question_ar": "",
        "evidence_en": "name of the team refers to Team_Name; the highest number of losses refers to max(add(count(Team_1 where Team_Id = Team_1 and Team_1 <> Match_Winner), count(Team_2 where Team_Id = Team_2 and Team_2 <> Match_Winner)))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN ( SELECT COUNT(Team_1) AS a, Team_1 FROM Match WHERE Team_1 <> Match_Winner GROUP BY Team_1 UNION SELECT COUNT(Team_2) AS a, Team_2 FROM Match WHERE Team_2 <> Match_Winner GROUP BY Team_2 ORDER BY a DESC LIMIT 1 ) AS T2 ON T1.Team_Id = T2.Team_1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the player who won the first ever \"man of the match\" award?",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; the first ever refers to min(match_date); \"man of the match\" award refers to Player_Id in 'Man_of_the_Match'",
        "evidence_ar": "",
        "SQL": "SELECT Player_Name FROM Player WHERE Player_Id = ( SELECT Man_of_the_Match FROM `Match` ORDER BY match_date ASC LIMIT 1 )"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "When did Chennai Super Kings play its first match?",
        "question_ar": "",
        "evidence_en": "match date refers to Match_Date; Chennai Super Kings refers to Team_Name = 'Chennai Super Kings'; first match refers to min(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT Match_Date FROM `Match` WHERE team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) OR Team_2 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) ORDER BY Match_Date ASC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players with left-hand batting style are from India?",
        "question_ar": "",
        "evidence_en": "left-hand batting style refers to Batting_hand = 'Left-hand bat'; India refers to Country_Name = 'India'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS cnt FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_Id = T2.Batting_hand INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'India'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the player that has the highest number of roles as a captain for Deccan Chargers?",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; the highest number of roles refers to max(count(Role_Id)); as a captain refers to Role_Desc = 'Captain'; Deccan Chargers refers to Team_Name = 'Deccan Chargers'",
        "evidence_ar": "",
        "SQL": "SELECT T4.Player_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_id = T2.Team_id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Player AS T4 ON T2.Player_Id = T4.Player_Id WHERE T1.Team_Name = 'Deccan Chargers' AND T1.Team_Id = 8 AND T3.Role_Desc = 'Captain' AND T3.Role_Id = 1 GROUP BY T4.Player_Id ORDER BY COUNT(T3.Role_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the percentage of all right-handed batting players among all the other players?",
        "question_ar": "",
        "evidence_en": "right-handed batting refers to Batting_hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_hand = 'Right-hand bat'), count(Player_Id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Player_Id) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T2.Batting_hand = T1.Batting_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Name the player who is born on July 7, 1981.",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; born on July 7 1981 refers to DOB = '1981-07-07'",
        "evidence_ar": "",
        "SQL": "SELECT Player_name FROM Player WHERE DOB = '1981-07-07'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were played by the player with player ID 2?",
        "question_ar": "",
        "evidence_en": "player ID 2 refers to Player_Id = 2",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the first team's name in the match with the highest winning margin.",
        "question_ar": "",
        "evidence_en": "team's name refers to Team_Name; first team refers to Team_Id = Team_1; the highest winning margin refers to max(Win_Margin)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 ORDER BY T1.Win_Margin DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the country where St. George's Park is located.",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name; St. George's Park refers to Venue_Name = 'St George''s Park'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_id WHERE T1.Venue_Name = 'St George''s Park'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the player's name of Mumbai Indians in the match ID 335990.",
        "question_ar": "",
        "evidence_en": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; match ID 335990 refers to Match_Id = 335990",
        "evidence_ar": "",
        "SQL": "SELECT T3.Team_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T2.Match_Id = 335990 AND T3.Team_Name = 'Mumbai Indians' GROUP BY T3.Team_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the winning team's name in the match with the point of winning margin of 7 on May 7, 2009.",
        "question_ar": "",
        "evidence_en": "the winning team refers to Team_Id = Match_Winner; the point of winning margin of 7 refers to Win_Margin = 7; on May 7 2009 refers to Match_Date = '2009-05-07'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = '2009-05-07' AND T2.Win_Margin = 7"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many of the matches are Superover?",
        "question_ar": "",
        "evidence_en": "Superover refers to Outcome_Type = 'Superover'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Outcome_Type = 'Superover' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Outcome AS T2 ON T2.Outcome_Id = T1.Outcome_type"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the cities located in U.A.E.",
        "question_ar": "",
        "evidence_en": "city refers to City_Name; U.A.E refers to Country_Name = 'U.A.E'",
        "evidence_ar": "",
        "SQL": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id WHERE T2.Country_Name = 'U.A.E'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the total number of won matches of the team named \"Pune Warriors\"?",
        "question_ar": "",
        "evidence_en": "the team named \"Pune Warriors\" refers to Team_Name = 'Pune Warriors'; the total number of won matches = count(Team_Name where Team_Id = Match_Winner)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Team_Name = 'Pune Warriors' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches held in 2015, who is the winning team in the match ID 829768?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to Match_Date LIKE '2015%'; the winning team refers to Team_Id = Match_Winner; match ID 829768 refers to Match_Id = 829768",
        "evidence_ar": "",
        "SQL": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Date LIKE '2015%' AND T1.Match_Id = 829768"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the role of K Goel in the match ID 335992?",
        "question_ar": "",
        "evidence_en": "role refers to Role_Desc; K Goel refers to Player_Name = 'K Goel'; match ID 335992 refers to Match_Id = 335992",
        "evidence_ar": "",
        "SQL": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Rolee AS T3 ON T3.Role_Id = T2.Role_Id WHERE T2.Match_Id = 335992 AND T1.Player_Name = 'K Goel'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many cities are located in South Africa?",
        "question_ar": "",
        "evidence_en": "South Africa refers to Country_Name = 'South Africa'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were held at the venue named \"Newlands\"?",
        "question_ar": "",
        "evidence_en": "the venue named \"Newlands\" refers to Venue_Name = 'Newlands'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Venue_Name = 'Newlands' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the point of the winning margin in a match between Mumbai Indians and Royal Challengers Bangalore on May 28, 2008.",
        "question_ar": "",
        "evidence_en": "point of the winning margin refers to Win_Margin; Mumbai Indians refers to Team_Name = 'Mumbai Indians'; Royal Challengers Bangalore refers to Team_Name = 'Royal Challengers Bangalore'; on May 28 2008 refers to Match_Date = '2008-05-28'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Win_Margin FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE (T2.Team_Name = 'Mumbai Indians' AND T3.Team_Name = 'Royal Challengers Bangalore' AND T1.Match_Date = '2008-05-28') OR (T2.Team_Name = 'Royal Challengers Bangalore' AND T3.Team_Name = 'Mumbai Indians' AND T1.Match_Date = '2008-05-28')"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the names of the first andthe second teams that played a match with the point of the winning margin lower than the 30% of the average winning margin of the matches held in 2011.",
        "question_ar": "",
        "evidence_en": "name of the team refers to Team_Name; in 2011 refers to Match_Date LIKE '2011%'; the point of winning margin lower than 30% of the average winning margin refers to Win_Margin < multiply(avg(Win_Margin), 0.3) where Match_Date LIKE '2011%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T2.Team_Name END, CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T3.Team_Name END FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T1.Match_Date LIKE '2011%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players born in 1977, what is the percentage of the players with a role as a captain?",
        "question_ar": "",
        "evidence_en": "born in 1977 refers to DOB LIKE '1977%'; a role as a captain refers to Role_Desc = 'Captain'; percentage = divide(count(Role_Id where Role_Desc = 'Captain'), count(Role_Id)) * 100% where DOB LIKE '1977%'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Role_Desc = 'Captain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Role_Id) FROM Rolee AS T1 INNER JOIN Player_Match AS T2 ON T2.Role_Id = T1.Role_Id INNER JOIN Player AS T3 ON T3.Player_Id = T2.Player_Id WHERE T3.DOB LIKE '1977%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many overs were there in the first innings of match ID \"335996\"?",
        "question_ar": "",
        "evidence_en": "the first innings refers to Innings_No = 1; match ID \"335996\" refers to Match_Id = 335996",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Over_Id) FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the over IDs, ball IDs, and innings numbers of the match ID \"336004\" while the batsman got the maximum scores.",
        "question_ar": "",
        "evidence_en": "over ID refers to Over_Id; ball ID refers to Ball_Id; innings number refers to Innings_No; match ID \"336004\" refers to Match_Id = 336004; batsman got the maximum scores refers to max(Runs_Scored)",
        "evidence_ar": "",
        "SQL": "SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 ORDER BY Runs_Scored DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Describe any five matches IDs that reached over ID 20.",
        "question_ar": "",
        "evidence_en": "reached over ID 20 refers to Over_Id = 20",
        "evidence_ar": "",
        "SQL": "SELECT Match_Id FROM Ball_by_Ball WHERE Over_Id = 20 GROUP BY Match_Id LIMIT 5"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players got out in the first inning of match ID \"548335\"?",
        "question_ar": "",
        "evidence_en": "got out refers to Player_Out; the first inning refers to Innings_No = 1; match ID \"548335\" refers to Match_Id = 548335",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the players' names who were born in 1971.",
        "question_ar": "",
        "evidence_en": "players' name refers to Player_name; born in 1971 refers to DOB LIKE '1971%'",
        "evidence_ar": "",
        "SQL": "SELECT Player_name FROM Player WHERE DOB LIKE '1971%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the match IDs which were held on 18th April 2015.",
        "question_ar": "",
        "evidence_en": "on 18th April 2015 refers to DATE(Match_Date) = '2015-04-18'",
        "evidence_ar": "",
        "SQL": "SELECT Match_Id FROM Match WHERE Match_Date LIKE '%2015-04-18%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the match IDs which had players out by hit wickets.",
        "question_ar": "",
        "evidence_en": "had players out by hit wickets refers to Out_Name = 'hit wicket'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'hit wicket'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players got out by being stumped in the second innings of all matches?",
        "question_ar": "",
        "evidence_en": "got out by being stumped refers to Out_Name = 'stumped'; the second innings refers to Innings_No = 2",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times did Yuvraj Singh receive the Man of the Match award?",
        "question_ar": "",
        "evidence_en": "Yuvraj Singh refers to Player_Name = 'Yuvraj Singh'; receive the Man of the Match award refers to Player_Id = Man_of_the_Match",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players who were born in 1977, provide names and birthdates of the players from England.",
        "question_ar": "",
        "evidence_en": "born in 1977 refers to DOB LIKE '1977%'; name refers to Player_Name; birthdate refers to DOB; England refers to Country_Name = 'England'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name, T2.DOB FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.DOB LIKE '1977%' AND T1.Country_Name = 'England'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who got the Man of the Series Award in 2010?",
        "question_ar": "",
        "evidence_en": "player's name refers to Player_Name; got the Man of the Series Award refers to Man_of_the_Match = Player_Id; in 2010 refers to Season_Year = 2010",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T2.Man_of_the_Match = T1.Player_Id INNER JOIN Season AS T3 ON T3.Season_Id = T2.Season_Id WHERE T3.Season_Year = 2010 GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the win rate of the team \"Chennai Super Kings\".",
        "question_ar": "",
        "evidence_en": "team \"Chennai Super Kings\" refers to Team_Name = 'Chennai Super Kings'; win rate = divide(count(Match_Id where Match_Winner = 3), count(Match_Id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the names and countries of the players from Gujarat Lions who played in the match held on 11th April 2016.",
        "question_ar": "",
        "evidence_en": "player's name refers to Player_Name; country refers to Country_Name; Gujarat Lions refers to Team_Name = 'Gujarat Lions'; on 11th April 2016 refers to Match_Date = '2016-04-11'",
        "evidence_ar": "",
        "SQL": "SELECT T4.Player_Name, T5.Country_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_Id INNER JOIN Match AS T3 ON T3.Match_Id = T1.Match_Id INNER JOIN Player AS T4 ON T4.Player_Id = T1.Player_Id INNER JOIN Country AS T5 ON T5.Country_Id = T4.Country_Name WHERE T2.Team_Name = 'Gujarat Lions' AND T3.Match_Date = '2016-04-11'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the names and birthdates of players who have left-arm fast skills.",
        "question_ar": "",
        "evidence_en": "player's name refers to Player_Name; birthdate refers to DOB; have left-arm fast skills refers to Bowling_skill = 'Left-arm fast'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Where did BR Doctrove come from?",
        "question_ar": "",
        "evidence_en": "the country the umpire comes from refers to Country_Name; BR Doctrove refers to Umpire_Name = 'BR Doctrove'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Umpire AS T2 ON T2.Umpire_Country = T1.Country_Id WHERE T2.Umpire_Name = 'BR Doctrove'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who was the captain of the winning team in the match held on 1st June 2008?",
        "question_ar": "",
        "evidence_en": "player's name refers to Player_Name; captain refers to Role_Desc = 'Captain'; the winning team refers to Match_Winner = Team_Id; on 1st June 2008 refers to Match_Date = '2008-06-01'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T2.Match_Id = T1.Match_Id INNER JOIN Player AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Rolee AS T4 ON T4.Role_Id = T1.Role_Id WHERE T2.Match_Date = '2008-06-01' AND T4.Role_Desc = 'Captain' AND T2.Match_Winner = T1.Team_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which team did CK Kapugedera belong to? How many matches did he play?",
        "question_ar": "",
        "evidence_en": "team refers to Team_Name; CK Kapugedera refers to Player_Name = 'CK Kapugedera'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Team_Name, COUNT(T2.Match_Id) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T1.Player_Name = 'CK Kapugedera'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches held in Mumbai, how many percent of them were held in Wankhede Stadium?",
        "question_ar": "",
        "evidence_en": "Mumbai refers to City_Name = 'Mumbai'; Wankhede Stadium refers to Venue_Name = 'Wankhede Stadium'; percent = divide(count(Match_Id where Venue_Name = 'Wankhede Stadium'), count(Match_Id)) * 100% where City_Name = 'Mumbai'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players out in match ID 392187, calculate the percentage of players out by bowl.",
        "question_ar": "",
        "evidence_en": "out by bowl refers to Out_Name = 'bowled'; percentage = divide(count(Player_Out where Out_Name = 'bowled'), count(Player_Out)) * 100% where Match_Id = 392187",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016?",
        "question_ar": "",
        "evidence_en": "decide to bowl first refers to Toss_Name = 'field'; from 2010 to 2016 refers to Match_Date BETWEEN '2010-01-01' AND '2016-12-31'; percent = divide(count(Toss_Id where Toss_Name = 'field'), count(Toss_Id)) * 100% where Match_Date BETWEEN '2010-01-01' AND '2016-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down the ID of toss winners who decided to bat after winning the \"toss of the coin\".",
        "question_ar": "",
        "evidence_en": "decided to bat refers to Toss_Decide = 2; ID of toss winners refers to Toss_winner",
        "evidence_ar": "",
        "SQL": "SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down the match ID of matches that the \"man of the match\" award was given to BB McCullum.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down the DOB of players who received the \"man of the match\" award.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.DOB FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down the name of teams that won the toss of the coin from matches with ID from 336010 to 336020.",
        "question_ar": "",
        "evidence_en": "name of teams refers to Team_Name; won the toss refers to Toss_Winner; matches with ID from 336010 to 336020  refers to Match_Id BETWEEN 336010 AND 336020",
        "evidence_ar": "",
        "SQL": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches have Mumbai Indians won?",
        "question_ar": "",
        "evidence_en": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; won refers to Match_Winner",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Team_Name = 'Mumbai Indians' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down names of teams that have played as second team against Pune Warriors.",
        "question_ar": "",
        "evidence_en": "names of teams refers to Team_Name; second team refers to Team_2; Pune Warriors refers to Team_Name = 'Pune Warriors'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_2 WHERE T1.Team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors' ) GROUP BY T2.Team_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the team that won match ID 336000?",
        "question_ar": "",
        "evidence_en": "name of the team refers to Team_Name; won refers to Match_Winner",
        "evidence_ar": "",
        "SQL": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the match IDs that were played at Brabourne Stadium?",
        "question_ar": "",
        "evidence_en": "at Brabourne Stadium refers to Venue_Name = 'Brabourne Stadium'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T2.Venue_Name = 'Brabourne Stadium'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down the name of venues in season 2.",
        "question_ar": "",
        "evidence_en": "name of venues refers to Venue_Name; season 2 refers to Season_Id = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the city of M Chinnaswamy Stadium?",
        "question_ar": "",
        "evidence_en": "city refers to City_Name; M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'",
        "evidence_ar": "",
        "SQL": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down all of the venues in Mumbai.",
        "question_ar": "",
        "evidence_en": "venues refers to Venue_Name; Mumbai refers to City_Name = 'Mumbai'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Venue_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T1.City_Name = 'Mumbai'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List down all of the winning teams' IDs that played in St George's Park.",
        "question_ar": "",
        "evidence_en": "winning teams' refers to Match_Winner; played in St George's Park refers to Venue_Name like 'St George%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Match_Winner FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name LIKE 'St George%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Is SuperSport Park located at Centurion?",
        "question_ar": "",
        "evidence_en": "SuperSport Park refers to Venue_Name = 'SuperSport Park'; Centurion refers to City_Name = 'Centurion'",
        "evidence_ar": "",
        "SQL": "SELECT T2.City_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T1.Venue_Name LIKE 'St George%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the total winning match for Deccan Chargers.",
        "question_ar": "",
        "evidence_en": "winning refers to Match_Winner; Deccan Chargers refers to Team_Name = 'Deccan Chargers'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Count the total venues located in Pune City.",
        "question_ar": "",
        "evidence_en": "Pune City refers to City_Name = 'Pune'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219.",
        "question_ar": "",
        "evidence_en": "most number of balls refers to max(Ball_Id); match 501219 refers to Match_Id = 501219;\nplayer id also refers to non_striker or ball_id",
        "evidence_ar": "",
        "SQL": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the average runs scored during the first half of all first innings.",
        "question_ar": "",
        "evidence_en": "first half refers to 1 < Over_Id and Over_Id < 25; average = divide(sum(Over_Id) when 1 < Over_Id and Over_Id < 25, sum(Runs_Scored)) as percentage; first innings refers to Innings_No = 1",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN 1 < Over_Id AND Over_Id < 25 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(Runs_Scored) FROM Batsman_Scored WHERE Innings_No = 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the average extra runs given in the second innings of every match?",
        "question_ar": "",
        "evidence_en": "second innings refers to Innings_No = 2; average extra runs = divide(sum(Extra_Runs), count(Innings_No)) when Innings_No = 2",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Innings_No) FROM Extra_Runs WHERE Innings_No = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches, what percentage have a winning margin above 100?",
        "question_ar": "",
        "evidence_en": "winning margin above 100 refers to Win_Margin > 100; percentage = divide(count(Match_Id) when Win_Margin > 100, count(Match_Id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(Match_Id) FROM `Match`"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the name of the players born between 1970 and 1990 in descending order of age.",
        "question_ar": "",
        "evidence_en": "name of the players refers to Player_Name; born between 1970 and 1990 refers to DOB between '1970-01-01' and '1990-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB DESC"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Of the wickets taken in the third overs, how many are without the involvement of fielders?",
        "question_ar": "",
        "evidence_en": "third overs refers to Over_Id = 3; without the involvement of fielders refers to Fielders = ''",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Fielders = '' THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Over_Id = 3"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "From which country does the most umpires are from? How many of them are from the mentioned country?\n",
        "question_ar": "",
        "evidence_en": "which country refers to Country_Id; most umpires refers to max(count(Umpire_Id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players, what percentage are both captain and keeper?",
        "question_ar": "",
        "evidence_en": "captain and keeper refers to Role_Desc = 'CaptainKeeper'; percentage = divide(count(Player_Id) when Role_Desc = 'CaptainKeeper', count(Player_Id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Role_Desc = 'CaptainKeeper' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In the players, how many were out by hit wicket?",
        "question_ar": "",
        "evidence_en": "out by hit wicket refers to Out_Name = 'hit wicket'",
        "evidence_ar": "",
        "SQL": "SELECT Player_Out FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE Out_Name = 'hit wicket'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "On average, how many players from each country bat with their right hand?",
        "question_ar": "",
        "evidence_en": "bat with their right hand refers to Batting_hand = 'Right-hand bat'; average = divide(count(Player_Id) when Batting_hand = 'Right-hand bat', count(Country_Name))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Country_Name) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_id = T2.Batting_hand"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What percentage of players have Legbreak skill?",
        "question_ar": "",
        "evidence_en": "Legbreak skill refers to Bowling_skill = 'Legbreak' ; percentage = divide(sum(Player_Id) when Bowling_skill = 'Legbreak', count(Player_Id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In the matches where the winning margin is less than fifty, how many teams won by wicket?",
        "question_ar": "",
        "evidence_en": "winning margin is less than fifty refers to Win_Margin < 50; won by wicket refers to Win_Type = 'wickets'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Win_Id) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_Type = 'wickets' AND T1.Win_Margin < 50"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In how many venues did team 2 win the toss and lose the match?",
        "question_ar": "",
        "evidence_en": "team 2 win the toss refers to Toss_Winner = Team_2 ; lose the match refers to Match_Winner = Team_1",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which player became the man of the series in the year 2012? Give the name and country of this player.",
        "question_ar": "",
        "evidence_en": "year 2012 refers to Season_Year = 2012; name of player refers to Player_Name.; country of this player refers to Country_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name, T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Year = 2012"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the name of the venue where the most number of matches are held.",
        "question_ar": "",
        "evidence_en": "name of the venue refers to Venue_Name; most number of matches refers to max(count(Venue_Id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Venue_Name FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id GROUP BY T2.Venue_Name ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which city hosted the least number of no-result matches?",
        "question_ar": "",
        "evidence_en": "city refers to City_Name; no-result matches refers to Win_type = 'NoResult'; least number refers to min(count(Win_type = 'NoResult'))",
        "evidence_ar": "",
        "SQL": "SELECT T4.City_Name FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Venue AS T3 ON T1.Venue_Id = T3.Venue_Id INNER JOIN City AS T4 ON T3.City_Id = T4.City_Id WHERE T2.Win_Type = 'NO Result' GROUP BY T4.City_Id ORDER BY COUNT(T2.Win_Type) ASC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Write the name of the player who was the man of the series more than one time.",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; man of the series more than one time refers to count(Man_of_the_Series) > 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Man_of_the_Series > 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the name and country of the players who got more than average catches in ascending order of the number of catches.",
        "question_ar": "",
        "evidence_en": "name and country of the players refers to Player_Name and Country_Name; catches refers to Out_name = 'caught'; average catches refers to divide(count(Player_ID) when Out_name = 'caught', sum(Player_ID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Of the matches that were won by runs by team 1, what percentage have team 1 won the toss and decided to field?",
        "question_ar": "",
        "evidence_en": "won by runs refers to Win_Type = 'runs'; won the toss and decided to field refers to Toss_Winner and Toss_Name = 'field'; percentage = divide(count(Team_1) when Match_Winner = Team_1 and Toss_Winner = Team_1, count(Team_1)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.Team_1 = T1.Match_Winner = T1.Toss_Winner THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Team_1) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Toss_Decision AS T3 ON T1.Toss_Decide = T3.Toss_Id WHERE T3.Toss_Name = 'field' AND T2.Win_Type = 'runs'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the difference in the average number of players out by lbw and runout in the matches?",
        "question_ar": "",
        "evidence_en": "out by lbw refers to Out_Id = 4; runout refers to Out_Id = 3; average out by lbw refers to  avg(Player_Out when Out_Id = 4); average out by runout refers to  avg(Player_Out when Out_Id = 3)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T2.Out_Name = 'lbw'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Identify by their ID all the overs in which the player with ID 7 was on strike.",
        "question_ar": "",
        "evidence_en": "Identify by their ID all the overs refers to Over_Id; player with ID 7 was on strike refers to Striker = 7",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Over_Id FROM Ball_by_Ball WHERE Striker = 7"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many first teams chose to bat after winning the toss?",
        "question_ar": "",
        "evidence_en": "first teams refers to Team_1; chose to bat after winning the toss refers to Toss_Winner and Toss_Decide = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Team_1) FROM `Match` WHERE Team_1 = Toss_Winner AND Toss_Decide = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many games were played in March 2010?",
        "question_ar": "",
        "evidence_en": "were played in March 2010 refers to Match_Date = '2010-03%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Match_Date LIKE '2010-03%' THEN 1 ELSE 0 END) FROM `Match`"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players are older than Gurkeerat Singh player?",
        "question_ar": "",
        "evidence_en": "older than Gurkeerat Singh player refers to DOB ! = 'Gurkeerat Singh' and DOB < '1990-06-29'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN DOB < '1990-06-29' THEN 1 ELSE 0 END) FROM Player WHERE Player_Name != 'Gurkeerat Singh'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times has SR Watson been named 'Man of the Match'?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Player_Name = 'SR Watson' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Indicate the name of the most versatile players of the Delhi Daredevils.",
        "question_ar": "",
        "evidence_en": "if a player has multiple roles in a match, it means this player is versatile; name refers to Player_Name; most versatile player refers to MAX(COUNT(Role_id)); Delhi Daredevils refers to Team_Name = 'Delhi Daredevils'",
        "evidence_ar": "",
        "SQL": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T2.Team_Name = 'Delhi Daredevils' GROUP BY T3.Player_Name ORDER BY COUNT(T1.Role_Id) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the player who has been chosen the most times for 'Man of the Series'?",
        "question_ar": "",
        "evidence_en": "name of the player refers to Player_Name; most times for 'Man of the Series' refers to max(count(Man_of_the_Match))",
        "evidence_ar": "",
        "SQL": "SELECT T3.Player_Name FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Man_of_the_Series = T2.Man_of_the_Match INNER JOIN Player AS T3 ON T2.Man_of_the_Match = T3.Player_Id GROUP BY T3.Player_Name ORDER BY COUNT(T1.Man_of_the_Series) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In what year did SP Narine win the Orange Cap?",
        "question_ar": "",
        "evidence_en": "year refers to Season_Year",
        "evidence_ar": "",
        "SQL": "SELECT T4.Season_Year, T4.Orange_Cap FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Season AS T4 ON T3.Season_Id = T4.Season_Id WHERE T1.Player_Name = 'SP Narine' GROUP BY T4.Season_Year, T4.Orange_Cap"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which teams have had a player awarded the Purple Cap and another with the Orange Cap in the same season?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Season_Id = T2.Season_Id INNER JOIN Player_Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Player AS T4 ON T3.Player_Id = T4.Player_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id GROUP BY T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List all Zimbabwean players.",
        "question_ar": "",
        "evidence_en": "Zimbabwean refers to Country_Name = 'Zimbabwea'; players refers to Player_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'Zimbabwea'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players bat with their left hands?",
        "question_ar": "",
        "evidence_en": "bat with their left hands refers to Batting_hand = 'Left-hand bat'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many games were not won by runs?",
        "question_ar": "",
        "evidence_en": "not won by runs refers to Win_Type ! = 'runs'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Win_Type != 'runs' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the name of all New Zealand umpires.",
        "question_ar": "",
        "evidence_en": "New Zealand umpires refers to Country_Name = 'New Zealand'; name of umpires refers to Umpire_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In which country do most players have the 'slow left-arm chinaman' bowling style?",
        "question_ar": "",
        "evidence_en": "'slow left-arm chinaman' bowling style refers to Bowling_skill = 'Slow left-arm chinaman'; most players  refers to max(count(Country_Id))",
        "evidence_ar": "",
        "SQL": "SELECT T3.Country_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Bowling_skill = 'Slow left-arm chinaman'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In which venue did Kochi Tuskers Kerala play most of their matches?",
        "question_ar": "",
        "evidence_en": "Kochi Tuskers Kerala refers to Team_Name = 'Kochi Tuskers Kerala'; most of their matches refers to max(Venue_Id)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN Team AS T3 ON T2.Team_1 = T3.Team_Id WHERE T3.Team_Name = 'Kochi Tuskers Kerala' GROUP BY T1.Venue_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In how many games in which the batting team was the Delhi Daredevils were no runs scored?",
        "question_ar": "",
        "evidence_en": "batting team was the Delhi Daredevils refers to Team_Name = 'Delhi Daredevils' and Team_1 = Team_Id where Team_Batting = 1 or Team_2 = Team_Id where Team_Batting = 2; no runs scored refers to Runs_Scored = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Runs_Scored) FROM Batsman_Scored AS T1 INNER JOIN Ball_by_Ball AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Team AS T4 ON T3.Team_1 = T4.Team_Id WHERE T2.Team_Batting = 1 OR T2.Team_Batting = 2 AND T4.Team_Name = 'Delhi Daredevils'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10?",
        "question_ar": "",
        "evidence_en": "Dr DY Patil Sports Academy venue refers to Venue_Name = 'Dr DY Patil Sports Academy'; win by a margin of less than 10 refers to Win_Margin < 10; percentage = divide(count(Venue_Id) when Win_Margin < 10, sum(Venue_Id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.Win_Margin < 10 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Venue_Id) FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name = 'Dr DY Patil Sports Academy'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the average number of extra runs made as noballs?",
        "question_ar": "",
        "evidence_en": "noballs refers to Extra_Name = 'noballs' ; average number = divide(sum(Extra_Runs), count(Extra_Runs))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Extra_Runs) FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'noballs'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the player's ID of the top five players, by descending order, in terms of bowling skill.",
        "question_ar": "",
        "evidence_en": "player's ID refers to Player_Id",
        "evidence_ar": "",
        "SQL": "SELECT Player_Id FROM Player ORDER BY Bowling_skill DESC LIMIT 5"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players were born before 10/16/1975, and have a bowling skill of less than 3?",
        "question_ar": "",
        "evidence_en": "born before 10/16/1975 refers to DOB < 1975-10-16; bowling skill of less than 3 refers to Bowling_skill < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the youngest player?",
        "question_ar": "",
        "evidence_en": "name refers to Player_Name; youngest player refers to max(DOB)",
        "evidence_ar": "",
        "SQL": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Tally the player IDs of \"Man of the Series\" awardees for the seasons from 2011 to 2015.",
        "question_ar": "",
        "evidence_en": "seasons from 2011 to 2015 refers to 2011 < Season_Year < 2015",
        "evidence_ar": "",
        "SQL": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the total number of runs scored by the batsmen during the 2nd inning of the match ID 335988?",
        "question_ar": "",
        "evidence_en": "number of runs refers to Runs_Scored; 2nd inning refers to Innings_No = 2",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Between match nos. 335989 and 337000, how many times did a batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches?",
        "question_ar": "",
        "evidence_en": "Between match no. 335989 and 337000 refers to 335989 < Match_Id < 337000; batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches refers to Runs_Scored > 3 and  Over_Id = 1 and Ball_Id = 1 and Innings_No = 1",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Runs_Scored > 3 THEN 1 ELSE 0 END) FROM Batsman_Scored WHERE 335989 < Match_Id < 337000 AND Innings_No = 1 AND Over_Id = 1 AND Ball_Id = 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give me the match ID and date of the matches that were held in Kingsmead for three consecutive days.",
        "question_ar": "",
        "evidence_en": "date of the matches refers to Match_Date; held in Kingsmead refers to Venue_Name = 'Kingsmead'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id, T1.Match_Date FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times did the matches were held in MA Chidambaram Stadium from 5/9/2009 to 8/8/2011?",
        "question_ar": "",
        "evidence_en": "MA Chidambaram Stadium refers to Venue_Name = 'MA Chidambaram Stadium' ; from 5/9/2009 to 8/8/2011 refers to Match_Date between '2009-05-09' and '2011-08-08'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Venue_Name = 'MA Chidambaram Stadium' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE Match_Date BETWEEN '2009-05-09' AND '2011-08-08'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Where was the ID 336005 match held? Please give me the venue and the city.",
        "question_ar": "",
        "evidence_en": "ID 336005 match refers to Match_Id = '336005'; venue refers to Venue_Name; city refers to City_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Venue_Name, T3.City_Name FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field?",
        "question_ar": "",
        "evidence_en": "wins the toss refers to Toss_Winner; whether they decided to bat or field refers to Toss_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner FROM `Match` AS T1 INNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id WHERE T1.Match_Id = '336011'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the South African players, how many were born before 4/11/1980?",
        "question_ar": "",
        "evidence_en": "South African players refers to Country_Name = 'South Africa'; born before 4/11/1980 refers to DOB < '1980-4-11'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.DOB < '1980-4-11' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Write down the name of players whose bowling skill is Legbreak.",
        "question_ar": "",
        "evidence_en": "name of players refers to Player_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill WHERE T1.Bowling_skill = 'Legbreak'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "When and for what role did the youngest player appear in his first match?",
        "question_ar": "",
        "evidence_en": "When refers to Match_Date; youngest player refers to max(DOB); first match refers to min(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Date, T4.Role_Desc FROM `Match` AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Tally the match IDs in which V Kohli is the \"Man of the Match\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id FROM `Match` AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id WHERE T2.Player_Name = 'V Kohli'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "From 2011 to 2012, how many Australian players became the \"Man of the Match\"?",
        "question_ar": "",
        "evidence_en": "From 2011 to 2012 refers to Match_Date between '2011%' and '2012%'; Australian players refers to Country_Name = 'Australia'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Match_Date BETWEEN '2011%' AND '2012%' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_Name WHERE T3.Country_Name = 'Australia'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who among the players won both \"Man of the Series\" and \"Orange Cap\" in the same season?",
        "question_ar": "",
        "evidence_en": "Who refers to Player_Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Man_of_the_Series = T2.Orange_Cap"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "When did the Sunrisers Hyderabad win their first match?",
        "question_ar": "",
        "evidence_en": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; win their first match refers to Match_Winner and min(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Date FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Write down the player names and IDs of the English umpires.",
        "question_ar": "",
        "evidence_en": "English umpires refers to Country_Name = 'England'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Umpire_Name, T1.Umpire_Id FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'England'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the run rate at the end of 17 overs of the match ID 335987 on 4/18/2008.",
        "question_ar": "",
        "evidence_en": "4/18/2008 refers to Match_Date = 4/18/2008; end of 17 overs refers to count(Toss_Name = 'field' ) = 17; run rate = divide(sum(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id) when Toss_Name = 'field')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Compute the run rate at the end of 16 overs of the match ID 335999. Please include the name of the \"Man of_the Match\".",
        "question_ar": "",
        "evidence_en": "end of 16 overs refers to count(Toss_Name = 'field' ) = 16; run rate = divide(count(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id)when Toss_Name = 'field'); name refers to Player_Name",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the id of the team with the highest number of matches won?",
        "question_ar": "",
        "evidence_en": "id of the team refers to Team_Id; highest number of matches won refers to max(count(Match_Winner))",
        "evidence_ar": "",
        "SQL": "SELECT Match_Id FROM `Match` ORDER BY Match_Winner DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which year do the majority of the players were born?",
        "question_ar": "",
        "evidence_en": "year refers to DOB; majority of the players refers to max(count(Player_Id))",
        "evidence_ar": "",
        "SQL": "SELECT DOB FROM Player GROUP BY DOB ORDER BY COUNT(DOB) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the date of the match that has the highest wager on the final result of a game?",
        "question_ar": "",
        "evidence_en": "date of the match refers to Match_Date; highest wager refers to max(Win_Margin)",
        "evidence_ar": "",
        "SQL": "SELECT Match_Date FROM `Match` ORDER BY Win_Margin DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which season has the fewest number of matches?",
        "question_ar": "",
        "evidence_en": "fewest number of matches refers to min(count(Match_Id))",
        "evidence_ar": "",
        "SQL": "SELECT Season_Id FROM `Match` GROUP BY Season_Id ORDER BY COUNT(Match_Id) LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players have won at least 5 man of the match awards?",
        "question_ar": "",
        "evidence_en": "won at least 5 man of the match awards refers to COUNT(Match_Id) > = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the player who received the man of the match award during the last match of Season 9?",
        "question_ar": "",
        "evidence_en": "Who refers to Player_Name; last match of Season 9 refers to max(Match_Date) where Season_Id = 9",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Season_Id = 9 ORDER BY T2.Match_Date DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the name of the team that won the first ever match?",
        "question_ar": "",
        "evidence_en": "name of the team refers to Team_Name; won the first ever match refers to Match_Winner where max(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many cities are in U.A.E?",
        "question_ar": "",
        "evidence_en": "U.A.E refers to Country_Name = 'U.A.E'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the names of all the umpires from England.",
        "question_ar": "",
        "evidence_en": "from England refers to Country_Name = 'England'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T2.Country_Name = 'England'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players bowl in the legbreak style?",
        "question_ar": "",
        "evidence_en": "legbreak style refers to Bowling_skill = 'Legbreak'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Legbreak'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did Rajasthan Royals play in Season 8?",
        "question_ar": "",
        "evidence_en": " Season 8 refers to Season_Id = 8",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Season_Id = 8 THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Rajasthan Royals'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which country is umpire TH Wijewardene from?",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T1.Umpire_Name = 'TH Wijewardene'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the names of the venues in Abu Dhabi?",
        "question_ar": "",
        "evidence_en": "names of the venues refers to Venue_Name; Abu Dhabi refers to City_Name = 'Abu Dhabi'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which country is the youngest player from?",
        "question_ar": "",
        "evidence_en": "country refers to Country_Name; youngest player refers to max(DOB)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List all the names of the winning team's players in the first match of season 1.",
        "question_ar": "",
        "evidence_en": "names refers to Player_Name; winning team's refers to Match_Winner; first match of season 1 refers to Season_Id = 1 and min(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT T3.Player_Name FROM `Match` AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Winner = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T1.Season_Id = 1 ORDER BY T1.Match_Date LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the youngest player to have won the Purple Cap?",
        "question_ar": "",
        "evidence_en": "Who refers to Player_Name; youngest player to have won the Purple Cap refers to min(subtract(Season_Year, DOB))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Purple_Cap ORDER BY T2.Season_Year - SUBSTR(T1.DOB, 1, 4) LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the complete name of the venue, city and country where the last match was held.",
        "question_ar": "",
        "evidence_en": "name of the venue, city and country refers to Venue_Name and City_Name and Country_Name; last match refers to max(Match_Date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name, T2.City_Name, T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id INNER JOIN Match AS T4 ON T1.Venue_Id = T4.Venue_Id ORDER BY T4.Match_Date DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many overs were there in each innings of match ID \"336011\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the ball IDs, scores, and innings numbers in the over ID 20 of match ID \"335988\".",
        "question_ar": "",
        "evidence_en": "innings numbers refers to Innings_No",
        "evidence_ar": "",
        "SQL": "SELECT Ball_Id, Runs_Scored, Innings_No FROM Batsman_Scored WHERE Match_Id = 335988 AND Over_Id = 20"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches were held in 2011?",
        "question_ar": "",
        "evidence_en": "held in 2011 refers to Match_Date like '2011%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE Match_Date LIKE '2011%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How old is Ishan Kishan in 2022?",
        "question_ar": "",
        "evidence_en": "old refers to SUBTRACT(2022, SUBSTR(DOB, 1, 4)); Ishan Kishan refers to Player_Name = 'Ishan Kishan';",
        "evidence_ar": "",
        "SQL": "SELECT 2022 - SUBSTR(DOB, 1, 4) FROM Player WHERE Player_Name = 'Ishan Kishan'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the win rate of the toss-winners in 2012.",
        "question_ar": "",
        "evidence_en": "in 2012 refers to Match_Date like '2012%'; win rate refers to DIVIDE(COUNT(Toss_Winner = Match_Winner), COUNT(Match_Date like '2012%'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Toss_Winner = Match_Winner THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Match_Date LIKE '2012%' THEN 1 ELSE 0 END) FROM `Match`"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches in 2009 had win margins of less than 10?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to Match_Date like '2009%'; win margins of less than 10 refers to Win_Margin < 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE Match_Date LIKE '2009%' AND Win_Margin < 10"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the players' names in both teams of the match that was held in June 2014.",
        "question_ar": "",
        "evidence_en": "held in June 2014 refers to SUBSTR(Match_Date, 7, 1) = 6 and SUBSTR(Match_Date, 1, 4) = 2014",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE SUBSTR(T3.Match_Date, 1, 4) = '2014' AND SUBSTR(T3.Match_Date, 7, 1) = '6' LIMIT 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did Mohammad Hafeez play?",
        "question_ar": "",
        "evidence_en": "Mohammad Hafeez refers to Player_Name = 'Mohammad Hafeez';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Player_Name = 'Mohammad Hafeez' THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the players from South Africa, provide the players' names who were born in 1984.",
        "question_ar": "",
        "evidence_en": "from South Africa refers to Country_Name = 'South Africa'; born in 1984 refers to DOB like '1984%';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa' AND T1.DOB LIKE '1984%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the\" Mumbai Indians\" team that played in 2009, how many percent of the matches did they win?",
        "question_ar": "",
        "evidence_en": "played in 2009 Match_Date like '2009%'; Mumbai Indians\" team refers to Team_Name = 'Mumbai Indians'; percent of the matches did they win refers to DIVIDE(COUNT(Match_Winner = Team_Id), COUNT(Match_Id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = T2.Team_Id THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Mumbai Indians' AND T1.Match_Date LIKE '2009%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the ratio of players with batting hands of left and right?",
        "question_ar": "",
        "evidence_en": "batting hands of left refers to Batting_hand = 'Left-hand bat'; right refers to Batting_hand = 2; ratio refers to DIVIDE(COUNT(Batting_hand = 'Right-hand bat'), COUNT(Batting_hand = 2))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the eldest player and where did he/she come from?",
        "question_ar": "",
        "evidence_en": "eldest player refers to MIN(DOB); where he/she come from refers to Country_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name, T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id ORDER BY T1.DOB LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which bowling skills did the players from Zimbabwea have?",
        "question_ar": "",
        "evidence_en": "Zimbabwea refers to Country_Name = 'Zimbabwea';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Bowling_skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Zimbabwea'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the IDs and names of the umpires from New Zealand.",
        "question_ar": "",
        "evidence_en": "New Zealand refers to Country_Name = 'New Zealand'; ID of the umpire refers to Umpire_Id; name of the umpire refers to Umpire_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Umpire_Id, T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who was the captain-keeper of Rising Pune Supergiants?",
        "question_ar": "",
        "evidence_en": "captain-keeper refers to Role_Desc = 'CaptainKeeper'; Rising Pune Supergiants refers to Role_Desc = 'CaptainKeeper'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id WHERE T3.Team_Name = 'Rising Pune Supergiants' AND T4.Role_Desc = 'CaptainKeeper' GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did the Sunrisers Hyderabad team win in 2013?",
        "question_ar": "",
        "evidence_en": "Sunrisers Hyderabad team refers to Team_Name = 'Sunrisers Hyderabad'; in 2013 refers to Match_Date like '2013%';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Match_Date LIKE '2013%' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide match ID which had the extra type of penalty.",
        "question_ar": "",
        "evidence_en": "extra type of penalty refers to Extra_Name = 'penalty';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Match_Id FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'penalty'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Name the teams played in a match which resulted in a tie in 2015.",
        "question_ar": "",
        "evidence_en": "resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE SUBSTR(T2.Match_Date, 1, 4) = '2015' AND T3.Win_Type = 'Tie' LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket?",
        "question_ar": "",
        "evidence_en": "out by the leg refers to Out_Name = 'lbw'; out in the first innings refers to Innings_No = 2;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.Player_Out) AS REAL) / COUNT(T1.Match_Id), SUM(CASE WHEN T2.Out_Name = 'lbw' THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T1.Innings_No = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches are there in 2008?",
        "question_ar": "",
        "evidence_en": "in 2008 refers to Match_Date like '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` WHERE Match_Date LIKE '2008%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Count the matches with a total of two innings.",
        "question_ar": "",
        "evidence_en": "total of two innings refers to innings_no = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM Wicket_Taken WHERE innings_no = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which is the country of the city named \"Rajkot\"?",
        "question_ar": "",
        "evidence_en": "city named \"Rajkot\" refers to city_name = 'Rajkot';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN city AS T2 ON T1.Country_Id = T2.Country_Id WHERE city_name = 'Rajkot'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many of the matches are Superover?",
        "question_ar": "",
        "evidence_en": "are Superover refers to win_type = 'wickets';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.win_type = 'wickets' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009?",
        "question_ar": "",
        "evidence_en": "point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the name of the team of T Kohli in the match ID 335989.",
        "question_ar": "",
        "evidence_en": "team of T Kohli refers to player_name = 'T Kohli';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T2.match_id = 335989 AND T3.player_name = 'T Kohli'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many venues are located at Centurion, South Africa?",
        "question_ar": "",
        "evidence_en": "venues are located at Centurion refers to city_name = 'Centurion'; South Africa refers to country_name = 'South Africa'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Venue_name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id WHERE T3.country_name = 'South Africa' AND T2.city_name = 'Centurion'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches of Delhi Daredevils in 2014, how many won matches are there?",
        "question_ar": "",
        "evidence_en": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2014 refers to Match_Date contains '2014';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Match_Winner) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches played by Royal Challengers Bangalore, what is the match ID of the match with the highest winning margin?",
        "question_ar": "",
        "evidence_en": "Royal Challengers Bangalore refers to team_name = 'Royal Challengers Bangalore'; highest winning margin refers to MAX(win_margin)",
        "evidence_ar": "",
        "SQL": "SELECT T2.match_id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T1.team_name = 'Royal Challengers Bangalore' AND T2.match_date LIKE '2012%' ORDER BY T2.win_margin DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times did K Goel played as a player only?",
        "question_ar": "",
        "evidence_en": "K Goel refers to Player_Name = 'K Goel'; played as a player only refers to Role_Id = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the average winning margin of the matches held in Newlands?",
        "question_ar": "",
        "evidence_en": "average winning margin refers to avg(win_margin); held in Newlands refers to venue_name = 'Newlands'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.win_margin) FROM Match AS T1 INNER JOIN Venue AS T2 ON T1.venue_id = T2.venue_id WHERE T2.venue_name = 'Newlands'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the losing team's name in the match ID 336039.",
        "question_ar": "",
        "evidence_en": "losing team's name refers to Team_Id NOT in \"match_winner\" column",
        "evidence_ar": "",
        "SQL": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the venue for the match ID 829768?",
        "question_ar": "",
        "evidence_en": "\nvenue refers to Venue_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T2.match_id = 829768"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the second team's name in the match with the lowest winning margin?",
        "question_ar": "",
        "evidence_en": "lowest winning margin refers to MIN(win_margin); team name refers to team_name; second team refers to team_2",
        "evidence_ar": "",
        "SQL": "SELECT T1.team_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.team_2 ORDER BY T2.win_margin LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches in 2013, what is the percentage of winning of the team \"Mumbai Indians\"?",
        "question_ar": "",
        "evidence_en": "in 2013 refers to Match_Date like '2013%'; winning of the team \"Mumbai Indians\" refers to Match_Winner = 7; percentage refers to DIVIDE(COUNT(Match_Winner = 7), COUNT(Match_Winner))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Match_Winner = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date LIKE '2013%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the difference between the number of matches where SC Ganguly played as a Captain and those matches where he played other roles?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; played as a Captain refers to Role_Id = 1; played other roles refers to Role_Id > 1; difference refers to SUBTRACT(COUNT(Role_Id = 1), COUNT(Role_Id > 1))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.Role_Id = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.Role_Id > 1 THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players have the bowling skill greater than 2?",
        "question_ar": "",
        "evidence_en": "bowling skill greater than 2 refers to Bowling_skill > 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players were born in 1970?",
        "question_ar": "",
        "evidence_en": "born in 1970 refers to DOB like '1970%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '1970%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players were born in the 80s and have bowling skill of 2?",
        "question_ar": "",
        "evidence_en": "born in the 80s refers to DOB like '198%'; have bowling skill of 2 refers to Bowling_skill = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '198%' AND Bowling_skill = 2"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches are there in April, 2008?",
        "question_ar": "",
        "evidence_en": "in April, 2008 refers to Match_date like '2008-04%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the city name of country ID 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT City_Name FROM City WHERE Country_ID = 3"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many victory matches were there in 2008?",
        "question_ar": "",
        "evidence_en": "in 2008 refers to Match_Date like '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM Match WHERE Match_Date LIKE '2008%' AND Match_Winner IS NOT NULL"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Provide the country ID of East London.",
        "question_ar": "",
        "evidence_en": "East London refers to City_Name = 'East London'",
        "evidence_ar": "",
        "SQL": "SELECT Country_id FROM City WHERE City_Name = 'East London'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How old is SC Ganguly in 2008?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; old refers to SUBTRACT(2008, strftime('%Y',DOB))",
        "evidence_ar": "",
        "SQL": "SELECT 2008 - strftime('%Y', DOB) FROM Player WHERE Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the names of players who play by the left hand.",
        "question_ar": "",
        "evidence_en": "play by the left hand refers to Batting_hand =   'Left-hand bat'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players are Indians?",
        "question_ar": "",
        "evidence_en": "are Indians refers to Country_Name = 'India'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'India'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the name of England players.",
        "question_ar": "",
        "evidence_en": "England players refers to Country_Name = 'England'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'England'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the venue name of Bandladore?",
        "question_ar": "",
        "evidence_en": "Bandladore refers to City_Name = 'Bangalore'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_ID = T2.City_ID WHERE T2.City_Name = 'Bangalore'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the names of players who participated in season year 2008?",
        "question_ar": "",
        "evidence_en": "season year 2008 refers to Season_Year = 2008",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008 GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the names of players that have run scored less than 3?",
        "question_ar": "",
        "evidence_en": "scored less than 3 refers to Runs_Scored < 3; name of player refers to Player_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the role of SC Ganguly?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; role refers to Role_Desc",
        "evidence_ar": "",
        "SQL": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly' GROUP BY T3.Role_Desc"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the names of players who played as a keeper.",
        "question_ar": "",
        "evidence_en": "played as a keeper refers to Role_Desc = 'Keeper'; name of player refers to Player_Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Keeper' GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the names of players in team 1?",
        "question_ar": "",
        "evidence_en": "in team 1 refers to Team_Id = 1; name of player refers to Player_Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id WHERE T3.Team_Id = 1 GROUP BY T1.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players played as a captain in season year 2008?",
        "question_ar": "",
        "evidence_en": "played as a captain refers to Role_Desc = 'Captain'; in season year 2008 refers Match_Date like '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' AND T2.Match_Date LIKE '2008%'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which teams did SC Ganguly join in season year 2008?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'; in season year 2008 refers to Season_Year = 2008",
        "evidence_ar": "",
        "SQL": "SELECT T5.Team_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id WHERE T4.Season_Year = 2008 AND T1.Player_Name = 'SC Ganguly' GROUP BY T5.Team_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What type did match ID 336000 win?",
        "question_ar": "",
        "evidence_en": "type of match won refers to Win_Type",
        "evidence_ar": "",
        "SQL": "SELECT T2.Win_Type FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T1.Match_Id = 336000"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Where did SB Joshi come from?",
        "question_ar": "",
        "evidence_en": "SB Joshi refers to Player_Name = 'SB Joshi'; where the player come from refers to Country_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T1.Player_Name = 'SB Joshi'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many players have left arm fast in bowling skill?",
        "question_ar": "",
        "evidence_en": "have left arm fast in bowling skill refers to Bowling_skill = 'Left-arm fast';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Left-arm fast'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the outcome type of match ID 392195?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Outcome_Type FROM Match AS T1 INNER JOIN Outcome AS T2 ON T1.Outcome_type = T2.Outcome_Id WHERE T1.Match_Id = '392195'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the youngest player and which city did he/she come from?",
        "question_ar": "",
        "evidence_en": "youngest player refers to MIN(DOB); city refers to City_Name",
        "evidence_ar": "",
        "SQL": "SELECT T3.City_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id INNER JOIN City AS T3 ON T2.Country_Id = T3.Country_Id ORDER BY T1.DOB LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did team Kings XI Punjab win in season year 2008?",
        "question_ar": "",
        "evidence_en": "in season year 2008 refers to Season_Year = 2008; team Kings XI Punjab refers to Team_Name = 'Kings XI Punjab'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Match_Id) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Kings XI Punjab' AND T4.Season_Year = 2008"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many seasons did Pune Warriors participate in?",
        "question_ar": "",
        "evidence_en": "Pune Warriors refers to Team_Name = 'Pune Warriors'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What year was R Dravid born and the role he played?",
        "question_ar": "",
        "evidence_en": "R Dravid refers to Player_Name = 'R Dravid'; year born refers to DOB; role refers to Role_Desc",
        "evidence_ar": "",
        "SQL": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many times did SC Ganguly be the man of the match?",
        "question_ar": "",
        "evidence_en": "SC Ganguly refers to Player_Name = 'SC Ganguly'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Man_of_the_Match) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id WHERE T1.Player_Name = 'SC Ganguly'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches did team Mumbai Indians win in 2008?",
        "question_ar": "",
        "evidence_en": "team Mumbai Indians refers to Team_Name = 'Mumbai Indians'; in 2008 refers to Match_Date like '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.Match_Id) FROM ( SELECT T2.Match_Id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id WHERE T1.Team_Name = 'Mumbai Indians' AND T2.Match_Date LIKE '2008%' GROUP BY T2.Match_Id ) T"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Which team won by wickets in match ID 335993?",
        "question_ar": "",
        "evidence_en": "team refers to Team_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Count the matches that were won by wickets in all season.",
        "question_ar": "",
        "evidence_en": "won by wickets refers to Win_type = 'wickets';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_type = 'wickets'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the role of W Jaffer in season year 2012?",
        "question_ar": "",
        "evidence_en": "W Jaffer refers to Player_name = 'W Jaffer'; in season year 2012 refers to Season_Year = 2012; role refers to Role_Desc",
        "evidence_ar": "",
        "SQL": "SELECT T4.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id INNER JOIN Season AS T5 ON T3.Season_Id = T5.Season_Id WHERE T1.Player_name = 'W Jaffer' AND T5.Season_Year = 2012"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What are the names of players who had been man of the match more than 5 times in season year 2008?",
        "question_ar": "",
        "evidence_en": "man of the match more than 5 times refers to COUNT(Man_of_the_Match) > 5; in season year 2008 refers to Season_Year = 2008; name of player refers to Player_Name;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(T2.Man_of_the_Match) > 5 THEN T1.Player_Name ELSE 0 END FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the average of Indian players that were born between 1975 and 1985 among all players?",
        "question_ar": "",
        "evidence_en": "Indian players refers to Country_Name = 'India'; born between 1975 and 1985 refers to strftime('%Y',T1.DOB) between '1975' and '1985'; average refers to DIVIDE(COUNT(Country_Name = 'India'), COUNT(Player_Id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE strftime('%Y', T1.DOB) BETWEEN '1975' AND '1985'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Calculate the percentage of left hand batting style players among all players.",
        "question_ar": "",
        "evidence_en": "left hand batting style players refers to Batting_hand = 'Left-hand bat'; percentage refers to DIVIDE(COUNT(Batting_hand = 'Left-hand bat'), COUNT(Player_Id)) * 100.0",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the percentage of matches that are won by runs?",
        "question_ar": "",
        "evidence_en": "won by runs refers to win_type = 1; percentage refers to DIVIDE(COUNT(win_type = 1), COUNT(Win_Type)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.win_type = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Win_Type) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many matches have 7 points of winning margin?",
        "question_ar": "",
        "evidence_en": "have 7 points of winning margin refers to win_margin = 7;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Match_Id) FROM Match WHERE win_margin = 7"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "What is the total number of players born between 1970 to 1975?",
        "question_ar": "",
        "evidence_en": "born between 1970 to 1975 refers to strftime('%Y',DOB) between '1970' and '1975'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Player_Id) FROM Player WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points?",
        "question_ar": "",
        "evidence_en": "winning margin of 6 points refers to Win_Margin = 6; held on April 26, 2009 refers to Match_Date = '2009-04-26'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T2.Win_Margin = 6 AND T2.Match_Date = '2009-04-26'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "In the match ID 419135, who won by runs?",
        "question_ar": "",
        "evidence_en": "who refers to Team_Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Win_By AS T3 ON T2.win_type = T3.win_id WHERE T2.Match_Id = 419135"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches held in St. George's Park, give the match ID of the match with the highest winning margin points.",
        "question_ar": "",
        "evidence_en": "held in St. George's Park refers to Venue_Name = 'St George''s Park'; highest winning margin points refers to MAX(Win_Margin)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Match_Id FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T1.Venue_Name = 'St George''s Park' ORDER BY T2.Win_Margin DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "How many of the players are from Sri Lanka?",
        "question_ar": "",
        "evidence_en": "from Sri Lanka refers to Country_Name = 'Sri Lanka';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'Sri Lanka'"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "List the player's name who played as a captain.",
        "question_ar": "",
        "evidence_en": "played as a captain refers to Role_Desc = 'captain'; player refers to Player_Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Give the match's venue and winning team for the match ID 392194.",
        "question_ar": "",
        "evidence_en": "venue refers to Venue_Name; winning team refers to match_winner",
        "evidence_ar": "",
        "SQL": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194"
    },
    {
        "db_id": "soccer_2016",
        "question_en": "Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets?",
        "question_ar": "",
        "evidence_en": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2009 refers to Match_Date = '2009%'; won by wickets refers to Win_Type = 'wickets'; percentage refers to DIVIDE(COUNT(Win_Type = 'wickets'), COUNT(Win_Type))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?",
        "question_ar": "",
        "evidence_en": "release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;",
        "evidence_ar": "",
        "SQL": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many times was the album released by blowfly in 1980 downloaded?",
        "question_ar": "",
        "evidence_en": "blowfly is an artist; groupYear = 1980; album refers to releaseType; downloaded refers to totalSnatched;",
        "evidence_ar": "",
        "SQL": "SELECT totalSnatched FROM torrents WHERE artist LIKE 'blowfly' AND groupYear = 1980"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What is the tag of the album with the highest amount of downloads?",
        "question_ar": "",
        "evidence_en": "album refers to releaseType; the highest amount of downloads refers to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What are the top 5 tags with the highest amount of downloads?",
        "question_ar": "",
        "evidence_en": "the highest amount of downloads refers to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 5"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What is the release title of the single under the \"funk\" tag that was released the oldest?",
        "question_ar": "",
        "evidence_en": "release title of single refers to groupName where releaseType = 'single'; the oldest means coming before all others in time and refers to MIN(groupYear);",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Name all the release titles of the \"ep's\" under the alternative tag.",
        "question_ar": "",
        "evidence_en": "release titles of the \"ep's\" refer to groupName where releaseType = 'ep';",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'alternative' AND T1.releaseType = 'ep'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What are the tags of the top 5 least downloaded live albums?",
        "question_ar": "",
        "evidence_en": "least downloaded album refers to MIN(totalSnatched where releaseType = 'album');",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched LIMIT 5"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What is the tag and the artist of the most downloaded single?",
        "question_ar": "",
        "evidence_en": "the most downloaded single refers to MAX(totalSnatched where releaseType = 'single');",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many releases are tagged \"1980s\"?",
        "question_ar": "",
        "evidence_en": "tag = '1980s';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM tags WHERE tag LIKE '1980s'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many times has the release \"city funk\" been downloaded?",
        "question_ar": "",
        "evidence_en": "groupName = 'city funk'; downloaded refers to totalSnatched;",
        "evidence_ar": "",
        "SQL": "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Please list the releases that have been downloaded for more than 20000 times.",
        "question_ar": "",
        "evidence_en": "releases refer to groupName; downloaded for more than 20000 times refers to totalSnatched > 20000;",
        "evidence_ar": "",
        "SQL": "SELECT groupName FROM torrents WHERE totalSnatched > 20000"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What are the tags of the release \"sugarhill gang\"?",
        "question_ar": "",
        "evidence_en": "release \"sugarhill gang\" refers to groupName = 'sugarhill gang';",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'sugarhill gang'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many tags does the release \"city funk\" have？",
        "question_ar": "",
        "evidence_en": "release \"city funk\" refers to groupName = 'city funk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'city funk'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Please list the titles of all the releases with the tag \"1980s\".",
        "question_ar": "",
        "evidence_en": "titles refer to groupName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Among the releases with the tag \"1980s\", which one of them is the most downloaded? Please give its title.",
        "question_ar": "",
        "evidence_en": "title refers to groupName; the most downloaded refers to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many releases by the artist michael jackson are tagged \"pop\"?",
        "question_ar": "",
        "evidence_en": "tag = 'pop';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Among the releases that were released in 2000, how many of them were released as an album and tagged \"pop\"?",
        "question_ar": "",
        "evidence_en": "groupYear = 2000; album refers to releaseType;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.releaseType = 'album' AND T1.groupYear = 2000"
    },
    {
        "db_id": "music_tracker",
        "question_en": "What are the average download times for the a release tagged \"1980s\"?",
        "question_ar": "",
        "evidence_en": "AVG(totalSnatched where tag = '1980s');",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.totalSnatched) AS REAL) / COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Name the title of the top three releases with the highest number of downloads.",
        "question_ar": "",
        "evidence_en": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 3"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Provide the name of the artist who released his or her Single-Table in 2012 with the highest number of downloads. Name the Single-Table title as well.",
        "question_ar": "",
        "evidence_en": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched where groupYear = 2012 and releaseType = 'single');",
        "evidence_ar": "",
        "SQL": "SELECT artist, groupName FROM torrents WHERE groupYear = 2012 AND releaseType LIKE 'Single' ORDER BY totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many albums and Single-Tables were released by the artist named '50 cent' between 2010 and 2015?",
        "question_ar": "",
        "evidence_en": "albums refer to releaseType = 'album'; releaseType = 'single'; between 2010 and 2015 refers to groupYear between 2010 and 2015;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released?",
        "question_ar": "",
        "evidence_en": "2Pac is an artist; album refers to releaseType; groupYear = 1991; SUBTRACT(groupYear = 1991, groupYear where releaseType = 'album' LIMIT 1 OFFSET 1);",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Find the average number of downloads for Single-Tables released by '2Pac' between 2001 and 2013.",
        "question_ar": "",
        "evidence_en": "2Pac is an artist; releaseType = 'single'; between 2001 and 2013 refers to groupYear between 2001 and 2013; average number of downloads = AVG(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(totalSnatched) FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'Single' AND groupYear BETWEEN 2001 AND 2013"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Provide the title, release year and the tag associated with the live album that has the highest number of downloads?",
        "question_ar": "",
        "evidence_en": "release year refers to groupYear; title of live album refers to groupName where releaseType = 'live album'; the highest number of downloads refers to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName, T1.groupYear, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'live album' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Provide the name of artists who released at least two bootlegs in 2016.",
        "question_ar": "",
        "evidence_en": "at least two bootlegs refer to COUNT(releaseType = 'bootleg')≥ 2; groupYear = 2016;",
        "evidence_ar": "",
        "SQL": "SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType LIKE 'bootleg' GROUP BY artist HAVING COUNT(releaseType) > 2"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Which artist released singles between 1980 to 1982?",
        "question_ar": "",
        "evidence_en": "releaseType = 'single'; between 1980 to 1982 refers to groupYear between 1980 and 1982;",
        "evidence_ar": "",
        "SQL": "SELECT artist FROM torrents WHERE groupYear BETWEEN 1980 AND 1982 AND releaseType LIKE 'single'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Indicates groups with id from 10 to 20 with singles downloaded at least 20.",
        "question_ar": "",
        "evidence_en": "releaseType = 'single'; downloaded at least 20 refers to totalSnatched ≥ 20; id from 10 to 20 refer to id between 10 and 20; groups refer to groupName;",
        "evidence_ar": "",
        "SQL": "SELECT groupName FROM torrents WHERE totalSnatched >= 20 AND releaseType LIKE 'single' AND id BETWEEN 10 AND 20"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Among the artists from 1980 to 1982. Which artist was tagged as \"disco\"?",
        "question_ar": "",
        "evidence_en": "from 1980 to 1982 refers to groupYear between 1980 and 1982; tag = 'disco';",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'disco' AND T1.groupYear BETWEEN 1980 AND 1982"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Provide the name of artists who had no more than 100 downloads and are tagged \"funk\" in 1980.",
        "question_ar": "",
        "evidence_en": "no more than 100 downloads refer to totalSnatched ≤ 100; groupYear = 1980; tag = 'funk';",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Which artist has released the most singles with the tag \"soul\"?",
        "question_ar": "",
        "evidence_en": "the most singles refer to MAX(COUNT(releaseType = 'single'));",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.releaseType = 'single' GROUP BY T1.artist ORDER BY COUNT(T1.releaseType) DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Among the artists with the id from 10 to 30. Which artist released the product with the tag \"funk\" in 1980?",
        "question_ar": "",
        "evidence_en": "id from 10 to 30 refers to id between 10 and 30; groupYear = 1980;",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.id BETWEEN 10 AND 30"
    },
    {
        "db_id": "music_tracker",
        "question_en": "List the group name has the most downloaded that have released jazz genres from 1982 or later.",
        "question_ar": "",
        "evidence_en": "the most downloaded refers to MAX(totalSnatched); tag = 'jazz'; from 1982 or later refers to groupYear ≥ 1982;",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Which artist has id \"16\"? Provide her or his tag genre.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id = 16"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Among id from 10 to 50. Which artist tagged as \"new.york\" has the most downloads?",
        "question_ar": "",
        "evidence_en": "Among id from 10 to 50 refers to id between 10 and 50; tag = 'new.york'; the most downloads refer to MAX(totalSnatched);",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id BETWEEN 10 AND 50 AND T2.tag LIKE 'new.york' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "List the name of artists who have released albums and mixtape from 1980 to 1985 in \"dance\" genre.",
        "question_ar": "",
        "evidence_en": "albums and mixtape refer to releaseType; from 1980 to 1985 refers to groupYear between 1980 and 1985; tag = 'dance';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.artist) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'dance' AND T1.groupYear BETWEEN 1980 AND 1985 AND T1.releaseType LIKE 'album' OR T1.releaseType LIKE 'mixtape'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many singles were released between 1979 and 1981 labeled as \"soul\"?",
        "question_ar": "",
        "evidence_en": "releaseType = 'single'; between 1979 and 1981 refers to groupYear between 1979 and 1981; tag = 'soul';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.groupYear BETWEEN 1979 AND 1981 AND T1.releaseType LIKE 'single'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many singles were released in 1979?",
        "question_ar": "",
        "evidence_en": "releaseType = 'single'; groupYear = 1979;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(releaseType) FROM torrents WHERE releaseType LIKE 'single' AND groupYear = 1979"
    },
    {
        "db_id": "music_tracker",
        "question_en": "In 1980, how many singles were released by sugar daddy?",
        "question_ar": "",
        "evidence_en": "sugar daddy is an artist; releaseType = 'single'; groupYear = 1980;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980"
    },
    {
        "db_id": "music_tracker",
        "question_en": "How many christmas albums were released in 2004?",
        "question_ar": "",
        "evidence_en": "album refers to releaseType; groupYear = 2004; tag = 'christmas';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'christmas' AND T1.groupYear = 2004 AND T1.releaseType LIKE 'album'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Please list all tags of kurtis blow from 2000 to 2010.",
        "question_ar": "",
        "evidence_en": "kurtis blow is an artist; from 2000 to 2010 refers to groupYear between 2000 and 2010;",
        "evidence_ar": "",
        "SQL": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 2000 AND 2010 AND T1.artist LIKE 'kurtis blow'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Which album title and tag that millie jackson released in 1980?",
        "question_ar": "",
        "evidence_en": "millie jackson is an artist; album title refers to groupName where releaseType = 'album'; groupYear = 1980;",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 1980 AND T1.artist LIKE 'millie jackson' AND T1.releaseType LIKE 'album'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Please list all release titles whose tag is jazz in 2005.",
        "question_ar": "",
        "evidence_en": "release titles refer to groupName; groupYear = 2005;",
        "evidence_ar": "",
        "SQL": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2005 AND T2.tag LIKE 'jazz'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "From 1980 to 2000, which artist had the most disco releases?",
        "question_ar": "",
        "evidence_en": "From 1980 to 2000 refers to groupYear between 1980 and 2000; tag = 'disco'; the most releases refer to MAX(COUNT(id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1980 AND 2000 AND T2.tag LIKE 'disco' GROUP BY T1.artist ORDER BY COUNT(T2.tag) DESC LIMIT 1"
    },
    {
        "db_id": "music_tracker",
        "question_en": "Which artists have released singles with the tag 1970s?",
        "question_ar": "",
        "evidence_en": "releaseType = 'single';",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' AND T2.tag LIKE '1970s'"
    },
    {
        "db_id": "music_tracker",
        "question_en": "From 1979 to 1982, what was the percentage of united.states albums out of total albums were released?",
        "question_ar": "",
        "evidence_en": "From 1979 to 1982 refers to groupYear between 1979 and 1982; United States refer to tag; albums refer to releaseType; DIVIDE(COUNT(releaseType = 'album' where tag = 'united.states' and groupYear between 1979 and 1982), COUNT(releaseType = 'album' where groupYear between 1979 and 1982)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Among the countries in the group of Heavily Indebted Poor Countries, how many of them are under the lending category of the International Development Associations?",
        "question_ar": "",
        "evidence_en": "group of Heavily Indebted Poor Countries is OtherGroups = 'HIPC'; International Development Associations refers to lendingcategory = 'IDA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode) FROM Country WHERE LendingCategory = 'IDA' AND OtherGroups = 'HIPC'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the countries under the lending category of the International Development Associations and have a external debt reporting finished by estimation.",
        "question_ar": "",
        "evidence_en": "countries refer to the ShortName; International Development Associations refers to lendingcategory = 'IDA'; have a external debt reporting finished by estimation refers to ExternalDebtReportingStatus = 'Estimate'",
        "evidence_ar": "",
        "SQL": "SELECT ShortName, ExternalDebtReportingStatus FROM Country WHERE LendingCategory = 'IDA'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What's the description of the series code SM.POP.TOTL for Aruba?",
        "question_ar": "",
        "evidence_en": "Aruba is the name of the country where ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the countries in Latin America & Caribbean with a note on the series code SM.POP.TOTL.",
        "question_ar": "",
        "evidence_en": "Countries refer to the ShortName; Latin America & Caribbean is the name of the region",
        "evidence_ar": "",
        "SQL": "SELECT T1.SHORTNAME, T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?",
        "question_ar": "",
        "evidence_en": "countries refer to Countrycode; low-income group refers to incomegroup = 'Low income'; with notes refers to description IS NOT NULL; series code SM.POP.TOTL refers to Seriescode = 'SM.POP.TOTL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the descriptions of the series code SM.POP.TOTL for all the countries that are under the lending category of the International Development Associations.",
        "question_ar": "",
        "evidence_en": "Countries are the Countrycode; International Development Associations refers to lendingcategory = 'IDA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many low-income countries under the lending category of the International Development Associations have a note on the series code SM.POP.TOTL?",
        "question_ar": "",
        "evidence_en": "low-income countries are where the incomegroup = Low income",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL' AND IncomeGroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE?",
        "question_ar": "",
        "evidence_en": "countries refer to Countrycode; in the high income refers to incomegroup = 'High'; with notes refers to description IS NOT NULL; series code SP.DYN.AMRT.FE refers to Seriescode = 'SP.DYN.AMRT.FE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'High income: OECD' AND T1.CurrencyUnit = 'Euro' AND T2.Seriescode = 'SP.DYN.AMRT.FE'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the long name of the country with the description \"Estimates are derived from data on foreign-born population.\" on the series code SM.POP.TOTL?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the description of the footnote on the series code AG.LND.FRST.K2 in 1990 for Aruba?",
        "question_ar": "",
        "evidence_en": "Year = 1990; Aruba is the name of country where ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2' AND T2.Year = 'YR1990'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?",
        "question_ar": "",
        "evidence_en": "Aruba is the name of country where ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the countries that got the footnote \"Data are classified as official aid.\" on the series code DC.DAC.AUSL.CD in 2002.",
        "question_ar": "",
        "evidence_en": "countries are the Countrycode; footnote refers to Description = 'Data are classified as official aid'",
        "evidence_ar": "",
        "SQL": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many footnotes did Aruba got on different series code in the year 2002?",
        "question_ar": "",
        "evidence_en": "Aruba is the name of country where ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.SeriesCode) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Year = 'YR2002'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD?",
        "question_ar": "",
        "evidence_en": "Aruba is the name of country where ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Year) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'BX.KLT.DINV.CD.WD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the average adolescent fertility rate of the country whose Alpha2Code is 1A over the years this indicator was calculated.",
        "question_ar": "",
        "evidence_en": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%'))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName LIKE 'adolescent fertility rate%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the special notes for the country whose average adolescent fertility rate is the highest?",
        "question_ar": "",
        "evidence_en": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%')); MAX(average adolescent fertility rate)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName LIKE 'Adolescent fertility rate%' ORDER BY Value DESC LIMIT 1 )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List the East Asia & Pacific countries which are under the High income: nonOECD group. Please include their alpha code.",
        "question_ar": "",
        "evidence_en": "the East Asia & Pacific countries are where Region = 'East Asia & Pacific'; High income: nonOECD group is where IncomeGroup = 'High income: nonOECD'",
        "evidence_ar": "",
        "SQL": "SELECT CountryCode, Alpha2Code FROM Country WHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In which country's latest trade data and latest water withdrawal data were both updated in the year 2013? Give its long name and Alpha 2 code.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?",
        "question_ar": "",
        "evidence_en": "the average value of Adjusted net enrolment rate, primary, both sexes (%) is DIVIDE(SUM(Value), SUM(IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)')); Year BETWEEN 1975 AND 1980; Algeria is the name of country where CountryName = 'Algeria'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the Indicator names and aggregation methods when the topic is Economic Policy & Debt: Balance of payments: Capital & financial account?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List down the series codes in which the topic is about Environment: Emissions and the license type is restricted. Please include their alpha code.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SeriesCode FROM Series WHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In 1970, how many Middle Eastern & North African countries whose value for CO2 emissions from gaseous fuel consumption (kt) indicator is more than 600?",
        "question_ar": "",
        "evidence_en": "Year = 1970; Middle East & North Africa is the name of the region where Region = 'Middle East & North Africa'; CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CountryCode)  FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T1.IndicatorName = 'CO2 emissions FROM gaseous fuel consumption (kt)' AND T1.Year = 1970 AND T1.Value > 600"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List down the top 3 Latin American & Caribbean countries with the highest average value in \"CO2 emissions (kt)\" indicator since 1965. Give their highest value and in what year.",
        "question_ar": "",
        "evidence_en": "Latin American & Caribbean countries is the name of the region where Region in ('Latin America' , 'Caribbean'); CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'; average value in CO2 emissions (kt) = DIVIDE(SUM(Value), SUM(IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)')); Year > 1965",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the series note description of the series \"SP.DYN.TO65.MA.ZS\" which covers the topic \"Health: Mortality\" in 1967?",
        "question_ar": "",
        "evidence_en": "in 1967 refers to Year = 'YR1967'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.TO65.MA.ZS' AND T1.Topic = 'Health: Mortality' AND T2.Year = 'YR1967'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please write down the footnote descriptions of Albania in 1981.",
        "question_ar": "",
        "evidence_en": "Albania is the name of country where Country = 'Albania'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1981' AND T2.ShortName = 'Albania'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Enumerate the footnote narratives of The Bahamas under the series code SH.DTH.IMRT in the year 1984.",
        "question_ar": "",
        "evidence_en": "narratives is Description; The Bahamas is the name of the country where Country = 'The Bahamas'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1984' AND T2.ShortName = 'The Bahamas' AND T1.Seriescode = 'SH.DTH.IMRT'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the short name of the country in which the \"Net bilateral aid flows from DAC donors, Sweden (current US$)\" indicator hit the 570,000 value in 1970?",
        "question_ar": "",
        "evidence_en": "Net bilateral aid flows from DAC donors, Sweden (current US$) is the name of indicator where IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'; Year = 1970; Value > 570,000",
        "evidence_ar": "",
        "SQL": "SELECT T2.ShortName FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Net bilateral aid flows FROM DAC donors, Sweden (current US$)' AND T1.Year = 1970 AND T1.Value = 570000"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List down the World Bank code of the countries whose country note has described \"Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.\"? Please include their lending category.",
        "question_ar": "",
        "evidence_en": "World Bank code refers to Wb2code; Data source refers to Description",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Wb2code, T1.LendingCategory FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.' AND T1.LendingCategory != ''"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the topic of the series when the Total reserves minus gold (current US$) indicator of Haiti hit the value of 3,000,000 in 1961? Please include its series code and license type.",
        "question_ar": "",
        "evidence_en": "Total reserves minus gold (current US$) is the IndicatorName; Haiti is the CountryName; Year = 1961",
        "evidence_ar": "",
        "SQL": "SELECT T2.Topic, T2.Seriescode, T2.LicenseType FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1961 AND T1.CountryName = 'Haiti' AND T1.IndicatorName = 'Total reserves minus gold (current US$)' AND T1.Value = 3000000"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?",
        "question_ar": "",
        "evidence_en": "Adjusted net national income per capita (constant 2005 US$) is the IndicatorName; have not finished their external debt reporting means ExternalDebtReportingStatus = 'Preliminary'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND T1.ExternalDebtReportingStatus = 'Preliminary' AND T2.Value > 1000"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which countries have a fertility rate between 4 and 5 in 1979? List their names.",
        "question_ar": "",
        "evidence_en": "Year = 1979; fertility rate refers to IndicatorName = 'Fertility rate, total (births per woman)'; Value is between 4 and 5;",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND value >= 4 AND Value <= 5"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Find the countries in south Asia which are in the low-income group. What is the source of their recent income and expenditure data? List it alongside the table name of the countries.",
        "question_ar": "",
        "evidence_en": "South Asia is the name of the region; IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT TableName, SourceOfMostRecentIncomeAndExpenditureData FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the sources for the data of children who finished primary school education in Latin America & Caribbean countries?",
        "question_ar": "",
        "evidence_en": "Latin America & Caribbean is the name of the region; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'; sources refer to Description;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode WHERE T3.Region = 'Latin America & Caribbean' AND T2.IndicatorName = 'Children out of school, primary'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List the sources for the Net Migration in South American countries in 2002.",
        "question_ar": "",
        "evidence_en": "South American is the name of the region; Year contains '2002'; sources refer to Description; IndicatorName = 'Net migration';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Source FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode INNER JOIN SeriesNotes AS T4 ON T2.SeriesCode = T4.Seriescode WHERE T4.Year LIKE '%2002%' AND T2.IndicatorName = 'Net migration'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the sources for the data of children who finished primary school education in North American countries?",
        "question_ar": "",
        "evidence_en": "North American is the name of the region; sources refer to Description; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In the countries for which the latest trade data are from 2013, what was the GDP growth in 2014? List them in the ascending order of GDP.",
        "question_ar": "",
        "evidence_en": "IndicatorName = 'GDP growth (annual %)'; Year = 2014;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorName LIKE 'GDP growth (annual %)' AND T2.year = 2014 AND T2.Value > 0 ORDER BY T2.Value ASC"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which European countries had the highest private expenditure on health in 2005? List the top ten countries in descending order and find the source of the data.",
        "question_ar": "",
        "evidence_en": "Year = 2005; private expenditure on health refers to IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'; the highest refers to MAX(Value); source refers to Description;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T1.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND T2.Value > 0 AND T2.year = 2005 ORDER BY T2.Value DESC LIMIT 10"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many low income countries are there in South Asia?",
        "question_ar": "",
        "evidence_en": "South Asia is the name of the region; IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode) FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the short name of countries which have the latest trade data after 2010.",
        "question_ar": "",
        "evidence_en": "the latest trade data after 2010 implies LatestTradeData > 2010;",
        "evidence_ar": "",
        "SQL": "SELECT ShortName FROM Country WHERE LatestTradeData > 2010"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system.",
        "question_ar": "",
        "evidence_en": "Sub-Saharan African is the name of the region; SystemOfTrade = 'Special trade system'; countries refer to CountryCode; DIVIDE(COUNT (CountryCode where SystemOfTrade = 'Special trade system' and Region = 'Sub-Saharan Africa'), COUNT(CountryCode where Region = 'Sub-Saharan Africa')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT  CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE SystemOfTrade = 'Special trade system'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please calculate the average of Arms imports (SIPRI trend indicator values) of the European & Central Asian countries.",
        "question_ar": "",
        "evidence_en": "European & Central Asian is the name of the region; IndicatorName = 'Arms imports (SIPRI trend indicator values)'; countries refer to CountryCode; DIVIDE(Sum(Value), Count(CountryCode));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Value) AS REAL) / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'Europe & Central Asia' AND T2.IndicatorName = 'Arms imports (SIPRI trend indicator values)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which upper middle income country has the lowest value of CO2 emissions (kt)?",
        "question_ar": "",
        "evidence_en": "IncomeGroup = 'Upper middle income'; IndicatorName = 'CO2 emissions (kt); the lowest value refers to MIN(Value);",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.IndicatorName = 'CO2 emissions (kt)' ORDER BY T2.Value ASC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the minimum of International migrant stock, total of heavily indebted poor countries?",
        "question_ar": "",
        "evidence_en": "IndicatorName = 'International migrant stock, total'; heavily indebted poor countries referred to by its abbreviated 'HIPC' = OtherGroups; MIN(Value);",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.OtherGroups = 'HIPC' AND T2.IndicatorName = 'International migrant stock, total'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the indicator names belonging to Education: Inputs topic in 2000.",
        "question_ar": "",
        "evidence_en": "Year = 'YR2000';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.IndicatorName FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year = 'YR2000' AND T2.Topic = 'Education: Inputs'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many annual indicators use the Sum aggregation method from 2001 to 2003?",
        "question_ar": "",
        "evidence_en": "Annual refers to Periodicity; from 2001 to 2003 implies Year = 'YR2001', Year = 'YR2002' , Year = 'YR2003';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.SeriesCode)  FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year IN ('YR2001', 'YR2002', 'YR2003') AND T2.Periodicity = 'Annual' AND T2.AggregationMethod = 'Sum'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In 2005, which series codes use the International Monetary Fund, Balance of Payments Statistics Yearbook and data files source?",
        "question_ar": "",
        "evidence_en": "Year contains '2005'; series codes contain 'International Monetary Fund'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What percentage of countries in South Asia have the Life expectancy at birth, female (years) greater than 50?",
        "question_ar": "",
        "evidence_en": "South Asia is the name of the region; IndicatorName = 'Life expectancy at birth, female (years)'; greater than 50 refers to Value>50; DIVIDE(COUNT(CountryCode where IndicatorName = 'Life expectancy at birth, female (years)'; Value>50; Region = 'South Asia'), COUNT(CountryCode where Region = 'South Asia')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'South Asia' AND T2.IndicatorName = 'Life expectancy at birth, female (years)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)?",
        "question_ar": "",
        "evidence_en": "IndicatorName = 'Death rate, crude (per 1,000 people)'; the highest refers to MAX(Value); from 1960 to 1965 refers to Year between '1960' and '1965'; country refers to CountryName;",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE Year BETWEEN 1960 AND 1965 AND IndicatorName = 'Death rate, crude (per 1,000 people)' ORDER BY Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the indicator names of Arab World whose values are higher than 50 in 1960.",
        "question_ar": "",
        "evidence_en": "Arab World refers to CountryName; Year = '1960'; values are higher than 50 refers to Value>50;",
        "evidence_ar": "",
        "SQL": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country has the highest value of Merchandise imports by the reporting economy (current US$)?",
        "question_ar": "",
        "evidence_en": "country refers to CountryName; the highest value implies MAX(Value); IndicatorName = 'Merchandise imports by the reporting economy (current US$)';",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' ORDER BY Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list annual indicator names which have values of more than 100 in 1965.",
        "question_ar": "",
        "evidence_en": "Annual refers to Periodicity; values of more than 100 implies Value>100; Year = '1965';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1965 AND T1.Value > 100 AND T2.Periodicity = 'Annual'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "From 1968 to 1970, what are indicator names whose license type is open and values are less than 100?",
        "question_ar": "",
        "evidence_en": "From 1968 to 1970 refers to Year between '1968' and '1970'; values are less than 100 imply Value<100;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1968 AND T1.Year < 1971 AND T2.LicenseType = 'Open' AND T1.Value < 100"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country had the highest value of indicator belongs to Private Sector & Trade: Exports topic? Please list the country name and indicator name.",
        "question_ar": "",
        "evidence_en": "country refers to CountryName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryName, T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.Topic = 'Private Sector & Trade: Exports' ORDER BY T1.Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which indicator name uses the Weighted average method and has the lowest value?",
        "question_ar": "",
        "evidence_en": "AggregationMethod = 'Weighted average'; the lowest value implies MIN(Value);",
        "evidence_ar": "",
        "SQL": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list out all annual indicator names of Sudan in 1961?",
        "question_ar": "",
        "evidence_en": "Sudan is the name of the country; Periodicity = 'Annual'; Year = '1961'",
        "evidence_ar": "",
        "SQL": "SELECT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.CountryName = 'Sudan' AND T1.Year = 1961 AND T2.Periodicity = 'Annual'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "From 1960 to 1965, which country has the lowest value of indicator belongs to Health: Population: Structure?",
        "question_ar": "",
        "evidence_en": "From 1960 to 1965 refers to Year between '1960' and '1965'; the lowest value implies MIN(Value); country refers to CountryName;",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE Value = ( SELECT MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1960 AND T1.Year < 1966 AND T2.Topic = 'Health: Population: Structure' )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What percentage of upper middle income countries which have the CO2 emissions from liquid fuel consumption (% of total)\n\nless than 80%?",
        "question_ar": "",
        "evidence_en": "IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; less than 80% implies Value<80%; IncomeGroup = 'Upper middle income'; DIVIDE(COUNT(CountryCode where IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; Value<80%; IncomeGroup = 'Upper middle income'), COUNT(CountryCode where IncomeGroup = 'Upper middle income'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.IndicatorName = 'CO2 emissions FROM liquid fuel consumption (% of total)' AND t2.Value < 80 THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.CountryCode) persent FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is indicator code of Rural population?",
        "question_ar": "",
        "evidence_en": "IndicatorName = 'Rural population';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many country uses the 2008 System of National Accounts methodology? List our their table name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT TableName  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 2008 System of National Accounts methodology.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the series code of countries using Euro as their currency unit.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the long name of countries using series code as DT.DOD.DSTC.CD",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'DT.DOD.DSTC.CD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Mention the series code of countries using Hong Kong dollar as their currency unit.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Hong Kong dollar'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the table name of countries using series code as SP.DYN.TO65.MA.ZS",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.DYN.TO65.MA.ZS'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the country name of lower earning countries",
        "question_ar": "",
        "evidence_en": "lower earning countries refer to IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the series code and country code of the poor countries that located in Latin American & Carribbean.",
        "question_ar": "",
        "evidence_en": "Latin American & Carribbean is the name of the region; poor countries refers to IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Mention the series code of countries using Australian dollar as their currency unit. Which country belongs to middle income group among them.",
        "question_ar": "",
        "evidence_en": "middle income group refers to IncomeGroup = 'Low middle income';",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the country name of upper middle income group. Which country has the earliest national account base year? List out the region where this country locates.",
        "question_ar": "",
        "evidence_en": "IncomeGroup = 'Upper middle income'; the earliest national account base year refers to MIN(NationalAccountsBaseYear); \n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IncomeGroup = 'Upper middle income' UNION SELECT longname FROM ( SELECT longname FROM country WHERE NationalAccountsBaseYear <> '' ORDER BY NationalAccountsBaseYear ASC LIMIT 1 )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the country code and country name of the rich countries using Euro as their currency unit",
        "question_ar": "",
        "evidence_en": "Non-OECD and OECD countries can be regarded as rich countries for those that are part of the High Income Group;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the table name and currency unit of countries using series code as FP.CPI.TOTL",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.TableName, T1.CurrencyUnit FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'FP.CPI.TOTL'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List out the name and indicator code of high income: nonOECD countries",
        "question_ar": "",
        "evidence_en": "high income: non-OECD' refer to IncomeGroup;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Mention the series code of countries using pound sterling as their currency unit. Which country belongs to high income group among them.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T1.CurrencyUnit, T1.IncomeGroup FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Pound sterling' AND T1.IncomeGroup LIKE '%high income%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List down 10 country codes and it's short names.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CountryCode, ShortName FROM Country LIMIT 10"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many of the countries name start with alphabet A? List down the Alpha2Code of them.",
        "question_ar": "",
        "evidence_en": "countries name starts with alphabet A refers to shortname like 'A%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ShortName) FROM Country WHERE ShortName LIKE 'A%' UNION SELECT alpha2code FROM country WHERE shortname LIKE 'A%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which countries use Euro as their currency? List down the table name.",
        "question_ar": "",
        "evidence_en": "CurrencyUnit = 'Euro';",
        "evidence_ar": "",
        "SQL": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many of the countries do not have special notes? List the long name.",
        "question_ar": "",
        "evidence_en": "do not have special notes implies SpecialNotes are NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which high income group countries are from Asia?",
        "question_ar": "",
        "evidence_en": "Asia is the name of the region;",
        "evidence_ar": "",
        "SQL": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Name the countries' long name with national accounts base year prior to 1980.",
        "question_ar": "",
        "evidence_en": "national accounts base year prior to 1980 means before 1980 and refers to NationalAccountsBaseYear<1980;",
        "evidence_ar": "",
        "SQL": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which low income country has a series code of DT.DOD.DECT.CD? Name the country code of it.",
        "question_ar": "",
        "evidence_en": "IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'Low income' AND T2.Seriescode = 'DT.DOD.DECT.CD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "State the table name of country with description of \"Covers mainland Tanzania only\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Covers mainland Tanzania only.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Write down the description and series code of Benin in year 2005.",
        "question_ar": "",
        "evidence_en": "Benin is the short name of the country; year 2005 refers to Year = 'YR2005';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description, T2.Seriescode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Benin' AND T2.Year = 'YR2005'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the footnote description of Finland in year 2000?",
        "question_ar": "",
        "evidence_en": "Finland is the short name of the country; year 2000 refers to Year = 'YR2000';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Finland' AND T2.Year = 'YR2000'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the years when countries have indicator name of \"Air transport, passengers carried\"? List the table name of these countries.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List the long name of countries with indicator name in 1980.",
        "question_ar": "",
        "evidence_en": "with any indicator name implies IndicatorName is not NULL; Year = '1980';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "State the currency of Malaysia and what are the indicator code used by this country in 1970?",
        "question_ar": "",
        "evidence_en": "Malaysia is the name of the country; currency refers to CurrencyUnit; Year = '1970';",
        "evidence_ar": "",
        "SQL": "SELECT T1.currencyunit, T2.IndicatorCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.TableName = 'Malaysia' AND T2.Year = 1970"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Name 5 country codes of country with highest value and state the region of these countries.",
        "question_ar": "",
        "evidence_en": "with highest value refers to MAX(Value);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries have country note description as \"Sources: UN Energy Statistics (2014)\"? List the currency of these countries.",
        "question_ar": "",
        "evidence_en": "countries refer to CountryCode; currency refers to CurrencyUnit;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Sources: UN Energy Statistics (2014)' UNION SELECT DISTINCT t1.CurrencyUnit FROM country AS t1 INNER JOIN countrynotes AS t2 ON t1.CountryCode = t2.Countrycode WHERE t2.Description = 'Sources: UN Energy Statistics (2014)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many footnotes have been made in year 1980 and what are the table names of these countries that made the footnotes?",
        "question_ar": "",
        "evidence_en": "year 1980 refers to Year = 'YR1980';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Description) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980' UNION ALL SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List the series code of country with country notes description as \"Data sources : Eurostat\" and state the Wb2Code of these countries.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Among the low income countries, which country has the lowest fertility rate?",
        "question_ar": "",
        "evidence_en": "fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'; lowest refers to MIN(Value); IncomeGroup = 'Low income';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How much is the total urban population of middle income countries in 1960?",
        "question_ar": "",
        "evidence_en": "IncomeGroup = 'Middle income'; Year = 1960; urban population refers to IndicatorName;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup LIKE '%middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Urban population'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Name the country with fastest growth in adjusted net national income in 1980 and state the currency used by this country.",
        "question_ar": "",
        "evidence_en": "fastest growth refers to MAX(Value); IndicatorName = 'Adjusted net national income (annual % growth)'; Year = '1980'; currency refers to CurrencyUnit;",
        "evidence_ar": "",
        "SQL": "SELECT T2.countryname, T1.CurrencyUnit FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income (annual % growth)' AND T2.Year = 1980 AND T1.CurrencyUnit != '' ORDER BY T2.Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries using the 1993 System of National Accounts methodology?",
        "question_ar": "",
        "evidence_en": "use the 1993 System of National Accounts methodology refers to SystemOfNationalAccounts = '1993 System of National Accounts methodology.'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode) FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1993 System of National Accounts methodology.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country have completed vital registration? List all the countries.",
        "question_ar": "",
        "evidence_en": "have completed vital registration refers to VitalRegistrationComplete = Yes; country name refers to ShortName",
        "evidence_ar": "",
        "SQL": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country have conducted population census from 2010 until 2012 and have completed vital registration?",
        "question_ar": "",
        "evidence_en": "from 2010 until 2012 refers to LatestPopulationCensus between '2010' and '2012'; have completed vital registration refers to VitalRegistrationComplete = 'Yes'; CountryName = ShortName + LongName",
        "evidence_ar": "",
        "SQL": "SELECT ShortName, LongName FROM Country WHERE LatestPopulationCensus >= 2010 AND LatestPopulationCensus < 2013 AND VitalRegistrationComplete = 'Yes'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country have the highest CO2 emissions in 1960?",
        "question_ar": "",
        "evidence_en": "which country refers to countryname; the highest CO2 emissions refers to max(value where indicatorname = 'CO2 emissions (metric tons per capita)'); in 1960 refers to year = '1970'",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE Year = 1960 AND IndicatorName = 'CO2 emissions (metric tons per capita)' ORDER BY Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the ratio between country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971? List the country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971.",
        "question_ar": "",
        "evidence_en": "ratio = divide(max(value where indicatorname = 'Number of infant deaths' and year = '1971'), min(value where indicatorname = 'Number of infant deaths' and year = '1971')); the highest number of infant deaths in 1971 refers to max(value where indicatorname = 'Number of infant deaths' and year = '1971'); the lowest number of infant deaths in 1971 refers to min(value where indicatorname = 'Number of infant deaths' and year = '1971')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(MAX(value) AS REAL) / MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' UNION ALL SELECT countryname FROM ( SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' ) UNION SELECT countryname FROM ( SELECT countryname, MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What country have the series code of SP.DYN.CBRT.IN?",
        "question_ar": "",
        "evidence_en": "what country refers to ShortName",
        "evidence_ar": "",
        "SQL": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'SP.DYN.CBRT.IN'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country have data classified as official aid?",
        "question_ar": "",
        "evidence_en": "which country refers to ShortName; have data classified as official aid refers to description = 'Data are classified as official aid.'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What country have its data estimated based on regression?",
        "question_ar": "",
        "evidence_en": "what country refers to LongName; have its data estimated based on regression refers to description = 'Estimates are based on regression.'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "List all the country in East Asia & Pacific region that have more than 2000000 urban population in 1970.",
        "question_ar": "",
        "evidence_en": "country refers to LongName; have more than 2000000 urban population refers to value where indicatorname = 'Urban population'>2000000; in 1970 refers to year = '1970'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1970 AND T1.Region = 'East Asia & Pacific' AND T2.Value > 2000000 AND t2.indicatorname = 'Urban population'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In 1960, what is largest population for country with upper middle income?",
        "question_ar": "",
        "evidence_en": "in 1960 refers to year = '1960'; the largest population refers to max(value where IndicatorName = 'Population, total'); country with upper middle income refers to incomegroup = 'Upper middle income'",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Population, total'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries uses the 1968 System of National Accounts methodology?",
        "question_ar": "",
        "evidence_en": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What upper middle income country under East Asia & Pacific region which covers the topic about Social Protection & Labor: Migration\n? Indicate the short name of the said country.",
        "question_ar": "",
        "evidence_en": "upper middle income country refers to incomegroup = 'Upper middle income'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.IncomeGroup = 'Upper middle income' AND T1.Region = 'East Asia & Pacific' AND T3.Topic = 'Social Protection & Labor: Migration'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Name the country in which the topic is about Poverty: Shared Prosperity. Indicate the long name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Topic = 'Poverty: Shared prosperity'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What country has the latest trade data with a series code of \"SP.DYN.CDRT.IN\n\"? List the table name of the country.",
        "question_ar": "",
        "evidence_en": "the latest trade data refers to LatestTradeData = '2013'; with a series code of \"SP.DYN.CDRT.IN\n\" refers to indicatorcode = 'SP.DYN.CDRT.IN'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorCode = 'SP.DYN.CDRT.IN'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What country in the region of Sub-Saharan Africa has a series code of \"SP.DYN.AMRT.FE\"? Indicate the long name of the country",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.LongName FROM SeriesNotes AS T1 INNER JOIN CountryNotes AS T2 ON T1.SeriesCode = T2.Seriescode INNER JOIN Country AS T3 ON T2.Countrycode = T3.CountryCode WHERE T3.Region = 'Sub-Saharan Africa' AND T1.SeriesCode = 'SP.DYN.AMRT.FE'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries are using the same type of currency? Please list the short names of any 3 countries.",
        "question_ar": "",
        "evidence_en": "any 3 countries refers to count(shortname)>3",
        "evidence_ar": "",
        "SQL": "SELECT ShortName FROM country WHERE currencyunit = 'U.S. dollar' LIMIT 3"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What South Asian nations have low incomes? Please include the entire names of the nations in your answer.",
        "question_ar": "",
        "evidence_en": "South Asian nations refers to region = 'South Asia'; have low incomes refers to incomegroup = 'Low income'; the entire names refers to longname",
        "evidence_ar": "",
        "SQL": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please provide full name of any two countries using special trade system.",
        "question_ar": "",
        "evidence_en": "full name refers to longname; using special trade system refers to systemoftrade = 'Special trade system'",
        "evidence_ar": "",
        "SQL": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country has had the highest proportion of CO2 emissions from transport?",
        "question_ar": "",
        "evidence_en": "the highest proportion of CO2 emissions from transport refers to max(value where indicatorname = 'CO2 emissions from transport (% of total fuel combustion)')",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country has the lowest percentage of arable land?",
        "question_ar": "",
        "evidence_en": "which country refers to countryname; the lowest percentage of arable land refers to min(value where indicatorname = 'Arable land (% of land area)')",
        "evidence_ar": "",
        "SQL": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'Arable land (% of land area)' ORDER BY Value DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the subjects of series that have a restricted type of license?",
        "question_ar": "",
        "evidence_en": "subjects refers to topic; a restricted type of license refers to  licenseType = 'Restricted'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Topic FROM Series WHERE LicenseType = 'Restricted'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which countries in the upper middle income category still have unfinished external debt reporting? Please provide the country codes in your answer.",
        "question_ar": "",
        "evidence_en": "in the upper middle income category refers to incomegroup = 'Upper middle income'; still have unfinished external debt reporting refers to ExternalDebtReportingStatus = 'Preliminary'",
        "evidence_ar": "",
        "SQL": "SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt?",
        "question_ar": "",
        "evidence_en": "percentage = divide(count(countrycode where  ExternalDebtReportingStatus = 'Actual' ), count(countrycode))*100%; in the Middle East and North Africa refers to region = 'Middle East & North Africa'; have finished reporting on their real external debt refers to ExternalDebtReportingStatus = 'Actual'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE region = 'Middle East & North Africa'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which form of government has more countries that have completed the actual external debt reporting between the two types of government accounting concepts, budgetary central government vs. consolidated central government?",
        "question_ar": "",
        "evidence_en": "have completed the actual external debt reporting refers to ExternalDebtReportingStatus = 'Actual'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN GovernmentAccountingConcept = 'Budgetary central government' THEN 1 ELSE 0 END), SUM(CASE WHEN GovernmentAccountingConcept = 'Consolidated central government' THEN 1 ELSE 0 END) central_nums FROM country WHERE ExternalDebtReportingStatus = 'Actual'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many nations in East Asia and the Pacific have completed their external debt reporting on time?",
        "question_ar": "",
        "evidence_en": "in East Asia and the Pacific refers to region = 'East Asia & Pacific'; have completed their external debt reporting on time refers to ExternalDebtReportingStatus = 'Estimate'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode)  FROM Country WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What proportion of Sub-Saharan Africa's countries have lower middle incomes?",
        "question_ar": "",
        "evidence_en": "proportion = divide(count(countrycode where incomegroup = 'Low income'), count(countrycode))*100%; Sub-Saharan Africa's countries refers to region = 'Sub-Saharan Africa'; have lower middle incomes refers to incomegroup = 'Low income'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN IncomeGroup = 'Lower middle income' THEN 1 ELSE 0 END) * 100.0 / COUNT(CountryCode) persentage FROM Country WHERE Region = 'Sub-Saharan Africa'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "From 1961 to 1980, what was the highest percentage of land used for agriculture in the Republic of Benin?",
        "question_ar": "",
        "evidence_en": "from 1961 to 1980 refers to year between '1961' and '1980'; the highest percentage of land used for agriculture refers to max(value where IndicatorName = 'Agricultural land (% of land area)'); in the Republic of Benin refers to longname = 'Republic of Benin'",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.Value) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year >= 1961 AND T1.Year < 1981 AND T1.IndicatorName LIKE 'Agricultural land (% of land area)' AND T2.LongName = 'Republic of Benin'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the full names of any three countries that have their series code with a description of UN Energy Statistics (2014).",
        "question_ar": "",
        "evidence_en": "full name refers to longname",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.LongName FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Description = 'Sources: UN Energy Statistics (2014)' LIMIT 3"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What was the deposit interest rate in the Commonwealth of Australia in 1979 in percentage?",
        "question_ar": "",
        "evidence_en": "deposit interest rate refers to value where IndicatorName = 'Deposit interest rate (%)'; in the Commonwealth of Australia refers to  LongName = 'Commonwealth of Australia'; in 1979 refers to Year = '1979'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.LongName = 'Commonwealth of Australia' AND T1.IndicatorName = 'Deposit interest rate (%)' AND T1.Year = 1979"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the series code for Germany and what is its description?",
        "question_ar": "",
        "evidence_en": "Germany refers to shortname = 'Germany'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Seriescode, T1.Description FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.ShortName = 'Germany'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please provide the subject of series of Austria.",
        "question_ar": "",
        "evidence_en": "subject refers to topic; Austria refers to shortname = 'Austria'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Topic FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode INNER JOIN Series AS T3 ON T1.Seriescode = T3.SeriesCode WHERE T2.ShortName = 'Austria'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the subject of the series SP.DYN.AMRT.MA and what does it pertain to?",
        "question_ar": "",
        "evidence_en": "subject refers to topic; pertain to refers to Description",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Topic, T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.AMRT.MA'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries are having their country's footnotes described as \"unspecified\"? Please provide the full names of any three of those countries.",
        "question_ar": "",
        "evidence_en": "described as \"unspecified\" refers to Description = 'Not specified'; full names refers to LongName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.CountryCode)  FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' UNION SELECT T1.LongName FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' LIMIT 4"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which nation completed its external debt reporting in 1980 and had a Land under cereal production value of 3018500?",
        "question_ar": "",
        "evidence_en": "completed its external debt reporting refers to ExternalDebtReportingStatus = 'Actual'; in 1980 refers to year = 1980; Land under cereal production value of 3018500 refers to value = 3018500",
        "evidence_ar": "",
        "SQL": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What portion of the nations in Latin America and the Caribbean had more than 50% of their land used for agriculture in 1961?",
        "question_ar": "",
        "evidence_en": "portion = divide(count(CountryName where Year = '1961' and Value>50), count(CountryName))*100%; nations in Latin America and the Caribbean refers to region = 'Latin America & Caribbean';  more than 50% of their land used for agriculture refers to value where indicatorname = 'Agricultural land (% of land area)'>50; in 1961 refers to Year = '1961'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.CountryCode) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1961 AND T2.Region = 'Latin America & Caribbean' AND indicatorname = 'Agricultural land (% of land area)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the full names of the countries in South Asia that belongs to the low income group?",
        "question_ar": "",
        "evidence_en": "full name refers to longname; the countries in South Asia refer to region = 'South Asia'; belongs to the low income group refers to incomegroup = 'Low income'",
        "evidence_ar": "",
        "SQL": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the indicator code for Mobile Cellular Subscriptions of Brazil?",
        "question_ar": "",
        "evidence_en": "Mobile Cellular Subscriptions refers to indicatorname = 'Mobile cellular subscriptions'; Brazil refers to CountryName = 'Brazil'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries in Europe & Central Asia uses Danish krone as its currency? List the full names of those coutnries.",
        "question_ar": "",
        "evidence_en": "countries in Europe & Central Asia refer to region = 'Europe & Central Asia'; uses Danish krone refers to currencyunit = 'Danish krone'; full name refers to longname",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the name of the country with the highest percentage of rural population in the overall total population? Indicate the rural population percentage of total population.",
        "question_ar": "",
        "evidence_en": "the highest percentage of rural population in the overall total population refers to max(value where indicatorname = 'Rural population (% of total population)')",
        "evidence_ar": "",
        "SQL": "SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Rural population (% of total population)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries have a latest population census in 2011? Indicate their full names.",
        "question_ar": "",
        "evidence_en": "have a latest population census in 2011 refers to LatestPopulationCensus = '2011'; full name refers to LongName",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(LongName) FROM country WHERE LatestPopulationCensus = '2011' UNION ALL SELECT LongName FROM country WHERE LatestPopulationCensus = '2011'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the agricultural land area in sq. km of Italy in 1968?",
        "question_ar": "",
        "evidence_en": "agricultural land area in sq. km refers value where indicatorname = 'Agricultural land (sq. km)'; Italy refers to countryname = 'Italy'; in 1968 refers to year = '1968'",
        "evidence_ar": "",
        "SQL": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In Sub-Saharan Africa, how many female out-of-school children of primary school age are there in the country with the higest number of female out-of-school children of primary school age? Indicate the year of when it was recorded.",
        "question_ar": "",
        "evidence_en": "in Sub-Saharan Africa refers to Region = 'Sub-Saharan Africa'; the higest number of female out-of-school children of primary school age refers to max(value where IndicatorName = 'Out-of-school children of primary school age, female (number)')",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.value), T1.year FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Sub-Saharan Africa' AND T1.IndicatorName = 'Out-of-school children of primary school age, female (number)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan?",
        "question_ar": "",
        "evidence_en": "number of infant deaths refers to IndicatorName = 'Number of infant deaths'; in year 1965 refers to Year = '1965'; full name is Islamic State of Afghanistan refers to LongName = 'Islamic State of Afghanistan'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Seriescode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Number of infant deaths' AND T1.LongName = 'Islamic State of Afghanistan' AND T2.Year = 1965"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Among the countries who uses the 1968 System of National Accounts methodology, how many are in the Middle East & North Africa? Name the country with the highest CO2 emissions from solid fuel consumption in kiloton.",
        "question_ar": "",
        "evidence_en": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'; in the Middle East & North Africa refers to Region = 'Middle East & North Africa'; the highest CO2 emissions from solid fuel consumption in kiloton refers to max(value where IndicatorName = 'CO2 emissions from solid fuel consumption (kt)')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.CountryCode) FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' UNION SELECT * FROM ( SELECT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' GROUP BY T1.CountryName ORDER BY SUM(T1.value) DESC LIMIT 1 )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What are the indicator codes for the Republic of Albania in the year 1960?",
        "question_ar": "",
        "evidence_en": "the Republic of Albania refers to LongName = 'Republic of Albania'; in the year 1960 refers to Year = '1960'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.IndicatorCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1960 AND T2.LongName = 'Republic of Albania'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966?",
        "question_ar": "",
        "evidence_en": "cereal production of 6140000 metric tons refers value where IndicatorName = 'Cereal production (metric tons)'> 6140000; the year 1966 refers to Year = '1966'",
        "evidence_ar": "",
        "SQL": "SELECT T1.LendingCategory FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Value = 6140000 AND T2.Year = 1966"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country has the highest population in largest city for 19 consecutive years starting from 1960? Indicate the region to which the country is located.",
        "question_ar": "",
        "evidence_en": "the highest population in largest city refers to max(value where IndicatorName = 'Population in largest city'); for 19 consecutive years starting from 1960 refers to Year BETWEEN'1960' and '1979'",
        "evidence_ar": "",
        "SQL": "SELECT T2.CountryCode, T2.Region FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Population in largest city' AND T1.Year >= 1960 AND T1.Year < 1980 ORDER BY T2.Region DESC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "From 1975 to 1980, how much is the total amount CO2 emmission in kiloton of the the world? Indicate which year the world recorded its highest CO2 emmissions.",
        "question_ar": "",
        "evidence_en": "from 1975 to 1980 refers to Year between 1975 and 1980; the total amount CO2 emmission in kiloton of the the world refers to sum(value where IndicatorName like 'CO2%'); the world recorded its highest CO2 emmissions refers to max(value where IndicatorName like 'CO2%')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Value), T1.Year FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year >= 1975 AND T1.Year < 1981 AND T1.CountryCode = 'WLD' AND T2.SpecialNotes = 'World aggregate.'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country has the smallest land area in square kilometers for 19 consecutive years starting from year 1961? Indicate how much is its land area in square kilometers in those years and the income group of the country.",
        "question_ar": "",
        "evidence_en": "the smallest land area in square kilometers refers to min(value where IndicatorName like 'Land area (sq. km)'); for 19 consecutive years starting from year 1961 refers to Year between 1961 and 1979",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryName, SUM(T1.Value) area, T2.IncomeGroup FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Land area (sq. km)' AND T1.Year >= 1961 AND T1.Year < 1980 GROUP BY T1.CountryCode ORDER BY SUM(T1.Value) ASC LIMIT 1"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade.",
        "question_ar": "",
        "evidence_en": "average number refers to avg(value); passengers carried via air transport per year refers to value where IndicatorName = 'Air transport, passengers carried'; by Bulgaria refers to CountryName = 'Bulgaria'; between 1970 to 1980 refers to Year between 1970 and 1980",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What's the lastest household survey in Angola and when did it take place?",
        "question_ar": "",
        "evidence_en": "in Angola refers to ShortName = 'Angola'; when refers to PppSurveyYear",
        "evidence_ar": "",
        "SQL": "SELECT LatestHouseholdSurvey, PppSurveyYear FROM Country WHERE ShortName = 'Angola'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries in the North America Region has completed the vital registration?",
        "question_ar": "",
        "evidence_en": "has completed the vital registration refers to VitalRegistrationComplete = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CountryCode) FROM Country WHERE VitalRegistrationComplete = 'Yes' AND Region = 'North America'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "In which years does the country whose Alpha2Code is 1A have a result of the indicator Adolescent fertility rate?",
        "question_ar": "",
        "evidence_en": "indicator Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.Year FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What's the long name of the country that got 3000000 on the indicator Arms exports in 1960?",
        "question_ar": "",
        "evidence_en": "long name refers to CountryName; got 3000000 on the indicator Arms exports refers to value where IndicatorName = 'Arms exports (SIPRI trend indicator values)' = 3000000; in 1960 refers to Year = 1960",
        "evidence_ar": "",
        "SQL": "SELECT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Arms exports (SIPRI trend indicator values)' AND T2.Year = 1960 AND T2.Value = 3000000"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the Alpha2Codes of all the countries that have an indicator on Rural population in 1960.",
        "question_ar": "",
        "evidence_en": "in 1960 refers to year = '1960'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Alpha2Code FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Rural population' AND T2.Year = 1960"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which country's indicator for Adolescent fertility rate is the highest in 1960, please give its special notes.",
        "question_ar": "",
        "evidence_en": "indicator for Adolescent fertility rate is the highest refers to max(value where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'); in 1960 refers to year = '1960'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CountryCode, T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1960 ORDER BY Value DESC LIMIT 1 )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "By how much did the indicator on Adolescent fertility rate increase from 1960 to 1961 in the country whose Alpha2Code is 1A?",
        "question_ar": "",
        "evidence_en": "by how much = subtract(sum(value where Year = 1961), sum(value where Year = 1960)); indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 ) DIFF"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the note for Australia on the indicator SP.ADO.TFRT?",
        "question_ar": "",
        "evidence_en": "note refers to Description; for Australia refers to ShortName = 'Australia'; indicator SP.ADO.TFRT refers to Seriescode = 'SP.ADO.TFRT'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.ADO.TFRT' AND T1.ShortName = 'Australia'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Please list the notes for Aruba on the indicators under the topic of Environment: Energy production & use.",
        "question_ar": "",
        "evidence_en": "note refers to Description; for Aruba refers to ShortName = 'Aruba'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.ShortName = 'Aruba' AND T3.Topic = 'Environment: Energy production & use'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "Which countries have notes on the indicator BX.KLT.DINV.CD.WD?",
        "question_ar": "",
        "evidence_en": "indicator BX.KLT.DINV.CD.WD refers to Seriescode = 'BX.KLT.DINV.CD.WD'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "For the country that has notes on the indicator Inflation, consumer prices, in which region is it in?",
        "question_ar": "",
        "evidence_en": "indicator Inflation, consumer prices refers to IndicatorName = 'Inflation, consumer prices (annual %)'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Region FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.IndicatorName = 'Inflation, consumer prices (annual %)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "How many countries have notes on the indicator Stocks traded, turnover ratio of domestic shares?",
        "question_ar": "",
        "evidence_en": "indicator Stocks traded, turnover ratio of domestic shares refers to IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What's the agregation method for the indicator whose value is 133 in 1960 for the Arab World?",
        "question_ar": "",
        "evidence_en": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'",
        "evidence_ar": "",
        "SQL": "SELECT T2.AggregationMethod FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T3.ShortName = 'Arab World' AND T1.Value = 133 AND T1.Year = 1960"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What's the value of the indicator whose long definition is \"Adolescent fertility rate is the number of births per 1,000 women ages 15-19.\" for the Arab World in 1960?",
        "question_ar": "",
        "evidence_en": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND T3.ShortName = 'Arab World' AND T1.Year = 1960"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A?",
        "question_ar": "",
        "evidence_en": "the percentage of increase from 1960 to 1961 = divide(subtract(sum(value where Year = 1961), sum(Value where Year = 1960)), sum(Value where Year = 1960)) *100%; indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT (( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )) * 1.0 / ( SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )"
    },
    {
        "db_id": "world_development_indicators",
        "question_en": "What is the average value of Adolescent fertility rate in the country whose Alpha2Code is 1A?",
        "question_ar": "",
        "evidence_en": "average value = AVG(Value) where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Value) AS REAL) * 100 / COUNT(T2.Year) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"
    },
    {
        "db_id": "movielens",
        "question_en": "List the different director IDs of the movies whose user rating is more than 4.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the users who gave a rating of 5, how many of them are male?",
        "question_ar": "",
        "evidence_en": "Male users mean that u_gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'"
    },
    {
        "db_id": "movielens",
        "question_en": "List the genres of the movies which actor id 851 is the star.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851"
    },
    {
        "db_id": "movielens",
        "question_en": "How many movies from the USA which user rating is less than 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the movies from France, how many of them are drama?",
        "question_ar": "",
        "evidence_en": "France a one country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the average occupation of users whose ratings are not more than 2 ?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2"
    },
    {
        "db_id": "movielens",
        "question_en": "List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating.",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the average number of casts of movies that are from the USA?",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'"
    },
    {
        "db_id": "movielens",
        "question_en": "List the top 5 movies from other countries which to language is not in English.",
        "question_ar": "",
        "evidence_en": "not in English can be represented by isEnglish = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the best actors, how many of them got a rating of 5 to the movies they starred?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the average rating of the newest movies from France?",
        "question_ar": "",
        "evidence_en": "France is a country; year = 4 represents the newest date.",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the most rated UK movies, how many of them has running time of less than 2?",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T2.runningtime < 2 AND T1.rating = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "List the id of male users who gave ratings of less than 3 to French movies with running time of 2.",
        "question_ar": "",
        "evidence_en": "Male users mean that u_gender = 'M'; France is a country",
        "evidence_ar": "",
        "SQL": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred?",
        "question_ar": "",
        "evidence_en": "Worst actresses means a_quality is the least; The least a_quality is 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN users AS T4 ON T1.userid = T4.userid WHERE T3.a_quality = 0 AND T1.rating > 3 AND T4.u_gender = 'F'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the ID of audiences that gave the most rating of 5?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What are the ID of actors that had worked together with director 22397? What was the genre of that movie?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.actorid, T4.genre FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN movies2directors AS T4 ON T1.movieid = T4.movieid WHERE T4.directorid = 22397"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list down the ID of actors and directors in action movies.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.actorid, T1.directorid FROM movies2directors AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Action'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many female actors acted in the movies of year 4?",
        "question_ar": "",
        "evidence_en": "Female actors mean that a_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4"
    },
    {
        "db_id": "movielens",
        "question_en": "What are the ID of actors with quality rating of 3 acted in English USA movies?",
        "question_ar": "",
        "evidence_en": "English movies refers to isEnglish = 'T'; USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 3 AND T1.country = 'USA' AND T1.isEnglish = 'T'"
    },
    {
        "db_id": "movielens",
        "question_en": "List down the ID of movies with running time of 3 and average revenue of 1?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T1.runningtime = 3 AND T3.avg_revenue = 1"
    },
    {
        "db_id": "movielens",
        "question_en": "UK produced what genre of movies?",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the favourite movie genre for audiences of age 18?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT T1.genre FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T3.age = 18 GROUP BY T1.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the ID of actors that acted in the movies most viewed by audience with occupation 5?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT T3.actorid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.occupation = 5 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Movies with rating 3 are viewed by audiences in which distinct age group?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3"
    },
    {
        "db_id": "movielens",
        "question_en": "Action movies are mostly directed by directors of which country?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list down ID of movies acted by top 5 actors based on actor rating.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.movieid FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid GROUP BY T2.actorid ORDER BY AVG(T1.a_quality) DESC LIMIT 5"
    },
    {
        "db_id": "movielens",
        "question_en": "List down 5 non English adventure movies from UK?",
        "question_ar": "",
        "evidence_en": "not English refers to isEnglish = 'F'; UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the percentage of female audiences who viewed movies with rating 2?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.u_gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 2"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the difference of female and male audiences in number who viewed horror movies?",
        "question_ar": "",
        "evidence_en": "The audience and users are the same meaning; Difference of female and male audiences = count(female users) - count(male users); Female users refers to u_gender = 'F'; Male users refers to u_gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.u_gender = 'F', 1, 0)) - SUM(IIF(T2.u_gender = 'M', 1, 0)) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid INNER JOIN movies2directors AS T3 ON T3.movieid = T1.movieid WHERE T3.genre = 'horror'"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list the genre of the movies that are the newest and is in English.",
        "question_ar": "",
        "evidence_en": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; In English means isEnglish = T",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 4 AND T1.isEnglish = 'T'"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the action movies from the USA, how many of them are not in English?",
        "question_ar": "",
        "evidence_en": "USA is a country; not in English can be represented by isEnglish = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T1.isEnglish = 'F' AND T2.genre = 'Action'"
    },
    {
        "db_id": "movielens",
        "question_en": "For the male users no older than 18, how many times have they given the highest rating?",
        "question_ar": "",
        "evidence_en": "Male users refers to u_gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age < 18 AND T2.u_gender = 'M'"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list the ID of the movie that has been mostly rated by female users.",
        "question_ar": "",
        "evidence_en": "Female users refers to u_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.u_gender = 'F' GROUP BY T1.movieid ORDER BY COUNT(T2.userid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Among divergent movies that got the highest rating, how many of them are from the UK?",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.rating = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list different IDs of movies that are the newest and have gotten the lowest rating.",
        "question_ar": "",
        "evidence_en": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1"
    },
    {
        "db_id": "movielens",
        "question_en": "For the movies in English that are the oldest, how many of them have the lowest rating?",
        "question_ar": "",
        "evidence_en": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1；isEnglish = 'T' means English movie",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many different female users have rated movies from France?",
        "question_ar": "",
        "evidence_en": "France is a country; Female users mean that u_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T3.country = 'France'"
    },
    {
        "db_id": "movielens",
        "question_en": "For different directors who direct well, how many of them have directed an action film?",
        "question_ar": "",
        "evidence_en": "direct well means the quality of directing is good, which means d_quality = 4.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.directorid) FROM movies2directors AS T2 INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T2.genre = 'Action' AND T3.d_quality = 4"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4"
    },
    {
        "db_id": "movielens",
        "question_en": "How many distinct movies in English stars a male actor who acts the best?",
        "question_ar": "",
        "evidence_en": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list the country of the movie that stars an actress who acts the worse.",
        "question_ar": "",
        "evidence_en": "a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the highest average rating for action movies made in the USA?",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the films directed by directors who direct the best, how many of them have an average rating of over 3.5?",
        "question_ar": "",
        "evidence_en": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT DISTINCT T2.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.d_quality = 5 GROUP BY T2.movieid HAVING AVG(T3.rating) > 3.5 ) AS T1"
    },
    {
        "db_id": "movielens",
        "question_en": "Which adventure movie has the highest average rating?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Adventure' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "How many of the users who rate the movie with the id '2462959' are female?",
        "question_ar": "",
        "evidence_en": "Female users mean that u_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.userid = 2462959 AND T1.u_gender = 'F'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the most distinct rated movie with a running time of 0?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )"
    },
    {
        "db_id": "movielens",
        "question_en": "List the ids and ratings of each actors played in the movie with the id 1722327?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.actorid, T1.a_quality FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1722327"
    },
    {
        "db_id": "movielens",
        "question_en": "Which directors with the best quality directed the most films?",
        "question_ar": "",
        "evidence_en": "d_quality = 5 refers to direct the best",
        "evidence_ar": "",
        "SQL": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 GROUP BY T1.directorid ORDER BY COUNT(T2.movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "How many drama movie with the rating of 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.movieid) FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T2.genre = 'drama' AND T1.rating = 3"
    },
    {
        "db_id": "movielens",
        "question_en": "How many of the movies rated 5 are rated by a user between the ages of 25 and 35?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list all horror films that have a rating of 1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 1 AND T2.genre = 'Horror'"
    },
    {
        "db_id": "movielens",
        "question_en": "List the IDs of all the directors who worked on French films.",
        "question_ar": "",
        "evidence_en": "France is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.directorid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France'"
    },
    {
        "db_id": "movielens",
        "question_en": "List all of the user ids and ages who rated movies with the id 1695219?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.userid, T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.movieid = 1695219"
    },
    {
        "db_id": "movielens",
        "question_en": "Which genre contains the greatest number of non-English films?",
        "question_ar": "",
        "evidence_en": "isEnglish = 'F' means non-English",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' GROUP BY T2.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "List the cast and the director of the movie with the id 1949144.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3?",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.a_quality >= 3, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the proportion of action movies directors who are called 'box office success paradox'?",
        "question_ar": "",
        "evidence_en": "'box office success paradox' means average revenue exceeds their quality; The proportion can be computed by [(avg_revenue > d_quality) / ()] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list the actor IDs whose movies have the newest published date.",
        "question_ar": "",
        "evidence_en": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date",
        "evidence_ar": "",
        "SQL": "SELECT T1.actorid FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4"
    },
    {
        "db_id": "movielens",
        "question_en": "Who are cast members in an English movie which has a running time equal to 2? Please list their IDs.",
        "question_ar": "",
        "evidence_en": "isEnglish = 'T' means English movie",
        "evidence_ar": "",
        "SQL": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 2 AND T1.isEnglish = 'T'"
    },
    {
        "db_id": "movielens",
        "question_en": "Which actor has acted in at least 2 French films? Please list their IDs.",
        "question_ar": "",
        "evidence_en": "France is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2"
    },
    {
        "db_id": "movielens",
        "question_en": "How many American movies have cast number more than 1?",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.cast_num > 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list movie IDs which has the oldest publication date and the cast numbers are zero.",
        "question_ar": "",
        "evidence_en": "Year contains relative value, higher year value refers to newer date; Year = 1 refer to oldest date",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.cast_num = 0"
    },
    {
        "db_id": "movielens",
        "question_en": "How many actors have acted in both US or UK films?",
        "question_ar": "",
        "evidence_en": "US and UK are 2 countries",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actorid) FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' OR T2.country = 'UK'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many directors with average revenue of 4 have made either action or adventure films?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')"
    },
    {
        "db_id": "movielens",
        "question_en": "Please list director IDs who have the quality of at least 3 and have made at least 2 different genres of movies.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality >= 3 GROUP BY T1.directorid HAVING COUNT(T2.movieid) >= 2"
    },
    {
        "db_id": "movielens",
        "question_en": "How many American comedies are there?",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.genre = 'comedy'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many latest released dramas and action movies?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')"
    },
    {
        "db_id": "movielens",
        "question_en": "What horror movies have a running time of at least 2? Please list movie IDs.",
        "question_ar": "",
        "evidence_en": "Higher value of running time means running time is longer",
        "evidence_ar": "",
        "SQL": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runningtime >= 2 AND T1.genre = 'Horror'"
    },
    {
        "db_id": "movielens",
        "question_en": "Please calculate negative critical reception of American movies",
        "question_ar": "",
        "evidence_en": "'negative critical reception' refers to percentage of movies with a rating of 1, which = [count(rating = 1) / count(all movies)] * 100% ",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.rating = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the disparate number of the comedy films that got the 1 rating?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.movieid) FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T2.rating = 1 AND T1.genre = 'comedy'"
    },
    {
        "db_id": "movielens",
        "question_en": "What's different average revenue status for director who directed the movie that got the most 1 ratings?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.avg_revenue FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "How many French movies got the highest ranking?",
        "question_ar": "",
        "evidence_en": "France is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movieid) FROM movies WHERE country = 'France' AND movieid IN ( SELECT movieid FROM u2base WHERE rating = ( SELECT MAX(rating) FROM u2base ) )"
    },
    {
        "db_id": "movielens",
        "question_en": "List the movie that has been rated most by 25 years old users.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "How many separate 35 year-old uesers have rated the movie from UK?",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T1.country = 'UK' AND T3.age = 35"
    },
    {
        "db_id": "movielens",
        "question_en": "List the user ids and ages who gave the rate 2 to the movie No. 2409051.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2"
    },
    {
        "db_id": "movielens",
        "question_en": "Please give the ids of the oldest films that got the most ratings.",
        "question_ar": "",
        "evidence_en": "Films and movies share the same meaning; oldest film refers to the movie with year = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5 AND T2.year = 1"
    },
    {
        "db_id": "movielens",
        "question_en": "Which different movies from France got the least ratings?",
        "question_ar": "",
        "evidence_en": "France is a country",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1"
    },
    {
        "db_id": "movielens",
        "question_en": "How many female actors have been played a role in any of French or USA movies?",
        "question_ar": "",
        "evidence_en": "French and USA are two countries; Female actors mean that a_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')"
    },
    {
        "db_id": "movielens",
        "question_en": "How many different actors have played a role in the highest rating movie?",
        "question_ar": "",
        "evidence_en": "highest rating of a movie is 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.actorid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "Which Crime film got the lowest average rating?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.movieid FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T3.genre = 'Crime' GROUP BY T2.movieid ORDER BY AVG(T2.rating) LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What's the ratio of gender in actors to actress in all the UK movies?",
        "question_ar": "",
        "evidence_en": "UK is a country; Male actors mean that a_gender = 'M'; Female actors mean that a_gender = 'F'; ratio; ratio of gender in actors = count(a_gender = 'M') / a_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(T3.a_gender = 'F', 1, 0)) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many 35-year-old female users gave the movie 1711133 a rating of 3?",
        "question_ar": "",
        "evidence_en": "Female users mean that u_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many users have rated 1 each for the UK's second newest movies with a running time of 2?",
        "question_ar": "",
        "evidence_en": "second newest movies refers to year = 2 since year in this database is a relative value, less is the newer",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2"
    },
    {
        "db_id": "movielens",
        "question_en": "How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'"
    },
    {
        "db_id": "movielens",
        "question_en": "Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580.",
        "question_ar": "",
        "evidence_en": "Female actors mean that a_gender = 'F'; percentage can be computed by [cast_num = 2 AND a_quality = 2 in female) / (all female actors)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'"
    },
    {
        "db_id": "movielens",
        "question_en": "How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form.",
        "question_ar": "",
        "evidence_en": "The worst actors means a_quality = 0; Men and male share the same meaning; men actors refers to a_gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(a_gender = 'F', 1, 0)) FROM actors WHERE a_quality = 0"
    },
    {
        "db_id": "movielens",
        "question_en": "Which actor has appeared in the most films?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT actorid FROM movies2actors GROUP BY actorid ORDER BY COUNT(movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the most popular genre of film directed by directors?",
        "question_ar": "",
        "evidence_en": "Most popular genre indicates that the genre has the most number of movies",
        "evidence_ar": "",
        "SQL": "SELECT genre FROM movies2directors GROUP BY genre ORDER BY COUNT(movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What are the most common film genres made by the worst directors?",
        "question_ar": "",
        "evidence_en": "d_quality = 5 refers to the best directors, d_quality = 0 refers to the worst directors",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 0 GROUP BY T2.genre ORDER BY COUNT(T2.movieid) DESC LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What non-English American film/s has received the lowest user ratings? Mention the movie's I.D.",
        "question_ar": "",
        "evidence_en": "USA is a country; non-English means isEnglish = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T2.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' AND T1.country = 'USA' ORDER BY T2.rating LIMIT 1"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the total average movie directed by the directors who's quality and revenue is 4?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.d_quality = 4 AND T1.avg_revenue = 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid"
    },
    {
        "db_id": "movielens",
        "question_en": "Which movies have received the greatest ratings from female users whose occupations fall within the category of 3?",
        "question_ar": "",
        "evidence_en": "Female users mean that u_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T1.occupation = 3 AND T2.rating = 5"
    },
    {
        "db_id": "movielens",
        "question_en": "How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?",
        "question_ar": "",
        "evidence_en": "female actresses mean that a_gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.a_gender = 'F', 1, 0)) , T3.country, T3.runningtime FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T2.movieid = 2312852 GROUP BY T3.country, T3.runningtime"
    },
    {
        "db_id": "movielens",
        "question_en": "How many horror movies were made by the worst directors?",
        "question_ar": "",
        "evidence_en": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0"
    },
    {
        "db_id": "movielens",
        "question_en": "What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one.",
        "question_ar": "",
        "evidence_en": "isEnglish = 'T' means films in English; Film and movie share the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime <= 2 AND T1.isEnglish = 'T' AND T1.country = 'other'"
    },
    {
        "db_id": "movielens",
        "question_en": "Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names.",
        "question_ar": "",
        "evidence_en": "UK is a country",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN u2base AS T3 ON T1.movieid = T3.movieid INNER JOIN users AS T4 ON T3.userid = T4.userid WHERE T1.country = 'UK' AND T2.genre = 'Comedy' AND T1.runningtime = 3 AND T3.rating = 5 AND T4.age BETWEEN 45 AND 50 AND T1.isEnglish = 'T'"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the percentage difference of English and non-English-language crime movies in other countries in year 3?",
        "question_ar": "",
        "evidence_en": "non-English-language refers to isEnglish = 'F'; The percentage difference can be computed by [count(isEnglish = 'T' in movies) - count(isEnglish = 'F' in movies) / (all movies)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.isEnglish = 'T', 1, 0)) - SUM(IIF(T1.isEnglish = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'other' AND T1.year = 3"
    },
    {
        "db_id": "movielens",
        "question_en": "What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre.",
        "question_ar": "",
        "evidence_en": "Female actors mean that a_gender = 'F'; Male actors mean that a_gender = 'M'; a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(a_gender = 'M', 1, 0)) , SUM(IIF(a_gender = 'F', 1, 0)) , CAST(SUM(IIF(a_quality = 5, 1, 0)) AS REAL) * 100 / COUNT(*) , CAST(SUM(IIF(a_quality = 0, 1, 0)) AS REAL) * 100 / COUNT(*), ( SELECT directorid FROM movies2directors WHERE movieid = 1684910 ) , ( SELECT genre FROM movies2directors WHERE movieid = 1684910 ) FROM actors WHERE actorid IN ( SELECT actorid FROM movies2actors WHERE movieid = 1684910 )"
    },
    {
        "db_id": "superstore",
        "question_en": "Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center.",
        "question_ar": "",
        "evidence_en": "names of all the products refers to \"Product Name\"; order CA-2011-112326 refers to \"Order ID\" = 'CA-2011-112326'; in the center refers to Region = 'Central';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-112326'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among all the orders made by Aimee Bixby, what was the longest shipment time?",
        "question_ar": "",
        "evidence_en": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; longest shipment time refers to MAX(SUM(SUTRACT(julianday(\"Ship Date\"), julianday(\"Order Date\")), 1))",
        "evidence_ar": "",
        "SQL": "SELECT MAX(strftime('%J', `Ship Date`) - strftime('%J', `Order Date`)) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed?",
        "question_ar": "",
        "evidence_en": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; the slowest delivery speed refers to \"Ship Mode\" = 'Standard Class';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T2.`Ship Mode` = 'Standard Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders has Aimee Bixby made?",
        "question_ar": "",
        "evidence_en": "Aimee Bixby made refers to \"Customer Name\" = 'Aimee Bixby';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'"
    },
    {
        "db_id": "superstore",
        "question_en": "Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered.",
        "question_ar": "",
        "evidence_en": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; with more than 3 kinds of products ordered refers to count(\"Product ID\") > 3;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Order ID` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' GROUP BY T2.`Product ID` HAVING COUNT(T2.`Product ID`) > 3"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category \"Furniture\"?",
        "question_ar": "",
        "evidence_en": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.Category = 'Furniture' AND T1.`Customer Name` = 'Aimee Bixby'"
    },
    {
        "db_id": "superstore",
        "question_en": "Please list the names of all the products ordered by Aimee Bixby in 2016.",
        "question_ar": "",
        "evidence_en": "ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; ordered n 2016 refers to strftime('%Y', \"Order Date\") = '2016';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND STRFTIME('%Y', T2.`Ship Date`) = '2016'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the total quantity of \"Telescoping Adjustable Floor Lamp\" ordered from central superstores?",
        "question_ar": "",
        "evidence_en": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; from central superstores refers to Region = 'Central';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Telescoping Adjustable Floor Lamp'"
    },
    {
        "db_id": "superstore",
        "question_en": "Please list the names of all the customers who had ordered the product \"Telescoping Adjustable Floor Lamp\".",
        "question_ar": "",
        "evidence_en": "\"Telescoping Adjustable Floor Lamp\" is a product name; names of all the customers refers to \"Customer Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Customer Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the customers who have ordered the product \"Telescoping Adjustable Floor Lamp\", how many of them are consumers?",
        "question_ar": "",
        "evidence_en": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; consumers refers to Segment = 'Consumer';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Customer Name`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND T1.Segment = 'Consumer'"
    },
    {
        "db_id": "superstore",
        "question_en": "What was the quantity of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?",
        "question_ar": "",
        "evidence_en": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Quantity) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952' AND T2.`Order Date` = '2014-09-10'"
    },
    {
        "db_id": "superstore",
        "question_en": "For how many times has Aimee Bixby ordered the product Xerox 1952?",
        "question_ar": "",
        "evidence_en": "Xerox 1952 is a \"Product Name\"; Aimee Bixby ordered refers to \"Customer Name\" = 'Aimee Bixby';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952'"
    }
]