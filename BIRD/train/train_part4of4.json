[
    {
        "db_id": "works_cycles",
        "question_en": "Please give the personal information of the married employee who has the highest pay rate.",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; Highest pay rate refers to Max(Rate)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Demographics FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' ORDER BY T3.Rate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the surname suffix of the employee who works as a store contact and has the longest sick leave hours?",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Suffix FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' ORDER BY T1.SickLeaveHours DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the married employees with the highest pay frequency, how many of them have an eastern name style?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; Eastern name style refers to NameStyle = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' AND T2.NameStyle = 1 AND T3.Rate = ( SELECT Rate FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many active employees do not wish to receive e-mail promotions?",
        "question_ar": "",
        "evidence_en": "active status of employees refers to CurrentFlag = 1; the employee does not wish to receive an e-mail promotion refers to EmailPromotion = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.EmailPromotion = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the credit card IDs of the employees who work as store contact.",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many vacation hours do the male employees have on average?",
        "question_ar": "",
        "evidence_en": "employee refers to PersonType = 'EM'; Male refers to Gender = 'M'; Average = Divide( SUM(VacationHours(PersonType = 'EM'& Gender = 'M')),Count(BusinessEntityID(PersonType = 'EM' & Gender = 'M')));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'EM'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who are married and wish to receive e-mail promotions, how much higher is their highest pay rate from the average pay rate?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; Contact does wish to receive e-mail promotions from Adventure Works refers to EmailPromotion = 1; Average = Divide (Sum(Rate (MaritalStatus = 'M' & EmailPromotion = 1))), Count (BusinessEntityID (MaritalStatus = 'M' & EmailPromotion = 1)); MAX(Rate (MaritalStatus = 'M' & EmailPromotion = 1) - Average;",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "If a married employee has a western name style, what is the probability of him or her working as a store contact?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = 0; store contact refers to PersonType = 'SC'; probability = Divide (Count (BusinessEntityID( PersonType = 'SC' & MaritalStatus = 'M')), Count (BusinessEntityID ( PersonType) & MariatlStatus = 'M'))\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(IIF(T1.PersonType = 'SC', T1.PersonType, NULL)) AS REAL) / COUNT(T1.PersonType) FROM Person AS T1 INNER JOIN Employee AS T2 WHERE T1.PersonType = 'SC' AND T1.NameStyle = 0 AND T2.MaritalStatus = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the active employees with over 10 hours of sick leave, what is the percentage of the employees with over 20 vacation hours?",
        "question_ar": "",
        "evidence_en": "CurrentFlag = 1 refers to the active status of employees; Percentage = Divide (Count (BusinessEntityID (CurrentFlag = 1 & VacationHours >20 & SickLeaveHours > 10)), Count (BusinessEntityID (CurrentFlag = 1 & SickLeaveHours>10))) * 100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Average of the last receipt cost of the products whose average lead time is 60 days.",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(lastreceiptcost), COUNT(OnorderQty)) where AverageLeadTime = 60",
        "evidence_ar": "",
        "SQL": "SELECT SUM(LastReceiptCost) / COUNT(ProductID) FROM ProductVendor WHERE AverageLeadTime = 60"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Average cost of purchase orders made during the first six months of 2012.",
        "question_ar": "",
        "evidence_en": "purchase orders refers to TransactionType = 'P'; first six months of 2012 refers to TransactionDate bewteen '2012-01-01'and '2012-06-30'; average = DIVIDE(ActualCost where TransactionType = 'P', count(TransactionID))\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What percentage of male employees hired throughout the years 2009 are married?",
        "question_ar": "",
        "evidence_en": "male refers to Gender = 'M'; hired throughout the years 2009 refers to Year(HireDate) = 2009; married refers to MaritalStatus = 'M'; percentage = DIVIDE(count(BusinessEntityID(Gender = 'M'& Year(HireDate) = '2009& MaritalStatus = 'M')), count(BusinessEntityID(Gender = 'M'& Year(HireDate) = 2009)))\n\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee WHERE SUBSTR(HireDate, 1, 4) = '2009' AND Gender = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What percentage of people named Mary who wants Receive Email promotions of AdventureWorks and selected partners are store contacts?",
        "question_ar": "",
        "evidence_en": "wants Receive Email promotions of AdventureWorks and selected partners refers to EmailPromotion = 2; store contact refers to PersonType = 'SC'; percentage = DIVIDE(count(BusinessEntityID(FirstName = 'Marry'&EmailPromotion = '2')),count(BusinessEntityID)))\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN EmailPromotion = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN PersonType = 'SC' THEN 1 ELSE 0 END) FROM Person WHERE FirstName = 'Mary'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List, by ProductID, all products whose profit, relative to the standard price, is negative.",
        "question_ar": "",
        "evidence_en": "Profit = SUBTRACT(StandardPrice, LastRecipeCost)\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT ProductID FROM ProductVendor WHERE StandardPrice - LastReceiptCost < 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average total due price of products with approved status?",
        "question_ar": "",
        "evidence_en": "approved refers to Status = 2 , average total due price = AVG( DIVIDE(TotalDue, SUM(Status = 2 )))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the percentage, by number of sales order units, for orders with quantities not greater than 3 and a discount of 0.2?",
        "question_ar": "",
        "evidence_en": "quantities not greater than 3 refers to OrderQty<3; discount of 0.2 refers to UnitPriceDiscount = 0.2; percentage = DIVIDE(count(SalesOrderID(OrderQty<3 & UnitPriceDiscount = 0.2)), count(SalesOrderID))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN OrderQty < 3 AND UnitPriceDiscount = 0.2 THEN 1 ELSE 0 END) AS REAL) / COUNT(SalesOrderID) FROM SalesOrderDetail"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Lists all companies by BusinessEntityID that increased their current year sales by more than 60% over last year's sales and have a bonus greater than 3,000.",
        "question_ar": "",
        "evidence_en": "increased their current year sales by more than 60% refers to\nDIVIDE(SUBTRACT(SalesYTD, SalesLastYear),SalesLastYear)>0.6",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD > SalesLastYear + SalesLastyear * 0.6 AND Bonus > 3000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Add the number of businesses that indicate their home address as their address and those whose address corresponds to the shipping address.",
        "question_ar": "",
        "evidence_en": "their home address as their address refers to AddressTypeID = 2; address corresponds to the shipping address refers to AddressTypeID = 5",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Name = 'Home' THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Name = 'Shipping' THEN 1 ELSE 0 END) FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Identifies the ID number of the customer whose sales order for 32 units had a unit price of 35.",
        "question_ar": "",
        "evidence_en": "sales order for 32 units refers to OrderQty = 32",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID FROM SalesOrderDetail AS T1 INNER JOIN Customer AS T2 WHERE T1.UnitPrice = 35 AND T1.OrderQty = 32"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What company has a Colonial Voice card that expired in March 2005?",
        "question_ar": "",
        "evidence_en": "Colonial Voice card refers to CardType = 'ColonialVoice' ; expired in March 2005 refers to ExpMonth = 3, ExpYear = 2005",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardType = 'ColonialVoice' AND T1.ExpMonth = 3 AND T1.ExpYear = 2005"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the credit rating of the company whose average lead time is 16 days for a standard price of 18.9900 and whose last receipt date is August 27, 2011?",
        "question_ar": "",
        "evidence_en": "last receipt date is August 17, 2011 refers to LastReceiptDate> = '2011-08-17 00:00:00' and LastReceiptDate < '2011-08-18 00:00:00';",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.StandardPrice = 18.9900 AND T1.AverageLeadTime = 16 AND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the number of products if we add the products of the accessories and components categories.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Product WHERE Name LIKE '%accessories %' OR Name LIKE '%components%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the job title of the newest employee in department 12?",
        "question_ar": "",
        "evidence_en": "newest employee refers to MAX(StartDate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.DepartmentID = 12 ORDER BY T2.StartDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the first and last name of all unmarried male Production Supervisors.",
        "question_ar": "",
        "evidence_en": "unmarried refers to MaritalStatus = 'S', male refers to Gender = 'M', Production Supervisors is a job title",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'M' AND T1.JobTitle LIKE 'Production Supervisor%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products are there if we add all those located in the Subassembly category?",
        "question_ar": "",
        "evidence_en": "located in the Subassembly category refers to Name = 'Subassembly'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.LocationID) FROM Location AS T1 INNER JOIN ProductInventory AS T2 USING (LocationID) WHERE T1.Name = 'Subassembly'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Sum the total number of products rejected for having a trim length that is too long.",
        "question_ar": "",
        "evidence_en": "number of product rejected refers to ScrapedQty; trim length that is too long refers to scrap reason where Name = 'Trim length too long'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the total quantity of purchased product that has been prepared by employee number 257 and is in pending shipment status.",
        "question_ar": "",
        "evidence_en": "employee number 257 refers to EmployeeID = 257; pending shipment status refers to Status = 3",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "If we discount the products that do not have any type of offer, how many different products have been sold in an amount greater than 2 units per order?",
        "question_ar": "",
        "evidence_en": "do not have any type of offer refers to Description = 'No Discount'; sold in an amount greater than 2 refers to OrderQty>2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ProductID) FROM SalesOrderDetail AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN SpecialOffer AS T3 ON T2.SpecialOfferID = T3.SpecialOfferID WHERE T1.OrderQty > 2 AND T1.UnitPriceDiscount = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What type of transaction was made with the only yellow product, size 62 and with a minimum inventory stock of 500 units?",
        "question_ar": "",
        "evidence_en": "yellow product refers to Color = 'Yellow'; minimum inventory stock of 500 units refers to SafetyStockLevel = 500",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.TransactionType FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Size = 62 AND T1.Color = 'Yellow' AND T1.SafetyStockLevel = 500"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the subcategory to which the gray product with the lowest safety stock level belongs?",
        "question_ar": "",
        "evidence_en": "gray is color of product",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 USING (ProductSubcategoryID) WHERE T2.Color = 'Grey' GROUP BY T1.Name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the product cost end date with the highest weight in grams?",
        "question_ar": "",
        "evidence_en": "in grams refers to WeightUnitMeasureCode = 'G'",
        "evidence_ar": "",
        "SQL": "SELECT T2.EndDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WeightUnitMeasureCode = 'G' ORDER BY T1.Weight DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the percentage of the total products ordered were not rejected by Drill size?",
        "question_ar": "",
        "evidence_en": "rejected quantity refers to ScrappedQty; rejected by Drill size refers to Name in ('Drill size too small','Drill size too large'); percentage = DIVIDE(SUM(ScrappedQty) where Name in('Drill size too small','Drill size too large'), OrderQty)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the average of the total ordered quantity of products purchased whose shipping method was Cargo Transport 5.",
        "question_ar": "",
        "evidence_en": "shipping method was Cargo Transport 5 refers to Name = 'Cargo Transport 5'; average = DIVIDE(SUM(OrderQty where Name = 'Cargo Transport 5'), COUNT(ShipMethodID))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the name of the rates that apply to the provinces that are in the territory that obtained the greatest increase in sales with respect to the previous year.",
        "question_ar": "",
        "evidence_en": "sales of previous year refers to SalesLastYear; SalesYTD refers to year to date sales; increase in sales = DIVIDE(SUBTRACT(SalesYTD, SalesLastYear), SalesLastYear)*100",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees earn their salaries on a monthly basis at an hourly rate of more than 50?",
        "question_ar": "",
        "evidence_en": "employee refers to BusinessEntityID; salaries on a monthly basis refers to PayFrequency = 1; hourly rate more than 50 refers to Rate > 50",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM EmployeePayHistory WHERE rate * PayFrequency > 50"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the employee of company number 1's full name?",
        "question_ar": "",
        "evidence_en": "company number 1 refers to BusinessEntityId = 1; employee refers to PersonType = 'EM'; full name refers to FirstName + MiddleName + LastName",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, MiddleName, LastName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the supplier number 1492?",
        "question_ar": "",
        "evidence_en": "supplier number 1492 refers to BusinessEntityId = 1492; name of the supplier = name from vendor",
        "evidence_ar": "",
        "SQL": "SELECT NAME FROM Vendor WHERE BusinessEntityID = 1492"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many vendors only consented to move on with the 500 to 15000 piece order in terms of quality?",
        "question_ar": "",
        "evidence_en": "Vendor refers to BusinessEntityId; 500 to 15000 piece order refers to MinOrderQty > 500 and MaxOrderQty < 15000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the departments that are part of the Executive General and Administration group.",
        "question_ar": "",
        "evidence_en": "Department refers to Name where GroupName = 'Executive General and Administration'",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the family names of any employees whose middle names begin with C.",
        "question_ar": "",
        "evidence_en": "family names refers to Last name; employee refers to PersonType = 'EM'; MiddleName starts with 'C'",
        "evidence_ar": "",
        "SQL": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many vendors are having their products ordered with an average delivery time of 25 days?",
        "question_ar": "",
        "evidence_en": "vendors refers to distinct BusinessEntityID; average delivery time of 25 days refers to AverageLeadTime = 25 and onOrderQty > 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list any 3 product numbers with the lowest standard cost.",
        "question_ar": "",
        "evidence_en": "product number = productID",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM ProductCostHistory ORDER BY StandardCost ASC LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many black-colored products are there that cannot be sold?",
        "question_ar": "",
        "evidence_en": "cannot be sold means product is not a salable item which refers to FinishedGoodsFlag = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM Product WHERE FinishedGoodsFlag = 0 AND Color = 'Black'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the top three employees with the most unused sick leave along with their position titles.",
        "question_ar": "",
        "evidence_en": "employees refers to BusinessEntityID; most unused sick leave refers to MAX(SickLeaveHours); position title refers to JobTitle",
        "evidence_ar": "",
        "SQL": "SELECT JobTitle FROM Employee ORDER BY SickLeaveHours DESC LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full address of address number 11906?",
        "question_ar": "",
        "evidence_en": "address number refers to AddressID; full address refers to AddressLine1 + AddressLine2",
        "evidence_ar": "",
        "SQL": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is business number 1580's net profit?",
        "question_ar": "",
        "evidence_en": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)",
        "evidence_ar": "",
        "SQL": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor WHERE BusinessEntityID = 1580"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the sales revenue for item number 740?",
        "question_ar": "",
        "evidence_en": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)",
        "evidence_ar": "",
        "SQL": "SELECT ListPrice - StandardCost FROM Product WHERE ProductID = 740"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many customers gave a product the best possible rating? Please list their names.",
        "question_ar": "",
        "evidence_en": "customers' name refers to ReviewerName; best possible ratings means the highest rating = 5",
        "evidence_ar": "",
        "SQL": "SELECT ReviewerName FROM ProductReview WHERE Rating = 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the company that Adventure Works deal with that have poor credit rating? Please provide their business number.",
        "question_ar": "",
        "evidence_en": "poor credit rating means bad credit; CreditRating = 5; Business number refers to BusinessEntityID",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM Vendor WHERE CreditRating = ( SELECT CreditRating FROM Vendor ORDER BY CreditRating DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the forename and birthdate of person number 18?",
        "question_ar": "",
        "evidence_en": "person number 18 refers to BusinessEntityID = 18; forename refers to FirstName",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What job is person number 322 currently holding?",
        "question_ar": "",
        "evidence_en": "person number 322 refers to PersonID = 18; job is the name of contacttype",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID WHERE T2.BusinessEntityID = 332"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list 3 businesses along with their IDs that use cellphones.",
        "question_ar": "",
        "evidence_en": "business along with their IDs = BusinessEntityID; Cellphones refers to PhoneNumberType.name = ‘cell’",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM PhoneNumberType AS T1 INNER JOIN PersonPhone AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID WHERE T1.Name = 'Cell' LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the currency of Brazil?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Currency AS T1 INNER JOIN CountryRegionCurrency AS T2 ON T1.CurrencyCode = T2.CurrencyCode INNER JOIN CountryRegion AS T3 ON T2.CountryRegionCode = T3.CountryRegionCode WHERE T3.Name = 'Brazil'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many people work in the finance department?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How long does it take for the business to receive the item it has purchased? Who is the vendor for business number 1496?",
        "question_ar": "",
        "evidence_en": "business number refers to BusinessEntityID where BusinessEntityID = 1496; how long does it take refers to AverageLeadTime",
        "evidence_ar": "",
        "SQL": "SELECT T1.AverageLeadTime, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 USING (businessentityid) WHERE T2.BusinessEntityID = 1496 GROUP BY T1.AverageLeadTime, T2.Name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many accounts are in Bothell as opposed to Kenmore? What is the name of the State that comprises these two cities?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(count(city = 'Bothell'), count(city = 'Kenmore'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which chromoly steel product model has AdventureWorks saved in English?",
        "question_ar": "",
        "evidence_en": "Saved in English refers to product description written in English where Culture.name = 'English'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductModelID FROM ProductModelProductDescriptionCulture AS T1 INNER JOIN Culture AS T2 USING (cultureid) INNER JOIN ProductDescription AS T3 USING (productdescriptionid) WHERE T3.Description LIKE 'Chromoly steel%' AND T2.Name = 'English'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the total number of companies with a commission percentage of 0.018 or above, along with each company's assigned geographical location.",
        "question_ar": "",
        "evidence_en": "geographical location refers to group from SalesPerson; ComissionPct refers to commission percentage where ComissionPct > = 0.018;",
        "evidence_ar": "",
        "SQL": "SELECT T1.BusinessEntityID, T2.'Group' FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 USING (territoryid) WHERE T1.CommissionPct >= 0.018"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the various phone number types in the following order, from most to least common among businesses.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which role has the most common contact among businesses?",
        "question_ar": "",
        "evidence_en": "Most common contact among businesses refers to BusinessEntityContact with the most name",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the salespeople's email addresses?",
        "question_ar": "",
        "evidence_en": "Salespeople refers to PersonType = 'SP'",
        "evidence_ar": "",
        "SQL": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which position does Suchitra hold?",
        "question_ar": "",
        "evidence_en": "position refers to JobTitle",
        "evidence_ar": "",
        "SQL": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Suchitra'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees work for AdvertureWorks that is single?",
        "question_ar": "",
        "evidence_en": "Employees refer to PersonType = 'EM'; Single refers to MaritalStatus = 's'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'EM' AND T2.MaritalStatus = 'S'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much do the works data saved in English and Arabic differ from one another?",
        "question_ar": "",
        "evidence_en": "Data saved in English refers to the name of the language where Culture.Name = 'English'; data saved in Arabic refers to the name of the language where Culture.Name = 'Arabic';   SUBTRACT(count(Name = 'English'), count(Name = 'Bothell'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Name = 'English' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID WHERE T1.Name = 'English' OR T1.Name = 'Arabic'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the location of business number 1?",
        "question_ar": "",
        "evidence_en": "Location refers to AddressLine1; business number refers to the BusinessEntityID where BusinessEntityID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 USING (AddressID) WHERE T2.BusinessEntityID = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the businesses along with their numbers that have their accounts located in Duvall.",
        "question_ar": "",
        "evidence_en": "Business along with their numbers refers to the BusinessEntityID; located in Duvall refers to City = 'Duvall'",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Duvall'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What percentage of the AdventureWorks data is in Thai?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(Culture.Name = 'Thai', count(ALL Culture.Name))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CultureID) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What percentage of AdventureWorks employees are men?",
        "question_ar": "",
        "evidence_en": "male refers to Gender = 'M'; employee refers to PersonType = 'EM'; percentage = DIVIDE(COUNT(Gender = 'M'), COUNT(PersonType = 'MY'))*100%;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessentityID = T2.BusinessentityID WHERE T1.PersonType = 'EM'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where is the address 15873 located, in what city and state? Does that city belong to a province where the code exists?",
        "question_ar": "",
        "evidence_en": "Address number 15873 refers to AddressID = '15873'; IsOnlyStateProvinceCode = '0' refers to StateProvinceCode exists; IsOnlyStateProvinceCode = '1' refers to StateProvinceCode unavailable;",
        "evidence_ar": "",
        "SQL": "SELECT T2.City, T1.Name, T1.IsOnlyStateProvinceFlag FROM StateProvince AS T1 INNER JOIN Address AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.AddressID = 15873"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full address of business number 24?",
        "question_ar": "",
        "evidence_en": "Full address refers to AddressLine1+AddressLine2; business number 24 refers to BusinessEntityID = '24'",
        "evidence_ar": "",
        "SQL": "SELECT T1.AddressLine1, T1.AddressLine2 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 24"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which year is credit card No.9648's Expiration Year?",
        "question_ar": "",
        "evidence_en": "Expiration year refers to ExpYear",
        "evidence_ar": "",
        "SQL": "SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What's Emma H Harris's Business Entity ID number?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM Person WHERE FirstName = 'Emma' AND LastName = 'Harris'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the location id for Debur and Polish?",
        "question_ar": "",
        "evidence_en": "Debur and Polish is name of manufacturing location",
        "evidence_ar": "",
        "SQL": "SELECT LocationID FROM Location WHERE Name = 'Debur and Polish'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the Department ids under the Sales and Marketing Group?",
        "question_ar": "",
        "evidence_en": "Sales and Marketing is group name of a department",
        "evidence_ar": "",
        "SQL": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which sales person made the sale of 1635823.3967 last year? Give the Business Entity ID.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesLastYear = '1635823.3967'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the Shift start time for Shift ID No.2?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT StartTime FROM Shift WHERE ShiftID = '2'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is contact Type ID No.16 represent for?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM ContactType WHERE ContactTypeID = '16'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the minimum shipping charge for \"OVERSEAS - DELUXE\"?",
        "question_ar": "",
        "evidence_en": "Minimum shipping charge refers to ShipBase; OVERSEAS - DELUXE is name of shipping company",
        "evidence_ar": "",
        "SQL": "SELECT ShipBase FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please tell the meaning of CultureID \"fr\".",
        "question_ar": "",
        "evidence_en": "tell the meaning is to find the name of culture",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Culture WHERE CultureID = 'fr'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Give the Mauritius Rupee's currency code.",
        "question_ar": "",
        "evidence_en": "Mauritius Rupee is name of currency",
        "evidence_ar": "",
        "SQL": "SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name cellphone number's Type ID?",
        "question_ar": "",
        "evidence_en": "Cellphone refers to Name = 'Cell'",
        "evidence_ar": "",
        "SQL": "SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the older production technician who was hired in 2008/12/7, what's his/her birthday?",
        "question_ar": "",
        "evidence_en": "Oldest production technician refers to MIN(BirthDate) where JobTitle = 'Production Technician'",
        "evidence_ar": "",
        "SQL": "SELECT BirthDate FROM Employee WHERE HireDate = '2008-12-07'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the product ID No.793's model name?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductModel AS T2 ON T1.ProductModelID = T2.ProductModelID WHERE T1.ProductID = 793"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the unit measure codes for product ID No.762?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.UnitMeasureCode FROM Product AS T1 INNER JOIN UnitMeasure AS T2 ON T1.SizeUnitMeasureCode = T2.UnitMeasureCode OR T1.WeightUnitMeasureCode = T2.UnitMeasureCode WHERE T1.ProductID = 762 GROUP BY T1.ProductID, T2.UnitMeasureCode"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where is Business Entity ID No.4 located at? Give the address down to street.",
        "question_ar": "",
        "evidence_en": "Located refers to the total address of the entity that comprises city, addressline1, addressline2",
        "evidence_ar": "",
        "SQL": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID IN ( SELECT AddressID FROM BusinessEntityAddress WHERE BusinessEntityID = 4 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the on going assembly item Component ID No. 494, what's the Unit measure for it?",
        "question_ar": "",
        "evidence_en": "On going assembly item means the assembly item haven't been finished, therefore EndDate is null",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the document Control Assistant who was born on 1975/12/25, how many private documents did he/she have?",
        "question_ar": "",
        "evidence_en": "Document Control Assistant refers to the JobTitle = 'Document Control Assistant'; born on 1975/12/25 refers to BirthDate = '1975-12-25'; private documents indicate that DocumentSummary is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.BirthDate = '1975-12-25' AND T1.DocumentSummary IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "To the products which could make the profit as 21.9037, what were their list price after October of 2012?",
        "question_ar": "",
        "evidence_en": "Profit as 82.41 = SUTRACT(ListPrice, StandardCost); May of 2012 refers to StartDate = '2012-05'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice - T1.StandardCost > 21.9037 AND STRFTIME('%Y-%m-%d', T2.StartDate) >= '2012-10-01'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the size of the photo of product id No.1?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many letters are there in Catherine Ward's e-mail account passwords?",
        "question_ar": "",
        "evidence_en": "Catherine Ward refers to the name of BusinessEntityID; how many letters in password for the e-mail account refers to LENGTH(PasswordHash)",
        "evidence_ar": "",
        "SQL": "SELECT LENGTH(T2.PasswordHash) FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Catherine' AND T1.LastName = 'Ward'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What rating did Jill give for HL Mountain Pedal?",
        "question_ar": "",
        "evidence_en": "Jill refers to the name of reviewer; HL Mountain Pedal refers to the name of the product",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rating FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'Jill' AND T2.Name = 'HL Mountain Pedal'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What's the profit for the Freewheel?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(LastReceiptCost, StandardPrice) for ProductID where name = 'Freewheel'",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Freewheel'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Did Rachel Valdez complete her sales task?",
        "question_ar": "",
        "evidence_en": "Complete sales task refers to meeting sales quota; if Bonus = 0, it means this salesperson doesn't meet quota and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT T1.Bonus FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Rachel' AND T2.LastName = 'Valdez'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many types of tax did the sales happen in Quebec have?",
        "question_ar": "",
        "evidence_en": "If Name = \"+\" in the value from SalesTaxRate, it means this sales are charged by multiple types of tax; Quebec refers to the name of State Province",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.Name = 'Quebec'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What's Kevin A Wright's email address?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Kevin' AND T1.MiddleName = 'A' AND T1.LastName = 'Wright'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the number of State Province of France that doesn't have a State Province Code?",
        "question_ar": "",
        "evidence_en": "Doesn't have a State Province Code refers to IsOnlyStateProvinceFlag = 1 where StateProvinceCode is unavailable",
        "evidence_ar": "",
        "SQL": "SELECT T1.CountryRegionCode FROM StateProvince AS T1 INNER JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.Name = 'France' AND T1.IsOnlyStateProvinceFlag = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What kind of transaction type for the \"HL Road Frame - Black, 48\" order happened in 2012/12/13?",
        "question_ar": "",
        "evidence_en": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate",
        "evidence_ar": "",
        "SQL": "SELECT T1.TransactionType FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Road Frame - Black, 48' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2013-07-31'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which type of transaction was it for the \"LL Road Handlebars\" order happened in 2012/11/3?",
        "question_ar": "",
        "evidence_en": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate",
        "evidence_ar": "",
        "SQL": "SELECT T1.TransactionType FROM TransactionHistoryArchive AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'LL Road Handlebars' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2012-11-03'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How is the Credit Rating for company whose rowguid is \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\"?",
        "question_ar": "",
        "evidence_en": "CreditRating = 1 means 'Superior'; CreditRating = 2 means 'Excellent'; CreditRating = 3 means 'Above average'; CreditRating = 4 means 'Superior'; CreditRating = 5 means 'Below average'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the PreferredVendorStatus for the company which has the rowguid of \"684F328D-C185-43B9-AF9A-37ACC680D2AF\"?",
        "question_ar": "",
        "evidence_en": "PreferredVendorStatus = 1 means 'Do not use if another vendor is available'; CreditRating = 2 means 'Preferred over other vendors supplying the same product'",
        "evidence_ar": "",
        "SQL": "SELECT T1.PreferredVendorStatus FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For person id No.2054, is his/her vendor still active?",
        "question_ar": "",
        "evidence_en": "ActiveFlag = 1 means 'Vendor no longer used'; ActiveFlag = 2 means 'Vendor is actively used",
        "evidence_ar": "",
        "SQL": "SELECT T1.ActiveFlag FROM Vendor AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonID = 2054"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Show me the phone number of Gerald Patel's.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Gerald' AND T1.LastName = 'Patel'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which is Business Entity ID No.13626's phone number type?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 USING (PhoneNumberTypeID) WHERE T1.BusinessEntityID = 13626"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What's Lynn N Tsoflias's job title?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Lynn' AND T1.MiddleName = 'N' AND T1.LastName = 'Tsoflias'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the number of the sub categories for bikes?",
        "question_ar": "",
        "evidence_en": "Bike refers to the name of the product category, therefore ProductCategoryID = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ProductCategory AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Bikes'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For the document Control Assistant who was hired on 2009/1/22, what is the percentage of private documents did he/she have?",
        "question_ar": "",
        "evidence_en": "Document Control Assistant refers  to the  JobTitle = 'Document Control Assistant'; hired on 2009/1/22 means the person's hiring date is HireDate = '2009-01-22'; private documents indicate that DocumentSummary is null; DIVIDE(COUNT(DocumentSummary is null), COUNT(DocumentSummary))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.DocumentSummary IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.DocumentSummary) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.HireDate = '2009-01-22'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much is HL Grip Tape's profit ratio?",
        "question_ar": "",
        "evidence_en": "HL Grip Tape refers to the product name; DIVIDE(SUBTRACT(LastReceiptCost, StandardPrice)), (StandardPrice) as profit_ratio",
        "evidence_ar": "",
        "SQL": "SELECT (T1.LastReceiptCost - T1.StandardPrice) / T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Grip Tape'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For all phone numbers, what percentage of the total is cell phone?",
        "question_ar": "",
        "evidence_en": "Cellphone referes to the name of the phone type, therefore PhoneNumberTypeID = 1; DIVIDE(COUNT(PhoneNumberTypeID = 1), (COUNT(PhoneNumberTypeID)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the product assembly ID that come with unit measure code EA and BOM level of 2, at the same time have per assembly quantity of more than 10?",
        "question_ar": "",
        "evidence_en": "Per assembly quantity of more than 10 is expresses as PerAssemblyQty>10",
        "evidence_ar": "",
        "SQL": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many location IDs have actual resource hours of 2?",
        "question_ar": "",
        "evidence_en": "actual resource hours of 2 refers to ActualResourceHrs = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(LocationID) FROM WorkOrderRouting WHERE ActualResourceHrs = 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the stocked quantity of products manufactured from location ID 40?",
        "question_ar": "",
        "evidence_en": "Stocked quantity refers to StockedQty",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the total per assembly quantity for unit measure code EA, IN and OZ respectively? What are the name of these 3 code?",
        "question_ar": "",
        "evidence_en": "Pre assembly quantity refers to PerAssemblyQty",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.PerAssemblyQty), T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.UnitMeasureCode IN ('EA', 'IN', 'OZ') GROUP BY T2.Name"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product ID do not have any work order ID?",
        "question_ar": "",
        "evidence_en": "Do not have any work order ID means WorkOrderID is null",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of product purchased with transaction type P?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "State the full name of accountants in the company.",
        "question_ar": "",
        "evidence_en": "Accountants refers to JobTitle = 'Accountant'; full name includes FirstName, LastName, and MiddleName",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Accountant'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the job position currently occupied by Ken J SÃ¡nchez?",
        "question_ar": "",
        "evidence_en": "Job position refers to JobTitle",
        "evidence_ar": "",
        "SQL": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Ken' AND T2.MiddleName = 'J' AND T2.LastName = 'Sánchez'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many male employees do not wish to receive e-mail promotion?",
        "question_ar": "",
        "evidence_en": "Male refers to Gender = 'M'; employees do not wish to receive any e-mail promotions are marked as EmailPromotion = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the top sales person who achived highest percentage of projected sales quota in 2013?",
        "question_ar": "",
        "evidence_en": "2013 refers to QuotaDate = '2013'; DIVIDE(SalesLastYear), (SUM(SalesQuota where YEAR(QuotaDate) = 2013)) as percentage\n",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many of the non-sales employees are married?",
        "question_ar": "",
        "evidence_en": "Married refers to MaritalStatus = 'M';  non-sales employees refer to PersonType = 'EM'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.MaritalStatus = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the Production Technicians who are single, how many of them are vendor contact?",
        "question_ar": "",
        "evidence_en": "Production Technicians refer to the  JobTitle = 'Production Technician%'; single refers to MaritalStatus = 'S'; Vendor contact refers to PersonType = 'VC'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.MaritalStatus = 'S' AND T2.PersonType = 'VC'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total sick leave hours of employees who do not wish to receive any e-mail promotion?",
        "question_ar": "",
        "evidence_en": "Employees who do not wish to receive any e-mail promotions are marked as EmailPromotion = 0",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.SickLeaveHours) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the sales people, who are hired prior to 2010?",
        "question_ar": "",
        "evidence_en": "Sales people refer to PersonType = 'SP'; hired prior to 2010 means the person's hiring date was before 2010, therefore year(HireDate)<2010",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which sales person achieved the highest sales YTD? What is the projected yearly sales quota in 2011 for this person?",
        "question_ar": "",
        "evidence_en": "Sales people refer to PersonType = 'SP'; projected yearly sales refers to SalesQuota",
        "evidence_ar": "",
        "SQL": "SELECT T1.BusinessEntityID, SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2011' GROUP BY T1.BusinessEntityID ORDER BY SUM(T1.SalesYTD) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many people with the name Alex are single and occupying organization level of 1?",
        "question_ar": "",
        "evidence_en": "Alex refers to FirstName = 'Alex'; single refers to MaritalStatus = 'S'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Alex' AND T1.MaritalStatus = 'S' AND T1.OrganizationLevel = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average vacation hours taken by Sales person?",
        "question_ar": "",
        "evidence_en": "Store Contact refers PersonType = 'SC'; AVG(VacationHours",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "State the last name and job title of owner for document \"Crank Arm and Tire Maintenance\".",
        "question_ar": "",
        "evidence_en": "The owner refers to BusinessEntityID",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastName, T3.JobTitle FROM Person AS T1 INNER JOIN Document AS T2 ON T1.BusinessEntityID = T2.Owner INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Title = 'Crank Arm and Tire Maintenance'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees do not have any suffix and what are their organization level?",
        "question_ar": "",
        "evidence_en": "Do not have any suffix means Suffix is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the sales people who achieved projected sales quota 2013, is there any person from territory ID 1? If yes, state the business entity ID.",
        "question_ar": "",
        "evidence_en": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 1 AND STRFTIME('%Y', QuotaDate) = '2013'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who are the employees that submitted resume to Human Resource Department and got hired? State the last name.",
        "question_ar": "",
        "evidence_en": "employees that submitted resume to Human Resource Department and got hired refers to BusinessEntittyID NOT null;",
        "evidence_ar": "",
        "SQL": "SELECT T3.LastName FROM Employee AS T1 INNER JOIN JobCandidate AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.BusinessEntityID IN (212, 274)"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List down the email address of female single employees.",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; single refers to MaritalStatus = 'S';",
        "evidence_ar": "",
        "SQL": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the color of products that were reviewed?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Color FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 709 OR 937 OR 798"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the projected sales quota amount in 2013 and sales YTD amount for sales person with business entity ID 275?",
        "question_ar": "",
        "evidence_en": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013; projected sales quota for 2013 = SUM(SalesQuota where year(QuotaDate) = 2013);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 275 AND STRFTIME('%Y', QuotaDate) = '2013'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Provide the business entity ID who did not achieved projected yearly sales quota in 2013.",
        "question_ar": "",
        "evidence_en": "projected yearly sales quota refers to SalesQuota; sales quota in 2013 refers to year(QuotaDate) = 2013; person who did not achieve projected yearly sales quota refers to SalesQuota>SalesYTD;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013' AND T1.SalesQuota < T1.SalesLastYear"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who wish to receive e-mail promotion from AdventureWorks, how many percent of them are female?",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; employee who wish to receive email promotion refers to EmailPromotion = 1; percentage = DIVIDE(SUM(Gender = 'F')), (sum(Gender = 'F' or Gender = 'M'))) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many times is married non sales employees against single non-sales employees?",
        "question_ar": "",
        "evidence_en": "non-sales employee refers to PersonType = 'EM'; married refers to MaritalStatus = 'M'; single refers to MaritalStatus = 'S'; percentage = DIVIDE(SUM(MaritalStatus = 'M'), (SUM(MaritalStatus = 'S') as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.MaritalStatus = 'S' THEN 1 ELSE 0 END) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much is the total bonus received by sales person and what is the percentage of it against the projected yearly sales quota in 2013?",
        "question_ar": "",
        "evidence_en": "projected yearly sales quota refers to SalesQuota; projected yearly sales quota in 2013 refers to year(QuotaDate) = 2013; percentage = (MULTIPLY(DIVIDE(SUM(Bonus)), (SUM(SalesQuota))) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many types of credit cards are there and how many are vista?",
        "question_ar": "",
        "evidence_en": "type of credit card refers to CardType; CardType = 'Vista';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CardNumber) FROM CreditCard WHERE CardType = 'vista'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the product with the id \"475\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Product WHERE ProductID = 475"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees born before 1980 , how many of them are single?",
        "question_ar": "",
        "evidence_en": "BirthDate<'1980-01-01'; single refers to MaritalStatus = 'S' or null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 's' AND BirthDate < '1980-1-1'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the names of the stores assigned to the sales person with the id \"277\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Store WHERE SalesPersonID = 277"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products with the id \"989\" were sold in August 2013?",
        "question_ar": "",
        "evidence_en": "TransactionDate BETWEEN '2013-08-01' AND '2013-08-30'; sold in refers to TransactionType = 'S' which means SalesOrder;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all of the credit cards that had expired by 2007.",
        "question_ar": "",
        "evidence_en": "card that expires in 2007 refers to ExpYear = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the pay rates of all employees that were hired at 20 years of age.",
        "question_ar": "",
        "evidence_en": "pay rate refers to Rate; 20 years old at the time of being hired refers to SUBTRACT(year(HireDate)), (year(BirthDate))) = 20;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 20"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the territory assigned to the sales person with business id \"277\"?",
        "question_ar": "",
        "evidence_en": "business id refers to BusinessEntityID",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.BusinessEntityID = 277"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full name of the Vice President of Production?",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName; Vice President of Production is a JobTitle;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Vice President of Production'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees in the Information Service department work the evening shift?",
        "question_ar": "",
        "evidence_en": "Information Service is a name of department;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE T1.Name = 'Information Services' AND T3.Name = 'Evening'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the purchase order ids of the vendor with a below average rating.",
        "question_ar": "",
        "evidence_en": "below average rating refers to CreditRating = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PurchaseOrderID FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Is the phone number \"114-555-0100\" a work number or a home number?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID WHERE T1.PhoneNumber = '114-555-0100'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total shipment by \"cargo transport 5\" cost of all purchase orders created on 12/14/2011?",
        "question_ar": "",
        "evidence_en": "Catgo Transport 5 is a name of shipping method; OrderDate = '2011-12-14'; total shipment cost = SUM(Freight);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.freight) FROM ShipMethod AS t1 INNER JOIN PurchaseOrderHeader AS t2 ON t1.shipmethodid = t2.shipmethodid WHERE t1.name = 'cargo transport 5' AND t2.orderdate = '2011-12-14'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many sales orders did the salesperson David R. Campbell create?",
        "question_ar": "",
        "evidence_en": "SP is an abbreviation for Sales Person; PersonType = 'SP';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.TotalDue) FROM Person AS T1 INNER JOIN SalesOrderHeader AS T2 ON T1.ModifiedDate = T2.DueDate WHERE T1.FirstName = 'David' AND T1.MiddleName = 'R' AND T1.LastName = 'Campbell' AND T1.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the email address of the Facilities Manager?",
        "question_ar": "",
        "evidence_en": "Facilities Manager is a job title",
        "evidence_ar": "",
        "SQL": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.JobTitle = 'Facilities Manager'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many customers are there in Canada?",
        "question_ar": "",
        "evidence_en": "Canada is name of sales territory",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Canada'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the shipping address for the sales order \"43873\"?",
        "question_ar": "",
        "evidence_en": "shipping address = AddressLine1+AddressLine2+City;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ShipToAddressID FROM SalesOrderHeader AS T1 INNER JOIN Address AS T2 ON T1.BillToAddressID = T2.AddressID WHERE T1.SalesOrderID = 43873 GROUP BY T1.ShipToAddressID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the first names of the people with more than 65 sick leave hours.",
        "question_ar": "",
        "evidence_en": "SickLeaveHours>65;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.SickLeaveHours > 65"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among all the production technicians, how many have a below average pay rate for a production technician?",
        "question_ar": "",
        "evidence_en": "production technician is a job title; below average rate refers to Rate<AVG(Rate);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T2.Rate < ( SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What proportion of sales orders are made from the United Kingdom?",
        "question_ar": "",
        "evidence_en": "proportion = DIVIDE(SUM(Name = 'UK')), (COUNT(SalesOrderID))) as count;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Name = 'United Kingdom' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SalesOrderID) FROM SalesOrderHeader AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "When is the modified date of the phone number \"1500 555-0143\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT ModifiedDate FROM PersonPhone WHERE PhoneNumber = '1 (11) 500 555-0143'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the business ID of the person who has made the most sales total year to date?",
        "question_ar": "",
        "evidence_en": "business ID refers to BusinessEntityID; sales total year to date refers to SalesYTD; most sales total year to date refers to MAX(SalesYTD);",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesYTD DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all active vendors who offer a purchasing web service.",
        "question_ar": "",
        "evidence_en": "active vendors refers to ActiveFlag = 1; vendor who offer a purchasing web service refers to PurchasingWebServiceURL NOT null;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Vendor WHERE ActiveFlag = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which territory has the most customers as of 9/12/2014?",
        "question_ar": "",
        "evidence_en": "ModifiedDate between'2014-09-12 00:00:00' and '2014-09-12 23:59:59';",
        "evidence_ar": "",
        "SQL": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total cost for all the orders placed on 5/29/2013?",
        "question_ar": "",
        "evidence_en": "total cost = SUM(TotalDue); OrderDate = '2013-05-29';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(TotalDue) FROM PurchaseOrderHeader WHERE OrderDate LIKE '2013-05-29%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the most common first name among the vendor contact?",
        "question_ar": "",
        "evidence_en": "vendor contact refers to PersonType = 'VC';",
        "evidence_ar": "",
        "SQL": "SELECT FirstName FROM Person WHERE PersonType = 'VC' GROUP BY FirstName ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the full name of all the 'Production Technician - WC50'",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName; Production Technician - WC50 is a job title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Production Technician - WC50' GROUP BY T2.FirstName, T2.MiddleName, T2.LastName"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many Minipumps have been sold?",
        "question_ar": "",
        "evidence_en": "Minipump is name of a product",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OrderQty) FROM SalesOrderDetail WHERE ProductID IN ( SELECT ProductID FROM Product WHERE Name = 'Minipump' )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the person's business ID with a vista credit card number \"11113366963373\"?",
        "question_ar": "",
        "evidence_en": "business id refers to BusinessEntityID",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardNumber = 11113366963373"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where does the person with the BusinessEntityID \"5555\" live?",
        "question_ar": "",
        "evidence_en": "where the person live refers addresstype.Name = 'Home'",
        "evidence_ar": "",
        "SQL": "SELECT T3.City, T3.AddressLine1 FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Address AS T3 ON T1.AddressID = T3.AddressID WHERE T1.BusinessEntityID = 5555 AND T2.Name = 'Home'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the names of products with the special offer \"15\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SpecialOfferProduct AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SpecialOfferID = 15"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the credit card number for Michelle E Cox?",
        "question_ar": "",
        "evidence_en": "credit card number refers to CreditCardID",
        "evidence_ar": "",
        "SQL": "SELECT T3.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'Michelle' AND T1.MiddleName = 'E' AND T1.LastName = 'Cox'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the reason for sales order \"51883\"?",
        "question_ar": "",
        "evidence_en": "reason means the category of sales reason which refers to ReasonType",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 51883"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the credit card number for the sales order \"45793\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.CardNumber FROM SalesOrderHeader AS T1 INNER JOIN CreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.SalesOrderID = 45793"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the sales people in the Northwest US.",
        "question_ar": "",
        "evidence_en": "Northwest is name of SalesTerritory; US is the CountryRegionCode;",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Northwest' AND T1.CountryRegionCode = 'US'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which Production Technician has the highest pay rate?",
        "question_ar": "",
        "evidence_en": "highest pay rate refers to MAX(Rate);",
        "evidence_ar": "",
        "SQL": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the sales person in charge of the territory with the id \"9\"? Provide their full name.",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 9"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the description of the discount for the product with the id \"762\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM SpecialOfferProduct AS T1 INNER JOIN SpecialOffer AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.ProductID = 762"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Compare the average pay rate of male and female employees.",
        "question_ar": "",
        "evidence_en": "male refers to Gender = 'M'; female refers to Gender = 'F'; difference in average rate = DIVIDE(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M'))) as diff;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T1.Gender"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the percentage of employees who work the night shift?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUM(Name = 'Night')), (COUNT(ShiftID)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Night' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.BusinessEntityID) FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many married male employees were born before the year 1960?",
        "question_ar": "",
        "evidence_en": "married refers to MaritalStatus = 'M'; male refers to Gender = 'M'; BirthDate < = '1959-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 'M' AND STRFTIME('%Y', BirthDate) < '1960' AND Gender = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the top 5 types of products with the highest selling price? ?",
        "question_ar": "",
        "evidence_en": "highest selling price refers to MAX(ListPrice);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "When did the company hired its first Accountant?",
        "question_ar": "",
        "evidence_en": "Accountant is a job title; first hired = MIN(HireDate)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "In 2007, which job position was hired the most?",
        "question_ar": "",
        "evidence_en": "Job position and job title are synonyms; job position that was hired the most refers to MAX(COUNT(JobTitle); HireDate BETWEEN '2007-1-1' AND '2007-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT JobTitle FROM Employee WHERE STRFTIME('%Y', HireDate) = '2007' GROUP BY HireDate ORDER BY COUNT(JobTitle) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the profit on net of the vendor with the highest standard price? If there are two vendors of the same amount, calculate only for one vendor.",
        "question_ar": "",
        "evidence_en": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many departments did Sheela Ward work in between 1/1/2011 to 12/31/2012",
        "question_ar": "",
        "evidence_en": "number of departments an employee works for between 2011 and 2012 refers to year(StartDate) BETWEEN 2011 AND 2012 and year(EndDate) BETWEEN 2011 and 2012;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average age of the sales agents in the company by 12/31/2009?",
        "question_ar": "",
        "evidence_en": "average age as of 12/31/2009 = AVG(SUBTRACT(2009, year(BirthDate));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(2009 - STRFTIME('%Y', T2.BirthDate)) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "To which group does the department with the least amount of workers belong to? Indicate the name of the department as well.",
        "question_ar": "",
        "evidence_en": "least amount of workers refers to MIN(count(DepartmentID));",
        "evidence_ar": "",
        "SQL": "SELECT T2.GroupName FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID GROUP BY T2.GroupName ORDER BY COUNT(T1.BusinessEntityID) LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the age of the oldest Marketing Specialist by 12/31/2015 and what is his/her hourly rate?",
        "question_ar": "",
        "evidence_en": "age as of 12/31/2015 = SUBTRACT(2015, year(BirthDate)); hourly rate refers to Rate;",
        "evidence_ar": "",
        "SQL": "SELECT 2015 - STRFTIME('%Y', T1.BirthDate), T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Marketing Specialist' ORDER BY 2015 - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total amount due of all the purchases made by the company to the vendor that has the lowest selling price amount of a single product? Indicate the name of the vendor to which the purchases was made.",
        "question_ar": "",
        "evidence_en": "Vendor's selling price of a single product refers to UnitPrice;",
        "evidence_ar": "",
        "SQL": "SELECT T1.UnitPrice, T3.Name FROM PurchaseOrderDetail AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID INNER JOIN Vendor AS T3 ON T2.VendorID = T3.BusinessEntityID ORDER BY T1.UnitPrice LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who made the purchase order with the greatest total due before freight? Indicate her employee ID and calculate for his/her age when he/she was hired.",
        "question_ar": "",
        "evidence_en": "total due before freight = SUBTRACT(TotalDue, Freight); age at the time an employee was hired = SUBTRACT(HireDate, year(BirthDate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID, STRFTIME('%Y', T2.HireDate) - STRFTIME('%Y', T2.BirthDate) FROM PurchaseOrderHeader AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.BusinessEntityID ORDER BY T1.TotalDue DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the position of the employee with the 10th highest salary? Indicate his/her salary amount and his/her full name.",
        "question_ar": "",
        "evidence_en": "salary and Rate are synonyms; full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.JobTitle, T1.Rate, T3.FirstName, T3.MiddleName, T3.LastName FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T1.Rate DESC LIMIT 9, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the profit of a single product that received the highest rating from John Smith? List the product/s' names.",
        "question_ar": "",
        "evidence_en": "highest rating refers to Rating = 5; profit = SUBTRACT(ListPrice, StandardCost);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ListPrice - T1.StandardCost, T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ReviewerName = 'John Smith' ORDER BY T2.Rating DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?",
        "question_ar": "",
        "evidence_en": "salary rate per hour refers to Rate; first 5 employees that were hired refers to 5 oldest HireDate;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the vendors with maximum orders betweeen 500 to 750, which vendor has the 10th highest profit on net?",
        "question_ar": "",
        "evidence_en": "maximum orders refers to MaxOrderQty; MaxOrderQty BETWEEN '500' AND '750'; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty BETWEEN 500 AND 750 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 9, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "As of 12/31/2011, how long has the employee assigned to all pending for approval papers been working in the company from the date he was hired?",
        "question_ar": "",
        "evidence_en": "pending for approval papers refer to Status = 1; length of stay in the company as of 12/31/2011 = SUBTRACT(2011, year(HireDate));",
        "evidence_ar": "",
        "SQL": "SELECT 2011 - STRFTIME('%Y', T2.HireDate) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Jill ranked which medium-quality class product as the highest, and how long will it take the company to manufacture such a product?",
        "question_ar": "",
        "evidence_en": "second-lowest rating refers to Rating = 2; high-quality class product refers to Class = 'H'; length of time it takes the company to manufacture a product refers to DaysToManufacture;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DaysToManufacture FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = 5 AND T1.Class = 'M' ORDER BY T2.Rating LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What was the first job position that the company needed, and who was hired? Indicate his/her full name.",
        "question_ar": "",
        "evidence_en": "job position and job title are synonyms; full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many work orders with quantities ranging from 100 to 250 have a reorder point of no more than 375?",
        "question_ar": "",
        "evidence_en": "work order refers to TransactionType = 'W'; Quantity BETWEEN 100 AND 250; ReorderPoint< = 375;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity BETWEEN 100 AND 250 AND T2.ReorderPoint <= 375"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much is the average salary of female employees in comparison to male employees?",
        "question_ar": "",
        "evidence_en": "female refers to Gender = 'F'; male refers to Gender = 'M'; difference in the average salary of female against male employees = SUBTRACT(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M')));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the names of the vendors to which the company purchased its women's tights products?",
        "question_ar": "",
        "evidence_en": "product is purchased refers to MakeFlag = 0; women's refers to Style = 'W'; ProductSubcategoryID = 'Tights';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN ProductSubcategory AS T3 ON T1.ProductSubcategoryID = T3.ProductSubcategoryID INNER JOIN Vendor AS T4 ON T2.BusinessEntityID = T4.BusinessEntityID WHERE T1.MakeFlag = 0 AND T1.Style = 'W' AND T3.Name = 'Tights'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How frequently does the first-ever Scheduling Assistant get paid?",
        "question_ar": "",
        "evidence_en": "PayFrequency = 1 refers to ‘Salary received monthly’; PayFrequency = 2 refers to ‘Salary received biweekly';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Scheduling Assistant' ORDER BY T1.HireDate LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What product has the fewest online orders from one customer? List the product's class, line of business, and list price.",
        "question_ar": "",
        "evidence_en": "fewest online orders refer to MIN(Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Class, T2.ProductLine, T2.ListPrice FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY SUM(Quantity) LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full name of the sales person who has the the highest commission percent received per sale?",
        "question_ar": "",
        "evidence_en": "commision percent received per sale refers to CommissionPct; highest commision percent received per sale refers to MAX(CommissionPcT); full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.CommissionPct DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full name of the second oldest person in the company at the time he was hired?",
        "question_ar": "",
        "evidence_en": "age at the time of being hired = SUBTRACT(HireDate, BirthDate); full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the total profit gained by the company from the product that has the highest amount of quantity ordered from online customers? Indicate the name of the product.",
        "question_ar": "",
        "evidence_en": "profit = MULTIPLY(SUBTRACT(ListPrice, Standardcost)), (Quantity)));",
        "evidence_ar": "",
        "SQL": "SELECT (T2.ListPrice - T2.StandardCost) * SUM(T1.Quantity), T2.Name FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T2.Name, T2.ListPrice, T2.StandardCost, T1.Quantity ORDER BY SUM(T1.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest amount of difference between the ordered quantity and actual quantity received in a single purchase order and to which vendor was the purchase order made?",
        "question_ar": "",
        "evidence_en": "highest amount of difference between the ordered quantity and actual quantity received in a single purchase order refers to MAX(SUBTRACT(OrderQty, ReceivedQty));",
        "evidence_ar": "",
        "SQL": "SELECT T2.OrderQty - T2.ReceivedQty, VendorID FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID ORDER BY T2.OrderQty - T2.ReceivedQty DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average lead time of product ID 843? Calculate for its profit on net and indicate the full location to which the vendor is located.",
        "question_ar": "",
        "evidence_en": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice); full location = AddressLine1+AddressLine2+City+PostalCode;",
        "evidence_ar": "",
        "SQL": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many salespersons haven't met quota?",
        "question_ar": "",
        "evidence_en": "salesperson that haven't met the quota refers to Bonus = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM SalesPerson WHERE Bonus = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the sales with a tax applied to retail transaction, how many of them are charged by multiple types of taxes?",
        "question_ar": "",
        "evidence_en": "tax applied to retail transaction refers to Taxtype = 1; sales that are charged with multiple types of tax refers to NAME LIKE '%+%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SalesTaxRateID) FROM SalesTaxRate WHERE Name LIKE '%+%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please give the highest product cost of a purchase order.",
        "question_ar": "",
        "evidence_en": "product cost refers to ActualCost; purchase order refers to TransactionType = 'P';",
        "evidence_ar": "",
        "SQL": "SELECT ActualCost FROM TransactionHistory WHERE TransactionType = 'P' ORDER BY ActualCost DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the current status of the order with the highest shipping cost?",
        "question_ar": "",
        "evidence_en": "shipping cost and Freight are synonyms; highest shipping cost refers to MAX(Freight);",
        "evidence_ar": "",
        "SQL": "SELECT Status FROM SalesOrderHeader ORDER BY Freight DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products are out of stock?",
        "question_ar": "",
        "evidence_en": "out of stock product refers to OnOrderQty = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest profit on net for a product?",
        "question_ar": "",
        "evidence_en": "profit on net = subtract(LastReceiptCost, StandardPrice)",
        "evidence_ar": "",
        "SQL": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY LastReceiptCost - StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which reviewer gives the biggest number of the highest rating?",
        "question_ar": "",
        "evidence_en": "highest rating refers to MAX(Rating)",
        "evidence_ar": "",
        "SQL": "SELECT ReviewerName FROM ProductReview WHERE Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product gets the most reviews?",
        "question_ar": "",
        "evidence_en": "most reviews refers to MAX(count(ProductID))\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the products that are purchased, how many of them have never received the highest rating?",
        "question_ar": "",
        "evidence_en": "product that are purchased refers to MakeFlag = 0; never received highest rating refers to Rating! = 5\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the biggest amount of reviews a salable product gets?",
        "question_ar": "",
        "evidence_en": "salable product refers to FinishedGoodsFlag = 1; biggest amount reviews refers to MAX(count(ProductID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the products that are both manufactured in house and salable, how many of them get over 10 reviews?",
        "question_ar": "",
        "evidence_en": "manufactured in house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the names of the products that get over 10 reviews and a salable.",
        "question_ar": "",
        "evidence_en": "salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10",
        "evidence_ar": "",
        "SQL": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the reviewers who have given the highest rating for a medium class, women's product.",
        "question_ar": "",
        "evidence_en": "highest rating refers to Rating = 5; high class refers to Class = 'H'; men's product refers to Style = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the class of the product with the most reviews?",
        "question_ar": "",
        "evidence_en": "most review refers to MAX(count(comments)); high class refers to Class = 'H'; medium class refers to Class = 'M'; low class refers to Class = 'L'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Class FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Class ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the e-mails of the reviewers who have reviewed high class.",
        "question_ar": "",
        "evidence_en": "high class refers to Class = 'H'; men's product refers to Style = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'H'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the names of the products that have over 3 price changes.",
        "question_ar": "",
        "evidence_en": "over 3 price changes refers to count(ListPrice)>3",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Name ORDER BY COUNT(T1.ListPrice) > 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the product description of Headset Ball Bearings?",
        "question_ar": "",
        "evidence_en": "Headset Ball Bearings is name of a product",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest vendor's selling price for Hex Nut 5?",
        "question_ar": "",
        "evidence_en": "vendor's selling price refers to StandardPrice",
        "evidence_ar": "",
        "SQL": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list all the vendors' usual selling prices of the product Hex Nut 5.",
        "question_ar": "",
        "evidence_en": "vendor's selling price refers to StandardPrice",
        "evidence_ar": "",
        "SQL": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' GROUP BY T1.StandardPrice ORDER BY COUNT(T1.StandardPrice) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the vendors that sell the product Hex Nut 5, how many of them have a good credit rating?",
        "question_ar": "",
        "evidence_en": "good credit rating refers to CreditRating between 1 and 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' AND T3.CreditRating = 1 AND 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the website purchasing links of the vendors from whom the product Hex Nut 5 can be purchased.",
        "question_ar": "",
        "evidence_en": "website purchasing link refers to PurchasingWebServiceURL",
        "evidence_ar": "",
        "SQL": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which vendor's selling price for Hex Nut 5 is the lowest, please give the vendor's name.",
        "question_ar": "",
        "evidence_en": "vendor's selling price refers to StandardPrice; lowest selling price = MIN(StandardPrice)",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many high-class products are sold by preferred vendors?",
        "question_ar": "",
        "evidence_en": "preferred vendor refers to PreferredVendorStatus = 1; high class refers to Class = 'H'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please give all the list prices of the product LL Fork.",
        "question_ar": "",
        "evidence_en": "Hex Nut 5 is name of a product",
        "evidence_ar": "",
        "SQL": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'LL Fork'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the products from the mountain product line, how many of them are sold by over 2 vendors?",
        "question_ar": "",
        "evidence_en": "mountain product line refers to ProductLine = 'M'; sold by over 5 vendors refers to count(Name)>5",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the products that get over at least 1 review, how many of them are from the mountain product line?",
        "question_ar": "",
        "evidence_en": "mountain product line refers to ProductLine = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID HAVING COUNT(T1.ProductReviewID) > 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the email adresses of the reviewers who have given the lowest rating to the product HL Mountain Pedal.",
        "question_ar": "",
        "evidence_en": "lowest rating refers to Rating = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Mountain Pedal' ORDER BY T1.Rating LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products that take more than 2 days to make are out of stock?",
        "question_ar": "",
        "evidence_en": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the products that are out of stock and purchased in house.",
        "question_ar": "",
        "evidence_en": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null; manufactured in house refers to MakeFlag = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND (T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0)"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the salable products from the mountain product line, how many of them have the most reviews?",
        "question_ar": "",
        "evidence_en": "salable product refers to FinishedGoodsFlag = 1; mountain product line refers to ProductLine = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average selling price of different vendors of the product Hex Nut 5?",
        "question_ar": "",
        "evidence_en": "average selling price = divide(sum(StandardPrice), count(BusinessEntityID))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.StandardPrice) / COUNT(T1.BusinessEntityID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the product that has the highest average rating from the mountain product line?",
        "question_ar": "",
        "evidence_en": "mountain product line refers to ProductLine = 'M'; highest average rating = max(divide(sum(Rating), count(ProductReview)))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the top 3 house-manufactured products with the highest average rating.",
        "question_ar": "",
        "evidence_en": "home manufactured refers to MakeFlag = 1; average rating = divide(sum(Rating), count(ProductReview))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY SUM(T1.Rating) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the non-sales employees in ascending order of its business entitty ID.",
        "question_ar": "",
        "evidence_en": "non-sales employee refers to PersonType = 'EM'",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, LastName FROM Person WHERE PersonType = 'EM' ORDER BY BusinessEntityID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name all person in the individual retail whose last name is 'Anderson'.",
        "question_ar": "",
        "evidence_en": "person in the individual retail refers to PersonType = 'IN'",
        "evidence_ar": "",
        "SQL": "SELECT FirstName, MiddleName, LastName FROM Person WHERE LastName = 'Anderson' AND PersonType = 'IN'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the name of employees who had left the company? When were they hired?",
        "question_ar": "",
        "evidence_en": "employee that has left the company refers to EndDate is not null",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName, T2.HireDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.EndDate IS NOT NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name all salaried employee who are hired in 2007 and later.",
        "question_ar": "",
        "evidence_en": "salaried employee refers to SalariedFlag = 1; hired in 2007 and later refers to year(HireDate)> = 2007",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.HireDate) >= '2007' AND T2.SalariedFlag = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the name of married employees with less than 20 vacation hours.",
        "question_ar": "",
        "evidence_en": "married employee refers to MaritalStatus = 'M'; less than 20 vacation hours refers to VacationHours<20",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T2.VacationHours < 20"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name the oldest employee who is working on night shift. How old is the employee?",
        "question_ar": "",
        "evidence_en": "working on night shift refers to ShiftID = 3; oldest employee refers to min(BirthDate); age = 2022-year(BirthDate)+1",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.ShiftId = 3 ORDER BY STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all staff in the Shipping and Receiving department who are hired in 2009.",
        "question_ar": "",
        "evidence_en": "hired in 2009 refers to year(HireDate) = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID WHERE STRFTIME('%Y', T2.HireDate) = '2009' AND T4.Name = 'Shipping and Receiving'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the job title of the oldest employee in the company? In which department is he in?",
        "question_ar": "",
        "evidence_en": "oldest employee refers to min(BirthDate)",
        "evidence_ar": "",
        "SQL": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Based on the lastet payrate of each employee, calculate the average hourly payrate for each department.",
        "question_ar": "",
        "evidence_en": "latest payrate refers to max(RateChangeDate); average hourly payrate = divide(sum(Rate), count(BusinessEntityID)) for each DepartmentID",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Rate) FROM EmployeePayHistory AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.RateChangeDate = ( SELECT MAX(T1.RateChangeDate) FROM EmployeePayHistory AS T1 INNER JOIN Department AS T2 ON T1.BusinessEntityID = T2.DepartmentID )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Other than the Chief Executive Officer, who is the employee who has the highest payrate? State the rate.",
        "question_ar": "",
        "evidence_en": "other than the Chief Executive Officer refers to JobTitle! = 'Chief Executive Officer'; highest payrate refers to max(Rate)",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name the vendor who has the shortest average lead time for Product ID 319.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 319 ORDER BY T2.AverageLeadTime LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all product name from Australia Bike Retailer order by product ID.",
        "question_ar": "",
        "evidence_en": "Australia Bike Retailer is name of vendor",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which vendor gives the best profit on net for product ID 342?",
        "question_ar": "",
        "evidence_en": "profit on net = subtract(LastReceiptCost, StandardPrice); best profit on net refers to max(subtract(LastReceiptCost, StandardPrice))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the current payrate of Rob Walters? Calculate the percentage increment from his previous payrate.",
        "question_ar": "",
        "evidence_en": "current payrate refers to max(Rate); percentage increment = divide(subtract(max(Rate), min(Rate)), min(Rate))*100%",
        "evidence_ar": "",
        "SQL": "SELECT T2.Rate , (MAX(T2.Rate) - MIN(T2.Rate)) * 100 / MAX(T2.Rate) FROM Person AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Rob' AND T1.LastName = 'Walters'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the average length of employment for employee working in the Research and Development deparment.",
        "question_ar": "",
        "evidence_en": "average length of employment = AVG(subtract(2022, year(HireDate)))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.HireDate)) FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Research and Development'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average age of employee in Adventure Works?",
        "question_ar": "",
        "evidence_en": "average age = AVG(subtract(year(now), year(HireDate)))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate)) FROM Employee"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees in Adventure Works, calculate the percentage of them working as sales representatives.",
        "question_ar": "",
        "evidence_en": "percentage of sales representatives = divide(count(JobTitle = 'Sales Representative'), count(JobTitle))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please provide contact details of all Marketing Managers. State their name and phone number.",
        "question_ar": "",
        "evidence_en": "Marketing Manager is a job title",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName, T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle = 'Marketing Manager'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the person who owns a distinguish credt card.",
        "question_ar": "",
        "evidence_en": "distinguish credt card refers to cardType = 'Distinguish'",
        "evidence_ar": "",
        "SQL": "SELECT T3.FirstName, T3.LastName FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.CardType = 'Distinguish'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name the sales person for store Area Bike Accessories. Which territory is he / she in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Name FROM Store AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN SalesTerritory AS T4 ON T2.TerritoryID = T4.TerritoryID WHERE T1.Name = 'Area Bike Accessories'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name all stores and its sales representative in France territory.",
        "question_ar": "",
        "evidence_en": "France territory refers to SalesTerritory.Name = 'France';",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, T4.FirstName, T4.LastName FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Store AS T3 ON T2.StoreID = T3.BusinessEntityID INNER JOIN Person AS T4 ON T2.PersonID = T4.BusinessEntityID WHERE T1.Name = 'France'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Name all products that started selling in 2013. State its respective vendor's name.",
        "question_ar": "",
        "evidence_en": "Started selling in 2013 refers to year(SellStartDate) = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE STRFTIME('%Y', T1.SellStartDate) = '2013'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Names the Sales Representative with the highest year to date sales.",
        "question_ar": "",
        "evidence_en": "Highest year to date sales refers to Max(SalesYTD);",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all product only MOQ of 1,000 and with standard cost more than 17.",
        "question_ar": "",
        "evidence_en": "MOQ refers to minimum order quantity; MOQ of 1 refers to MinOrderQty = 1; standard cost more than 48 refers to StandardCost > 48;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaxOrderQty = 1000 AND T2.StandardCost > 17"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the oldest married male? State his job title.",
        "question_ar": "",
        "evidence_en": "Male refers to Gender = 'M'; married refers to MaritalStatus = 'M'; oldest refers to Min(BirthDate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "State the vendor for product number WB-H098.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.ProductNumber = 'WB-H098'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Find the vendor with the least average lead time for Product ID 348.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "State the employee who are born in or after 1970 and with the least sick leave hour.",
        "question_ar": "",
        "evidence_en": "born in or after 1970 refers to year(BirthDate) > = 1970;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.BirthDate) > '1970' ORDER BY T1.SickLeaveHours LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Calculate the average age of employee in each department and state which department has the youngest employees.",
        "question_ar": "",
        "evidence_en": "Average = Divide(Sum(Substract(year(@today),year(BirthDate))),Count(BusinessEntityID) by each Department ID; youngest employee refers to Min(BirthDate);",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please provide the IDs of any three AdventureWorks product subcategories.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT ProductCategoryID FROM ProductSubcategory LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the differences between the 288th salesperson's predicted annual sales and his or her actual sales thus far?",
        "question_ar": "",
        "evidence_en": "288th sales person refers to BusinessEntityID = 288; predited annual sales refers to SalesQuota; actual sales refers to SalesYTD; difference = Substract(SalesQuota(BusinessEntityID(288))), (SalesYTD(BusinessEntityID(288)));",
        "evidence_ar": "",
        "SQL": "SELECT SalesYTD - SalesQuota FROM SalesPerson WHERE BusinessEntityID = 288"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list three businesses with the lowest total sales from last year.",
        "question_ar": "",
        "evidence_en": "lowest total sales in last year refers to Min(SalesLastYear);",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesLastYear LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which three sales regions have generated the most revenue thus far?",
        "question_ar": "",
        "evidence_en": "revenue refers to SalesYTD; the most revenue refers to Max(SalesYTD);",
        "evidence_ar": "",
        "SQL": "SELECT TerritoryID FROM SalesTerritory ORDER BY SalesYTD DESC LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What categories of offers qualify for group discounts for resellers?",
        "question_ar": "",
        "evidence_en": "resellers refers to Category = 'Reseller';",
        "evidence_ar": "",
        "SQL": "SELECT Type FROM SpecialOffer WHERE Category = 'Reseller'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the highest possible discount rate for 'Excess Inventory'?",
        "question_ar": "",
        "evidence_en": "excess inventory refers to Type = 'Excess Inventory'; highest possible discount refers to Max(DiscountPct);",
        "evidence_ar": "",
        "SQL": "SELECT DiscountPct FROM SpecialOffer WHERE Type = 'Excess Inventory' ORDER BY DiscountPct DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the difference between the actual manufacturing cost of product number 818 and the estimated manufacturing cost?",
        "question_ar": "",
        "evidence_en": "product number 818 refers to ProductID = 818; estimated manufacturing cost refers PlannedCost; actual manufacturing cost refers to ActualCost; difference = Substract(PlannedCost(ProductID(818))),(ActualCost(ProductID(818)));",
        "evidence_ar": "",
        "SQL": "SELECT PlannedCost - ActualCost FROM WorkOrderRouting WHERE ProductID = 818"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many materials still need to be assembled and have a depth of 2 between each component and their parent product?",
        "question_ar": "",
        "evidence_en": "still need to be assembled means the assembly doesn't finish or still going on which refers to EndDate IS NULL; a depth of 2 refers to BOMLevel = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM BillOfMaterials WHERE BOMLevel = 2 AND EndDate IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many of the approved documents are confidential?",
        "question_ar": "",
        "evidence_en": "approved refers to Status = 2; confidential document refers to DocumentSummary is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DocumentNode) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the sales tax records charged by multiple types of tax?",
        "question_ar": "",
        "evidence_en": "multiple types of tax refers to Name like '%+%';\n",
        "evidence_ar": "",
        "SQL": "SELECT SalesTaxRateID FROM SalesTaxRate WHERE Name LIKE '%+%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which work order transaction number has the highest product quantity?",
        "question_ar": "",
        "evidence_en": "work order transaction refers to TransactionType = 'W';",
        "evidence_ar": "",
        "SQL": "SELECT TransactionID FROM TransactionHistory WHERE TransactionType = 'W' ORDER BY Quantity DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list any 3 vendors that are not recommended by Adventure Works.",
        "question_ar": "",
        "evidence_en": "not recommended refers to PreferredVendorStatus = 0;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Vendor WHERE PreferredVendorStatus = 0 LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many vendors does Adventure Works still work with but are not preferable?",
        "question_ar": "",
        "evidence_en": "not preferable refers to PreferredVendorStatus = 0; still work refers to ActiveFlag = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees who began working in 2009 or later had night shifts?",
        "question_ar": "",
        "evidence_en": "began work in 2009 or later refers to StartDate> = 2009;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId WHERE T2.ShiftId = 3 AND STRFTIME('%Y', T2.StartTime) >= '2009'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which department, altogether, has the most personnel who work the evening shift?",
        "question_ar": "",
        "evidence_en": "evening shift also means night shift where Name = 'Night';most personnel in evening shift refers to Max(Count(Shift.ShiftID(Name = 'Night')));",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T2.Name = 'Night' GROUP BY T3.Name ORDER BY COUNT(T1.BusinessEntityID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many shipments by truck were made?",
        "question_ar": "",
        "evidence_en": "shipment by truck refers to Name = 'XRQ - TRUCK GROUND';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ShipMethod AS T1 INNER JOIN SalesOrderHeader AS T2 USING (ShipMethodID) WHERE T1.Name = 'XRQ - TRUCK GROUND'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the sales reasons for order 43718?",
        "question_ar": "",
        "evidence_en": "order refers to SalesOrderID",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 43718"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What bike subcategories are there?",
        "question_ar": "",
        "evidence_en": "bikes is product category",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T2.name = 'Bikes'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which sales areas are expected to have the highest yearly sales quota?",
        "question_ar": "",
        "evidence_en": "highest yearly sales quota refers to Max(SalesQuota);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID GROUP BY T1.TerritoryID ORDER BY SUM(T1.SalesQuota) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What goods were sold to customers in accordance with sales order number 43660?",
        "question_ar": "",
        "evidence_en": "goods refers to products",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the top 5 products with the most orders.",
        "question_ar": "",
        "evidence_en": "most order refers to Max(OrderQty);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Name ORDER BY SUM(T2.OrderQty) DESC LIMIT 0, 5"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where are the shelves where the down tube product was stored?",
        "question_ar": "",
        "evidence_en": "shelves refer to shelf; down tube is a product",
        "evidence_ar": "",
        "SQL": "SELECT T2.Shelf FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which address type does \"Fun Toys and Bikes\" fall under?",
        "question_ar": "",
        "evidence_en": "Fun Toys and Bikes is name of a store",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Fun Toys and Bikes'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who is the \"Next-Door Bike Store\" point of contact?",
        "question_ar": "",
        "evidence_en": "Next-Door Bike Store is name of a store",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID INNER JOIN Store AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Next-Door Bike Store'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the order reference number for the \"Mountain End Caps\" product?",
        "question_ar": "",
        "evidence_en": "Order Reference Number refers to ReferenceOrderID",
        "evidence_ar": "",
        "SQL": "SELECT T2.ReferenceOrderID FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain End Caps'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the 12th business's first line address?",
        "question_ar": "",
        "evidence_en": "12th business refers to BusinessEntityID = 12;",
        "evidence_ar": "",
        "SQL": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 12"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list any three businesses with their IDs that are located in Dallas City.",
        "question_ar": "",
        "evidence_en": "business with ther ID refers to BusinessEntityID",
        "evidence_ar": "",
        "SQL": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Dallas' LIMIT 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the state that Racine belongs to?",
        "question_ar": "",
        "evidence_en": "Racine is a city",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the difference in percentage between the product descriptions written in Arabic and Thai?",
        "question_ar": "",
        "evidence_en": "Arabic and Thai are language names refers to name = 'Arabic'and name = 'Thai'; Differencce in percentage = Subtract(((Count(CultureID(name = 'Arabic'))/Count(CultureID))*100),((Count(CultureID(name = 'Thai'))/Count(CultureID))*100)));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What percentage of businesses in the Northwest US have forecasted annual sales of above 300,000?",
        "question_ar": "",
        "evidence_en": "Northwest refers to Name = 'Northwest'; US refers to CountryRegionCode = 'US'; forecasted annual sales of above 300,000 refers to SalesQuota >300000; Percentage = Divide(Count(TerritoryID(SalesQuota >300000)),Count(TerritoryID))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.SalesQuota > 300000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.CountryRegionCode = 'US' AND T2.Name = 'Northwest'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the Crankarm product's net profit?",
        "question_ar": "",
        "evidence_en": "net profit = Subtract(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.LastReceiptCost - T2.StandardPrice FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Crankarm%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the product with the almost highest review score?",
        "question_ar": "",
        "evidence_en": "highest review score refers to Rating = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the company's second highest salary per hour for employees who are paid monthly?",
        "question_ar": "",
        "evidence_en": "salary received monthly refers to PayFrequency = 1; highest salary per hour refers to Max(Rate);",
        "evidence_ar": "",
        "SQL": "SELECT Rate FROM EmployeePayHistory WHERE PayFrequency = 1 ORDER BY Rate DESC LIMIT 1, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many Vista cards expired before the year 2007?",
        "question_ar": "",
        "evidence_en": "Vista Card refers to CardType = 'Vista'; expire before the year 2007 refers to ExpYear< = 2006;\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CreditCardID) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear < 2007"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What time does the company's night shift begin? Indicate the answer in regular form.",
        "question_ar": "",
        "evidence_en": "Night shift refers to Name = 'Night';",
        "evidence_ar": "",
        "SQL": "SELECT StartTime FROM Shift WHERE Name = 'Night'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the weight in pounds of the style that is produced the most by the company? If there are multiple products sharing the same weight, indicate the name of each one of them and their corresponding weights.",
        "question_ar": "",
        "evidence_en": "weight in pounds refers to WeightUnitMeasureCode = 'LB';",
        "evidence_ar": "",
        "SQL": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which territory has the greatest difference in sales from previous year to this year? Indicate the difference, as well as the name and country of the region.",
        "question_ar": "",
        "evidence_en": "greatest difference in sales from previous year to this year refers to Max(Subtract(SalesLastYear,SalesYTD));",
        "evidence_ar": "",
        "SQL": "SELECT SalesLastYear - SalesYTD, Name, CountryRegionCode FROM SalesTerritory ORDER BY SalesLastYear - SalesYTD DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the names of the top 6 products that has the biggest size in centimeter and what are its reorder point?",
        "question_ar": "",
        "evidence_en": "in centimeter refers to SizeUnitMeasureCode = 'CM';",
        "evidence_ar": "",
        "SQL": "SELECT Name, ReorderPoint FROM Product WHERE SizeUnitMeasureCode = 'CM' ORDER BY Size DESC LIMIT 6"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much is the amount to be paid by the company for the purchase order with the third highest freight amount?",
        "question_ar": "",
        "evidence_en": "amount to be paid refers to TotalDue;",
        "evidence_ar": "",
        "SQL": "SELECT TotalDue FROM PurchaseOrderHeader ORDER BY Freight DESC LIMIT 2, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What profit will the company gain if they sell 10 items of the product that has the lightest weight?",
        "question_ar": "",
        "evidence_en": "Lightest product refers to Min(Weight); profit if they sell 10 items refers to Subtract (ListPrice , StandardCost) *10;",
        "evidence_ar": "",
        "SQL": "SELECT 10 * (ListPrice - StandardCost) FROM Product WHERE Weight IS NOT NULL ORDER BY Weight LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much is the tax amount of the purchase order with the biggest tax amount? Indicate the purchase order ID.",
        "question_ar": "",
        "evidence_en": "tax amount refers to TaxAmt; biggest tax amount refers to MAX(TaxAmt);",
        "evidence_ar": "",
        "SQL": "SELECT TaxAmt, PurchaseOrderID FROM PurchaseOrderHeader ORDER BY TaxAmt DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many person have a projected yearly sales of no more than 50,000?",
        "question_ar": "",
        "evidence_en": "projected yearly sales refers to SalesQuota; SalesQuota< = 50000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM SalesPersonQuotaHistory WHERE SalesQuota < 500000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who were born before 1969, what is the work shift of the 6th oldest employee?",
        "question_ar": "",
        "evidence_en": "oldest employee born before 1969 refers to year(BirthDate)<'1969';",
        "evidence_ar": "",
        "SQL": "SELECT T3.StartTime, T3.EndTime FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE STRFTIME('%Y', T1.BirthDate) < '1969' ORDER BY T1.BirthDate LIMIT 5, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product allows the company to make the highest profit on a single item among those that are the fastest to manufacture? Indicate the rating of the product if there any.",
        "question_ar": "",
        "evidence_en": "profit on a single item = SUBTRACT(ListPrice, StandardCost); length of time to manufacture refers to DaysToManufacture; fastest to manucature refers to MIN(DaysToManufacture);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Rating FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.DaysToManufacture = ( SELECT DaysToManufacture FROM Product ORDER BY DaysToManufacture LIMIT 1 ) ORDER BY T1.ListPrice - T1.StandardCost DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the full names of the sales person whose bonuses are less than 1,000?",
        "question_ar": "",
        "evidence_en": "full name = FirstName+MiddleName+LastName; Bonus<1000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Bonus < 1000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "When did the Senior Tool Designer, who was 33 years old at the time he was hired, stopped working in the Engineering department?",
        "question_ar": "",
        "evidence_en": "Senior Tool Designer is a JobTitle; 33 years old at the time of hiring refers to SUBTRACT(year(HireDate)), (year(BirthDate)) = 33;",
        "evidence_ar": "",
        "SQL": "SELECT T2.EndDate FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.JobTitle = 'Senior Tool Designer' AND STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 33 AND T2.EndDate IS NOT NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the vendors with an average credit rating, what is the overall total due amount of purchases made by the company to the vendor that isn't preferrerd if another vendor is available?",
        "question_ar": "",
        "evidence_en": "average credit rating refers to CreditRating = 4;  vendor that isn't preferrerd if another vendor is available refers to PreferredVendorStatus = 0; SUM(TotalDue);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.TotalDue) FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 4 AND T1.PreferredVendorStatus = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which department has the most number of night shifts?",
        "question_ar": "",
        "evidence_en": "most number of night shift = MAX(count(shift.Name = 'Night'))",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID GROUP BY T2.DepartmentID ORDER BY COUNT(T1.Name = 'Night') DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much profit can the company gained from selling two high class black Road Bikes with a size of 58?",
        "question_ar": "",
        "evidence_en": "high class refers to Class = 'H\"; road bikes is a name of product subcategory; profit = (MULTIPLY(SUBTRACT(ListPrice, StandardCost)), (2)));",
        "evidence_ar": "",
        "SQL": "SELECT 2 * (T1.ListPrice - T1.StandardCost) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'H' AND T1.Color = 'Black' AND T1.Size = 58 AND T2.Name = 'Road Bikes'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the full names of the 10 youngest married male production technicians?",
        "question_ar": "",
        "evidence_en": "youngest refers to latest BirthDate; married refers to MaritalStatus = 'M'; production technician is a JobTitle; full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the products with an average lead time of 60, which vendor has the highest profit on net? Indicate the credit rating of such vendor.",
        "question_ar": "",
        "evidence_en": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.AverageLeadTime = 60 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the profit on net of the products that have exactly 200 maximum order quantity? Indicate the name of the vendors to which these products were purchased from.",
        "question_ar": "",
        "evidence_en": "maximum orders refers to MaxOrderQty; MaxOrderQty = 200; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastReceiptCost - T1.StandardPrice, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty = 200"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the full name of the non-sales employee who made the most number of rejected purchase orders?",
        "question_ar": "",
        "evidence_en": "non-sales employee refers to PersonType = 'EM'; rejected purchase order refers to Status = 3;",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM PurchaseOrderHeader AS T1 INNER JOIN Person AS T2 ON T1.EmployeeID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.Status = 3 GROUP BY T2.FirstName, T2.LastName ORDER BY COUNT(T1.PurchaseOrderID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the names of the vendor with the second lowest minimum order quantity?",
        "question_ar": "",
        "evidence_en": "minimum order quantity refers to MinOrderQty;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.MaxOrderQty ASC LIMIT 1, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much are the minimum orders of the vendors that are no longer used by the company?",
        "question_ar": "",
        "evidence_en": "vendors that are no longer used by the company refers to ActiveFlag = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T2.MinOrderQty FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ActiveFlag = 0 ORDER BY T2.MinOrderQty LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Of the employees whose vacation hours are no more than 10, what is the age of the oldest employee at the time he/she was hired? Indicate his/her full name.",
        "question_ar": "",
        "evidence_en": "VacationHours<10; age at the time of being hired = SUBTRACT(year(HireDate), year(BirthDate)); full name = FirstName+MiddleName+LastName;",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate), T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.VacationHours <= 10 ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the primary type of all single female employees hired between 1/1/2008 to 12/31/2008?",
        "question_ar": "",
        "evidence_en": "primary type refers to PersonType; single refers to MaritalStatus = 'S\"; female refers to Gender = 'F'; HireDate BETWEEN '2010-1-1'AND '2010-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S' AND STRFTIME('%Y-%m-%d', T1.HireDate) BETWEEN '2008-1-1' AND '2008-12-31' GROUP BY T2.PersonType ORDER BY COUNT(T2.PersonType) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the company's profit on the product that was rated second-highest by David?",
        "question_ar": "",
        "evidence_en": "profit on net on a single product = SUBTRACT(ListPrice, StandardCost); second highest rating refers to Rating = 4; David is the ReviewerName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ListPrice - T2.StandardCost FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'David' ORDER BY T1.Rating DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which geographic area does the city with the second lowest tax rate belongs to? Indicate the name of the state or province as well.",
        "question_ar": "",
        "evidence_en": "geographic area to which the city belong refers to Group;",
        "evidence_ar": "",
        "SQL": "SELECT T3.'Group', T2.Name FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID INNER JOIN SalesTerritory AS T3 ON T2.TerritoryID = T3.TerritoryID ORDER BY T1.TaxRate LIMIT 1, 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average profit of all the low class universal road frames? Indicate how many variety of sizes are there and the available colors.",
        "question_ar": "",
        "evidence_en": "low class refers to Class = 'L'; universal refers to Style = 'U'; road frame is a name of product subcategory; average profit = AVG(SUBTRACT(ListPrice, StandardCost);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.ListPrice - T1.StandardCost), COUNT(DISTINCT T1.Size) , COUNT(DISTINCT T1.Style) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'L' AND T2.Name = 'Road Frames' GROUP BY T1.Class, T1.Color"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the discount percentage of \"LL Road Frame Sale\"?",
        "question_ar": "",
        "evidence_en": "discount percentage refers to DiscountPct; LL Road Frame Sale is a description of special offer;",
        "evidence_ar": "",
        "SQL": "SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many discount are of the type \"Excess Inventory\"?",
        "question_ar": "",
        "evidence_en": "discount refers to DiscountPct; Excess Inventory is a type of special offer;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(SpecialOfferID) FROM SpecialOffer WHERE Type = 'Excess Inventory'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which seasonal discount had the highest discount percentage?",
        "question_ar": "",
        "evidence_en": "seasonal discount is a type of special offer; discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);",
        "evidence_ar": "",
        "SQL": "SELECT Description FROM SpecialOffer WHERE Type = 'Seasonal Discount' ORDER BY DiscountPct DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the top 3 discounts with the highest discount percentage and fall under the reseller category.",
        "question_ar": "",
        "evidence_en": "discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);",
        "evidence_ar": "",
        "SQL": "SELECT Description, DiscountPct FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC LIMIT 0, 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where can I get the demographic information about the Valley Bicycle Specialists store?",
        "question_ar": "",
        "evidence_en": "Valley Bicycle Specialists is a name of a store;",
        "evidence_ar": "",
        "SQL": "SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among all the products that are manufactured in-house, how many of them are salable?",
        "question_ar": "",
        "evidence_en": "product is mnanufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(FinishedGoodsFlag) FROM Product WHERE MakeFlag = 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the minimum inventory quantity of Chainring Bolts?",
        "question_ar": "",
        "evidence_en": "minimum inventory quantity refers to SafetyStockLevel; chainring bolts is a name of product;",
        "evidence_ar": "",
        "SQL": "SELECT SafetyStockLevel FROM Product WHERE Name = 'Chainring Bolts'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product has the highest standard cost?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Product ORDER BY StandardCost DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What type of employee is David Bradley?",
        "question_ar": "",
        "evidence_en": "type of employee refers to PersonType;",
        "evidence_ar": "",
        "SQL": "SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees who are store contacts, how many of them have a title of \"Mr.\"?",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM Person WHERE PersonType = 'SC' AND Title = 'Mr.'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where can I find the Valley Bicycle Specialists store?",
        "question_ar": "",
        "evidence_en": "Valley Bicycle Specialists is a name of store; full address = AddressLine1+AddressLine2;",
        "evidence_ar": "",
        "SQL": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "To which e-mail address should I write if I want to contact David Bradley?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the phone numbers of all the store contacts.",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the hashed password of David Bradley?",
        "question_ar": "",
        "evidence_en": "hashed password refers to PasswordHash;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the e-mail addresses of all the employees who wish to receive e-mail promotions from Adventureworks and selected partners.",
        "question_ar": "",
        "evidence_en": "employees who wish to receive e-mail promotions from AdventureWorks and selected partners refers to EmailPromotion = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailPromotion = 2"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please show the credit card number of David Bradley.",
        "question_ar": "",
        "evidence_en": "credit card number refers to CardNumber;",
        "evidence_ar": "",
        "SQL": "SELECT T3.CardNumber FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "In which year will the David Bradley's credit card expire?",
        "question_ar": "",
        "evidence_en": "year of credit card expiration refers to ExpYear;",
        "evidence_ar": "",
        "SQL": "SELECT T3.ExpYear FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the names of all the store contact employees whose credit cards expired in 2007.",
        "question_ar": "",
        "evidence_en": "year of credit card expiration refers to ExpYear; ExpYear = 2007; store contact refers to PersonType = 'SC';",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.ExpYear = 2007 AND T1.PersonType = 'SC'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the store contact employees, how many of them have a Vista credit card?",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC'; type of credit card refers to CardType; CardType = 'vista';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.FirstName) FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.CardType = 'Vista' AND T1.PersonType = 'SC'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many departments have David Bradley been in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.DepartmentID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the departments that David Bradley used to belong to.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.DepartmentID FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many people were there in the Engineering Department in the year 2009?",
        "question_ar": "",
        "evidence_en": "year(EndDate)>2009 and year(StartDate)<2009;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND STRFTIME('%Y', T2.EndDate) > '2009' AND STRFTIME('%Y', T2.StartDate) < '2009'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which employee has been in the Engineering Department the longest? Please give his or her firstname and lastname.",
        "question_ar": "",
        "evidence_en": "length of stay in a department = SUBTRACT(EndDate, StartDate);",
        "evidence_ar": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' ORDER BY T2.EndDate - T2.StartDate DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among the employees in the Manufacturing group in 2007, how many of them are store contacts?",
        "question_ar": "",
        "evidence_en": "store contact refers to PersonType = 'SC'; year(EndDate)>2007 and year(StartDate)<2007;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Person AS T3 ON T1.BusinessEntityID WHERE T3.PersonType = 'SC' AND T2.GroupName = 'Manufacturing' AND STRFTIME('%Y', T1.EndDate) >= '2007' AND STRFTIME('%Y', T1.StartDate) <= '2007'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the credit card numbers of all the employees who have left the Finance Department.",
        "question_ar": "",
        "evidence_en": "credit card number refers to CardNumber; employees who left the department refers to EndDate NOT null; Engineering Department is a name of department;",
        "evidence_ar": "",
        "SQL": "SELECT T3.CardNumber FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN CreditCard AS T3 ON T1.ModifiedDate = T3.ModifiedDate INNER JOIN PersonCreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T2.Name = 'Finance' AND T1.EndDate IS NOT NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees working in the Engineering Department in 2007 would have their credit cards expired in the same year?",
        "question_ar": "",
        "evidence_en": "year(StartDate) 2007; year of credit card expiration refers to ExpYear; ExpYear = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN PersonCreditCard AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN CreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T4.ExpYear = 2007 AND T2.Name = 'Engineering'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the e-mail address of the employee who switched departments for the most times?",
        "question_ar": "",
        "evidence_en": "switched department the most refers to MAX(count(DepartmentID));",
        "evidence_ar": "",
        "SQL": "SELECT T2.EmailAddress FROM EmployeeDepartmentHistory AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T2.BusinessEntityID ORDER BY COUNT(T1.DepartmentID) DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Among all the employees who don't wish to receive promotion e-mails, how many of them belong to or once belonged to the Engineering Department?",
        "question_ar": "",
        "evidence_en": "Employees who don't wish to receive e-mail promotions refers to EmailPromotion = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND T2.EmailPromotion = 0"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many employees came into the Quality Assurance Group in the year 2007?",
        "question_ar": "",
        "evidence_en": "Quality Assurance Group is a group name of department; came in 2007 refers to year(StartDate) = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.GroupName = 'Quality Assurance' AND STRFTIME('%Y', T1.StartDate) = '2007'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the product names of all the products on the LL Road Frame Sale.",
        "question_ar": "",
        "evidence_en": "LL Road Frame Sale is a description of special offer",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Description = 'LL Road Frame Sale'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products were on the LL Road Frame Sale?",
        "question_ar": "",
        "evidence_en": "LL Road Frame Sale is a description of special offer",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'LL Road Frame Sale'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Has the product Chainring Bolts been on any of the sales?",
        "question_ar": "",
        "evidence_en": "a product that's been on sale refers to SellStartDate NOT null and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(T1.Description) >= 1 THEN 'Yes' ELSE 'No' END FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Chainring Bolts'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products from the Clothing category were on the LL Road Frame Sale?",
        "question_ar": "",
        "evidence_en": "LL Road Frame Sale is a description of special offer",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Please list the products that are under the Clothing category that are manufactured in-house and salable.",
        "question_ar": "",
        "evidence_en": "product is manufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.MakeFlag = 1 THEN T1.Name END FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T2.ProductSubcategoryID = 3"
    },
    {
        "db_id": "works_cycles",
        "question_en": "For all the employees that have left the Engineering Department, what is the average time of their stay?",
        "question_ar": "",
        "evidence_en": "employees who left a department refers to EndDate NOT null; average stay = AVG(SUBTRACT(year(EndDate)), (year(T1.StartDate)));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(365 * (STRFTIME('%Y', T1.EndDate) - STRFTIME('%Y', T1.StartDate)) + 30 * (STRFTIME('%m', T1.EndDate) - STRFTIME('%m', T1.StartDate)) + STRFTIME('%d', T1.EndDate) - STRFTIME('%d', T1.StartDate)) AS REAL) / COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average pay rate of the employees who worked in the Engineering Departmentin 2007?",
        "question_ar": "",
        "evidence_en": "average pay rate = AVG(Rate); work in 2007 refers to year(StartDate)<2007 AND year(EndDate)>2007;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND STRFTIME('%Y', EndDate) > '2007' AND STRFTIME('%Y', T1.StartDate) < '2007'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?",
        "question_ar": "",
        "evidence_en": "selling price refers to ListPrice; highest selling price refers to MAX(ListPrice); lowest selling price refers to MIN(ListPrice);",
        "evidence_ar": "",
        "SQL": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the average profit of all the products from the Clothing category?",
        "question_ar": "",
        "evidence_en": "average profit = DIVIDE(SUM(SUBTRACT(ListPrice, StandardCost))), (COUNT(ProductSubcategoryID))));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.ListPrice - T1.StandardCost) / COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product cost the least in 2013?",
        "question_ar": "",
        "evidence_en": "cost refers to StandardCost; cost the least refers to MIN(StandardCost);",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM ProductCostHistory WHERE StartDate LIKE '2013%' ORDER BY StandardCost LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all products with the color yellow.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM Product WHERE Color = 'Yellow'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the bussiness id for Mr. Hung-Fu Ting?",
        "question_ar": "",
        "evidence_en": "business id refers to BusinessEntityID;",
        "evidence_ar": "",
        "SQL": "SELECT BusinessEntityID FROM Person WHERE Title = 'Mr.' AND FirstName = 'Hung-Fu' AND LastName = 'Ting'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the phone number of the person with id \"12597\"?",
        "question_ar": "",
        "evidence_en": "person with id refers to BusinessEntityID;",
        "evidence_ar": "",
        "SQL": "SELECT PhoneNumber FROM PersonPhone WHERE BusinessEntityID = 12597"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the price for the product with the id \"912\"?",
        "question_ar": "",
        "evidence_en": "price refers to ListPrice;",
        "evidence_ar": "",
        "SQL": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Is there a work order where the planned cost is different from the actual cost?",
        "question_ar": "",
        "evidence_en": "planned cost is different from actual cost refers to ActualCost ! = PlannedCost;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the thumbnail photo file for the product with the id \"979\"?",
        "question_ar": "",
        "evidence_en": "thumbnail photo file refers to ThumbnailPhotoFileName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ThumbnailPhotoFileName FROM ProductProductPhoto AS T1 INNER JOIN ProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.ProductID = 979"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the names of the products with the price of more than 1000$.",
        "question_ar": "",
        "evidence_en": "ListPrice>1000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the product with the most profit?",
        "question_ar": "",
        "evidence_en": "profit = SUBTRACT(ListPrice, StandardCost);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the product stored in location 1 compartment L container 6?",
        "question_ar": "",
        "evidence_en": "compartment refers to Shelf;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are locations of the work order \"35493\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM WorkOrderRouting AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.WorkOrderID = 35493"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What are the products with a large photo?",
        "question_ar": "",
        "evidence_en": "product with large photo refers to LargePhoto NOT null;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductID FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName LIKE '%large.gif'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the socks products.",
        "question_ar": "",
        "evidence_en": "Socks is a name of product subcategory",
        "evidence_ar": "",
        "SQL": "SELECT T2.ProductID FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Name = 'Socks'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "With 100$, how many Cable Lock can you buy?",
        "question_ar": "",
        "evidence_en": "number of products a $100 can buy = DIVIDE(100, ListPrice);",
        "evidence_ar": "",
        "SQL": "SELECT 100 / T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Cable Lock'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the scrap reason for work order \"57788\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.WorkOrderID = 57788"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the cost for the sports?",
        "question_ar": "",
        "evidence_en": "cost refers to StandardCost;",
        "evidence_ar": "",
        "SQL": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products with the id \"476\" are stored in Metal Storage?",
        "question_ar": "",
        "evidence_en": "Metal Storage is name of location",
        "evidence_ar": "",
        "SQL": "SELECT T2.Quantity FROM Location AS T1 INNER JOIN ProductInventory AS T2 ON T1.LocationID = T2.LocationID WHERE T2.ProductID = 476 AND T1.Name = 'Metal Storage'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the products with lower than average cost.",
        "question_ar": "",
        "evidence_en": "cost refers to StandardCost; lower than average cost = StandardCost<(AVG(StandardCost));",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.ProductID FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost < ( SELECT SUM(StandardCost) / COUNT(ProductID) FROM Product )"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the the percentage of profit for the product \"858\"?",
        "question_ar": "",
        "evidence_en": "percentage of profit = DIVIDE(SUBTRACT(ListPrice, StandardCost), (StandardCost)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT (T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 858"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products with a thumpnail photo?",
        "question_ar": "",
        "evidence_en": "products with a thumbnail photo refers to ProductPhotoID ! = 1 ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many days did it take to end the work order \"425\"?",
        "question_ar": "",
        "evidence_en": "days to end a work order = SUBTRACT(ActualEndDate, ActualStartDate);",
        "evidence_ar": "",
        "SQL": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Which product has the highest price in 2012?",
        "question_ar": "",
        "evidence_en": "price refers to ListPrice; highest price refers to MAX(ListPrice);",
        "evidence_ar": "",
        "SQL": "SELECT ProductID FROM ProductListPriceHistory WHERE StartDate LIKE '2012%' ORDER BY ListPrice DESC LIMIT 1"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the cost for the product \"847\"?",
        "question_ar": "",
        "evidence_en": "cost refers to StandardCost;",
        "evidence_ar": "",
        "SQL": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the organization level for Human Resources Manager?",
        "question_ar": "",
        "evidence_en": "Human Resources Manager is a job title",
        "evidence_ar": "",
        "SQL": "SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many of the work orders didn’t meet the due date?",
        "question_ar": "",
        "evidence_en": "workers who did not meet the due date refers to EndDate>DueDate;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(WorkOrderID) FROM WorkOrder WHERE EndDate > DueDate"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the cost and the product number of product with the id \"888\"?",
        "question_ar": "",
        "evidence_en": "cost refers to StandardCost;",
        "evidence_ar": "",
        "SQL": "SELECT T2.StandardCost, T2.ProductNumber FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 888"
    },
    {
        "db_id": "works_cycles",
        "question_en": "How many products using \"roadster_black_small.gif\" as the thumbnail photo?",
        "question_ar": "",
        "evidence_en": "products using roadster_black_small.gif as the thumbnail photo refers to ThumbnailPhotoFileName = 'roadster_black_small.gif';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List the locations ids, compartments and containers for the Lock Ring",
        "question_ar": "",
        "evidence_en": "compartment refers to Shelf; container refers to Bin; Lock Ring is a name of product",
        "evidence_ar": "",
        "SQL": "SELECT T2.LocationID, T2.Shelf, T2.Bin FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Lock Ring'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What category do Road Frames fall into?",
        "question_ar": "",
        "evidence_en": "Road Frames is a name of product subcategory",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Road Frames'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the scraped work orders for handling damage reason.",
        "question_ar": "",
        "evidence_en": "handling damage is descrription of manufacturing failure which refers to ScrapReason.Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.WorkOrderID FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Handling damage'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the profit for the product \"792\"?",
        "question_ar": "",
        "evidence_en": "profit = SUBTRACT(ListPrice, StandardCost);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ListPrice - T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 792"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Who owns the email address \"regina7@adventure-works.com\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "Where are the locations where the product \"810\" is stored?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ProductID = 810"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the name of the product the work order \"2540\" was making?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WorkOrderID = 2540"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the price for the AWC Logo Cap?",
        "question_ar": "",
        "evidence_en": "price refers to ListPrice; price of 3 products = MULTIPLY(ListPrice, 3); Lock Washer 6 is a name of a product;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'AWC Logo Cap'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "List all the work orders that is related to the Down Tube.",
        "question_ar": "",
        "evidence_en": "Down Tube is a name of a product;",
        "evidence_ar": "",
        "SQL": "SELECT T2.WorkOrderID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What is the the average percentage of profit for the all the product?",
        "question_ar": "",
        "evidence_en": "average profit percentage = DIVIDE(SUBTRACT(ListPrice, StandardCost)), (StandardCost)));",
        "evidence_ar": "",
        "SQL": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "works_cycles",
        "question_en": "What proportion of work order is in Subassembly?",
        "question_ar": "",
        "evidence_en": "proportion = DIVIDE(SUM(Name = 'Subassembly'). (COUNT(WorkOrderID)));",
        "evidence_ar": "",
        "SQL": "SELECT 100.0 * SUM(CASE WHEN T1.Name = 'Subassembly' THEN 1 ELSE 0 END) / COUNT(T2.WorkOrderID) FROM Location AS T1 INNER JOIN WorkOrderRouting AS T2 ON T1.LocationID = T2.LocationID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object samples are there in image no.1?",
        "question_ar": "",
        "evidence_en": "object samples refers to OBJ_SAMPLE_ID; image no.1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have over 20 object samples?",
        "question_ar": "",
        "evidence_en": "over 20 object samples refers to COUNT(OBJ_SAMPLE_ID) > 20",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.IMG_ID) FROM ( SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20 ) T1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the ID of the image with the most number of object samples?",
        "question_ar": "",
        "evidence_en": "ID of the image refers to IMG_ID; most number of object samples refers to max(count(OBJ_SAMPLE_ID))",
        "evidence_ar": "",
        "SQL": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Please list the IDs of the object samples in class no. 297 in image no.1.",
        "question_ar": "",
        "evidence_en": "IDs of the object samples refers to OBJ_SAMPLE_ID; class no. 297 in image no.1 refers to IMG_ID = 1 and OBJ_CLASS_ID = 297",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many self-relations are there between the object samples in image no.5?",
        "question_ar": "",
        "evidence_en": "self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the bounding box of the object sample in image no.5 that has a self-relation?",
        "question_ar": "",
        "evidence_en": "bounding box of the object sample refers to (x, y, W, H); image no.5 refers to IMG_ID = 5; has a self-relation refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
        "evidence_ar": "",
        "SQL": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object samples in image no.1 are in the class of \"man\"?",
        "question_ar": "",
        "evidence_en": "object samples refers to OBJ_CLASS_ID; image no.1 refers to IMG_ID = 1; in the class of \"man\" refers to OBJ_CLASS = 'man'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have at least one object sample in the class of \"man\"?",
        "question_ar": "",
        "evidence_en": "have at least one object sample in the class of \"man\" refers to count(IMG_ID where OBJ_CLASS = 'man') > = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Please list the classes of all the object samples in image no.1.",
        "question_ar": "",
        "evidence_en": "classes of all the object samples refers to OBJ_CLASS; image no.1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 GROUP BY T1.OBJ_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the relation between object sample no.8 and object sample no.4 in image no.1?",
        "question_ar": "",
        "evidence_en": "relation refers to PRED_CLASS; object sample no.8 and object sample no.4 refers to OBJ1_SAMPLE_ID = 8 AND OBJ2_SAMPLE_ID = 4; image no.1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many pairs of object samples in image no.1 have the relation of \"parked on\"?",
        "question_ar": "",
        "evidence_en": "pairs of object samples refers to OBJ1_SAMPLE_ID and OBJ2_SAMPLE_ID; image no.1 refers to IMG_ID = 1; relation of \"parked on\" refers to PRED_CLASS = 'parked on'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Please list all the predicted relation classes of object sample no.14 in image no.1.",
        "question_ar": "",
        "evidence_en": "predicted relation classes refers to PRED_CLASS; object sample no.14 in image no.1 refers to OBJ1_SAMPLE_ID = 14 AND OBJ2_SAMPLE_ID = 14 and IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID = 14 AND T2.OBJ2_SAMPLE_ID = 14"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have at least one pair of object samples with the relation \"parked on\"?",
        "question_ar": "",
        "evidence_en": "How many images have at least one pair of object samples with the relation \"parked on\" refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID and PRED_CLASS = 'parked on'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Please list the IDs of all the images with more than 2 pairs of object samples with the relation \"parked on\".",
        "question_ar": "",
        "evidence_en": "IDs of all the images refers to IMG_ID; relation \"parked on\" refers to PRED_CLASS = 'parked on'; more than 2 pairs refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID",
        "evidence_ar": "",
        "SQL": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2"
    },
    {
        "db_id": "image_and_language",
        "question_en": "To which predicted relation class does the self-relation of the object sample in image no.5 belong?",
        "question_ar": "",
        "evidence_en": "predicted relation class refers to PRED_CLASS; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 5 AND T2.OBJ1_SAMPLE_ID = T2.OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the bounding boxes of the object samples with a predicted relation class of \"by\" in image no.1?",
        "question_ar": "",
        "evidence_en": "bounding boxes of the object samples refers to (x, y, W, H); predicted relation class of \"by\" refers to PRED_CLASS = 'by'; image no.1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T3.X, T3.Y, T3.W, T3.H FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T1.PRED_CLASS = 'by'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the average difference in the y coordinate of 2 object samples with the relation \"parked on\" in image no.1?",
        "question_ar": "",
        "evidence_en": "relation \"parked on\" refers to PRED_CLASS = 'parked on'; image no.1 refers to IMG_ID = 1; average difference in the y coordinate = divide(sum(Y), count(PRED_CLASS)) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the percentage of the object samples in the class of \"man\" in image no.1?",
        "question_ar": "",
        "evidence_en": "object samples refers to OBJ_SAMPLE_ID; class of \"man\" refers to OBJ_CLASS = 'man'; image no.1 refers to IMG_ID = 1; percentage = divide(count(OBJ_SAMPLE_ID)when OBJ_CLASS = 'man', count(OBJ_SAMPLE_ID)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the total number of the attribute classes.",
        "question_ar": "",
        "evidence_en": "attribute classes refers to ATT_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ATT_CLASS_ID) FROM ATT_CLASSES"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object classes are there in the database?",
        "question_ar": "",
        "evidence_en": "object classes refers to OBJ_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Provide the number of predicted classes.",
        "question_ar": "",
        "evidence_en": "predicted classes refers to PRED_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give the bounding box of the kite in image no.2324765.",
        "question_ar": "",
        "evidence_en": "bounding box refers to (x, y, W, H); kite refers to OBJ_CLASS = 'kite'; image no.2324765 refers to IMG_ID = 2324765",
        "evidence_ar": "",
        "SQL": "SELECT T2.X, T2.Y, T2.W, T2.H FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2324765 AND T1.OBJ_CLASS = 'kite'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many white objects are there in image no.2347915?",
        "question_ar": "",
        "evidence_en": "white objects refers to ATT_CLASS = 'white'; image no.2347915 refers to IMG_ID = 2347915",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give the number of samples in image no.2377985 whose attribute is electrical.",
        "question_ar": "",
        "evidence_en": "number of samples refers to OBJ_SAMPLE_ID; image no.2377985 refers to IMG_ID = 2377985; attribute is electrical refers to ATT_CLASS = 'electrical'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the relationship between object sample no.12 and no.8 of image no.2345511?",
        "question_ar": "",
        "evidence_en": "relationship refers to PRED_CLASS; object sample no.12 and no.8 of image no.2345511 refers to IMG_ID = 2345511 AND OBJ1_SAMPLE_ID = 12 AND OBJ2_SAMPLE_ID = 8",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345511 AND T2.OBJ1_SAMPLE_ID = 12 AND T2.OBJ2_SAMPLE_ID = 8"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give the object number of the sample which has the relationship of \"lying on\" with object sample no.1 from image no.2345524.",
        "question_ar": "",
        "evidence_en": "object number of the sample refers to OBJ1_SAMPLE_ID; object sample no.1 from image no.2345524 refers to OBJ2_SAMPLE_ID = 1 and IMG_ID = 2345524",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ1_SAMPLE_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345524 AND T1.PRED_CLASS = 'lying on' AND T2.OBJ2_SAMPLE_ID = 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many samples of food object are there in image no.6?",
        "question_ar": "",
        "evidence_en": "samples of food object refers to OBJ_CLASS = 'food'; image no.6 refers to IMG_ID = 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 6 AND T1.OBJ_CLASS = 'food'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give the number of images containing the object sample of \"suit\".",
        "question_ar": "",
        "evidence_en": "number of images refers to IMG_ID; object sample of \"suit\" refers to OBJ_CLASS = 'suit'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'suit' GROUP BY T2.IMG_ID ) T"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the relationship between \"feathers\" and \"onion\" in image no.2345528?",
        "question_ar": "",
        "evidence_en": "relationship refers to PRED_CLASS; \"feathers\" and \"onion\" in image no.2345528 refers to IMG_ID = 2345528 and OBJ_CLASS = 'feathers' and OBJ_CLASS = 'onion'",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE (T4.OBJ_CLASS = 'feathers' OR T4.OBJ_CLASS = 'onion') AND T2.IMG_ID = 2345528 GROUP BY T1.PRED_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Tell the attribute of the weeds in image no.2377988.",
        "question_ar": "",
        "evidence_en": "attribute of the weeds refers to OBJ_CLASS = 'weeds'; image no.2377988 refers to IMG_ID = 2377988",
        "evidence_ar": "",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T4.OBJ_CLASS = 'weeds' AND T1.IMG_ID = 2377988"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the object whose attribute is blurry in image no.2377993? Give the explanation about the object.",
        "question_ar": "",
        "evidence_en": "attribute is blurry refers to ATT_CLASS = 'blurry'; image no.2377993 refers to IMG_ID = 22377993; explanation about the object refers to OBJ_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT T4.OBJ_CLASS_ID, T4.OBJ_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T2.ATT_CLASS = 'blurry' AND T1.IMG_ID = 22377993"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many samples of \"wall\" are there in image no.2353079?",
        "question_ar": "",
        "evidence_en": "samples of \"wall\" refers to OBJ_SAMPLE_ID and OBJ_CLASS = 'wall' ; image no.2353079 refers to IMG_ID = 2353079",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'wall' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2353079"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the object class of sample no.10 of image no.2320341.",
        "question_ar": "",
        "evidence_en": "object class refers to OBJ_CLASS; sample no.10 refers to OBJ_SAMPLE_ID = 10; image no.2320341 refers to IMG_ID = 2320341",
        "evidence_ar": "",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2320341 AND T2.OBJ_SAMPLE_ID = 10"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many times is the number of images containing \"broccoli\" than \"tomato\"?",
        "question_ar": "",
        "evidence_en": "images refers to IMG_ID; \"broccoli\" refers to OBJ_CLASS = 'broccoli'; \"tomato\" refers to OBJ_CLASS = 'tomato' ; How many times = divide(count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'broccoli', count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'tomato')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'broccoli' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.OBJ_CLASS = 'tomato' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) times FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have at least 25 attributes?",
        "question_ar": "",
        "evidence_en": "images refers to IMG_ID; have at least 25 attributes refers to count(ATT_CLASS_ID) > = 25",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT IMG_ID FROM IMG_OBJ_att GROUP BY IMG_ID HAVING COUNT(ATT_CLASS_ID) > 25 ) T1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the ids of the images that have a self-relation relationship.",
        "question_ar": "",
        "evidence_en": "ids of the images refers to IMG_ID; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many objects are there in the attribute class id with the highest number of objects?",
        "question_ar": "",
        "evidence_en": "objects refers to OBJ_SAMPLE_ID; attribute class id with the highest number of objects refers to max(COUNT(ATT_CLASS_ID))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_att GROUP BY IMG_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the id of all the objects belonging to the transportation class?",
        "question_ar": "",
        "evidence_en": "id of all the objects belonging to the transportation class refers to OBJ_CLASS_ID and OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.')",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the corresponding classes for the \"very large bike\" attribute?",
        "question_ar": "",
        "evidence_en": "attribute refers to ATT_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'very large'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the unique id number identifying the onion object class?",
        "question_ar": "",
        "evidence_en": "unique id number identifying refers to OBJ_CLASS_ID; onion object class refers to OBJ_CLASS = 'onion'",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the corresponding classes for attributes of image id 8.",
        "question_ar": "",
        "evidence_en": "classes for attributes refers to ATT_CLASS; image id 8 refers to IMG_ID = 8",
        "evidence_ar": "",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 8"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the bounding box of the object with image id 4 and a prediction relationship class id of 144?",
        "question_ar": "",
        "evidence_en": "bounding box of the object refers to (x, y, W, H); image id refers to IMG_ID; prediction relationship class id of 144 refers to PRED_CLASS_ID = 144",
        "evidence_ar": "",
        "SQL": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 144 AND T1.IMG_ID = 3"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have at least 5 \"black\" classes?",
        "question_ar": "",
        "evidence_en": "images refers to IMG_ID; have at least 5 \"black\" classes refers to count(ATT_CLASS_ID) where ATT_CLASS = 'black' > = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(IMGID) FROM ( SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'black' GROUP BY T1.IMG_ID HAVING COUNT(T1.ATT_CLASS_ID) >= 5 ) T3"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the prediction relationship class id of the tallest image?",
        "question_ar": "",
        "evidence_en": "prediction relationship class id refers to PRED_CLASS_ID; tallest image refers to max(H)",
        "evidence_ar": "",
        "SQL": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Which image has the highest number of \"white\" class attributes?",
        "question_ar": "",
        "evidence_en": "\"white\" class attributes refers to ATT_CLASS = 'white'; highest number refers to max(count(ATT_CLASS_ID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'white' GROUP BY T1.IMG_ID ORDER BY COUNT(T1.ATT_CLASS_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the x and y coordinates of all the images with a prediction relationship class id of 98?",
        "question_ar": "",
        "evidence_en": "prediction relationship class id of 98 refers to PRED_CLASS_ID = 98",
        "evidence_ar": "",
        "SQL": "SELECT T2.X, T2.Y FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 98"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many prediction classes with \"has\" captions are there for image id 3050?",
        "question_ar": "",
        "evidence_en": "prediction classes with \"has\" captions refers to PRED_CLASS = 'has'; image id 3050 refers to IMG_ID = 3050",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 3050 AND T2.PRED_CLASS = 'has'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the explanations about object classes of all the images with an x and y coordinate of 0.",
        "question_ar": "",
        "evidence_en": "explanations about distinct object classes refers to OBJ_CLASS; images refers to IMG_ID; x and y coordinate of 0 refers to X = 0 AND Y = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 GROUP BY T1.OBJ_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the captions of all the self-relation relationship prediction classes?",
        "question_ar": "",
        "evidence_en": "self-relation relationship refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID and PRED_CLASS; captions of prediction classes refers to PRED_CLASS",
        "evidence_ar": "",
        "SQL": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN pred_classes AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID GROUP BY T2.PRED_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give all the bounding boxes for image 2222 whose object classes are feathers.",
        "question_ar": "",
        "evidence_en": "bounding boxes refers to (x, y, W, H); image 2222 refers to IMG_ID = 2222; object classes are feathers refers to OBJ_CLASS = 'feathers'",
        "evidence_ar": "",
        "SQL": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Among the objects that have multiple relations, how many images whose captions for the prediction class ids are \"on\"?",
        "question_ar": "",
        "evidence_en": "objects that have multiple relations refers to OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID; captions for the prediction class ids are \"on\" refers to PRED_CLASS = 'on'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the object class of the image with a bounding box of 0, 0, 135, 212?",
        "question_ar": "",
        "evidence_en": "object class of the image refers to OBJ_CLASS; bounding box of 0, 0, 135, 212 refers to X = 0 AND Y = 0 AND W = 135 AND H = 212",
        "evidence_ar": "",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 AND T2.W = 135 AND T2.H = 212"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Provide the dimensions of the bounding box that contains the keyboard that was spotted in image no. 3.",
        "question_ar": "",
        "evidence_en": "dimensions of the bounding box refers to (W, H); keyboard refers to OBJ_CLASS = 'keyboard'; image no. 3 refers to IMG_ID = 3",
        "evidence_ar": "",
        "SQL": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 3 AND T2.OBJ_CLASS = 'keyboard'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Identify the border's coordinates on the X and Y axes that enclose a folk in image no. 6.",
        "question_ar": "",
        "evidence_en": "coordinates on the X and Y axes refers to X and Y; folk refers to OBJ_CLASS = 'folk'; image no. 6 refers to IMG_ID = 6",
        "evidence_ar": "",
        "SQL": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 6 AND T2.OBJ_CLASS = 'folk'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Define the onion's bounding box on image no. 285930.",
        "question_ar": "",
        "evidence_en": "bounding box refers to (X, Y, W, H); onion refers to OBJ_CLASS = 'onion'; image no.285930 refers to IMG_ID = 285930",
        "evidence_ar": "",
        "SQL": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 285930 AND T2.OBJ_CLASS = 'onion'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many objects can you spot in image no. 72? What objects may be identified on the same image and within the bounding box represented as (341, 27, 42, 51)?",
        "question_ar": "",
        "evidence_en": "How many objects refers to OBJ_CLASS_ID; image no. 72 refers to IMG_ID = 72; What objects refers to OBJ_CLASS; bounding box represented as (341, 27, 42, 51) refers to X = 341 and Y = 27 and W = 42 and H = 51",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.IMG_ID = 1, 1, 0)), SUM(IIF(T1.X = 341 AND T1.Y = 27 AND T1.W = 42 AND T1.H = 51, 1, 0)) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "On image no. 5, name the attributes that are composed of multiple objects.",
        "question_ar": "",
        "evidence_en": "image no. 5 refers to IMG_ID = 5; name the attributes refers to ATT_CLASS; multiple objects refers to count(ATT_CLASS) > = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What attributes are used to describe the wall on image no. 27.",
        "question_ar": "",
        "evidence_en": "What attributes refers to ATT_CLASS; wall on image no. 27 refers to OBJ_CLASS = 'wall' and IMG_ID = 27",
        "evidence_ar": "",
        "SQL": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'wall' AND T1.IMG_ID = 27 GROUP BY T4.ATT_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Name the object element that is described as being scattered on image no. 10.",
        "question_ar": "",
        "evidence_en": "Name the object element refers to OBJ_CLASS; scattered refers to ATT_CLASS = 'scattered'; image no. 10 refers to IMG_ID = 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T4.ATT_CLASS = 'scattered' AND T1.IMG_ID = 10 GROUP BY T2.OBJ_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images contain 'bridge' as an object element?",
        "question_ar": "",
        "evidence_en": "images refers to IMG_ID; 'bridge' as an object element refers to OBJ_CLASS = 'bridge'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'bridge'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object elements are there on average in each image?",
        "question_ar": "",
        "evidence_en": "object elements refers to OBJ_CLASS_ID; average = divide(count(OBJ_CLASS_ID), count(IMG_ID))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What colour is the van that can be spotted in image no. 1?",
        "question_ar": "",
        "evidence_en": "colour refers to ATT_CLASS; van refers to OBJ_CLASS = 'van'; image no. 1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Describe the objects, their attributes, and the relationships that comprise the scene on image no. 1 within the bounding box, represented as (388, 369, 48, 128).",
        "question_ar": "",
        "evidence_en": "objects refers to OBJ_CLASS; attributes refers to ATT_CLASS; relationships refers to PRED_CLASS; image no. 1 refers to IMG_ID = 1; bounding box, represented as (388, 369, 48, 128) refers to X = 388 and Y = 369 and W = 48 and H = 128",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.OBJ_CLASS, T4.ATT_CLASS, T6.PRED_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID INNER JOIN IMG_REL AS T5 ON T1.IMG_ID = T5.IMG_ID INNER JOIN PRED_CLASSES AS T6 ON T5.PRED_CLASS_ID = T6.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.X = 388 AND T1.Y = 369 AND T1.W = 48 AND T1.H = 128"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the relationship between object sample no. 25 and object sample no. 2 on image no. 1?",
        "question_ar": "",
        "evidence_en": "relationship refers to PRED_CLASS; object sample no. 25 and object sample no. 2 refers to OBJ1_SAMPLE_ID = 25 and OBJ2_SAMPLE_ID = 2; image no. 1 refers to IMG_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.OBJ1_SAMPLE_ID = 25 AND T1.OBJ2_SAMPLE_ID = 2"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many attributes are related to the object sample no. 7 on image no. 4?",
        "question_ar": "",
        "evidence_en": "How many attributes refers to ATT_CLASS_ID; object sample no. 7 on image no. 4 refers to IMG_ID = 4 and OBJ_SAMPLE_ID = 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object elements can be detected on image no. 31?",
        "question_ar": "",
        "evidence_en": "How many object elements refers to OBJ_CLASS_ID; image no. 31 refers to IMG_ID = 31",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(OBJ_CLASS_ID) FROM IMG_OBJ WHERE IMG_ID = 31"
    },
    {
        "db_id": "image_and_language",
        "question_en": "On image no. 20, identify the attribute ID that is composed of the highest number of objects.",
        "question_ar": "",
        "evidence_en": "image no. 20 refers to IMG_ID = 20; attribute ID refers to ATT_CLASS_ID; highest number of objects refers to max(count(ATT_CLASS_ID))",
        "evidence_ar": "",
        "SQL": "SELECT ATT_CLASS_ID FROM IMG_OBJ_ATT WHERE IMG_ID = 20 GROUP BY ATT_CLASS_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Define the bounding box of the object sample no. 7 on image no. 42.",
        "question_ar": "",
        "evidence_en": "bounding box of the object refers to (X, Y, W, H); sample no.7 on image no.42 refers to IMG_ID = 42 and OBJ_SAMPLE_ID = 7",
        "evidence_ar": "",
        "SQL": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7"
    },
    {
        "db_id": "image_and_language",
        "question_en": "On image no. 99 identify the percentage of objects that are described as white.",
        "question_ar": "",
        "evidence_en": "image no. 99 refers to IMG_ID = 99; described as white refers to ATT_CLASS = 'white'; percentage = divide(count(OBJ_SAMPLE_ID) where ATT_CLASS = 'white', count(OBJ_SAMPLE_ID)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 99"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many attribute classes are there for image id 5?",
        "question_ar": "",
        "evidence_en": "attribute classes refer to ATT_CLASS_ID; image id 5 refers to IMG_ID = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 5"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the explanation about object class 10.",
        "question_ar": "",
        "evidence_en": "explanation about object class 10 refers to OBJ_CLASS where OBJ_CLASS_ID = 10;",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Name the object class of the image with a bounding (422, 63, 77, 363).",
        "question_ar": "",
        "evidence_en": "image with a bounding (422, 63, 77, 363) refers to OBJ_CLASS_ID where X = 422 and Y = 63 and W = 77 and H = 363;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the caption for the prediction class id 12?",
        "question_ar": "",
        "evidence_en": "caption for the prediction class id 12 refers to PRED_CLASS where PRED_CLASS_ID = 12;",
        "evidence_ar": "",
        "SQL": "SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Indicate the bounding box of the image 8.",
        "question_ar": "",
        "evidence_en": "bounding box refers to X, Y, W, H from IMG_OBJ; image 8 refers to IMG_ID = 8;",
        "evidence_ar": "",
        "SQL": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many object samples in image no.908 are in the class of tip?",
        "question_ar": "",
        "evidence_en": "object samples in the class of \"tip\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'tip'; image no.5 refers to IMG_ID = 5;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'tip' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 908"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List out the number of object samples in image no.41 which are in the class of \"kitchen\"?",
        "question_ar": "",
        "evidence_en": "object samples in the class of \"kitchen\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'kitchen'; image no.41 refers to IMG_ID = 41 ;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'kitchen' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 41"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Count the image numbers that contain the \"paint\" object.",
        "question_ar": "",
        "evidence_en": "image numbers that contain the \"paint\" object refer to IMG_ID where OBJ_CLASS = 'paint';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'paint'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many samples of clouds are there in the image no.2315533?",
        "question_ar": "",
        "evidence_en": "samples of clouds refer to IMG_ID where OBJ_CLASS = 'cloud'; image no.2315533 refers to IMG_ID = 2315533;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.IMG_ID = 2315533 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'clouds'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Which object classes belong to the onion category?",
        "question_ar": "",
        "evidence_en": "onion category refers to OBJ_CLASS = 'onion';",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the bounding box of \"spoon\" in image id 1344?",
        "question_ar": "",
        "evidence_en": "the bounding box refers to X, Y, W, H from IMG_OBJ; image id 1344 refers to IMG_ID = 1344; \"spoon\" refers to OBJ_CLASS = 'spoon';",
        "evidence_ar": "",
        "SQL": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1344 AND T2.OBJ_CLASS = 'spoon'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the percentage of \"surface\" object samples in image No.2654?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(OBJ_CLASS_ID where OBJ_CLASS = 'surface'), COUNT(OBJ_CLASS_ID)) as percentage where IMG_ID = 2654;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2654"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images include the \"wood\" objects?",
        "question_ar": "",
        "evidence_en": "images refer to IMG_ID; \"wood\" objects refer to OBJ_CLASS = 'wood';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'wood'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the object class of the image with tallest bounding box.",
        "question_ar": "",
        "evidence_en": "bounding box refers to X, Y, W, H from IMG_OBJ; tallest relates to the height of the bounding box which refers to MAX(H); object class refers to OBJ_CLASS;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Calculate the percentage of \"airplane\" object class in the table.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(OBJ_SAMPLE_ID where OBJ_CLASS = 'airplane'), COUNT(OBJ_CLASS)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OBJ_CLASS) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many samples of animal objects are there in image no.660?",
        "question_ar": "",
        "evidence_en": "samples of animal objects refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'animal'; image no.660 refers to IMG_ID = 660;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'animal' AND T1.IMG_ID = 660"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Name number of samples of \"bed\" object are there in the image No.1098?",
        "question_ar": "",
        "evidence_en": "samples of \"bed\" object refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'bed'; image No.1098 refers to IMG_ID = 1098;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Name the object class of the image with lowest bounding box.",
        "question_ar": "",
        "evidence_en": "bounding box refers to X, Y, W, H from IMG_OBJ; lowest relates to the height of the bounding box which refers to MIN(H);",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Indicating the bounding box of \"kitchen\" in image id 250.",
        "question_ar": "",
        "evidence_en": "bounding box refers to X, Y, W, H from IMG_OBJ; \"kitchen\" in image id 250 refers to OBJ_CLASS = 'kitchen' where IMG_ID = 250;",
        "evidence_ar": "",
        "SQL": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 250 AND T2.OBJ_CLASS = 'kitchen'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Which images have more than 20 object samples?",
        "question_ar": "",
        "evidence_en": "images have more than 20 object samples refer to IMG_ID where COUNT(OBJ_SAMPLE_ID) > 20;",
        "evidence_ar": "",
        "SQL": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(IMG_ID) > 20"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Which object in image 8 is the widest? State its object sample ID.",
        "question_ar": "",
        "evidence_en": "widest relates to the width of the bounding\nbox of the object which refers to MAX(W); object in image 8 refers to OBJ_SAMPLE_ID where IMG_ID = 8;",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 8 ORDER BY W DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Find the object in image 5 where the object with the coordinate of (634, 468).",
        "question_ar": "",
        "evidence_en": "object in image 5 refers to OBJ_SAMPLE_ID where IMG_ID = 5; coordinates of (634, 468) refer to X and Y coordinates of the bounding box in which X = 634 and Y = 468;",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 5 AND X = 634 AND Y = 468"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Which object has the highest attribute classes?",
        "question_ar": "",
        "evidence_en": "object has the highest attribute classes refers to OBJ_SAMPLE_ID where MAX(COUNT(OBJ_SAMPLE_ID));",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ_ATT GROUP BY OBJ_SAMPLE_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the ratio between the number of object samples in image 1 and the number of object samples in image 6?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(OBJ_SAMPLE_ID where IMG_ID = 1), SUM(OBJ_SAMPLE_ID where IMG_ID = 6));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN IMG_ID = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN IMG_ID = 6 THEN 1 ELSE 0 END) FROM IMG_OBJ"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Calculate the average of object samples for the image.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OBJ_SAMPLE_ID), COUNT(IMG_ID));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the IDs of images that have objects with the attributes of 'wired'.",
        "question_ar": "",
        "evidence_en": "IDs of images refer to IMG_ID; objects with the attributes of 'wired' refer to ATT_CLASS = 'wired';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'wired'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the object classes in image 10.",
        "question_ar": "",
        "evidence_en": "object classes refer to OBJ_CLASS; image 10 refers to IMG_ID = 10;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List attributes for object class 'tip' In image 1314.",
        "question_ar": "",
        "evidence_en": "attributes for object refer to ATT_CLASS; class 'tip' in image 1314 refers to OBJ_CLASS = 'tip' where IMG_ID = 1314;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T3.IMG_ID = 1314 AND T4.OBJ_CLASS = 'tip'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the prediction class between object class 'chain' and 'label' in image 2360078?",
        "question_ar": "",
        "evidence_en": "prediction class refers to PRED_CLASS; object class 'chain' refers to OBJ_CLASS = 'chain'; object class 'label' refers to OBJ_CLASS = 'label'; image 2360078 refers to IMG_ID = 2360078;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T2.PRED_CLASS_ID = T1.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID AND T1.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.IMG_ID = 2360078 AND T1.OBJ1_SAMPLE_ID = 15 OR T1.OBJ2_SAMPLE_ID = 18"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have objects with the attributes of polka dot?",
        "question_ar": "",
        "evidence_en": "attributes of polka dot refer to ATT_CLASS = 'polka dot'; images refer to IMG_ID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'polka dot'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the attributes of the widest object in image 400?",
        "question_ar": "",
        "evidence_en": "attributes refer to ATT_CLASS; the widest relates to the width of the bounding\nbox of the object which refers to MAX(W); image 400 refers to IMG_ID = 400;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T2.IMG_ID = 400 ORDER BY T3.W DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the name of the object class that has in most images.",
        "question_ar": "",
        "evidence_en": "object class that has in most images refers to OBJ_CLASS where MAX(COUNT(OBJ_CLASS_ID));",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T1.OBJ_CLASS_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the width and height of the object with the class of 'van' in image 1.",
        "question_ar": "",
        "evidence_en": "The bounding box's W and H abbreviations stand for the object's width and height respectively; class of 'van' in image 1 refers to OBJ_CLASS = 'van' where IMG_ID = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.H, T1.W FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1 AND T2.OBJ_CLASS = 'van'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "State the coordinate of X and Y for the object with the attribute of 'sparse' in image 1.",
        "question_ar": "",
        "evidence_en": "coordinates of X and Y for the object refer to X and Y coordinates of the bounding box; attribute of 'sparse' in image 1 refers to IMG_ID = 1 where ATT_CLASS = 'sparse';",
        "evidence_ar": "",
        "SQL": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 1 AND T1.ATT_CLASS = 'sparse'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Calculate the percentage of object samples that are related to street lights.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'street lights'), COUNT(OBJ_SAMPLE_ID)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'street lights' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_SAMPLE_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Based on image 5, what is the percentage of images that belong windows object class?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'windows' and IMG_ID = 5), COUNT(OBJ_SAMPLE_ID where IMG_ID = 5)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.OBJ_SAMPLE_ID) AS REAL) * 100 / COUNT(CASE WHEN T1.IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'windows'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have an x-coordinate of 5 and y-coordinate of 5?",
        "question_ar": "",
        "evidence_en": "X and Y refer to coordinates of the bounding box where X = 5 and Y = 5; images refer to IMG_ID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have less than 15 object samples?",
        "question_ar": "",
        "evidence_en": "images refer to IMG_ID; less than 15 object samples refer to COUNT(OBJ_SAMPLE_ID) < 15;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have a total of 10 attribute classes?",
        "question_ar": "",
        "evidence_en": "images refer to IMG_ID; total of 10 attribute classes refers to COUNT(OBJ_CLASS_ID) = 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_CLASS_ID = 10"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List the ID of all images with objects that have multiple relations.",
        "question_ar": "",
        "evidence_en": "ID of all images refer to IMG_ID; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;",
        "evidence_ar": "",
        "SQL": "SELECT IMG_ID FROM IMG_REL GROUP BY PRED_CLASS_ID HAVING COUNT(DISTINCT OBJ1_SAMPLE_ID) != 0 AND COUNT(DISTINCT OBJ2_SAMPLE_ID) != 0"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have \"vegetable\" and \"fruits\" as their object classes?",
        "question_ar": "",
        "evidence_en": "images refer to IMG_ID; \"vegetables\" and \"fruits\" as object classes refer to OBJ_CLASS = 'vegetables' and OBJ_CLASS = 'fruits';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'vegetables' OR T2.OBJ_CLASS = 'fruits'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the image ID with a predicted class of \"parked on\"?",
        "question_ar": "",
        "evidence_en": "predicted class of \"parked on\" refers to PRED_CLASS = 'parked on';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.IMG_ID FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'parked on'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the object classes of the images that have a (5,5) coordinate.",
        "question_ar": "",
        "evidence_en": "object classes refer to OBJ_CLASS; (5,5) coordinates refer to X and Y coordinates of the bounding box where X = 5 and Y = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have \"keyboard\" as their object class?",
        "question_ar": "",
        "evidence_en": "images refer to IMG_ID; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What are the width and height of the bounding box of the object with \"keyboard\" as their object class and (5, 647) as their coordinate?",
        "question_ar": "",
        "evidence_en": "The bounding box's W and H abbreviations stand for the object's width and height respectively; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard'; (5, 647) as coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 647;",
        "evidence_ar": "",
        "SQL": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the ID of the images that have an attribute class of \"horse\".",
        "question_ar": "",
        "evidence_en": "ID of all images refer to IMG_ID; attribute class of \"horse\" refers to ATT_CLASS = 'horse';",
        "evidence_ar": "",
        "SQL": "SELECT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'horse'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Provide the x-coordinate and y-coordinate of the image with an attribute class of ''horse\" and an object class of \"fur\".",
        "question_ar": "",
        "evidence_en": "attribute class of \"horse\" refers to ATT_CLASS = 'horse'; object class of \"fur\" refers to OBJ_CLASS = 'fur';",
        "evidence_ar": "",
        "SQL": "SELECT T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'horse' AND T4.OBJ_CLASS = 'fur'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the attribute classes of the image ID \"15\".",
        "question_ar": "",
        "evidence_en": "attribute classes of the image ID \"15\" refer to ATT_CLASS where IMG_ID = 15;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 15"
    },
    {
        "db_id": "image_and_language",
        "question_en": "For those objects that have multiple relations, how many images have a prediction class of \"reading\"?",
        "question_ar": "",
        "evidence_en": "prediction class of \"reading\" refers to PRED_CLASS = 'reading'; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have \"picture\" as their attribute class?",
        "question_ar": "",
        "evidence_en": "images have \"picture\" as their attribute class refer to IMG_ID where ATT_CLASS = 'picture';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many images have \"picture\" as their attribute class and \"bear\" as their object class?",
        "question_ar": "",
        "evidence_en": "\"picture\" as attribute class refers to ATT_CLASS = 'picture'; \"bear\" as object class refers to OBJ_CLASS = 'bear'; images refer to IMG_ID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'picture' AND T4.OBJ_CLASS = 'bear'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the attribute classes of the images that have a (5,5) coordinate.",
        "question_ar": "",
        "evidence_en": "attribute classes refer to ATT_CLASS; (5,5) coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.X = 5 AND T3.Y = 5"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Calculate the average number of images with an attribute class of \"keyboard\".",
        "question_ar": "",
        "evidence_en": "AVG(IMG_ID) where OBJ_CLASS = 'keyboard';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Calculate the ratio of the total number of images with an object class of \"man\" and \"person\".",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(IMG_ID where OBJ_CLASS = 'man'), COUNT(IMG_ID where OBJ_CLASS = 'person'));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T2.OBJ_CLASS = 'person' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List the object sample IDs of image ID 17 with coordinates (0,0).",
        "question_ar": "",
        "evidence_en": "object sample ID refers to OBJ_SAMPLE_ID; image ID 17 refers to IMG_ID = 17; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;",
        "evidence_ar": "",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all bounding box widths and heights of object sample ID 2.",
        "question_ar": "",
        "evidence_en": "The bounding box's W and H abbreviations stand for the object's width and height respectively; object sample ID 2 refers to OBJ_SAMPLE_ID = 2;",
        "evidence_ar": "",
        "SQL": "SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2"
    },
    {
        "db_id": "image_and_language",
        "question_en": "In the Y coordinate of image ID 12, how many are 0?",
        "question_ar": "",
        "evidence_en": "Y coordinate many are 0 refers to Y coordinates of the bounding box where Y = 0; image ID 12 refers to IMG_ID = 12;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List all the attribute classes of image ID 22.",
        "question_ar": "",
        "evidence_en": "attribute classes of image ID 22 refer to ATT_CLASS where MG_ID = 22;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 22"
    },
    {
        "db_id": "image_and_language",
        "question_en": "List the object classes of image ID 36 with coordinates (0,0).",
        "question_ar": "",
        "evidence_en": "object classes of image ID 36 refers to OBJ_CLASS where IMG_ID = 36; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Write 10 coordinates with the object class \"pizza.\"",
        "question_ar": "",
        "evidence_en": "coordinates for the object refer to X, Y, W and H coordinates of the bounding box; object class \"pizza\" refers to OBJ_CLASS = 'pizza';",
        "evidence_ar": "",
        "SQL": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What object class is in the X and Y coordinates of 126 and 363?",
        "question_ar": "",
        "evidence_en": "object class refers to OBJ_CLASS; X and Y coordinates of 126 and 363 refer to coordinates of the bounding box where X = 126 and Y = 363;",
        "evidence_ar": "",
        "SQL": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the most common object class of image ID 56?",
        "question_ar": "",
        "evidence_en": "the most common object class of image ID 56 refers to MAX(COUNT(OBJ_CLASS_ID)) where IMG_ID = 56;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 56 GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T2.OBJ_CLASS_ID) DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Write the object classes of image ID 22 alongside the object's width and height.",
        "question_ar": "",
        "evidence_en": "object classes of image ID 22 refers to OBJ_CLASS where IMG_ID = 22; the object's width and heigh refer to W and H coordinates of the bounding box respectively;",
        "evidence_ar": "",
        "SQL": "SELECT T1.W, T1.H, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 22"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the predicate class of image ID 68?",
        "question_ar": "",
        "evidence_en": "predicate class of image ID 68 refers to PRED_CLASS where IMG_ID = 68;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 68"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many 'has' predicate classes does image ID 107 have?",
        "question_ar": "",
        "evidence_en": "has' predicate classes refers to PRED_CLASS = 'has'; image ID 107 refers to IMG_ID = 107;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Name the most common predicate class of image ID 4434.",
        "question_ar": "",
        "evidence_en": "the most common predicate class of image ID 4434 MAX(PRED_CLASS) where IMG_ID = 4434;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 4434 ORDER BY T2.PRED_CLASS DESC LIMIT 1"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Count the number of 'dress' object classes and include their X and Y coordinates in image ID 1764.",
        "question_ar": "",
        "evidence_en": "dress' object classes refer to OBJ_CLASS = 'dress'; image ID 1764 refers to IMG_ID = 1764; X and Y refer to coordinates of the bounding box;",
        "evidence_ar": "",
        "SQL": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1764 AND T2.OBJ_CLASS = 'dress'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "Give the X and Y coordinates of the sample object of image ID 23 that has the 'cast' attribute class.",
        "question_ar": "",
        "evidence_en": "X and Y refer to coordinates of the bounding box; image ID 23 refers to IMG_ID = 23; 'cast' attribute class refers to ATT_CLASS = 'cast';",
        "evidence_ar": "",
        "SQL": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 23 AND T1.ATT_CLASS = 'cast'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "How many 'blue' attribute classes are there on image ID 2355735?",
        "question_ar": "",
        "evidence_en": "blue' attribute classes on image ID 2355735 refer to ATT_CLASS = 'blue' where IMG_ID = 2355735;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ATT_CLASS) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 2355735 AND T1.ATT_CLASS = 'blue'"
    },
    {
        "db_id": "image_and_language",
        "question_en": "What is the average width and height of the objects in image ID 47? List their object classes as well.",
        "question_ar": "",
        "evidence_en": "The bounding box's W and H abbreviations stand for the object's width and height in which average width and height refer to AVG(W) and AVG(H) respectively; image ID 47 refers to IMG_ID = 47; object classes refer to OBJ_CLASS;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OBJ_CLASS, AVG(T1.W), AVG(T1.H) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47 GROUP BY T2.OBJ_CLASS"
    },
    {
        "db_id": "hockey",
        "question_en": "List the first Name and last name of all players not from USA and who are born in 1990 .",
        "question_ar": "",
        "evidence_en": "Not from USA refers to birthCountry! = 'USA'; born in 1990 refers to birthYear = 1990\n",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName FROM Master WHERE birthYear = 1990 AND birthCountry != 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "List all players' given name who are good at both left and right hand and playing the forward position.",
        "question_ar": "",
        "evidence_en": "good at both left and right hand refers to shootCatch IS NULL;  playing the forward position refers to pos = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F'"
    },
    {
        "db_id": "hockey",
        "question_en": "Who are the players who were not in the Hall of Fame list.",
        "question_ar": "",
        "evidence_en": "not in the Hall of Fame refers to hofID IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName FROM Master WHERE hofID IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Who is the youngest player who is still living. State the given name and date of birth.",
        "question_ar": "",
        "evidence_en": "still living refers to deathYear IS NULL; youngest refers to MAX(birthYear,birthMon,birthDay)",
        "evidence_ar": "",
        "SQL": "SELECT nameGiven , nameGiven , birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthday DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For all the deceased players who are good at both left and right hand, list the player's name and the age when he died.",
        "question_ar": "",
        "evidence_en": "age when he died refers to SUBTRACT(deathYear,birthYear); deceased refers to deathYear IS NOT NULL; good at both left and right hand refers to shootCatch IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalies who played for more than two teams from Year 2000 to 2005.",
        "question_ar": "",
        "evidence_en": "goalie who played for more than 2 teams refers to COUNT(DISTINCT(T2.tmID))>2",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year >= 2000 AND T2.year <= 2005 GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.tmID) > 2"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average weight of players who have height greater than 72 inches.",
        "question_ar": "",
        "evidence_en": "average weight refers to AVG(weight); height greater than 72 inches refers to height>72",
        "evidence_ar": "",
        "SQL": "SELECT AVG(weight) FROM Master WHERE height > 72"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.",
        "question_ar": "",
        "evidence_en": "played more than total of 5000 minutes refers to SUM(Min)>5000;country he was born refers to birthCountry\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goaltenders who had played in both PCHA and NHL league.",
        "question_ar": "",
        "evidence_en": "PCHA refers to lgID = 'PCHA'; NHL league refers to lgID = 'NHL'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1"
    },
    {
        "db_id": "hockey",
        "question_en": "List all deceased goalies by last name. List the season where he had the most time played.",
        "question_ar": "",
        "evidence_en": "deceased refers to deathYear; most time played refers to MAX(Min)",
        "evidence_ar": "",
        "SQL": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "List all goalies from year 2000 to 2010 for team COL. State their given name, height, weight and age of today.",
        "question_ar": "",
        "evidence_en": "team COL refers to tmID = 'COL'; age of today refers to SUBTRACT(YEAR(NOW())-birthYear)",
        "evidence_ar": "",
        "SQL": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID"
    },
    {
        "db_id": "hockey",
        "question_en": "Name all goalies with 10 or more empty net goals. Name the players and season where he played.",
        "question_ar": "",
        "evidence_en": "10 or more empty net goals refers to ENG> = 10; season refers to year",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10"
    },
    {
        "db_id": "hockey",
        "question_en": "State the goalie who has the lowest percentage of goals against among all the shots against recorded. Name the players and season where he played.",
        "question_ar": "",
        "evidence_en": "goals against refers to GA; shots against refers to SA; lowest percentage of goals against among all the shots against refers to MIN(DIVIDE(GA,SA)*100)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE CAST(T2.GA AS REAL) / T2.SA IS NOT NULL ORDER BY CAST(T2.GA AS REAL) / T2.SA LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "List all goalies who played in the year 2005 season and shorter than 72 inches. List all the team names he play for.",
        "question_ar": "",
        "evidence_en": "shorter than 72 inches refers to height<72",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T2.year = 2005 AND T1.height < 72"
    },
    {
        "db_id": "hockey",
        "question_en": "State the nick name of player ID 'aubinje01'. List all the teams and season he played for.",
        "question_ar": "",
        "evidence_en": "nick name refers to nameNick; team refers to tmID; season refers to year\n\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.nameNick, T3.year, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01'"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalies with the most seasons played. State the average time he played for each season.",
        "question_ar": "",
        "evidence_en": "most seasons played refers to MAX(COUNT(playerID)); average time he played for each season refers to DIVIDE(SUM(T2.Min),COUNT(T2.playerID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.year, AVG(T2.Min) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = ( SELECT playerID FROM Goalies GROUP BY playerID ORDER BY COUNT(playerID) DESC LIMIT 1 ) GROUP BY T1.firstName, T1.lastName, T2.year"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalie and the season he played where he had 5% shutouts among the number of goals recorded while the goalie was on the ice.",
        "question_ar": "",
        "evidence_en": "shutouts refers to SHO; number of goals refers to GA; 5% shutouts among the number of goals refers to DIVIDE(SHO,GA)*100 = 5.00",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN ( SELECT playerID, year FROM Goalies WHERE CAST(SHO AS REAL) / GA > 0.05 ) AS T2 ON T2.playerID = T1.playerID"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the deceased players whose death country is different from his birth country order by birth year.",
        "question_ar": "",
        "evidence_en": "death country is different from his birth country refers to birthCountry! = deathCountry",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName FROM Master WHERE birthCountry != deathCountry ORDER BY birthYear"
    },
    {
        "db_id": "hockey",
        "question_en": "Who are the players played both in NHL and WHA. List the given name and first year they were in NHL and first year in WHA.",
        "question_ar": "",
        "evidence_en": "first year they were in NHL refers to firstNHL; first year in WHA refers to firstWHA; play in both refers to firstNHL IS NOT NULL AND firstWHA IS NOT NULL\n",
        "evidence_ar": "",
        "SQL": "SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "List the living players who have two positions. State their given name the position they play.",
        "question_ar": "",
        "evidence_en": "living players refers to deathYear IS NULL; positions refers to pos",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName, pos FROM Master WHERE deathYear IS NULL AND pos LIKE '%/%'"
    },
    {
        "db_id": "hockey",
        "question_en": "State the nick name of the tallest player? If the player had left NHL, mention the last season he was with NHL.",
        "question_ar": "",
        "evidence_en": "nick name refers to nameNick; tallest player refers to MAX(height); had left NHL refers to lastNHL",
        "evidence_ar": "",
        "SQL": "SELECT nameNick, lastNHL FROM Master ORDER BY height DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average height of player who were born in 1990 and after? Compare the average height with players who were born before 1990.",
        "question_ar": "",
        "evidence_en": "average height refers to AVG(height); born in 1990 refers to birthYear = 1990\n",
        "evidence_ar": "",
        "SQL": "SELECT AVG(IIF(birthYear < 1990, height, NULL)) - AVG(IIF(birthYear >= 1990, height, NULL)) FROM Master"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalies who are good at left hand and also has become a coach after retirement. Name all teams he had played before.",
        "question_ar": "",
        "evidence_en": "good at left hand refers to shootCatch = 'L'; goalies refers to pos = 'G'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.playerID IS NOT NULL AND T2.coachID IS NOT NULL AND T2.shootCatch = 'L' AND T2.pos = 'G'"
    },
    {
        "db_id": "hockey",
        "question_en": "List all the deceased goalies and the teams he had played whose birth country was in Canada.",
        "question_ar": "",
        "evidence_en": "goalies refers to pos = 'G'; deceased goalies refers to deathYear IS NOT NULL\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.birthCountry = 'Canada' AND T2.deathYear IS NOT NULL AND T2.pos = 'G'"
    },
    {
        "db_id": "hockey",
        "question_en": "Name the goalies and season they played when Boston Bruins won number 1 in rank.",
        "question_ar": "",
        "evidence_en": "goalies refers to pos = 'G'; season refers to year\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T3.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.deathYear IS NOT NULL AND T3.name = 'Boston Bruins' AND T3.rank = 1 AND T1.pos = 'G'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among all goalies who are still alive, whose first season in NHL in before 1950. List the team names they were in.",
        "question_ar": "",
        "evidence_en": "first season in NHL in before 1950 refers to firstNHL<1950; goalies who are still alive refers to deathYear IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950"
    },
    {
        "db_id": "hockey",
        "question_en": "For all players who becomes coach after retirement, state the given name of coach and which teams and years did they coach?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.nameGiven, T3.name, T3.year FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.playerID IS NOT NULL AND T2.coachID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who was never a player, who has highest percentage of game winning? Provide the given name of the coach and team he coached.",
        "question_ar": "",
        "evidence_en": "highest percentage of game winning refers to MAX(DIVIDE(w,g)*100)",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which coach has the best performance for team DET in history? What was the winning percentage? Name the coach and the year he coached.",
        "question_ar": "",
        "evidence_en": "winning percentage refers to DIVIDE(w,g)*100; team DET refers to tmID = 'DET'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.W AS REAL) / T2.G, T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN ( SELECT coachID FROM Coaches ORDER BY CAST(w AS REAL) / g DESC LIMIT 1 ) AS T3 ON T2.coachID = T3.coachID"
    },
    {
        "db_id": "hockey",
        "question_en": "Who is the coach who had coached the the most seasons in MTL? State his given name, date of birth and all teams he had coaches before.",
        "question_ar": "",
        "evidence_en": "date of birth refers to birthDay + birthMon + birthYear",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameGiven , T2.birthYear, T2.birthMon, T2.birthDay, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.lgID = T1.lgID WHERE T3.tmID = 'MTL' GROUP BY T2.nameGiven, T2.birthYear, T2.birthMon, T2.birthDay, T3.name ORDER BY COUNT(T2.coachID) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "List all goalies with more lost than won games for two seasons or more. State the name of the player and team he played.",
        "question_ar": "",
        "evidence_en": "lost refers to L; won refers to W",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.pos = 'G' AND T2.L > T2.W GROUP BY T1.firstName, T1.lastName, T3.name HAVING COUNT(T3.year) > 2"
    },
    {
        "db_id": "hockey",
        "question_en": "For all the goalies born in year 1987, who are good in both right hand and left hand? Calculate his percentage of winning for every season he played.",
        "question_ar": "",
        "evidence_en": "good in both right hand and left hand refers shootCatch IS NULL; winning refers to W; every season he played refers to GP; percentage of winning for every season he played refers to DIVIDE(W,GP)*100",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.year, CAST(T2.W AS REAL) / T2.GP FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.birthYear = 1987 AND T1.shootCatch IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "What is given name for player 'aebisda01'. Calculate the average time in minutes for the all his games played as goaltender.",
        "question_ar": "",
        "evidence_en": "played as goaltender refers to pos = 'G'; time in minutes refers to Min; all his games played refers to GP; average time in minutes refers to DIVIDE(SUM(Min)/SUM(GP))",
        "evidence_ar": "",
        "SQL": "SELECT T1.nameGiven, CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' GROUP BY T1.nameGiven"
    },
    {
        "db_id": "hockey",
        "question_en": "List all living goalies who have greater than 50% wins among all games played. State their last name and first name.",
        "question_ar": "",
        "evidence_en": "wins refers to W; all games played refers to GP;greater than 50% wins among all games played refers to DIVIDE(SUM(W),GP)*100>50",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.playerID HAVING CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) > 0.5"
    },
    {
        "db_id": "hockey",
        "question_en": "How many players and coaches are awarded after death?",
        "question_ar": "",
        "evidence_en": "awarded after death refers to note = 'posthumous'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(note) FROM AwardsMisc WHERE note IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who won an award in the year 1983, how many of them play the position of goalie?",
        "question_ar": "",
        "evidence_en": "position of goalie refers to pos = 'G'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM AwardsPlayers WHERE pos = 'G' AND year = 1983"
    },
    {
        "db_id": "hockey",
        "question_en": "How many coaches worked a temporary term in the year 2007?",
        "question_ar": "",
        "evidence_en": "worked a temporary term refers to notes = 'interim'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(coachID) FROM Coaches WHERE year = 2007 AND notes = 'interim'"
    },
    {
        "db_id": "hockey",
        "question_en": "How many shoutouts are there in the regular season of 1977?",
        "question_ar": "",
        "evidence_en": "regular season refers to `R/P` = 'R'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(year) FROM CombinedShutouts WHERE year = 1977 AND `R/P` = 'R'"
    },
    {
        "db_id": "hockey",
        "question_en": "How many teams scored against their opponent who had pulled their goalie in the year 2005?",
        "question_ar": "",
        "evidence_en": "teams scored against their opponent who had pulled their goalie refers to ENG is not null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(tmID) FROM Goalies WHERE year = 2005 AND ENG IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the years in which the NHL League had shots recorded while the goalie was on the ice.",
        "question_ar": "",
        "evidence_en": "shots recorded while the goalie was on the ice refers to SA IS NOT NULL; NHL League refers to lgID = 'NHL'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "How many teams have the same total number of postseason wins and postseason loses?",
        "question_ar": "",
        "evidence_en": "same total number of postseason wins and postseason loses refers to PostW = PostL",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT COUNT(tmID) FROM Goalies WHERE PostW = PostL"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the name of the person who was in the Hall of Fame in the year 1978.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT name FROM HOF WHERE year = 1978"
    },
    {
        "db_id": "hockey",
        "question_en": "How many people were in the Hall of Fame's Builder category?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Builder'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the people who got into the Hall of Fame after the year 1980, how many of them belong to the category of \"Player\"?",
        "question_ar": "",
        "evidence_en": "after the year 1980 refers to year>1980",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the Nicknames of the players who got in the Hall of Fame in 2007.",
        "question_ar": "",
        "evidence_en": "nicknames refers to nameNick",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T2.year = 2007"
    },
    {
        "db_id": "hockey",
        "question_en": "Did the tallest player got in the Hall of Fame? If yes, please list the year when he got in the Hall of Fame.",
        "question_ar": "",
        "evidence_en": "tallest player refers to max(height)",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.hofID IS NULL THEN 'NO' ELSE T2.year END FROM Master AS T1 LEFT JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.height = ( SELECT MAX(height) FROM Master )"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the awards the coaches who are born in Canada have won.",
        "question_ar": "",
        "evidence_en": "born in Canada refers to birthCountry = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthCountry = 'Canada'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches whose team has over 30 wins in a year, how many of them are born in the USA?",
        "question_ar": "",
        "evidence_en": "over 30 wins refers to w>30; born in the USA refers to birthCountry = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.W > 30 AND T1.birthCountry = 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who have taught teams from the NHL League, how many of them are from Canada?",
        "question_ar": "",
        "evidence_en": "from Canada refers to birthCountry = 'Canada'; NHL league refers to lgID = 'NHL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.lgID = 'NHL' AND T1.birthCountry = 'Canada'"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the awards won by coaches who were born in 1952.",
        "question_ar": "",
        "evidence_en": "born in 1977 refers to birthYear = '1977'",
        "evidence_ar": "",
        "SQL": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthYear = 1952"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who have received an award in 1940, how many of them are born in Toronto?",
        "question_ar": "",
        "evidence_en": "born in Toronto refers to birthCountry = 'Toronto'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1940 AND T1.birthCity = 'Toronto'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who have received an award after the year 1940, how many of them have already died?",
        "question_ar": "",
        "evidence_en": "after the year 1940 refers to year>1940; have already died refers to deathYear IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.year > 1940"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the awards won by coaches who taught the NHL League and have already died.",
        "question_ar": "",
        "evidence_en": "have already died refers to deathYear IS NOT NULL; NHL league refers to lgID = 'NHL'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who have gotten in the Hall of Fame, how many of them have a weight of over 195?",
        "question_ar": "",
        "evidence_en": "weight of over 195 refers to weight>195",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.weight > 195"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the first name of the players who are good at both left hands and right hands for goalie and have gotten in the Hall of Fame.",
        "question_ar": "",
        "evidence_en": "good at both left hands and right hands for goalie refers to shootCatch IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.shootCatch IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who became coaches, how many of them have gotten in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "players who became coaches refers to playerID IS NOT NULL AND coachID IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the birth cities of the players who have won an award in the year 1970.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.birthCity FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1970"
    },
    {
        "db_id": "hockey",
        "question_en": "How many players born in Toronto have won the All-Rookie award?",
        "question_ar": "",
        "evidence_en": "born in Toronto refers to birthCity = 'Toronto'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who have won the All-Rookie award, how many of them have died?",
        "question_ar": "",
        "evidence_en": "have died refers to deathYear IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.deathYear IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who died in Massachussets, how many of them have won an award?",
        "question_ar": "",
        "evidence_en": "died in Massachussets refers to deathState = 'Massachussets'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'MA'"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the awards the players who died in Arlington have won.",
        "question_ar": "",
        "evidence_en": "died in Arlington refers to deathCity = 'Arlington'",
        "evidence_ar": "",
        "SQL": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathCity = 'Kemptville'"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the nicknames of the players who have won the All-Rookie award and are born in March.",
        "question_ar": "",
        "evidence_en": "born in March refers to birthMon = '3'; nicknames refers to nameNick",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthMon = 3"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who were born in July and August, how many of them got in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "born in July and August refers to birthMon IN('7','8')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.birthMon IN (7, 8)"
    },
    {
        "db_id": "hockey",
        "question_en": "In which month was the player who has won the most awards born?",
        "question_ar": "",
        "evidence_en": "who has won the most awards refers to max(count(award)); the month player was born refers to birthMon",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthMon FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Players born in which year have received the most awards in total?",
        "question_ar": "",
        "evidence_en": "received the most awards in total refers to max(count(award))",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which country is the most award-winning player from?",
        "question_ar": "",
        "evidence_en": "most award-winning refers to max(count(award)); country player is from refers to birthCountry",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthCountry ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which country has the most players in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "country refers to birthCountry",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID GROUP BY T1.birthCountry ORDER BY COUNT(T1.playerID) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the positions of the players who were born in Canada and have won the All-Rookie award.",
        "question_ar": "",
        "evidence_en": "born in Canada refers to birthCountry = 'Canada'; pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average BMI of all the coaches who have gotten in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "average BMI = divide(sum(divide(weight, multiply(height, height))), count(coachID))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the percentage of American players among all the players who have gotten in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "percentage of American players = divide(count(hofID where birthCountry = 'USA'), count(hofID))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.birthCountry = 'USA' THEN T1.playerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID"
    },
    {
        "db_id": "hockey",
        "question_en": "How many years did player Id \"healygl01\" play?",
        "question_ar": "",
        "evidence_en": "years of playing = MAX(year)-MIN(year)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(year) FROM Goalies WHERE playerID = 'healygl01'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team did player Id \"roypa01\" play in 1992? Give the team id.",
        "question_ar": "",
        "evidence_en": "team id refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT tmID FROM Goalies WHERE playerID = 'roypa01' AND year = 1992"
    },
    {
        "db_id": "hockey",
        "question_en": "What was the total number of the games that player Id \"rutlewa01\" played in 1967?",
        "question_ar": "",
        "evidence_en": "total number of the games refers to GP",
        "evidence_ar": "",
        "SQL": "SELECT GP FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967"
    },
    {
        "db_id": "hockey",
        "question_en": "Show me how many minutes player Id \"valiqst01\" played in the game in 2007 season.",
        "question_ar": "",
        "evidence_en": "show me how many minutes refers to Min",
        "evidence_ar": "",
        "SQL": "SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007"
    },
    {
        "db_id": "hockey",
        "question_en": "How many games did player Id \"vanbijo01\" win in the 1990 season?",
        "question_ar": "",
        "evidence_en": "the number of wins refers to W",
        "evidence_ar": "",
        "SQL": "SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990"
    },
    {
        "db_id": "hockey",
        "question_en": "In how many games did player Id \"vernomi01\" end up with a tie or an overtime loss in the 1998 season?",
        "question_ar": "",
        "evidence_en": "end up with a tie or an overtime loss refers to T/OL",
        "evidence_ar": "",
        "SQL": "SELECT `T/OL` FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998"
    },
    {
        "db_id": "hockey",
        "question_en": "For the coach who won Second Team All-Star in 1933, how many wins did he have that year?",
        "question_ar": "",
        "evidence_en": "the number of wins refers to count(w)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'"
    },
    {
        "db_id": "hockey",
        "question_en": "Did legendsID \"P194502\" personally attend his Hall of Fame dedication?",
        "question_ar": "",
        "evidence_en": "note = 'posthumous'refers to \"didn't personally attend\"",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T1.note = 'posthumous', 'YES', 'NO') FROM AwardsMisc AS T1 RIGHT JOIN Master AS T2 ON T1.ID = T2.playerID WHERE T2.legendsID = 'P194502'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which position did Mike Antonovich play?",
        "question_ar": "",
        "evidence_en": "pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward",
        "evidence_ar": "",
        "SQL": "SELECT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Mike' AND T1.lastName = 'Antonovich'"
    },
    {
        "db_id": "hockey",
        "question_en": "For the coach who co-coached with Dave Lewis in 1998, where was his birth place?",
        "question_ar": "",
        "evidence_en": "co-coached refers to notes = 'co-coach'; birth place refers to 'birthCountry-birthState-birthCity'",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which player who showed as the third goalie in a game has the biggest weight? Give the full name of the player.",
        "question_ar": "",
        "evidence_en": "the third goalie refers to stint = 3; the biggest weight refers to max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.stint = 3 ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.",
        "question_ar": "",
        "evidence_en": "10 empty net goals refers to ENG = 10; the tallest refers to max(height)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID, T1.height HAVING SUM(T2.ENG) > 10 ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalie who had the most shutouts in 2010, what's his catching hand?",
        "question_ar": "",
        "evidence_en": "the most shutouts refers to max(SHO); shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand",
        "evidence_ar": "",
        "SQL": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 GROUP BY T2.playerID ORDER BY SUM(T2.SHO) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Who is the youngest goalie among those who had more than 150 goal againsts in 2002 season?",
        "question_ar": "",
        "evidence_en": "youngest goalie refers to max(birthYear/birthMon/birthDay); more than 150 goal againsts refers to GA>150",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2002 AND T2.GA > 150 GROUP BY T2.playerID, T1.birthYear, T1.birthMon, T1.birthMon HAVING SUM(T2.GA) ORDER BY T1.birthYear DESC, T1.birthMon DESC, SUM(T1.birthDay) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "In the history of team id NJD, which goalie saved the most goal attempts? Give his full name.",
        "question_ar": "",
        "evidence_en": "saved the most goal attempts refers to max(subtract(SA, GA)); team id refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which teams had the most postseason empty net goals in 2010 season? List their team names.",
        "question_ar": "",
        "evidence_en": "most postseason empty net goals refers to max(PostENG)",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 GROUP BY T2.name ORDER BY SUM(PostENG) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For the team which had the most postseason shutouts in 1995, how many points did they have that year?",
        "question_ar": "",
        "evidence_en": "points refer to Pts; the most postseason shutouts refers to max(PostSHO)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.SHO) FROM Scoring AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1995 GROUP BY T2.tmID ORDER BY SUM(T2.PostSHO) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which coach had the highest winning rates in the 2009 season? What's coach's nickname.",
        "question_ar": "",
        "evidence_en": "the highest winning rate refer to divide(W, sum(W, L))",
        "evidence_ar": "",
        "SQL": "SELECT T2.coachID, T1.nameNick FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2009 ORDER BY CAST(T2.W AS REAL) / (T2.W + T2.L) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For the team had the biggest power play percentage in 2011, who was their coach that season? Give the full name.",
        "question_ar": "",
        "evidence_en": "the biggest power play percentage = max(divide(PPG, PPC))",
        "evidence_ar": "",
        "SQL": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 ORDER BY CAST(T2.PPG AS REAL) / T2.PPC DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "In the Stanley Cup finals history, how many games did player id \"broadpu01\" play in 1922?",
        "question_ar": "",
        "evidence_en": "the number of games refers to GP",
        "evidence_ar": "",
        "SQL": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922"
    },
    {
        "db_id": "hockey",
        "question_en": "How many years did player Id \"cleghsp01\" make to the Stanley Cup finals?",
        "question_ar": "",
        "evidence_en": "the number of years refers to count(year)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(year) FROM ScoringSC WHERE playerID = 'cleghsp01'"
    },
    {
        "db_id": "hockey",
        "question_en": "What was the number of goals did player Id \"dyeba01\" make in the 1921 Stanley Cup finals?",
        "question_ar": "",
        "evidence_en": "the number of goals refers to G",
        "evidence_ar": "",
        "SQL": "SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921"
    },
    {
        "db_id": "hockey",
        "question_en": "Who made the most assists in a single game in the Stanley Cup finals ?",
        "question_ar": "",
        "evidence_en": "the most assists refers to max(A)",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM ScoringSC ORDER BY A DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which league did player id\"adamsja01\" play in 1920?",
        "question_ar": "",
        "evidence_en": "which league refers to lgID",
        "evidence_ar": "",
        "SQL": "SELECT lgID FROM ScoringSC WHERE playerID = 'adamsja01' AND year = 1920"
    },
    {
        "db_id": "hockey",
        "question_en": "What position did player id \"hartgi01\" play in his Stanley Cup finals performance?",
        "question_ar": "",
        "evidence_en": "position refers to pos",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT pos FROM ScoringSC WHERE playerID = 'hartgi01'"
    },
    {
        "db_id": "hockey",
        "question_en": "For the team which had three different goalies in the 2011 postseason games, how many games did they win in the regular season?",
        "question_ar": "",
        "evidence_en": "three different goalies refer to count(playerID) = 3; game won refers to W",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.W) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) = 3"
    },
    {
        "db_id": "hockey",
        "question_en": "Which year was the goalie who had the most postseaon shots Against in 2008 born?",
        "question_ar": "",
        "evidence_en": "the most postseason shots Against refers to max(PostSA); year born refers to birthYear",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many years were there after Don Waddell retired and became a coach in NHL?",
        "question_ar": "",
        "evidence_en": "after retired and became a coach refers to max(subtract(year, lastNHL))",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.year) - MIN(T2.year) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.firstName = 'Don' AND T1.lastName = 'Waddell'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which is the catching hand for the goaltender who had the most shutouts in 1996?",
        "question_ar": "",
        "evidence_en": "the most shutouts refers to max(SHO); catching hand for the goaltender refers to shootCatch; shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand",
        "evidence_ar": "",
        "SQL": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "When was the birthday for the goalie who had most goal againsts in 1965 season?",
        "question_ar": "",
        "evidence_en": "Birthday refers to CONCAT(birthYear / birthMon / birthDate);most goal against refers to MAX(GA);1965 season refers to year = '1965'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthYear, T1.birthMon, birthDay FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1965 ORDER BY T2.GA DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For he who had the highest plus / minus on the court in the 1981 season, what's his full name?",
        "question_ar": "",
        "evidence_en": "highest Plus/minus refers to MAX(+/-); full name refers to firstName, lastName; 1981 season refers to year = '1981'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.`+/-`) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What's the weight of the player who had the most Power Play Goals in the 21st century?",
        "question_ar": "",
        "evidence_en": "21st century refers to year >2000; Power play goals refers to PPG",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year > 2000 GROUP BY T1.playerID, T1.weight ORDER BY SUM(T2.PPG) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For the player who scored 7 shorthanded goals in 1989, what's his dominant hand?",
        "question_ar": "",
        "evidence_en": "1989 refers to the year of scoring; \"dominant hand\" and \"shooting hand\" are synonyms which refers to shootCatch\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7"
    },
    {
        "db_id": "hockey",
        "question_en": "Who was the most clutch player in 1986? Give his full name.",
        "question_ar": "",
        "evidence_en": "clutch player' and 'trustworthy player in the critical moment' are synonyms; most clutch player refers to the most trustworthy player which refers to MAX(GWG); 1986 is the year played",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many shots on goal did Cam Neely had in the year of 1990?",
        "question_ar": "",
        "evidence_en": "1990 refers to the year played; Shot on goal refers to SOG\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.SOG FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Cam' AND T1.lastName = 'Neely' AND T2.year = '1990'"
    },
    {
        "db_id": "hockey",
        "question_en": "Who was the coach for the team which had the most bench minors penalty in 2003？",
        "question_ar": "",
        "evidence_en": "Coach of the team refers to firstName+lastName; 2003 refers to the year\n\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalies whose weight are above 190, who had most goal againsts in 1978 season?",
        "question_ar": "",
        "evidence_en": "Weight of above 190 refers to weight >190; 1978 season refers to the year played",
        "evidence_ar": "",
        "SQL": "SELECT T1.playerID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = '1978' AND T2.weight > 190 ORDER BY T1.GA DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the percentage of winning rate of improvement since Alain Vigneault became the coach of Vancouver Canucks in 2006 season?",
        "question_ar": "",
        "evidence_en": "winning rate refers to DIVIDE (w, SUM(w, l)); Vancouver Canucks is name of team where tmID = 'VAN'\nWinning rate refers to DIVIDE(wins in year = '2005/2006'(ADD(wins+loses); improvement refers to SUBTRACT(DIVIDE(wins in year = '2005'(ADD(wins+loses), DIVIDE(wins in year = '2006'(ADD(wins+loses))\n",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalie who had the highest defensive success rate in the postseason of 2011, what's his legends ID ?",
        "question_ar": "",
        "evidence_en": "Post season of 2011 refers to year = ’2011’\ndefensive success rate refers to (SUBTRACT(1 (DIVIDE(PostGA/PostSA)), *100%)\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many former athletes go on to become coaches after retiring?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the teams with the most number of ties, how many penalty was committed by a player or coach that is not on the ice? Indicate the name of the team.",
        "question_ar": "",
        "evidence_en": "penalty refers to BenchMinor; Ties refer to T",
        "evidence_ar": "",
        "SQL": "SELECT BenchMinor, name FROM Teams ORDER BY T DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which NHL award was most frequently won by the coach with the most wins?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the power play percentage of the team with the most number of loses?",
        "question_ar": "",
        "evidence_en": "Power play percentage refers to PPG, most number of loses refers to MAX(L)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(PPG) AS REAL) * 100 / SUM(PPC) FROM Teams GROUP BY tmID ORDER BY SUM(L) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many players were included in the Hall of Fame on average between 1950 and 1980?",
        "question_ar": "",
        "evidence_en": "year BETWEEN 1950 and 1980; average = DIVIDE(COUNT(hofID)), 30)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(name) AS REAL) / 30 FROM HOF WHERE year BETWEEN 1950 AND 1980 AND category = 'Player'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which country produced the most number of hockey players? Identify which year was most of the hockey players are born.",
        "question_ar": "",
        "evidence_en": "Year most hockey players were born refers to MAX(birthYear); birthCountry refers to the country where a player was born\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT birthCountry, birthYear FROM Master GROUP BY birthCountry, birthYear ORDER BY COUNT(birthCountry) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many wins does the team have whose goaltender have the most number of successfully stopping the other team from scoring during the entire game?",
        "question_ar": "",
        "evidence_en": "Number of wins refers to W; Shutout refers to SHO; a shutout is credited to a goaltender who successfully stops the other team from scoring during the entire game.\n",
        "evidence_ar": "",
        "SQL": "SELECT SUM(W) FROM Goalies GROUP BY tmID ORDER BY SUM(SHO) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team recorded the most number of road victories in 2005? Indicate the team ID.",
        "question_ar": "",
        "evidence_en": "road victories refers to rW; team id refers to tmID; victories and wins are synonyms\n\n",
        "evidence_ar": "",
        "SQL": "SELECT tmID FROM TeamSplits WHERE YEAR = '2005' ORDER BY rW DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the position of the 9th oldest hockey player?",
        "question_ar": "",
        "evidence_en": "position refers to pos; date of birth refers to birthDay + birthMon + birthYear",
        "evidence_ar": "",
        "SQL": "SELECT pos FROM Master WHERE birthYear IS NOT NULL ORDER BY birthYear, birthMon, birthDay LIMIT 8"
    },
    {
        "db_id": "hockey",
        "question_en": "How many goals were scored while the goalkeeper was on the ice in the 1924 WCHL by the goalie with the most goals scored?",
        "question_ar": "",
        "evidence_en": "WCHL is the league's abbreviated name which refers to lgID = 'WCHL'; most goals scored referst to MAX(PostGA); GA is abbreviation for Post Against which means number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.",
        "evidence_ar": "",
        "SQL": "SELECT SUM(PostGA) FROM Goalies WHERE lgID = 'WCHL' AND year = '1924' GROUP BY playerID ORDER BY SUM(PostGA) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "In 2006, what is the overall number of october defeats for the team with the most October defeats? Indicate the team ID.",
        "question_ar": "",
        "evidence_en": "team ID refers to tmID; 'defeats' and 'loses' are synonyms; most October defeats refers to max(OctL)",
        "evidence_ar": "",
        "SQL": "SELECT OctL, tmID FROM TeamSplits WHERE year = '2006' ORDER BY OctL DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many players, whose shooting/catching hand is both left and right, debuted their first NHL in 2011?",
        "question_ar": "",
        "evidence_en": "shooting/catching hand is both left and right refers to shootCatch is NULL, debuted their first NHL in 2011 refers to firstNHL = 2011",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM Master WHERE shootCatch IS NULL AND firstNHL = '2011'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which year recorded the most number of goals by a player and how old was the player at the time the most number of goals was achieved by him?",
        "question_ar": "",
        "evidence_en": "most number of goals refers to max(G); how old refers to age = subtract(year(max(G)), birthYear)",
        "evidence_ar": "",
        "SQL": "SELECT T1.year, T1.year - T2.birthYear FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID GROUP BY T1.year, T1.year - T2.birthYear ORDER BY SUM(T1.G) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average height of all the goalies born in the 70s who's a left shooting/catching dominant and to which team do the tallest player/s play for most recently?",
        "question_ar": "",
        "evidence_en": "goalies refers to pos = 'G'; born in the 70s refers to birthYear between '1970' and '1979'; left shooting/catching dominant refers to shootCatch = 'L'; tallest refers to max(height); average height = avg(height(pos = 'G' & birthYear between '1970' and '1979' & shootCatch = 'L')); most recently refers to max(Teams.year)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the total amount of assists of the NHL player with the most assists in history? Please indicate his/her full name.",
        "question_ar": "",
        "evidence_en": "NHL refers to lgID = 'NHL'; most assists refers to max(A); full name = nameGiven + lastName; total amount of assists = sum(A(playerID(max(A))))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the power play percentage of the team with the least number of penalty kill chances and to which team were they playing against? Indicate whether the team lost or victorious.",
        "question_ar": "",
        "evidence_en": "least number of penalty kill chances refers to min(PKC); power play percentage refers to (PP%) = divide(PPG, PPC); team playing refers to tmID; victorious team refers to tmIDWinner; team victorious refers to tmID = tmIDWinner and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What are the awards won by the coach who coached the team with the most number of victories of all time? Indicate the choach ID.",
        "question_ar": "",
        "evidence_en": "victories' and 'wins' are synonyms; most number of victories refers to max(w)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.coachID, T1.award FROM AwardsCoaches AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID GROUP BY T2.coachID, T1.award ORDER BY SUM(T2.w) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the name of the losing team during an exhibition game in 1912?",
        "question_ar": "",
        "evidence_en": "exhibition game refers to note = 'EX'; team of losing team refers to tmIDLoser",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM SeriesPost AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND tmIDLoser = tmID WHERE T1.note = 'EX' AND T2.year = '1912'"
    },
    {
        "db_id": "hockey",
        "question_en": "How long has the NHL player been playing during the year when he recorded the least number of times being on the ice when a goal is scored for the team versus against the team? Indicate his full name.",
        "question_ar": "",
        "evidence_en": "NHL refers to lgID = 'NHL'; least number of times being on the ice when a goal is scored for the team versus against the team refers to min(+/-); duration the player's been playing = subtract(year(playerID(min(+/-))), firstNHL(playerID(min(+/-)))); full name = nameGiven + lastName",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.firstNHL - T1.year, T3.nameGiven , T3.firstName, T3.lastName FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID INNER JOIN Master AS T3 ON T1.playerID = T3.playerID GROUP BY T3.firstName, T3.lastName, T3.nameGiven, T3.firstNHL - T1.year, T3.firstName, T3.lastName ORDER BY SUM(T1.`+/-`) ASC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Between 2003 to 2005, what are the given names of the players with the most number of games played whose Penalty minutes is between 200 to 250?",
        "question_ar": "",
        "evidence_en": "penalty minutes refers to PIM; year of scoring BETWEEN 2003 AND 2005; most number of games played refers to max(GP)",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameGiven FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.PIM BETWEEN 200 AND 250 AND T1.year BETWEEN 2003 AND 2005 ORDER BY T1.GP DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How old was the goaltender who scored the fewest goals while on the ice when he retired from the NHL?",
        "question_ar": "",
        "evidence_en": "goaltender' and 'goalie' are synonyms; fewest goals while on the ice refers to min(GA); How old = subtract(lastNHL(playerID(min(GA))), birthYear(playerID(min(GA)))))",
        "evidence_ar": "",
        "SQL": "SELECT T2.lastNHL - T2.birthYear FROM GoaliesSC AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastNHL IS NOT NULL GROUP BY T2.lastNHL, T2.birthYear ORDER BY SUM(GA) LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which position has won the most awards and who is the most recent player that was awarded with an award in that position? Indicate the name of the award and the full name of the player.",
        "question_ar": "",
        "evidence_en": "position has won the most awards refers to pos(max(count(award))); most recent player refers to playerID(pos(max(count(award)))& max(year)); full name = nameGiven + lastName",
        "evidence_ar": "",
        "SQL": "SELECT T1.pos, T2.award, T1.nameGiven, T1.lastName FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T2.coachID = T1.coachID GROUP BY T1.pos, T2.award, T1.nameGiven, T1.lastName ORDER BY COUNT(T2.award) LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many games did the coach who received the first-ever Second Team All-Star award play before receiving such award?",
        "question_ar": "",
        "evidence_en": "first-ever Second Team All-Star award refers to min(year(award = 'Second Team All-Star')); How many games before receiving such award = sum(g(coachID(min(year(award = 'Second Team All-Star')))): g(min(year)))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year"
    },
    {
        "db_id": "hockey",
        "question_en": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.",
        "question_ar": "",
        "evidence_en": "team playing refers to tmID; oppositng team refers to oppID; victories' and 'wins' are synonyms; most victories refers to max(w)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the teams whose shorthanded goals are between 1 to 5, which player is the most trustworthy in the critical moment?",
        "question_ar": "",
        "evidence_en": "shorthanded goals refers to SHG; SHG BETWEEN 1 AND 5; most trustworthy in the critical moment refers to max(GWG)",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameGiven, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.SHG BETWEEN 1 AND 5 ORDER BY T1.GWG DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "In 1997, how many loss did the coach have who temporary coached Tampa Bay Lightning? Indicate his/her coach ID.",
        "question_ar": "",
        "evidence_en": "temporary coached refers to notes = 'interim'; number of loss refers to L (to add)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.l), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.notes = 'interim' AND T1.year = '1997' AND T2.name = 'Tampa Bay Lightning' GROUP BY T1.coachID"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players whose short handed assists are greater or equal to 7, what is the final standing of the team with the most number of assists? Indicate the year to which the most number of assists was achieved and the name of the team.",
        "question_ar": "",
        "evidence_en": "short handed assists refers to SHA; SHA> = 7; final standing refers to rank; the final standing of the team with the most number of assists refers to max(A)\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.rank, T2.year, T2.name FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.SHA >= 7 ORDER BY T1.A DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the name of the coach whose team placed 4th in the 1969 game? Indicate their coachID.",
        "question_ar": "",
        "evidence_en": "name of coach refers to coachID; placed 4th refers to rank = 4; 1969 game refers to year = 1969",
        "evidence_ar": "",
        "SQL": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1969 AND T2.rank = 4"
    },
    {
        "db_id": "hockey",
        "question_en": "Between 1917 to 1920, what are the names of the team who ranked first in the first half of the season each year?",
        "question_ar": "",
        "evidence_en": "year BETWEEN 1917 AND 1920; first half of season refers to half = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM TeamsHalf AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.half = 1 AND T1.rank = 1 AND T1.year BETWEEN 1917 AND 1920"
    },
    {
        "db_id": "hockey",
        "question_en": "How many Canadian players, between the ages of 18 and 24 when they initially played their first NHL, had a cumulative goal total of no more than 5? Indicate their complete names, the year, and the team for which they scored the specified amount of goals.",
        "question_ar": "",
        "evidence_en": "Canadian players mean player whose birthCountry = Canada; ages of 18 and 24 refers to SUBTRACT(firstNHL, birthYear) BETWEEN 18 AND 24; cumulative goal total of no more than 5 refers to G < 5; complete name = nameGiven + lastName",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameGiven, T2.lastName, T2.birthYear, birthMon, birthDay , T3.tmID FROM Scoring AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.tmID = T1.tmID WHERE (T2.firstNHL - T2.birthYear) BETWEEN 18 AND 24 AND T3.G < 5"
    },
    {
        "db_id": "hockey",
        "question_en": "How many bench minor penalties did the team St. Louis Blues got in total in all the games?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the power play chances of New York Rangers in 2009?",
        "question_ar": "",
        "evidence_en": "power play chanses = DIVIDE (PPG, PPC); name = New York Rangers; year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT CAST(PPG AS REAL) / PPC FROM Teams WHERE year = 2009 AND name = 'New York Rangers'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the highest total points a team got in a year?",
        "question_ar": "",
        "evidence_en": "the highest total points = MAX(Pts)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Pts), year FROM Teams GROUP BY year, tmID ORDER BY SUM(Pts) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the teams that had more wins than loses in the year 2006, how many of them have over 100 points?",
        "question_ar": "",
        "evidence_en": "more wins than loses refers to W > L; over 100 points refers to Pts > 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team got the most bench minor penalties in 2006?",
        "question_ar": "",
        "evidence_en": "team refers to name; year = 2006",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the first 3 teams that got the most penalty minutes in 2006.",
        "question_ar": "",
        "evidence_en": "the first 3 teams that got the most penalty minutes refer to name where MAX(PIM) limit to 3; year = 2006;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY SUM(PIM) DESC LIMIT 3"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team had the highest penalty kill chances in 1995, Florida Panthers, Edmonton Oilers or Los Angeles Kings?",
        "question_ar": "",
        "evidence_en": "the highest penalty kill chances refer to MAX(PKC); year = 1995;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') ORDER BY PKC DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the name of the team that got more wins than loses in the Stanley Cup finals in 1917?",
        "question_ar": "",
        "evidence_en": "more wins than loses refers to W>L; year = 1917;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1917' AND T1.W > T1.L"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the teams that have played in 1922's Stanley Cup finals.",
        "question_ar": "",
        "evidence_en": "teams refer to tmID; year = 1922;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the teams that played in 1922's Stanley Cup finals, how many of them had over 20 points in that year?",
        "question_ar": "",
        "evidence_en": "how many teams refer to COUNT(tmID); over 20 points refer to Pts>20; year = 1922;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.tmID) FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922' AND T2.Pts > 20"
    },
    {
        "db_id": "hockey",
        "question_en": "What were the penalty minutes in 1923's Stanley Cup finals of the team that ranked second in that year?",
        "question_ar": "",
        "evidence_en": "teams refer to tmID; year = 1922; ranked second refers to rank = 2; penalty minutes refer to PIM;",
        "evidence_ar": "",
        "SQL": "SELECT T1.PIM FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1923' AND T2.rank = 2"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team got the most wins in the Stanley Cup finals?",
        "question_ar": "",
        "evidence_en": "team refers name; most wins = MAX(W);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many wins did the Philadelphia Flyers have over the Boston Bruins in 1985?",
        "question_ar": "",
        "evidence_en": "Philadelphia Flyers is name of team playing; Boston Bruins is name of opposing team where oppID = 'BOS'; year = 1985; wins refer to W;",
        "evidence_ar": "",
        "SQL": "SELECT T1.W FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1985 AND T1.tmID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Philadelphia Flyers' ) AND T1.oppID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Boston Bruins' )"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the names of the teams that had a tie in 1909.",
        "question_ar": "",
        "evidence_en": "tie refers to T>0; year = 1909;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the first names of the coaches who have taught the Montreal Canadiens.",
        "question_ar": "",
        "evidence_en": "Montreal Canadiens is the name of team.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'"
    },
    {
        "db_id": "hockey",
        "question_en": "How many coaches of the Montreal Canadiens have gotten in the Hall of Fame?",
        "question_ar": "",
        "evidence_en": "have gotten in the Hall of Fame means hofID is not NULL;\n\nMontreal Canadiens is the name of team.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT hofID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'"
    },
    {
        "db_id": "hockey",
        "question_en": "Please give the height of the tallest coach of the Montreal Canadiens.",
        "question_ar": "",
        "evidence_en": "the tallest refers to MAX(height); Montreal Canadiens is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT T3.height FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' AND T3.coachID IS NOT NULL ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the first names of the coaches whose team played in 1922's Stanley Cup finals.",
        "question_ar": "",
        "evidence_en": "teams refer to tmID; year = 1922;",
        "evidence_ar": "",
        "SQL": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who have taught the Philadelphia Flyers, how many of them are born in March?",
        "question_ar": "",
        "evidence_en": "born in March refers to birthMon = 3; Philadelphia Flyers is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthMon = 3"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who are born in the USA, how many of them used to train the Philadelphia Flyers?",
        "question_ar": "",
        "evidence_en": "born in the USA refers to birthCountry = 'USA'; Philadelphia Flyers is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "How many coaches who have taught the Buffalo Sabres have died?",
        "question_ar": "",
        "evidence_en": "have died means deathYear is not NULL; Buffalo Sabres is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.deathYear IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the nick names of the coaches who are from the USA and have taught the Buffalo Sabres.",
        "question_ar": "",
        "evidence_en": "from the USA refers to birthCountry = 'USA'; nick names of the coaches refer to nameNick where coachID is not NULL ; Buffalo Sabres is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT nameNick FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.birthCountry = 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the coaches who taught the teams in 1922's Stanley Cup finals, how many of them are from the USA?",
        "question_ar": "",
        "evidence_en": "from the USA refers to birthCountry = 'USA'; year = 1922;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922 AND T3.birthCountry = 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "In the year 2000, which team has played the most games against the Buffalo Sabres?",
        "question_ar": "",
        "evidence_en": "which team played the most games against refers to oppID where MAX(SUM(G); Buffalo Sabres is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T1.year = 2000 AND T2.name = 'Buffalo Sabres' GROUP BY T3.name ORDER BY SUM(T2.G) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Please list the names of all the teams that have played against the Buffalo Sabres.",
        "question_ar": "",
        "evidence_en": "teams that have played against refer to oppID; Buffalo Sabres is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T2.name = 'Buffalo Sabres'"
    },
    {
        "db_id": "hockey",
        "question_en": "How many penalty minutes did the Montreal Canadiens have in the 1918's Stanley Cup Finals?",
        "question_ar": "",
        "evidence_en": "penalty minutes refer to PIM; year = 1918; Montreal Canadiens is name of team;",
        "evidence_ar": "",
        "SQL": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918"
    },
    {
        "db_id": "hockey",
        "question_en": "In the year that the Montreal Canadiens had 24 penalty minutes in the Stanley Cup finals, how many wins did the team had in total?",
        "question_ar": "",
        "evidence_en": "penalty minutes refer to PIM = 24; wins refer to W;",
        "evidence_ar": "",
        "SQL": "SELECT T2.W FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 24"
    },
    {
        "db_id": "hockey",
        "question_en": "In which year did the Montreal Canadiens have 49 penalty minutes in the Stanley Cup finals? Was it 1924, 1923 or 1918?",
        "question_ar": "",
        "evidence_en": "penalty minutes refer to PIM = 49;",
        "evidence_ar": "",
        "SQL": "SELECT T1.year FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 49"
    },
    {
        "db_id": "hockey",
        "question_en": "Which coach was the first one to teach the Montreal Canadiens, please give his first name.",
        "question_ar": "",
        "evidence_en": "the first one refers to MIN(year);",
        "evidence_ar": "",
        "SQL": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average winning rate of the Buffalo Sabres in 2000?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID) where year = 2000; Montreal Canadiens is name of team;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / COUNT(T1.oppID) FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.name = 'Buffalo Sabres' AND T1.year = 2000"
    },
    {
        "db_id": "hockey",
        "question_en": "How many penalty minutes did the Montreal Canadiens have on average in the Stanley Cup Finals?",
        "question_ar": "",
        "evidence_en": "AVG(PIM) = DIVIDE(SUM(PIM), COUNT(G)); Montreal Canadiens is name of team;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.PIM) AS REAL) / COUNT(T2.PIM) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the average winning rate of the Montreal Canadiens in the Stanley Cup finals?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.W / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the percentage of American coaches among all the coaches who taught the Montreal Canadiens?",
        "question_ar": "",
        "evidence_en": "American refers to birthCountry = 'USA'; DIVIDE(COUNT(coachID where birthCountry = 'USA', name` = 'Montreal Canadiens'), COUNT(coachID where name` = 'Montreal Canadiens')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'"
    },
    {
        "db_id": "hockey",
        "question_en": "Who was the latest non player/builder to become the hall of famer? Give the full name.",
        "question_ar": "",
        "evidence_en": "latest refers to MAX(year); non player/builder refers to category = NOT IN ('player', 'builder');",
        "evidence_ar": "",
        "SQL": "SELECT name FROM HOF WHERE category IN ('Player', 'Builder') ORDER BY year DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "For all the referees, who became a hall of famer in the 1970s? What's his hofID?",
        "question_ar": "",
        "evidence_en": "1970s refers to year between 1970 and 1979; referees stand for category;",
        "evidence_ar": "",
        "SQL": "SELECT name, hofID FROM HOF WHERE category = 'Builder' AND year BETWEEN 1970 AND 1979"
    },
    {
        "db_id": "hockey",
        "question_en": "In the year 1958, what is the total number of players that became hall of famers?",
        "question_ar": "",
        "evidence_en": "hall of famers refers to hofID; players stand for category;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Player' AND year = 1958"
    },
    {
        "db_id": "hockey",
        "question_en": "How many hall of famers both played and coached in the league?",
        "question_ar": "",
        "evidence_en": "hall of famers refers to hofID; both played and coached means playerID is not NULL and coachID is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM Master WHERE hofID IS NOT NULL AND playerID IS NOT NULL AND coachID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the number of players whose last name is Green that played in the league but not coached?",
        "question_ar": "",
        "evidence_en": "played in the league but not coached means playerID is not NULL and coachID is NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM Master WHERE lastName = 'Green' AND coachID IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "For the team that Scotty Bowman coached in 1982, how many bench minor penalties did they have that year?",
        "question_ar": "",
        "evidence_en": "bench minor penalties refer to BenchMinor; Scotty Bowman is a coach; year = 1982;",
        "evidence_ar": "",
        "SQL": "SELECT T2.BenchMinor FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T3.firstName = 'Scotty' AND T3.lastName = 'Bowman' AND T1.year = 1982"
    },
    {
        "db_id": "hockey",
        "question_en": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.",
        "question_ar": "",
        "evidence_en": "10 empty net goals refer to ENG = 10; tallest refers to MAX(height);",
        "evidence_ar": "",
        "SQL": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.ENG = 10 ORDER BY T2.height DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "Which was the dominant hand for the goaltender who played 32 games for QUN in 1973? Give the full name.",
        "question_ar": "",
        "evidence_en": "the dominant hand refers to shootCatch; year = 1973; tmID = 'QUN'; played 32 games refers to GP = 32;",
        "evidence_ar": "",
        "SQL": "SELECT T2.shootCatch, T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.year = 1973 WHERE T1.tmID = 'QUN' AND T1.GP = 32"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalie whose last name is \"Young\", how many teams did he play in?",
        "question_ar": "",
        "evidence_en": "goalie is a players; teams refer to tmID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.tmID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastName = 'Young'"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalkeeper that became a coach than a Hall of Famer, who played for BOS in 1972?",
        "question_ar": "",
        "evidence_en": "BOS refers to tmID = 'BOS'; year = 1972; became a coach than a Hall of Famer means coachID is not NULL and hofID is NULL;",
        "evidence_ar": "",
        "SQL": "SELECT T2.firstName, T2.lastName , IIF(T1.tmID = 'BOS', 'YES', 'NO') FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 1972 AND T1.tmID = 'BOS' AND T2.coachID IS NOT NULL AND T2.hofID IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalie whose legendsID is \"P196402\" , how many games did he play in the league?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.GP) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.legendsID = 'P196402'"
    },
    {
        "db_id": "hockey",
        "question_en": "In the history of all the Quebec Bulldogs, which goalie had the most play minutes for the team? Give the full name.",
        "question_ar": "",
        "evidence_en": "the most play minutes refer to MAX(Min); goalie refers to pos = 'G'; New York Islanders is the nameof team;",
        "evidence_ar": "",
        "SQL": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Quebec Bulldogs' AND T2.pos = 'D' GROUP BY T1.playerID, T2.firstName, T2.lastName ORDER BY SUM(T1.Min) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many goalies played for Calgary Flames?",
        "question_ar": "",
        "evidence_en": "Calgary Flames is the name of team;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'"
    },
    {
        "db_id": "hockey",
        "question_en": "Which Minnesota North Stars' goalkeeper had the most Goal Againsts in his play time?",
        "question_ar": "",
        "evidence_en": "Goals Against are the number of goals recorded while the goalie is on the ice; the most Goal Againsts refers to MAX(GA); Minnesota North Stars is name of team;",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Minnesota North Stars' GROUP BY T1.playerID ORDER BY SUM(T1.GA) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "How many Haileybury Hockey Club goalies became a hall of famer?",
        "question_ar": "",
        "evidence_en": "hall of famers refers to hofID where playerID is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Haileybury Hockey Club' AND T2.hofID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "For the goalie who had the most shutouts in 2010, what's his catching hand?",
        "question_ar": "",
        "evidence_en": "the most shutouts refer to MAX(SHO); catching hand refers to shootCatch; year = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT T2.shootCatch FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 GROUP BY T2.shootCatch ORDER BY SUM(T1.SHO) DESC LIMIT 1"
    },
    {
        "db_id": "hockey",
        "question_en": "What's the decrease rate of the game plays did David Aebischer after he got traded in 2005?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(SUM(GP(year = 2005), SUM(GP(year = 2006)), SUM(GP(year = 2005)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'"
    },
    {
        "db_id": "hockey",
        "question_en": "State the player ID and coach ID of person who have become coach after retirement.",
        "question_ar": "",
        "evidence_en": "after retirement means playerID Iis not NULL and coachID is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "State the player ID of player with average height of 75.",
        "question_ar": "",
        "evidence_en": "average height of 75 refers to AVG(height) = 75;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT playerID FROM Master GROUP BY playerID HAVING AVG(height) = 75"
    },
    {
        "db_id": "hockey",
        "question_en": "Who is the heaviest player? State player ID of 5 heaviest players.",
        "question_ar": "",
        "evidence_en": "5 heaviest players refer to MAX(weight) limit to 5 playerID;",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the full name of players origin from Finland?",
        "question_ar": "",
        "evidence_en": "origin from Finland refers to birthCountry = 'Finland';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT firstName, lastName FROM Master WHERE birthCountry = 'Finland'"
    },
    {
        "db_id": "hockey",
        "question_en": "List down player ID of players who have passed away.",
        "question_ar": "",
        "evidence_en": "passed away means deathYear is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT playerID FROM Master WHERE deathYear IS NOT NULL AND playerID IS NOT NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "List down the first name of coaches who still coach after year 2000.",
        "question_ar": "",
        "evidence_en": "after year 2000 refers to year>2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year > 2000"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the height and weight for coaches who have won awards in 1930?",
        "question_ar": "",
        "evidence_en": "year = 1930;",
        "evidence_ar": "",
        "SQL": "SELECT T1.height, T1.weight FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = '1930'"
    },
    {
        "db_id": "hockey",
        "question_en": "How much is the total goals for player with player ID aaltoan01 and how old is this person?",
        "question_ar": "",
        "evidence_en": "total goals refer to SUM(G); how old = SUBTRACT(YEAR(CURDATE, birthYear);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear"
    },
    {
        "db_id": "hockey",
        "question_en": "Is there any coach who has not been a player before but has won award? State the ID.",
        "question_ar": "",
        "evidence_en": "coach who has not been a player means playerID is NULL and coachID is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL"
    },
    {
        "db_id": "hockey",
        "question_en": "Which player ID are left winger and weight more than 200?",
        "question_ar": "",
        "evidence_en": "left winger refers to pos = 'L'; weight>200",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'"
    },
    {
        "db_id": "hockey",
        "question_en": "What is the total number of game played for players from USA?",
        "question_ar": "",
        "evidence_en": "game played refers to GP; from USA refers to birthCountry = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'"
    },
    {
        "db_id": "hockey",
        "question_en": "Calculate the total points scored by team ID ANA and list down the coashes of the team.",
        "question_ar": "",
        "evidence_en": "points scored refers to Pts; team ID refers to tmID;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Pts), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID WHERE T2.tmID = 'ANA' GROUP BY T1.coachID"
    },
    {
        "db_id": "hockey",
        "question_en": "In 1976, how many goals achieved by team 'BIR' in Division 'EW'?",
        "question_ar": "",
        "evidence_en": "year = 1976; BIR refers to tmID; Division 'EW' refers to divID = 'EW'; goals = G;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.G) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.divID = 'EW' AND T1.tmID = 'BIR' AND T1.year = 1976"
    },
    {
        "db_id": "hockey",
        "question_en": "In 2010, how many loses made by team 'BOS' and how many assists were made by the players?",
        "question_ar": "",
        "evidence_en": "year = 2010; BOS refers to tmID; loses refer to L; assists refer to A;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.L), SUM(T2.A) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'BOS' AND T1.year = 2010"
    },
    {
        "db_id": "hockey",
        "question_en": "What are the total weights of players for team 'ANA' as per year 1997?",
        "question_ar": "",
        "evidence_en": "ANA refers to tmID;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.weight) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1997 AND T2.tmID = 'ANA'"
    },
    {
        "db_id": "hockey",
        "question_en": "Who is the shortest player and state the team ID of that player from 1925 to 1936.",
        "question_ar": "",
        "evidence_en": "Shortest refers to MIN(height); from 1925 to 1936 refers to year between 1925 and 1936;",
        "evidence_ar": "",
        "SQL": "SELECT T2.playerID, T2.tmID FROM ( SELECT playerID FROM Master WHERE height IS NOT NULL ORDER BY height ASC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT playerID, tmID FROM Scoring WHERE year BETWEEN 1925 AND 1936 ) AS T2 ON T1.playerID = T2.playerID"
    },
    {
        "db_id": "hockey",
        "question_en": "Which team has the highest winning rate in year 2000? State the team ID and list down the birth country of it's players.",
        "question_ar": "",
        "evidence_en": "MAX(DIVIDE(COUNT(W), SUM(COUNT(W), (COUNT (L)) where year = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year"
    },
    {
        "db_id": "hockey",
        "question_en": "In 1998, How many wins were made by team 'CAR' per game played? Who contributed the most goals? State the player ID.",
        "question_ar": "",
        "evidence_en": "year = 1998; wins per game played = DIVIDE(W, G); CAR refers to tmID; contributed the most goals refers to MAX(G);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.W AS REAL) / T1.G, T2.playerID FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'CAR' AND T1.year = 1998 GROUP BY T1.W / T1.G, T2.playerID ORDER BY SUM(T2.G) DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Which country has the shortest life expectancy?",
        "question_ar": "",
        "evidence_en": "shortest life expectancy refers to MIN(LifeExpectancy);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List any five countries which use English as an official language.",
        "question_ar": "",
        "evidence_en": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5"
    },
    {
        "db_id": "world",
        "question_en": "Calculate the average population per city in Karnataka district.",
        "question_ar": "",
        "evidence_en": "average population = AVG(Population);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID"
    },
    {
        "db_id": "world",
        "question_en": "List the languages used in the USA.",
        "question_ar": "",
        "evidence_en": "USA refers to CountryCode = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA'"
    },
    {
        "db_id": "world",
        "question_en": "How many countries use Portuguese?",
        "question_ar": "",
        "evidence_en": "Portuguese refers to `Language` = 'Portuguese';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage"
    },
    {
        "db_id": "world",
        "question_en": "How many cities are there in England?",
        "question_ar": "",
        "evidence_en": "England refers to District = 'England';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM City WHERE District = 'England'"
    },
    {
        "db_id": "world",
        "question_en": "How many cities are there in the country with the largest surface area?",
        "question_ar": "",
        "evidence_en": "largest surface area refers to MAX(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT T2.ID FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM Country )"
    },
    {
        "db_id": "world",
        "question_en": "What is the capital city and population of San Marino?",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; San Marino is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital, T2.Population FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'San Marino'"
    },
    {
        "db_id": "world",
        "question_en": "List the languages used in Turkmenistan.",
        "question_ar": "",
        "evidence_en": "Turkmenistan is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Turkmenistan'"
    },
    {
        "db_id": "world",
        "question_en": "Provide the name, capital city and its official language of the country with the highest life expectancy.",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; official language refers to IsOfficial = 'T'; highest life expectancy refers to MAX(LifeExpectancy);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.LifeExpectancy DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List the countries and their official languages in Antarctica.",
        "question_ar": "",
        "evidence_en": "official language refers to IsOfficial = 'T'; Antarctica refers to Continent = 'Antarctica';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Antarctica' AND T2.IsOfficial = 'T'"
    },
    {
        "db_id": "world",
        "question_en": "List any five countries which use English as an official language.",
        "question_ar": "",
        "evidence_en": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5"
    },
    {
        "db_id": "world",
        "question_en": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.\n\n",
        "question_ar": "",
        "evidence_en": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80"
    },
    {
        "db_id": "world",
        "question_en": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.",
        "question_ar": "",
        "evidence_en": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80"
    },
    {
        "db_id": "world",
        "question_en": "Provide the name, located country, and life expectancy of the most populated city",
        "question_ar": "",
        "evidence_en": "most populated city refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T1.Code, T1.LifeExpectancy FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Describe the capital city and languages used in the country with the shortest life expectancy.",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; shortest life expectancy refers to MIN(LifeExpectancy);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode ORDER BY T1.LifeExpectancy LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Provide the country, population, capital city, and official language of the country with the smallest surface area.",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; official language refers to IsOfficial = 'T'; smallest surface area refers to MIN(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.SurfaceArea LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "How many percent of countries in North America use English?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(Language = 'English' WHERE Continent = 'North America'), COUNT(Language WHERE Continent = 'North America')), 1.0); North America refers to Continent = 'North America'; use English refers to Language = 'English';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "db_id": "world",
        "question_en": "List the district name of the city with the smallest population.",
        "question_ar": "",
        "evidence_en": "smallest population refers to MIN(Population);",
        "evidence_ar": "",
        "SQL": "SELECT District FROM City ORDER BY Population LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "In which continent does the country with the smallest surface area belongs?",
        "question_ar": "",
        "evidence_en": "smallest surface area refers to MIN(smallest surface area);",
        "evidence_ar": "",
        "SQL": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Who is the head of the state where the most crowded city belongs?",
        "question_ar": "",
        "evidence_en": "head of the state refers to HeadOfState; most crowded city refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Among the countries that officially use the English language, what country has the highest capital?",
        "question_ar": "",
        "evidence_en": "officially use the English language refers to `Language` = 'English' AND IsOfficial = 'T'; highest capital refers to MAX(Capital);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Code FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' ORDER BY T1.Capital DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List down the cities that belong to the country with a life expectancy of 66.4.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy = 66.4"
    },
    {
        "db_id": "world",
        "question_en": "Give the head of the state of the country with the lowest percentage use of English as their language.",
        "question_ar": "",
        "evidence_en": "head of the state refers to HeadOfState; lowest percentage use of English as their language refers to MIN(Percentage WHERE `Language` = 'English');",
        "evidence_ar": "",
        "SQL": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T2.Percentage LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the surface area of the country where Sutton Coldfield city belongs?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'"
    },
    {
        "db_id": "world",
        "question_en": "List down the languages of the countries that have population below 8000.",
        "question_ar": "",
        "evidence_en": "population below 8000 refers to Population < 8000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population < 8000"
    },
    {
        "db_id": "world",
        "question_en": "What are the official languages used in Belgium?",
        "question_ar": "",
        "evidence_en": "official languages refers to IsOfficial = 'T'; Belgium is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belgium' AND T2.IsOfficial = 'T'"
    },
    {
        "db_id": "world",
        "question_en": "Give the cities and district names that belong to the country with Hajastan as its local name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'"
    },
    {
        "db_id": "world",
        "question_en": "How many languages are used in Cyprus?",
        "question_ar": "",
        "evidence_en": "Cyprus is a name of Country;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Name = 'Cyprus' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "db_id": "world",
        "question_en": "Provide the language used by the people of Belize.",
        "question_ar": "",
        "evidence_en": "Belize is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belize'"
    },
    {
        "db_id": "world",
        "question_en": "List down the districts belong to the country headed by Adolf Ogi.",
        "question_ar": "",
        "evidence_en": "headed by Adolf Ogi refers to HeadOfState = 'Adolf Ogi';",
        "evidence_ar": "",
        "SQL": "SELECT T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Adolf Ogi'"
    },
    {
        "db_id": "world",
        "question_en": "Who is the head of the country where Santa Catarina district belongs?",
        "question_ar": "",
        "evidence_en": "head of the country refers to HeadOfState;",
        "evidence_ar": "",
        "SQL": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.District = 'Santa Catarina'"
    },
    {
        "db_id": "world",
        "question_en": "Among the countries that have GNP greater than 1500, what is the percentage of the countries have English as its language?",
        "question_ar": "",
        "evidence_en": "GNP greater than 1500 refers to GNP > 1500 ; percentage = MULTIPLY(DIVIDE(SUM(Code WHERE GNP > 1500 AND Language = 'English'), COUNT(Code WHERE GNP > 1500)) 1.0); English as its language refers to Language = 'English';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GNP > 1500"
    },
    {
        "db_id": "world",
        "question_en": "In English speaking countries, provide the difference between the number of countries with republic and constitutional monarchy as its government form.",
        "question_ar": "",
        "evidence_en": "English speaking refers to Language = 'English' ; difference = SUBTRACT(COUNT(Language = 'English' WHERE GovernmentForm = 'Republic'), COUNT(Language = 'English' WHERE GovernmentForm = 'ConstitutionalMonarchy'));",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GovernmentForm = 'Republic') - COUNT(T1.GovernmentForm = 'ConstitutionalMonarchy') FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'"
    },
    {
        "db_id": "world",
        "question_en": "What country declared its independence in 1994?",
        "question_ar": "",
        "evidence_en": "declared independence in 1994 refers to IndepYear = 1994;",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country WHERE IndepYear = 1994"
    },
    {
        "db_id": "world",
        "question_en": "List all the countries in Asia.",
        "question_ar": "",
        "evidence_en": "Asia refers to Continent = 'Asia';",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country WHERE Continent = 'Asia'"
    },
    {
        "db_id": "world",
        "question_en": "What country in Asia has the largest gross national product(GNP)?",
        "question_ar": "",
        "evidence_en": "Asia refers to Continent = 'Asia'; largest gross national product refers to MAX(GNP);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "How many cities are in the Philippines?",
        "question_ar": "",
        "evidence_en": "Philippines refers to CountryCode = 'PHL';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM City WHERE Name = 'PHL'"
    },
    {
        "db_id": "world",
        "question_en": "What is the local name of Ukraine that they are also known for?",
        "question_ar": "",
        "evidence_en": "Ukraine is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT LocalName FROM Country WHERE Name = 'Ukraine'"
    },
    {
        "db_id": "world",
        "question_en": "How many countries have Socialistic Republic form of government?",
        "question_ar": "",
        "evidence_en": "Socialistic Republic form of government refers to GovernmentForm = 'Socialistic Republic';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Code) FROM Country WHERE GovernmentForm = 'Socialistic Republic'"
    },
    {
        "db_id": "world",
        "question_en": "What is the official language of China?",
        "question_ar": "",
        "evidence_en": "official language refers to IsOfficial = 'T'; China is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.IsOfficial = 'T'"
    },
    {
        "db_id": "world",
        "question_en": "How many percent of the population of China used Chinese as their language?",
        "question_ar": "",
        "evidence_en": "percent refers to Percentage; China is a name of country; use Chinese as their language refers to Language = 'Chinese';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'"
    },
    {
        "db_id": "world",
        "question_en": "What is the form of government that the city of Manila has?",
        "question_ar": "",
        "evidence_en": "form of government refers to GovernmentForm;",
        "evidence_ar": "",
        "SQL": "SELECT T1.GovernmentForm FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Manila'"
    },
    {
        "db_id": "world",
        "question_en": "What is the capital city of the Philippines?",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; Philippines is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Philipiines'"
    },
    {
        "db_id": "world",
        "question_en": "List all the languages used in Europe.",
        "question_ar": "",
        "evidence_en": "Europe refers to Continent = 'Europe';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe'"
    },
    {
        "db_id": "world",
        "question_en": "Who is the head of state of the country where the city of Pyongyang is under?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Pyongyang'"
    },
    {
        "db_id": "world",
        "question_en": "How many unofficial languages are used in Italy?",
        "question_ar": "",
        "evidence_en": "unofficial languages refers to IsOfficial = 'F'; Italy is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'"
    },
    {
        "db_id": "world",
        "question_en": "What city in Russia has the least population?",
        "question_ar": "",
        "evidence_en": "Russia is a name of country; least population refers to MIN(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Russian Federation' ORDER BY T2.Population ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List all the cities in the country where there is high life expectancy at birth.",
        "question_ar": "",
        "evidence_en": "high life expectancy at birth refers to MAX(LifeExpectancy);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.LifeExpectancy DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List all the official and unofficial languages used by the country that declared its independence in 1830.",
        "question_ar": "",
        "evidence_en": "official language refers to IsOfficial = 'T'; unofficial language refers to IsOfficial = 'F'; declared independence in 1830 refers to IndepYear = 1830;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language, T2.IsOfficial FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear = 1830 GROUP BY T2.Language, T2.IsOfficial"
    },
    {
        "db_id": "world",
        "question_en": "What is the capital city of the country with largest population?",
        "question_ar": "",
        "evidence_en": "capital city refers to Capital; largest population refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List all the countries in the continent of Asia that use English as their unofficial language.",
        "question_ar": "",
        "evidence_en": "use English as unofficial language refers to Language = 'English' WHERE IsOfficial = 'F';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.IsOfficial = 'F' GROUP BY T1.Name"
    },
    {
        "db_id": "world",
        "question_en": "Calculate the average GNP of all countries that use Arabic language.",
        "question_ar": "",
        "evidence_en": "average GNP = AVG(GNP); use Arabic language refers to Language = 'Arabic';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.GNP) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'"
    },
    {
        "db_id": "world",
        "question_en": "Calculate the percentage of the surface area of all countries that uses Chinese as one of their languages.",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(MULTIPLY(SUM(SurfaceArea WHERE Language = 'Chinese'), SUM(SurfaceArea)), 1.0); Chinese as one of the languages refers to Language = 'Chinese';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "db_id": "world",
        "question_en": "Which country has the smallest surface area?",
        "question_ar": "",
        "evidence_en": "smallest surface area refers to MIN(smallest surface area);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country ORDER BY SurfaceArea ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Write down the name of the largest population country.",
        "question_ar": "",
        "evidence_en": "largest population refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the language of the smallest population country?",
        "question_ar": "",
        "evidence_en": "smallest population refers to MIN(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List down the name of countries whereby English is their official language.",
        "question_ar": "",
        "evidence_en": "English is the official language refers to Language = 'English' AND IsOfficial = 'T';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'"
    },
    {
        "db_id": "world",
        "question_en": "List down the official language of the countries which declared independence after 1990,",
        "question_ar": "",
        "evidence_en": "official lanaguage refers to IsOfficial = 'T'; declared independence after 1990 refers to IndepYear > 1990;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'"
    },
    {
        "db_id": "world",
        "question_en": "What is the percentage of English used in Australia?",
        "question_ar": "",
        "evidence_en": "English refers to Language = 'English'; Australia is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Australia' AND T2.Language = 'English'"
    },
    {
        "db_id": "world",
        "question_en": "List down languages used in Malaysia.",
        "question_ar": "",
        "evidence_en": "Malaysia is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Malaysia'"
    },
    {
        "db_id": "world",
        "question_en": "Which country has the most crowded city in the world?",
        "question_ar": "",
        "evidence_en": "most crowded city refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the life expectancy of residents in the most crowded city?",
        "question_ar": "",
        "evidence_en": "most crowded city refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the GNP of the least crowded city in the world?",
        "question_ar": "",
        "evidence_en": "least crowded city refers to MIN(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Within the 5 most crowded cities in the world, which country has the most languages used?",
        "question_ar": "",
        "evidence_en": "most crowded cities refers to MAX(Population); has the most languages used refers to MAX(COUNT(Language));",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Which country has the smallest surface area and the most crowded city?",
        "question_ar": "",
        "evidence_en": "smallest surface area refers to MIN(smallest surface area); most crowded city refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC, T2.SurfaceArea DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List down all cities of China.",
        "question_ar": "",
        "evidence_en": "China is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'China'"
    },
    {
        "db_id": "world",
        "question_en": "What are the cities for country called \"Â´Uman\" in local name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = 'Â´Uman'"
    },
    {
        "db_id": "world",
        "question_en": "What is the average life expentancy of countries that speak Arabic?",
        "question_ar": "",
        "evidence_en": "average life expectancy = AVG(LifeExpectancy); speak Arabic refers to `Language` = 'Arabic';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.LifeExpectancy) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'"
    },
    {
        "db_id": "world",
        "question_en": "What is the GNP growth rate by the country of Shanghai?",
        "question_ar": "",
        "evidence_en": "GNP growth rate = DIVIDE(SUBTRACT(GNP, GNPOld), GNPOld); Shanghai is a name of city;",
        "evidence_ar": "",
        "SQL": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'"
    },
    {
        "db_id": "world",
        "question_en": "What is the district of Zaanstad?",
        "question_ar": "",
        "evidence_en": "Zaanstad is a name of city;",
        "evidence_ar": "",
        "SQL": "SELECT District FROM City WHERE name = 'Zaanstad'"
    },
    {
        "db_id": "world",
        "question_en": "What city has the highest population?",
        "question_ar": "",
        "evidence_en": "highest population refers to MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM City ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "Provide the district of the city with a population of 201843.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT District FROM City WHERE population = 201843"
    },
    {
        "db_id": "world",
        "question_en": "What country has the largest surface area?",
        "question_ar": "",
        "evidence_en": "largest surface area refers to MAX(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "How many countries have a life expectancy of 75.1?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1"
    },
    {
        "db_id": "world",
        "question_en": "What is the year of independence of Brunei?",
        "question_ar": "",
        "evidence_en": "year of independence refers to IndepYear; Brunei is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT IndepYear FROM Country WHERE Name = 'Brunei'"
    },
    {
        "db_id": "world",
        "question_en": "How many countries have no GNP?",
        "question_ar": "",
        "evidence_en": "no GNP refers to GNP = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Country WHERE GNP = 0"
    },
    {
        "db_id": "world",
        "question_en": "What is the average surface area of all countries?",
        "question_ar": "",
        "evidence_en": "average surface area = AVG(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(SurfaceArea) FROM Country"
    },
    {
        "db_id": "world",
        "question_en": "How many languages are there in the country where Tocantins district belongs?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Language) FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.District = 'Tocantins'"
    },
    {
        "db_id": "world",
        "question_en": "What are the districts that belong to the country with the largest surface area?",
        "question_ar": "",
        "evidence_en": "largest surface area refers to MAX(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )"
    },
    {
        "db_id": "world",
        "question_en": "How many cities are there in the country ruled by Kostis Stefanopoulos?",
        "question_ar": "",
        "evidence_en": "ruled by Kostis Stefanopoulos refers to HeadOfState = 'Kostis Stefanopoulos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos'"
    },
    {
        "db_id": "world",
        "question_en": "What are the official languages used in Greece?",
        "question_ar": "",
        "evidence_en": "official language refers to IsOfficial = 'T'; Greece is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.name = 'Greece'"
    },
    {
        "db_id": "world",
        "question_en": "Give the population of the country where Queimados city belongs.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Population FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'"
    },
    {
        "db_id": "world",
        "question_en": "What are the official languages of the country where you can find the city with the least population?",
        "question_ar": "",
        "evidence_en": "official language refers to IsOfficial = 'T'; least population refers to MIN(Population);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the surface area and GNP of the country where Namibe district belongs?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe'"
    },
    {
        "db_id": "world",
        "question_en": "List the names of the country that officially uses English as their language.",
        "question_ar": "",
        "evidence_en": "officially uses English as their language refers to `Language` = 'English' AND IsOfficial = 'T';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T1.Language = 'English'"
    },
    {
        "db_id": "world",
        "question_en": "What are the districts that belong to the country with the lowest surface area?",
        "question_ar": "",
        "evidence_en": "lowest surface area refers to MIN(SurfaceArea);",
        "evidence_ar": "",
        "SQL": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "List down the country names of countries that have a GNP lower than 1000 and have Dutch as their language.",
        "question_ar": "",
        "evidence_en": "GNP lower than 1000 refers to GNP < 1000; Dutch as their language refers to `Language` = 'Dutch';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'"
    },
    {
        "db_id": "world",
        "question_en": "What is the GNP of the country where district \"Entre Rios\" belongs?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios' LIMIT 1"
    },
    {
        "db_id": "world",
        "question_en": "What is the local name of the country where \"The Valley\" city belongs?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.LocalName FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'The Valley'"
    },
    {
        "db_id": "world",
        "question_en": "List down the cities belongs to the country that has surface area greater than 7000000.",
        "question_ar": "",
        "evidence_en": "surface area greater than 7000000 refers to SurfaceArea > 7000000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000"
    },
    {
        "db_id": "world",
        "question_en": "What is the life expectancy of the countries that uses Japanese as their language?",
        "question_ar": "",
        "evidence_en": "uses Japanese as their language refers to `Language` = 'Japanese';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'"
    },
    {
        "db_id": "world",
        "question_en": "How many cities are there in the country with the surface area of 652090?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, COUNT(T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090 GROUP BY T2.Name"
    },
    {
        "db_id": "world",
        "question_en": "List down the languages of countries with an independence year between 1980 to 1995.",
        "question_ar": "",
        "evidence_en": "independence year between 1980 to 1995 refers to IndepYear BETWEEN 1980 AND 1995;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear BETWEEN 1980 AND 1995"
    },
    {
        "db_id": "world",
        "question_en": "What is the life expectancy of the people living in Calama city?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'"
    },
    {
        "db_id": "world",
        "question_en": "Provide the language used in the country ruled by Pierre Buyoya.",
        "question_ar": "",
        "evidence_en": "ruled by Pierre Buyoya refers to HeadOfState = 'Pierre Buyoya';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Pierre Buyoya'"
    },
    {
        "db_id": "world",
        "question_en": "In countries with constitutional monarchy, what is the percentage of cities located in the district of England?",
        "question_ar": "",
        "evidence_en": "constitutional monarchy refers to GovernmentForm = 'Constitutional Monarchy'; percentage = MULTIPLY(DIVIDE(SUM(GovernmentForm = 'Constitutional Monarchy' WHERE District = 'England'), COUNT(GovernmentForm = 'Constitutional Monarchy')), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.District = 'England' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Constitutional Monarchy'"
    },
    {
        "db_id": "world",
        "question_en": "Among the cities with a population between 140000 and 150000, list the country that has life expectancy greater than 80% life expectancy of all countries.",
        "question_ar": "",
        "evidence_en": "life expectancy greater than 80% life expectancy of all countries refers to LifeExpectancy < (MULTIPLY(AVG(LifeExpectancy), 0.8));",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8"
    },
    {
        "db_id": "world",
        "question_en": "Among the countries that use Italian as their language, what is the percentage of republic countries?",
        "question_ar": "",
        "evidence_en": "use Italian as their language refers to `Language` = 'Italian'; percentage = MULTIPLY(DIVIDE(SUM(`Language` = 'Italian' WHERE GovernmentForm = 'Republic'), COUNT(`Language` = 'Italian')), 100); use Italian as their language refers to `Language` = 'Italian'; republic countries refers to GovernmentForm = 'Republic';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many podcasts are there in the category which has the most podcasts?",
        "question_ar": "",
        "evidence_en": "category which has the most podcast refers to the category with Max(count(podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(podcast_id) FROM categories WHERE category = ( SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the percentage of the podcast that are categorized in four or more categories?",
        "question_ar": "",
        "evidence_en": "categorized in 4 or more refers to Count(category) > 4; percentage = Divide(Count(podcast_id(count(category) > 4)), Count(podcast_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.podcast_id) FROM ( SELECT podcast_id FROM categories GROUP BY podcast_id HAVING COUNT(category) >= 4 ) AS T1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Provide the itunes id and url for podcast titled 'Brown Suga Diaries'.",
        "question_ar": "",
        "evidence_en": "url refers to itunes_url; 'Brown Suga Diaries' is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all podcast with its itunes url for all title containing the word 'Dream'.",
        "question_ar": "",
        "evidence_en": "containing the word 'Dream' refers to title LIKE '%Dream%'",
        "evidence_ar": "",
        "SQL": "SELECT itunes_url FROM podcasts WHERE title LIKE '%Dream%' GROUP BY itunes_url"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Name all the categories for podcast titled 'I Heart My Life Show'.",
        "question_ar": "",
        "evidence_en": "'I Hearty My Life Show' is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all the podcast title and its itunes url under the 'society-culture' category.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'society-culture'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many people rated 5 for the podcast which title contains the word 'spoiler' under the 'art' category '?",
        "question_ar": "",
        "evidence_en": "rated 5 refers to rating = 5; contain the word 'spoilers' refers to title like '%spoilers%'; 'art' is the category name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.podcast_id) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title LIKE '%spoilers%' AND T1.category = 'arts' AND T3.rating = 5"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List the authors who created review for podcast titled 'Pop Rocket' in 2016 with rating less than 5.",
        "question_ar": "",
        "evidence_en": "Pop Rocket' is the title of podcast; in 2016 refers to created_at like'2016%'; rating less than 5 refers to rating < 5; author refers to author_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Name all the podcast title and its category with average rating of more than 3.0.",
        "question_ar": "",
        "evidence_en": "average rating of more than 3.0 refers to avg(rating) > 3.0",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.",
        "question_ar": "",
        "evidence_en": "'fiction' is the category name; best rating refers to rating = 5; content reviewed refers to content",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "State the podcast title, content review and rating for all reviews with titled 'Love it!'",
        "question_ar": "",
        "evidence_en": "\"Love it!\" is the title of review; content reviewed refers to content",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Find the author, rating and review creation date of review for podcast title 'In The Thick'.",
        "question_ar": "",
        "evidence_en": "\"In The Thick\" is the title of podcast; author refers to author_id; creation date refers to created_at",
        "evidence_ar": "",
        "SQL": "SELECT T2.author_id, T2.rating, T2.created_at FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'In The Thick' GROUP BY T2.author_id, T2.rating, T2.created_at"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which podcast was reviewed the latest? State the date of creation, podcast tile and rating.",
        "question_ar": "",
        "evidence_en": "latest refers to Max(created_at); date of creation refers to created_at",
        "evidence_ar": "",
        "SQL": "SELECT T1.podcast_id, T2.created_at, T2.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id ORDER BY T2.created_at DESC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Name the podcast title, rating and review content created by '76A4C24B6038145'.",
        "question_ar": "",
        "evidence_en": "\"76A4C24B6038145\" is author_id; review content refers to content",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "For all reviews with the worst rating, state the podcast title as well as the review title and content.",
        "question_ar": "",
        "evidence_en": "worst rating refers to rating = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title, T2.title, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all reviews created in May 2019. State the title of podcast and review rating.",
        "question_ar": "",
        "evidence_en": "created in May 2019 refers to created_at like '2019-05%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at LIKE '2019-05-%'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating for the podcast that is most reviewed?",
        "question_ar": "",
        "evidence_en": "most reviewed refers to Max(Count(reviews.podcast_id)); average rating refers to AVG (rating)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.podcast_id ORDER BY COUNT(T2.content) DESC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which category does the podcast titled 'SciFi Tech Talk' belong to?",
        "question_ar": "",
        "evidence_en": "podcast titled 'SciFi Tech Talk' refers to title = 'SciFi Tech Talk'",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the name of the podcast in which a commentor left a comment with the title 'Long time listener, calling it quits?' Include the URL of the podcast as well.",
        "question_ar": "",
        "evidence_en": "comment refers to review; 'Long time listener, calling it quits' is the title of review;  name of the podcast refers to title of podcast; URL refers to itunes_url",
        "evidence_ar": "",
        "SQL": "SELECT podcast_id, itunes_url FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Long time listener, calling it quits' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all the names of podcasts under the 'true crime' category.",
        "question_ar": "",
        "evidence_en": "name of the podcast refers to title of the podcast",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Write all the review content belonging to StormCast: The Official Warhammer Age of Sigmar Podcast.",
        "question_ar": "",
        "evidence_en": "review content refers to content; 'StormCast: The Official Warhammer Age of Sigmar Podcast' is the title of podcast;",
        "evidence_ar": "",
        "SQL": "SELECT content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'StormCast: The Official Warhammer Age of Sigmar Podcast' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Write all the review titles and the contents belonging to the podcast 'More Stupider: A 90-Day Fiance Podcast' with a review rating of 1.",
        "question_ar": "",
        "evidence_en": "podcast 'More Stupider: A 90-Day Fiance Podcast'  refers to title = 'More Stupider: A 90-Day Fiance Podcast'; rating of 1 refers to rating = 1",
        "evidence_ar": "",
        "SQL": "SELECT title, content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'More Stupider: A 90-Day Fiance Podcast' ) AND rating = 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many reviews does 'LifeAfter/The Message' have which were rated below 3?",
        "question_ar": "",
        "evidence_en": "LifeAfter/The Message' is the title of podcast; rated below 3 refers to rating < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'LifeAfter/The Message' AND T2.rating <= 3"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "The 'More Stupider: A 90-Day Fiance Podcast' belongs to which category and what is the average rating of the podcast?",
        "question_ar": "",
        "evidence_en": "More Stupider: A 90-Day Fiance Podcast' is the title of podcast; average rating = Divide (Sum(rating), Count(rating))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.rating) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'More Stupider: A 90-Day Fiance Podcast'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Of the arts-books and arts-design categories, which one has more podcasts and what is the numerical difference between them?",
        "question_ar": "",
        "evidence_en": "arts-books' and 'arts-design' are category; numerical difference = Subtract(Count(podcast_id(category = 'arts-books')), Count(podcast_id(category = 'arts-design'))); one has much more podcast refers to Max(Count(podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT category FROM categories WHERE category = 'arts-books' OR category = 'arts-design' GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 ) \"has more podcasts\" , ( SELECT SUM(CASE WHEN category = 'arts-books' THEN 1 ELSE 0 END) - SUM(CASE WHEN category = 'arts-design' THEN 1 ELSE 0 END) FROM categories ) \"differenct BETWEEN arts-books and arts-design\""
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many total reviews runned at in June 2022 were added to the podcasts?",
        "question_ar": "",
        "evidence_en": "run at in June 2022 refers to run_at BETWEEN '2022-06-01 00:00:00' and '2022-06-30 23:59:59'; reviews refers to review_added",
        "evidence_ar": "",
        "SQL": "SELECT SUM(reviews_added) FROM runs WHERE run_at LIKE '2022-06-%'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many podcast reviews with a rating of 3 were created during the first quarter of 2015?",
        "question_ar": "",
        "evidence_en": "rating of 3 refers to rating = 3; created during the first quarter of 2015 refers to created_at BETWEEN'2015-01-01T00:00:00-07:00' and '2015-03-31T23:59:59-07:00'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Calculate the percentage of podcasts in the fiction-science-fiction category.",
        "question_ar": "",
        "evidence_en": "percentage =   Divide (Count(podcast_id(category = 'fiction-science-fiction')), Count(podcast_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' \"percentage\" FROM categories"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating of all the podcasts with reviews created in 2019?",
        "question_ar": "",
        "evidence_en": "created in 2019 refers to created_at BETWEEN '2019-01-01T00:00:00' and '2019-12-31T23:59:59'; average rating  = Divide (Sum(rating), Count(podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the percentage of reviews added each year of the total reviews added?",
        "question_ar": "",
        "evidence_en": "review added each year refers to runs_at like '2021%' and runs_at like '2022%'; percentage for 2021 = Divide (Sum(reviews_added(runs_at like '2021%)), Sum(reviews_added)) * 100; percentage of 2022 = Divide (Sum(reviews_added(runs_at like '2022%')), Sum(reviews_added)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN run_at LIKE '2022-%' THEN reviews_added ELSE 0 END) - SUM(CASE WHEN run_at LIKE '2021-%' THEN reviews_added ELSE 0 END)) AS REAL) * 100 / SUM(reviews_added) OR '%' \"percentage\" FROM runs"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Indicates the title of all podcasts in the fiction category.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'fiction'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the rating and category of the podcast entitled Sitcomadon?",
        "question_ar": "",
        "evidence_en": "entitled refers to title; 'Sitcomadon' is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Indicate the id of the reviewer whose itunes id is 1516665400.",
        "question_ar": "",
        "evidence_en": "\"151665400\" is itunes_id; id of reviewer refers to author_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.itunes_id = 1516665400"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What are the titles of the podcasts whose reviews were created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00?",
        "question_ar": "",
        "evidence_en": "created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00 refers to created at BETWEEN '2018-08-22T11:53:16-07:00' and '2018-11-20T11:14:20-07:00'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "To which categories do the podcasts of the reviewer whose id is EFB34EAC8E9397C belong?",
        "question_ar": "",
        "evidence_en": "reviewer whose id is EFB34EAC8E9397C refers to author_id = 'EFB34EAC8E9397C'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'EFB34EAC8E9397C'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Indicate the slug and the itunes url of the podcast whose review content was written Can't stop listening.",
        "question_ar": "",
        "evidence_en": "review content was written Can't stop listening refers to content = 'Can't stop listening'",
        "evidence_ar": "",
        "SQL": "SELECT slug, itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM reviews WHERE content = 'Can''t stop listening' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What dates were the Don't Lie To Your Life Coach podcast reviews created?",
        "question_ar": "",
        "evidence_en": "\"Don't Lie To Your Life Coach\" refers to title of podcast; date refers to created_at",
        "evidence_ar": "",
        "SQL": "SELECT created_at FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'Don''t Lie To Your Life Coach' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "In how many categories were podcast reviews created in the last six months of 2016? List them.",
        "question_ar": "",
        "evidence_en": "created in last six months of 2016 refers to created_at BETWEEN '2016-07-01T00:00:00-07:00' and '2016-12-31T23:59:59-07:00'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.category) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Calculate the average rating of the true crime category.",
        "question_ar": "",
        "evidence_en": "average rating = Divide (Sum(rating(category = 'true-crime')), Count(podcast_id(category = 'true-crime')))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List the titles of the art category.",
        "question_ar": "",
        "evidence_en": "art category refers to category = 'arts'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating of all the podcasts in category art?",
        "question_ar": "",
        "evidence_en": "category art refers to category = 'arts'; average rating = Divide (Sum (rating), Count (podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Provide the names of podcasts in the art category in 2018.",
        "question_ar": "",
        "evidence_en": "art category refers to category = 'arts'; in 2018 refers to created_at like '2018%'; name of podcast refers to title",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts' AND T2.created_at LIKE '2018-%'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Write the names of the podcasts in the music category that have a rating greater than 3.",
        "question_ar": "",
        "evidence_en": "music category refers to category = 'music'; rating greater than 3 refers to rating > 3; name of the podcast refers to title",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' AND T2.rating > 3"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which titles have the content \"love\" but the category is art produced between 2018 and 2019.",
        "question_ar": "",
        "evidence_en": "content love refers to content = 'love'; 'arts' is the category; produced between 2018 and 2019 refers to year (created_at) BETWEEN 2018 and 2019",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the category and itune url of the title \"Scaling Global\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating of podcasts in comedy category?",
        "question_ar": "",
        "evidence_en": "comedy category refers to category = 'comedy'; average rating = Divide (Sum(rating), Count(podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the least common category?",
        "question_ar": "",
        "evidence_en": "least common category refers to Min(Count(category))",
        "evidence_ar": "",
        "SQL": "SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) ASC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the longest review?",
        "question_ar": "",
        "evidence_en": "review refers to content; longest review refers to Max(content)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM reviews ORDER BY LENGTH(content) DESC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the review with the title \"Hosts bring the show down\" for?",
        "question_ar": "",
        "evidence_en": "\"Hosts bring the show down\" refers to title of review",
        "evidence_ar": "",
        "SQL": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which \"music\" podcast has the longest title?",
        "question_ar": "",
        "evidence_en": "music podcasts refers to category = 'music'; longest title refers to title = Max(length(title))",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' ORDER BY LENGTH(T2.title) DESC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all the cagetories for all the podcasts with \"jessica\" in the title.",
        "question_ar": "",
        "evidence_en": "podcast with 'jessica' in title refers to title like '%jessica%'",
        "evidence_ar": "",
        "SQL": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title LIKE '%jessica%' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the category for the \"Moist Boys\" podcast?",
        "question_ar": "",
        "evidence_en": "\"Moist Boys\" refers to title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Moist Boys' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all of the two-star reviews and their categories.",
        "question_ar": "",
        "evidence_en": "two-stars review refers to rating = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 2"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List all the podcasts reviewed by a reviewer who has a review titled \"Inspired & On Fire!\".",
        "question_ar": "",
        "evidence_en": "\"Inspired & On Fire\" refers to title of review",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Inspired & On Fire!'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What are the titles and categories of all the podcasts with a review that has \"Absolutely fantastic\" in it?",
        "question_ar": "",
        "evidence_en": "review refers to content; 'Absolutely fantastic' in it refers to content like '%Absolutely fantastic%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.content LIKE '%Absolutely fantastic%'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which category has the most reviews?",
        "question_ar": "",
        "evidence_en": "Most review refers to Max(Count(reviews.podcast_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.category ORDER BY COUNT(T2.podcast_id) DESC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "List the urls for all the \"fiction-science-fiction\" podcasts.",
        "question_ar": "",
        "evidence_en": "fiction-science-fiction podcasts refers to category = 'fiction-science-fiction'; urls refers to itunes_url",
        "evidence_ar": "",
        "SQL": "SELECT itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM categories WHERE category = 'fiction-science-fiction' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the content of the earliest review for the \"Stuff You Should Know\" podcast?",
        "question_ar": "",
        "evidence_en": "\"Stuff You Should Know\" is the title of podcast; earliest refers to Min(created_at)",
        "evidence_ar": "",
        "SQL": "SELECT T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Stuff You Should Know' ORDER BY T2.created_at ASC LIMIT 1"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many reviews does \"Planet Money\" have?",
        "question_ar": "",
        "evidence_en": "\"Planet Money\" is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating for the \"crime-junkie\" podcast?",
        "question_ar": "",
        "evidence_en": "\"crime-junkie\" podcast refers to title = 'crime-junkie'; average rating = Divide (Sum(rating), Count(rating))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Crime Junkie'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What percentage of podcasts are \"technology\" podcasts? List all of them.",
        "question_ar": "",
        "evidence_en": "\"technology\" podcast refers to category = 'technology'; percentage = Divide (Count (podcast_id (category = 'technology')), Count (podcast_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.category = 'technology' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.title) OR '%' \"percentage\" FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the content of the review under the title \"really interesting!\" and is created on 2018-04-24 at 12:05:16?",
        "question_ar": "",
        "evidence_en": "\"really interesting\" is the title of review;  created on 2018-04-24 at 12:05:16 refers to created_at = '2018-04-24T12:05:16-07:00'",
        "evidence_ar": "",
        "SQL": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Which category is the podcast \"Scaling Global\" under?",
        "question_ar": "",
        "evidence_en": "\"Scaling Global\" is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Scaling Global' )"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Please list the titles of all the podcasts under the category \"arts-performing-arts\".",
        "question_ar": "",
        "evidence_en": "category 'arts-performing-arts' refers to category = 'arts-performing-arts';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts-performing-arts'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many reviews are created for the podcast \"Scaling Global\" under?",
        "question_ar": "",
        "evidence_en": "\"Scaling Global\" is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.content) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Scaling Global'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Among the reviews for the podcast \"Please Excuse My Dead Aunt Sally\", how many of them are made in the year 2019?",
        "question_ar": "",
        "evidence_en": "\"Please Excuse My Dead Aunt Sally\" is the title of podcast; made in the year 2019 refers to created_at like '2019%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.created_at) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.created_at LIKE '2019-%'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "Please list the titles of the podcasts for which the author whose ID is F7E5A318989779D has written a review.",
        "question_ar": "",
        "evidence_en": "author whose ID is F7E5A318989779D refers to author_id = 'F7E5A318989779D'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "How many ratings of 5 have been given to the podcast \"Please Excuse My Dead Aunt Sally\"?",
        "question_ar": "",
        "evidence_en": "rating of 5 refers to rating = 5; 'Please Excuse My Dead Aunt Sally' is the title of podcast",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5"
    },
    {
        "db_id": "music_platform_2",
        "question_en": "What is the average rating of the podcast \"Please Excuse My Dead Aunt Sally\"?",
        "question_ar": "",
        "evidence_en": "\"Please Excuse My Dead Aunty Sally\" is the title of podcast; Average rating = Divide (Sum(rating), Count(rating))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'"
    },
    {
        "db_id": "university",
        "question_en": "How many universities have at least 80,000 students in the year 2011?",
        "question_ar": "",
        "evidence_en": "have at least 80,000 students refers to num_students > 8000; year = 2011",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "What is the ranking system ID of the award criteria?",
        "question_ar": "",
        "evidence_en": "award criteria refers to criteria_name = 'Award';",
        "evidence_ar": "",
        "SQL": "SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award'"
    },
    {
        "db_id": "university",
        "question_en": "How many state universities are there?",
        "question_ar": "",
        "evidence_en": "state universities refers to university_name LIKE '%State%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'"
    },
    {
        "db_id": "university",
        "question_en": "What is the student staff ratio of the university with the highest student staff ratio of all time?",
        "question_ar": "",
        "evidence_en": "highest student staff ratio refers to max(student_staff_ratio)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )"
    },
    {
        "db_id": "university",
        "question_en": "How many criteria belong to ranking system ID 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM ranking_criteria WHERE ranking_system_id = 3"
    },
    {
        "db_id": "university",
        "question_en": "What is the ID of the university that has only 1% of international students between 2011 to 2015?",
        "question_ar": "",
        "evidence_en": "has only 1% of international students refers to pct_international_students = 1; between 2011 to 2015 refers to year BETWEEN 2011 AND 2015; ID of university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015"
    },
    {
        "db_id": "university",
        "question_en": "Give the name of the country that has the most universities.",
        "question_ar": "",
        "evidence_en": "has the most universities refers to MAX(COUNT(id)); name of the country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the name of the university that had the highest number of international students for 6 consecutive years?",
        "question_ar": "",
        "evidence_en": "had the highest number of international students refers to max(pct_international_students); for 6 consecutive years refers to count(SUBTRACT(year, rm)) > = 6; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.pct_international_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "In 2014, what is the name of the university which was considered a leader in the publications rank?",
        "question_ar": "",
        "evidence_en": "In 2014 refers to year = 2014; leader refers to MAX(score); in the publications rank refers to criteria_name = 'Publications Rank'; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Publications Rank' AND T2.year = 2014 AND T1.id = 17 ORDER BY T2.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the name of the university that has the lowest number of students of all time?",
        "question_ar": "",
        "evidence_en": "has the lowest number of students refers to min(num_students); name of the university refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many universities are there in the United States of America?",
        "question_ar": "",
        "evidence_en": "in the United States of America refers to country_name = 'United States of America';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'United States of America'"
    },
    {
        "db_id": "university",
        "question_en": "In 2016, what is the name of the university in Australia with the highest score in Citations criteria?",
        "question_ar": "",
        "evidence_en": "In 2016 refers to year = 2016; name of the university refers to university_name; in Australia refers to country_name = 'Australia'; in Citations criteria refers to criteria_name = 'Citations'; highest score refers to MAX(score)",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Citations' AND T2.year = 2016 AND T1.id = 4 AND T4.country_name = 'Australia' ORDER BY T2.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many universities scored 0 in Awards between 2005 to 2015?",
        "question_ar": "",
        "evidence_en": "between 2005 to 2015 refers to year BETWEEN 2005 AND 2015; scored 0 refers to score = 0; in Awards refers to criteria_name = 'Award'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0"
    },
    {
        "db_id": "university",
        "question_en": "Which country is the University of Oxford located?",
        "question_ar": "",
        "evidence_en": "University of Oxford refers to university_name = 'University of Oxford'; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE university_name = 'University of Oxford'"
    },
    {
        "db_id": "university",
        "question_en": "How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank?",
        "question_ar": "",
        "evidence_en": "Yale University refers to university_name = 'Yale University'; a score of no less than 10 refers to score > = 10; in the Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'"
    },
    {
        "db_id": "university",
        "question_en": "What are the names of the criteria under Center for World University Rankings?",
        "question_ar": "",
        "evidence_en": "names of the criteria refers to criteria_name; under Center for World University Rankings refers to system_name = 'Center for World University Rankings';",
        "evidence_ar": "",
        "SQL": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'"
    },
    {
        "db_id": "university",
        "question_en": "List the names of all the universities that have no less than 50,000 students in the year 2012.",
        "question_ar": "",
        "evidence_en": "have no less than 50,000 students refers to num_students > 50000; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012"
    },
    {
        "db_id": "university",
        "question_en": "Between 2011 to 2016, in which countries can you find the universities where at least 50% of its students are international students?",
        "question_ar": "",
        "evidence_en": "Between 2011 to 2016 refers to year BETWEEN 2011 AND 2016; at least 50% of its students are international students refers to pct_international_students > 50; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.pct_international_students > 50 AND T2.year BETWEEN 2011 AND 2016"
    },
    {
        "db_id": "university",
        "question_en": "How many universities have no less than 20,000 female students in 2016? Identify how many of the said universities are located in the United States of America.",
        "question_ar": "",
        "evidence_en": "have no less than 20,000 female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100) > 20000; in 2016 refers to year = 2016; located in the United States of America refers to country_name = 'United States of America'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) , SUM(CASE WHEN T3.country_name = 'United States of America' THEN 1 ELSE 0 END) AS nums_in_usa FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2016 AND T2.num_students * T2.pct_female_students / 100 > 20000"
    },
    {
        "db_id": "university",
        "question_en": "What are the names of the top 5 universities with the highest number of international students?",
        "question_ar": "",
        "evidence_en": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY (CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) DESC LIMIT 5"
    },
    {
        "db_id": "university",
        "question_en": "What is the university ID of the university with the largest student staff ratio?",
        "question_ar": "",
        "evidence_en": "the largest student staff ratio refers to max(student_staff_ratio)",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Give the year where a university had the lowest number of students.",
        "question_ar": "",
        "evidence_en": "had the lowest number of students refers to MIN(num_students)",
        "evidence_ar": "",
        "SQL": "SELECT year FROM university_year ORDER BY num_students ASC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Compute the average percentage of female students.",
        "question_ar": "",
        "evidence_en": "average percentage of female students refers to avg(pct_female_students)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(pct_female_students) FROM university_year"
    },
    {
        "db_id": "university",
        "question_en": "Provide the number of international students and number of students in 2013 in university ID 20.",
        "question_ar": "",
        "evidence_en": "number of international students refers to DIVIDE(MULTIPLY(pct_international_students, num_students), 100); in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT pct_international_students * num_students, num_students FROM university_year WHERE year = 2013 AND university_id = 20"
    },
    {
        "db_id": "university",
        "question_en": "What is the university ID of Harvard University?",
        "question_ar": "",
        "evidence_en": "of Harvard University refers to university_name = 'Harvard University';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM university WHERE university_name = 'Harvard University'"
    },
    {
        "db_id": "university",
        "question_en": "List the university ID of the university that scored 100 in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = 2011; score = 100",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_ranking_year WHERE score = 100 AND year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "Provide the ranking system of the ranking criteria named Quality of Education Rank.",
        "question_ar": "",
        "evidence_en": "criteria named Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'"
    },
    {
        "db_id": "university",
        "question_en": "What is the student staff ratio of Harvard University in 2012?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; in 2012 refers to year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT T1.student_staff_ratio FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2012"
    },
    {
        "db_id": "university",
        "question_en": "Give the location of the university ID 112.",
        "question_ar": "",
        "evidence_en": "location refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.id = 112"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the total number of students in universities located in Sweden.",
        "question_ar": "",
        "evidence_en": "located in Sweden refers to country_name = 'Sweden'; number of students refers to num_students",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Sweden'"
    },
    {
        "db_id": "university",
        "question_en": "What is the ranking criteria ID of Brown University in 2014?",
        "question_ar": "",
        "evidence_en": "Brown University refers to university_name = 'Brown University'; in 2014 refers to year = 2014",
        "evidence_ar": "",
        "SQL": "SELECT T1.ranking_criteria_id FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' AND T1.year = 2014"
    },
    {
        "db_id": "university",
        "question_en": "List the name of universities located in Spain.",
        "question_ar": "",
        "evidence_en": "name of universities refers to university_name; located in Spain refers to country_name = 'Spain';",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Spain'"
    },
    {
        "db_id": "university",
        "question_en": "What is the criteria name of the university ID 32 in 2015?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to year = 2015",
        "evidence_ar": "",
        "SQL": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.university_id = 32 AND T2.year = 2015"
    },
    {
        "db_id": "university",
        "question_en": "Compute the average score of the university located in Brazil.",
        "question_ar": "",
        "evidence_en": "average score refers to avg(score); located in Brazil refers to country_name = 'Brazil';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.score) FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Brazil'"
    },
    {
        "db_id": "university",
        "question_en": "In which country does the most populated university in 2014 located ?",
        "question_ar": "",
        "evidence_en": "the most populated university refers to max(num_students); in 2014 refers to year = 2014",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_id FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2014 ORDER BY T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Give the score and number of international students in university ID 100 in 2015.",
        "question_ar": "",
        "evidence_en": "number of international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2015 refers to year = 2015",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100, T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.year = 2015 AND T1.university_id = 100"
    },
    {
        "db_id": "university",
        "question_en": "What is the student population of the university that scored 98 in 2013?",
        "question_ar": "",
        "evidence_en": "student population refers to num_students; in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_students) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 98 AND T1.year = 2013"
    },
    {
        "db_id": "university",
        "question_en": "List the criteria names under the ranking system called Center for World University Ranking.",
        "question_ar": "",
        "evidence_en": "ranking system called Center for World University Ranking refers to system_name = 'Center for World University Rankings';",
        "evidence_ar": "",
        "SQL": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'"
    },
    {
        "db_id": "university",
        "question_en": "Provide the country name of universities with the number of students greater than 98% of the average student population of all universities in 2013.",
        "question_ar": "",
        "evidence_en": "number of students greater than 98% of the average student population of all universities refers to num_students >  MULTPLY(num_students, 0.98); in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2013 AND T2.num_students * 100 > ( SELECT AVG(num_students) FROM university_year ) * 98"
    },
    {
        "db_id": "university",
        "question_en": "Among universities that score below 80 in 2015, what is the percentage of international students?",
        "question_ar": "",
        "evidence_en": "score below 80 refers to score < 80; in 2015 refers to year 2015; percentage of international students refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)), SUM(num_students))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) / COUNT(*) * 100 FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score < 80 AND T1.year = 2015"
    },
    {
        "db_id": "university",
        "question_en": "How many students attended universities were there in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(num_students) FROM university_year WHERE year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "Among all universities, how many female students were there in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = 2011; female students refers to SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "What is the student staff ratio at the university with the greatest student staff ratio of all time?",
        "question_ar": "",
        "evidence_en": "greatest student staff ratio of all time refers to max(student_staff_ratio)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(student_staff_ratio) FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the university ID with the most students in 2011?",
        "question_ar": "",
        "evidence_en": "most students refers to MAX(num_students), in 2011 refers to year = 2011",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%?",
        "question_ar": "",
        "evidence_en": "institutions with over 50,000 students refers to num_students > 50000; in 2011 refers to year = 2011; percentage of oversea students of more than 10% refers to pct_international_students > 10;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10"
    },
    {
        "db_id": "university",
        "question_en": "Provide the ID of the university with the highest percentage of female students in 2012.",
        "question_ar": "",
        "evidence_en": "in 2012 refers to year = 2012; highest percentage of female students  refers to MAX(pct_female_students); ID of the university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Which university had the highest reputation in 2012?",
        "question_ar": "",
        "evidence_en": "had the highest reputation refers to MAX(score), in 2012 refers to year = 2012; which university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2012 ORDER BY T1.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Name the university that had the most students in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = 2011; had the most students refers to MAX(num_students); name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Indicate the university's name with the highest ranking score in Teaching.",
        "question_ar": "",
        "evidence_en": "university's name refers to university_name; highest ranking score refers to MAX(score); in Teaching refers to criteria_name = 'Teaching'",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T3.criteria_name = 'Teaching' ORDER BY T2.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the percentage of Harvard university's international students in 2011?",
        "question_ar": "",
        "evidence_en": "Harvard university's refers to university_name = 'Harvard University'; in 2011 refers to year = 2011; percentage of Harvard university's international students refers to pct_international_students",
        "evidence_ar": "",
        "SQL": "SELECT T1.pct_international_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Harvard University'"
    },
    {
        "db_id": "university",
        "question_en": "How many female students were there at Stanford University in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'"
    },
    {
        "db_id": "university",
        "question_en": "In which nation is Harvard University located?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; nation refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'"
    },
    {
        "db_id": "university",
        "question_en": "What is the name of the ranking system for Teaching criteria?",
        "question_ar": "",
        "evidence_en": "Teaching criteria refers to criteria_name = 'Teaching'; name of the ranking system refers to system_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Teaching'"
    },
    {
        "db_id": "university",
        "question_en": "Name the most famous university in Argentina.",
        "question_ar": "",
        "evidence_en": "in Argentina refers to country_name = 'Argentina';  most famous refers to MAX(SUM(score))",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Argentina' GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "In Argentina, how many universities are there?",
        "question_ar": "",
        "evidence_en": "In Argentina refers to country_name = 'Argentina';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Argentina'"
    },
    {
        "db_id": "university",
        "question_en": "Which universities have more than 100,000 students in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; more than 100,000 students refers to num_students > 100000; which university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000"
    },
    {
        "db_id": "university",
        "question_en": "How many criteria are associated with ranking system Center for World University Rankings?",
        "question_ar": "",
        "evidence_en": "ranking system Center for World University Rankings refers to system_name = 'Center for World University Rankings';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.criteria_name) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'"
    },
    {
        "db_id": "university",
        "question_en": "How many students at the university earned a score of 90 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; earned a score of 90 refers to score = 90;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "What are the top three universities with the most international students?",
        "question_ar": "",
        "evidence_en": "most international students refers to MAX(SUM(DIVIDE(MULTIPLE(pct_international_students, num_students), 100))); name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id GROUP BY T2.university_name ORDER BY SUM(T1.num_students * T1.pct_international_students / 100) DESC LIMIT 3"
    },
    {
        "db_id": "university",
        "question_en": "What is the difference in overall student enrollment and international student enrollment at the Harvard university from 2011 to 2012?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; difference in overall student enrollment and international student refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(pct_international_students, num_students), 100))); from 2011 to 2012 refers to year BETWEEN 2011 AND 2012",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year BETWEEN 2011 AND 2012"
    },
    {
        "db_id": "university",
        "question_en": "How many universities had over 30000 students in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; had over 30000 students refers to num_students > 30000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000"
    },
    {
        "db_id": "university",
        "question_en": "What is the country ID of the University of Tokyo?",
        "question_ar": "",
        "evidence_en": "University of Tokyo refers to university_name = 'University of Tokyo';",
        "evidence_ar": "",
        "SQL": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'"
    },
    {
        "db_id": "university",
        "question_en": "Provide the ranking system ID of the Center for World University Rankings.",
        "question_ar": "",
        "evidence_en": "the Center for World University Rankings refers to system_name = 'Center for World University Rankings';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'"
    },
    {
        "db_id": "university",
        "question_en": "What is the ID of the Publications Rank criteria?",
        "question_ar": "",
        "evidence_en": "Publications Rank criteria refers to criteria_name = 'Publications Rank';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank'"
    },
    {
        "db_id": "university",
        "question_en": "How many universities had above 30% of international students in 2013?",
        "question_ar": "",
        "evidence_en": "had above 30% of international students refers to pct_international_students > 30; in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013"
    },
    {
        "db_id": "university",
        "question_en": "How many universities got less than 50 scores under ranking criteria ID 6 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; less than 50 scores refers to score < 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50"
    },
    {
        "db_id": "university",
        "question_en": "Provide the number of students at Yale University in 2016.",
        "question_ar": "",
        "evidence_en": "number of students refers to num_students; Yale University refers to university_name = 'Yale University'; in 2016 refers to year = 2016",
        "evidence_ar": "",
        "SQL": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016"
    },
    {
        "db_id": "university",
        "question_en": "List the universities in Denmark.",
        "question_ar": "",
        "evidence_en": "in Denmark refers to country_name = 'Denmark'; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Denmark'"
    },
    {
        "db_id": "university",
        "question_en": "Provide the number of staff at the University of Auckland in 2015.",
        "question_ar": "",
        "evidence_en": "University of Auckland refers to university_name = 'University of Auckland'; in 2015 refers to year = 2015; number of staff refers to DIVIDE(num_students, student_staff_ratio)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.num_students) AS REAL) / SUM(T1.student_staff_ratio) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'University of Auckland' AND T1.year = 2015"
    },
    {
        "db_id": "university",
        "question_en": "Which country has the University of SÃ£o Paulo?",
        "question_ar": "",
        "evidence_en": "the University of SÃ£o Paulo refers to university_name = 'University of São Paulo'; which country refers to country_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of São Paulo'"
    },
    {
        "db_id": "university",
        "question_en": "How many international students attended Harvard University in 2012?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2012 refers to year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the number of female students at Arizona State University in 2014.",
        "question_ar": "",
        "evidence_en": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); at Arizona State University refers to university_name = 'Arizona State University'; in 2014 refers to year = 2014",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Arizona State University' AND T2.year = 2014"
    },
    {
        "db_id": "university",
        "question_en": "Provide the universities which got the highest scores.",
        "question_ar": "",
        "evidence_en": "got the highest scores refers to MAX(SUM(score))",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "List the ranking criteria under the Shanghai Ranking system.",
        "question_ar": "",
        "evidence_en": "Shanghai Ranking system refers to system_name = 'Shanghai Ranking'; ranking criteria refers to criteria_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'"
    },
    {
        "db_id": "university",
        "question_en": "In 2011, which university got the lowest score in teaching criteria?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; got the lowest score refers to MIN(score), teaching criteria refers to criteria_name = 'Teaching'",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score ASC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Provide the ranking system name for the \"Quality of Education Rank\" criteria.",
        "question_ar": "",
        "evidence_en": "the \"Quality of Education Rank\" criteria refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'"
    },
    {
        "db_id": "university",
        "question_en": "How many percent of universities got a score above 80 under International criteria in 2016? Among them, name the university which got the highest score.",
        "question_ar": "",
        "evidence_en": "got a score above 80 refers to score > 80; under International criteria refers to criteria_name = 'International'; in 2016 refers to year = 2016; highest score refers to MAX(score)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.score > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*), ( SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016 AND T2.score > 80 ORDER BY T2.score DESC LIMIT 1 ) AS max FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016"
    },
    {
        "db_id": "university",
        "question_en": "Provide the ranking criteria and scores in 2005 that were received by Harvard University.",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; in 2005 refers to year = 2005; ranking criteria refers to criteria_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the average score per university under Alumni criteria in 2008.",
        "question_ar": "",
        "evidence_en": "under Alumni criteria refers to criteria_name = 'Alumni'; in 2008 refers to year = 2008; average score refers to DIVIDE(SUM(score), COUNT(university_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.score) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Alumni' AND T2.year = 2008"
    },
    {
        "db_id": "university",
        "question_en": "Name the university and country which had the highest number of international students in 2015.",
        "question_ar": "",
        "evidence_en": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); in 2015 refers to year = 2015; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name, T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2015 ORDER BY T2.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many students were there in university ID 1 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011;",
        "evidence_ar": "",
        "SQL": "SELECT num_students FROM university_year WHERE year = 2011 AND university_id = 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the ID of the university with the most students in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; with the most students refers to MAX(num_students); ID of the university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Please list the IDs of the universities with a student staff ratio of over 15 in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; student staff ratio of over 15 refers to student_staff_ratio > 15; ID of the university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; with over 20000 students refers to num_students > 20000; international students percentage of over 25% refers to pct_international_students > 25;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND pct_international_students > 25 AND num_students > 20000"
    },
    {
        "db_id": "university",
        "question_en": "Please list the IDs of the universities with the top 3 female students percentage in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; top 3 female students percentage refers to MAX(pct_female_students) LIMIT 3; ID of the university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3"
    },
    {
        "db_id": "university",
        "question_en": "In which year did university ID 1 have the most students?",
        "question_ar": "",
        "evidence_en": "have the most students refers to MAX(num_students)",
        "evidence_ar": "",
        "SQL": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many students did Harvard University have in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University';",
        "evidence_ar": "",
        "SQL": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "What is the name of the university with the most international students in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; the most international students refers to MAX(DIVIDE(MULTIPLY(num_students,  pct_international_students), 100)); name of university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Please list the names of all the universities in Australia.",
        "question_ar": "",
        "evidence_en": "in Australia refers to country_name = 'Australia'; name of university refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Australia'"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities in Australia, how many of them have more than 15000 students in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; have more than 15000 students refers to num_students > 15000; in Australia refers to country_name = 'Australia';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.year = 2011 AND T2.num_students > 15000"
    },
    {
        "db_id": "university",
        "question_en": "Which country is Harvard University in?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'"
    },
    {
        "db_id": "university",
        "question_en": "What is the name of the university with the highest score in teaching in the year 2011?",
        "question_ar": "",
        "evidence_en": "with the highest score refers to MAX(score); in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Please list the names of the universities with a score in teaching of over 90 in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities with a score in teaching of over 90 in 2011, how many of them are in the United States of America?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90"
    },
    {
        "db_id": "university",
        "question_en": "Please list the names of all the ranking criteria of Harvard University in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University'; names of all the ranking criteria refers to criteria_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "What are the names of the universities that got 98 in teaching in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; that got 98 refers to score = 98; in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score = 98"
    },
    {
        "db_id": "university",
        "question_en": "Please list the names of all the universities that scored under 60 in teaching in 2011 and are in the United States of America.",
        "question_ar": "",
        "evidence_en": "scored under 60 refers to score < 60; in 2011 refers to year 2011; in teaching refers to criteria_name = 'Teaching'; in the United States of America refers to country_name = 'United States of America';",
        "evidence_ar": "",
        "SQL": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T4.country_name = 'United States of America' AND T2.year = 2011 AND T2.score < 60 AND T1.criteria_name = 'Teaching'"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities in Australia, how many of them have a student staff ratio of over 15 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; in Australia refers to country_name = 'Australia'; student staff ratio of over 15 refers to student_staff_ratio > 15",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.student_staff_ratio > 15 AND T2.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "How many female students did Stanford University have in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities with a score in teaching of over 90 in 2011, what is the percentage of those in the United States of America?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(COUNT(country_name = 'United States of America'), COUNT(id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T4.country_name = 'United States of America' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90"
    },
    {
        "db_id": "university",
        "question_en": "Give the id of \"Center for World University Rankings\".",
        "question_ar": "",
        "evidence_en": "\"Center for World University Rankings\" refers to system_name = 'Center for World University Rankings';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'"
    },
    {
        "db_id": "university",
        "question_en": "Which country is University of Veterinary Medicine Vienna located in? Give its country id.",
        "question_ar": "",
        "evidence_en": "University of Veterinary Medicine Vienna refers to university_name = 'University of Veterinary Medicine Vienna';",
        "evidence_ar": "",
        "SQL": "SELECT country_id FROM university WHERE university_name = 'University of Veterinary Medicine Vienna'"
    },
    {
        "db_id": "university",
        "question_en": "What is the id of the criteria \"Citations Rank\"?",
        "question_ar": "",
        "evidence_en": "criteria \"Citations Rank\" refers to criteria_name = 'Citations Rank';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'"
    },
    {
        "db_id": "university",
        "question_en": "Show the id of University of Orléans.",
        "question_ar": "",
        "evidence_en": "University of Orléans refers to university_name = 'University of Orléans';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM university WHERE university_name = 'University of Orléans'"
    },
    {
        "db_id": "university",
        "question_en": "For the university id 268, show its number of students in 2013.",
        "question_ar": "",
        "evidence_en": "number of students refers to num_students; in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013"
    },
    {
        "db_id": "university",
        "question_en": "Show the name of country id 66.",
        "question_ar": "",
        "evidence_en": "name of country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT country_name FROM country WHERE id = 66"
    },
    {
        "db_id": "university",
        "question_en": "Which country is McMaster University located in?",
        "question_ar": "",
        "evidence_en": "McMaster University refers to university_name = 'McMaster University'; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'McMaster University'"
    },
    {
        "db_id": "university",
        "question_en": "How many Turkish universities are there in the database?",
        "question_ar": "",
        "evidence_en": "Turkish universities refers to country_name = 'Turkey';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'"
    },
    {
        "db_id": "university",
        "question_en": "Which university had the most students in 2011? Show its name.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; the most students refers to MAX(num_students); which university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many students were there in University of Michigan in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; in University of Michigan refers to university_name = 'University of Michigan';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Michigan' AND T2.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "For Chosun University, what was its score on \"Influence Rank\" in 2015?",
        "question_ar": "",
        "evidence_en": "Chosun University refers to university_name = 'Chosun University'; in 2015 refers to year = 2015; on \"Influence Rank\" refers to criteria_name = 'Influence Rank';",
        "evidence_ar": "",
        "SQL": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Chosun University' AND T1.criteria_name = 'Influence Rank' AND T2.year = 2015"
    },
    {
        "db_id": "university",
        "question_en": "What is the percentage of the international students in University of Oslo in 2015?",
        "question_ar": "",
        "evidence_en": "percentage of the international students refers to pct_international_students; in 2015 refers to year = 2015; in University of Oslo refers to university_name = 'University of Oslo';",
        "evidence_ar": "",
        "SQL": "SELECT T2.pct_international_students FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Oslo' AND T2.year = 2015"
    },
    {
        "db_id": "university",
        "question_en": "For the University of Southampton in 2015, on which criteria did it score the best?",
        "question_ar": "",
        "evidence_en": "University of Southampton refers to university_name = 'University of Southampton'; in 2015 refers to year = 2015; score the best refers to MAX(score); which criteria refers to criteria_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Southampton' AND T2.year = 2015 ORDER BY T2.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Which ranking system is criteria \"Total Shanghai\" in?",
        "question_ar": "",
        "evidence_en": "criteria \"Total Shanghai\" refers to criteria_name = 'Total Shanghai'; which ranking system refers to system_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Total Shanghai'"
    },
    {
        "db_id": "university",
        "question_en": "How many female students were there in Pierre and Marie Curie University in 2015?",
        "question_ar": "",
        "evidence_en": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); in Pierre and Marie Curie University refers to university_name = 'Pierre and Marie Curie University'; in 2015 refers to year = 2015",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T2.university_name = 'Pierre and Marie Curie University'"
    },
    {
        "db_id": "university",
        "question_en": "What was the score for University of Florida in \"N and S\" in 2014?",
        "question_ar": "",
        "evidence_en": "University of Florida refers to university_name = 'University of Florida'; in 2014 refers to year = 2014; in \"N and S\" refers to criteria_name = 'N and S'",
        "evidence_ar": "",
        "SQL": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Florida' AND T2.year = 2014 AND T1.criteria_name = 'N and S'"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the number of international students of University of Wisconsin-Madison in 2013.",
        "question_ar": "",
        "evidence_en": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); University of Wisconsin-Madison refers to university_name = 'University of Wisconsin-Madison'; in 2013 refers to year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013 AND T2.university_name = 'University of Wisconsin-Madison'"
    },
    {
        "db_id": "university",
        "question_en": "Show the name of the university with the lowest number of students in 2015.",
        "question_ar": "",
        "evidence_en": "lowest number of students refers to MIN(num_students); in 2015 refers to year = 2015; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students ASC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "How many times more was the number of students of University of Ottawa than Joseph Fourier University in 2013?",
        "question_ar": "",
        "evidence_en": "Joseph Fourier University refers to university_name = 'Joseph Fourier University'; University of Ottawa refers to university_name = 'University of Ottawa'; in 2013 refers to year = 2013; how many times more refers to DIVIDE(SUM(num_students where university_name = 'University of Ottawa'), SUM(num_students where university_name = 'Joseph Fourier University'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the average number of criterias among \"Times Higher Education World University Ranking\",\"Shanghai Ranking\" and \"Center for World University Rankings\".",
        "question_ar": "",
        "evidence_en": "average number of criterias refers to DIVIDE(SUM(id), 3); \"Times Higher Education World University Ranking\", \"Shanghai Ranking\" and \"Center for World University Rankings\" refers to system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the average number of students of all universities in 2012.",
        "question_ar": "",
        "evidence_en": "average number of students refers to avg(num_students); in 2012 refers to year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT AVG(num_students) FROM university_year WHERE year = 2012"
    },
    {
        "db_id": "university",
        "question_en": "What is the score of university ID 68 in 2015?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to year = 2015",
        "evidence_ar": "",
        "SQL": "SELECT score FROM university_ranking_year WHERE year = 2015 AND university_id = 68"
    },
    {
        "db_id": "university",
        "question_en": "Provide the country ID of Cyprus.",
        "question_ar": "",
        "evidence_en": "Cyprus refers to country_name = 'Cyprus';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM country WHERE country_name = 'Cyprus'"
    },
    {
        "db_id": "university",
        "question_en": "What is the ID of university with the largest percentage of international students?",
        "question_ar": "",
        "evidence_en": "largest percentage of international students refers to MAX(pct_international_students); ID of university refers to university_id",
        "evidence_ar": "",
        "SQL": "SELECT university_id FROM university_year ORDER BY pct_international_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Provide the criteria name of the ranking criteria ID 13.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT criteria_name FROM ranking_criteria WHERE id = 13"
    },
    {
        "db_id": "university",
        "question_en": "What is the average score of all universities in 2012?",
        "question_ar": "",
        "evidence_en": "average score refers to avg(score); in 2012 refers to year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012"
    },
    {
        "db_id": "university",
        "question_en": "In years 2011 to 2013, what is the total number of female students in university ID 40?",
        "question_ar": "",
        "evidence_en": "total number of female students refers to SUM(DIVIDE(MULTIPLY(pct_female_students, num_students), 100)); In years 2011 to 2013 refers to year BETWEEN 2011 AND 2013",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year BETWEEN 2011 AND 2013 AND university_id = 40"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the average score of university ID 79 between year 2013 to 2015.",
        "question_ar": "",
        "evidence_en": "average score refers to avg(score); between year 2013 to 2015 refers to year BETWEEN 2013 AND 2015",
        "evidence_ar": "",
        "SQL": "SELECT AVG(score) FROM university_ranking_year WHERE year BETWEEN 2013 AND 2015 AND university_id = 79"
    },
    {
        "db_id": "university",
        "question_en": "Give the student staff ratio of university ID 35.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35"
    },
    {
        "db_id": "university",
        "question_en": "Provide the score of the most populated university in 2011.",
        "question_ar": "",
        "evidence_en": "most populated university refers to MAX(num_students); in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Give the criteria name where Harvard University scored 100.",
        "question_ar": "",
        "evidence_en": "Harvard University refers to university_name = 'Harvard University'; scored 100 refers to score = 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.criteria_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T1.university_name = 'Harvard University' AND T2.score = 100"
    },
    {
        "db_id": "university",
        "question_en": "Provide the university name and ID of the university found in Turkey.",
        "question_ar": "",
        "evidence_en": "found in Turkey refers to country_name = 'Turkey';",
        "evidence_ar": "",
        "SQL": "SELECT T1.university_name, T1.id FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'"
    },
    {
        "db_id": "university",
        "question_en": "What is the total number of ranking criteria under the ranking system called Shanghai Ranking?",
        "question_ar": "",
        "evidence_en": "ranking system called Shanghai Ranking refers to system_name = 'Shanghai Ranking';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'"
    },
    {
        "db_id": "university",
        "question_en": "Give the name and score of the university ID 124.",
        "question_ar": "",
        "evidence_en": "name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name, T1.score FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.id = 124"
    },
    {
        "db_id": "university",
        "question_en": "How many female students are there in University of Pennsylvania in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); University of Pennsylvania refers to a university name;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'University of Pennsylvania'"
    },
    {
        "db_id": "university",
        "question_en": "List down all universities that scored below 50.",
        "question_ar": "",
        "evidence_en": "scored below 50 refers to score < 50; all universities refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.score < 50"
    },
    {
        "db_id": "university",
        "question_en": "How many universities are located in Japan?",
        "question_ar": "",
        "evidence_en": "located in Japan refers to country_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Japan'"
    },
    {
        "db_id": "university",
        "question_en": "Provide the name of the university with the highest number of male students.",
        "question_ar": "",
        "evidence_en": "highest number of female students refers to MAX(SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_female_students), 100))); name of university refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students * T1.pct_female_students / 100 - T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "List the countries of universities that scored 70 and below in 2016.",
        "question_ar": "",
        "evidence_en": "scored 70 and below refers to score < 70; in 2016 refers to year = 2016",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.score < 70 AND T2.year = 2016"
    },
    {
        "db_id": "university",
        "question_en": "Calculate number of male students in Emory University in 2011.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; number of male students refers to SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_male_students), 100)); in Emory University refers to university_name = 'Emory University'",
        "evidence_ar": "",
        "SQL": "SELECT CAST((T1.num_students - (T1.num_students * T1.pct_female_students)) AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year = 2011"
    },
    {
        "db_id": "university",
        "question_en": "In which country does Johns Hopkins University located?",
        "question_ar": "",
        "evidence_en": "Johns Hopkins University refers to university_name = 'Johns Hopkins University'; which country refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Johns Hopkins University'"
    },
    {
        "db_id": "university",
        "question_en": "Give the names of universities with number of students ranges from 400 to 1000.",
        "question_ar": "",
        "evidence_en": "number of students ranges from 400 to 1000 refers to num_students BETWEEN 400 AND 1000; name of university refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students BETWEEN 400 AND 1000"
    },
    {
        "db_id": "university",
        "question_en": "In what year does the Brown University score the highest?",
        "question_ar": "",
        "evidence_en": "Brown University refers to university_name = 'Brown University'; score the highest refers to MAX(score)",
        "evidence_ar": "",
        "SQL": "SELECT T1.year FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' ORDER BY T1.score DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the average score of Emory University from 2011 to 2016.",
        "question_ar": "",
        "evidence_en": "average score refers to avg(score); Emory University refers to university_name = 'Emory University'; from 2011 to 2016 refers to year BETWEEN 2011 AND 2016;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.score) FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year BETWEEN 2011 AND 2016"
    },
    {
        "db_id": "university",
        "question_en": "Give the name of the university with the most number of students in 2015.",
        "question_ar": "",
        "evidence_en": "most number of students refers to MAX(num_students); in 2015 refers to year = 2015; name of university refers to university_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students DESC LIMIT 1"
    },
    {
        "db_id": "university",
        "question_en": "What is the location and number of female students in university ID 23 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); location refers to country_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.country_name, CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2011 AND T1.id = 23"
    },
    {
        "db_id": "university",
        "question_en": "How many universities scored 40 in teaching criteria?",
        "question_ar": "",
        "evidence_en": "scored 40 refers to score = 40; in teaching refers to criteria_name = 'Teaching'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.score = 40 AND T1.criteria_name = 'Teaching' AND T2.score = 40"
    },
    {
        "db_id": "university",
        "question_en": "Among the universities in United States of America, what is the percentage of female students in year 2016?",
        "question_ar": "",
        "evidence_en": "female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); in United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100)), SUM(num_students))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(T2.pct_female_students * T2.num_students AS REAL) / 100) * 100 / SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'United States of America' AND T2.year = 2016"
    },
    {
        "db_id": "university",
        "question_en": "Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014.",
        "question_ar": "",
        "evidence_en": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); difference refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100))); in University of Tokyo refers to university_name = 'University of Tokyo'; from 2011 to 2014 refers to year BETWEEN 2011 AND 2014",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year BETWEEN 2011 AND 2014 AND T2.university_name = 'University of Tokyo'"
    },
    {
        "db_id": "university",
        "question_en": "List the names of universities with a score less than 28% of the average score of all universities in 2015.",
        "question_ar": "",
        "evidence_en": "in 2015 refers to year = 2015; score less than 28% refers to score < MULTIPLY(avg(score), 0.28) where year = 2015; names of universities refers to university_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T1.score * 100 < ( SELECT AVG(score) * 28 FROM university_ranking_year WHERE year = 2015 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.9 were sold in store no.1 on 2012/1/1?",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; on 2012/1/1 refers to date = '2012-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT units FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 AND item_nbr = 9"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.9 were sold in store no.1 in total in January, 2012?",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; in January refers to SUBSTR(date, 1, 4) = '2012' and SUBSTR(date, 6, 2) = '01'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR(`date`, 6, 2) = '01' AND SUBSTR(`date`, 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the ID of the item that sold the best on 2012/1/1 in store no.1?",
        "question_ar": "",
        "evidence_en": "sold on 2012/1/1 refers to date = '2012-01-01'; in store no.1 refers to store_nbr = 1; item sold the best refers to Max(units)",
        "evidence_ar": "",
        "SQL": "SELECT item_nbr FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the temperature range of station no.1 on 2012/1/1?",
        "question_ar": "",
        "evidence_en": "on 2012/1/1 refers to date = '2012-01-01'; temperature range refers to Subtract (tmax, tmin); station no.1 refers to station_nbr = 1",
        "evidence_ar": "",
        "SQL": "SELECT tmax - tmin AS temrange FROM weather WHERE station_nbr = 1 AND `date` = '2012-01-01'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Please list the dates on which the temperature of station no.2 was above the 30-year normal.",
        "question_ar": "",
        "evidence_en": "temperature above the 30-year normal refers to depart > 0; station no.2 refers to station_nbr = 2",
        "evidence_ar": "",
        "SQL": "SELECT `date` FROM weather WHERE station_nbr = 2 AND depart > 0"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "On which day was the weather more windy in station no.1, 2012/1/1 or 2012/1/2?",
        "question_ar": "",
        "evidence_en": "station no.1 refers to station_nbr = 1; 2012/1/1 refers to date = '2012-01-01'; 2012/1/2 refers to date = '2012-01-02'; more windy refers to Max(avgspeed)",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN (SUM(CASE WHEN `date` = '2012-01-01' THEN avgspeed ELSE 0 END) - SUM(CASE WHEN `date` = '2012-01-02' THEN avgspeed ELSE 0 END)) > 0 THEN '2012-01-01' ELSE '2012-01-02' END FROM weather WHERE station_nbr = 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the total number of units of item no.5 sold in store no.3 in 2012 on days when the temperature was below the 30-year normal?",
        "question_ar": "",
        "evidence_en": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the temperature was below the 30-year normal refers to depart < 0; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; total number of units refers to Sum(units)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?",
        "question_ar": "",
        "evidence_en": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the max temperature was highest refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'",
        "evidence_ar": "",
        "SQL": "SELECT T1.units FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; in 2012 refers to SUBSTR(date, 1, 4) = '2012': most units sold refers to Max(units)",
        "evidence_ar": "",
        "SQL": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100?",
        "question_ar": "",
        "evidence_en": "max temperature over 90 refers to tmax > 90; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; sale exceed 100 refers to units > 100; number of days refers to count (date)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.5 were sold in store no.3 on the day the temperature range was the biggest?",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; when the temperature range was the biggest refers to Max(Subtract(tmax, tmin))",
        "evidence_ar": "",
        "SQL": "SELECT t2.units FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 ORDER BY t3.tmax - t3.tmin DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest?",
        "question_ar": "",
        "evidence_en": "over 100 units refers to units > 100; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; the temperature range was the biggest refers to Max(Subtract(tmax, tmin))",
        "evidence_ar": "",
        "SQL": "SELECT T2.`date` FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 AND T2.units > 100 ORDER BY tmax - tmin DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05?",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; with a total precipitation of over 0.05 refers to preciptotal > 0.05",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10.",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; exceed 100 refers to units > 100; average wind speed exceeded 10 refers to avgspeed > 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.`date` FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5 AND T1.units > 100 AND T3.avgspeed > 10"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012?",
        "question_ar": "",
        "evidence_en": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; total units refers to sum(units)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.`date` LIKE '%2012%' GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10?",
        "question_ar": "",
        "evidence_en": "store no. 5 refers to store_nbr = 5; store no. 10 refers to store_nbr = 10; item no.16 refers to item_nbr = 16; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; highest max temperature refers to Max(tmax); more units sold refers to Subtract ( Sum(units where store_nbr = 5), Sum(units where store_nbr = 10))",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012?",
        "question_ar": "",
        "evidence_en": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; sold the best refers to Max(units); ID of the item refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' AND tmax = ( SELECT MAX(tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' ) GROUP BY T1.item_nbr ORDER BY SUM(units) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "On the day with the highest max temperature in 2012, how many items in store no.3 had no sales?",
        "question_ar": "",
        "evidence_en": "highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'; store no.3 refers to store_nbr = 3; had no sale refers to units = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.item_nbr) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr AND T1.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.units = 0 GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item no.5 were sold in store no.3 on average on the days when the max temperature exceeded 90?",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3;  when the maximum temperature exceed 90 refers to tmax > 90; average = Divide (Sum(units), Count(date))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.units) AS REAL) / COUNT(T1.`date`) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.item_nbr = 5 AND T3.tmax > 90"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012?",
        "question_ar": "",
        "evidence_en": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012';  Percentage = Divide (Sum(units where item_nbr = 5), Sum(units)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Give the id of the bestsellers of store no.1 on 2012/1/1.",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_nbr = 1; on 2012/1/1 refers to date = '2012-01-01'; best seller refers to Max(units); ID refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT item_nbr FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many no.9 items from store no.11 were sold on 2012/12/7?",
        "question_ar": "",
        "evidence_en": "no. 9 item refers to item_nbr = 9; store no.11 refers to store_nbr = 11; sold on 2012/12/7 refers to date = '2012-12-07'",
        "evidence_ar": "",
        "SQL": "SELECT units FROM sales_in_weather WHERE `date` = '2012-12-07' AND store_nbr = 11 AND item_nbr = 9"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Give the average temperature of station no.20 on 2014/10/17.",
        "question_ar": "",
        "evidence_en": "station no.20 refers to station_nbr = 20; on 2014/10/17 refers to date = '2014-10-17'; average temperature refers to tavg",
        "evidence_ar": "",
        "SQL": "SELECT tavg FROM weather WHERE `date` = '2014-10-17' AND station_nbr = 20"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Tell the resultant wind speed of station no.9 on 2014/1/15.",
        "question_ar": "",
        "evidence_en": "station no.9 refers to station_nbr = 9; on 2014/1/15 refers to date = '2014/01/15'; result wind speed refers to resultspeed",
        "evidence_ar": "",
        "SQL": "SELECT resultspeed FROM weather WHERE `date` = '2014-01-15' AND station_nbr = 9"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Give the id of the weather station with most stores.",
        "question_ar": "",
        "evidence_en": "station with more stores refers to Max(Count(store_nbr)); ID of weather station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(station_nbr) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which weather station does store no.20 belong to?",
        "question_ar": "",
        "evidence_en": "store no.20 refers to store_nbr = 20; weather station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT station_nbr FROM relation WHERE store_nbr = 20"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Tell the temperature range of the home weather station of store no.7 on 2014/4/28.",
        "question_ar": "",
        "evidence_en": "store no.7 refers to tore_nbr = 7; on 2014/4/28 refers to date = '2014-04-28'; temperature range refers to Subtract (tmax, tmin)",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmax - T1.tmin AS temprange FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 7 AND T1.`date` = '2014-04-28'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "For the weather station which recorded the highest temperature above the 30-year normal, how many stores does it have?",
        "question_ar": "",
        "evidence_en": "highest temperature above the 30-year normal refers to Max(depart)",
        "evidence_ar": "",
        "SQL": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "For the home weather station of store no.15, what was the dew point on 2012/2/18?",
        "question_ar": "",
        "evidence_en": "store no. 15 refers to store_nbr = 15; on 2012/2/18 refers to date = '2012-02-18'",
        "evidence_ar": "",
        "SQL": "SELECT T1.dewpoint FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 15 AND T1.`date` = '2012-02-18'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Tell the wet-bulb temperature of the weather station which contained store no.6 on 2012/2/15.",
        "question_ar": "",
        "evidence_en": "store no.6 refers to store_nbr = 6; on 2012/2/15 refers to date = '2012-02-15'; wet-bulb temperature refers to wetbulb",
        "evidence_ar": "",
        "SQL": "SELECT T1.wetbulb FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 14 AND T1.`date` = '2012-02-15'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Give the number of stores which opened on the weather station that recorded the fastest average wind speed.",
        "question_ar": "",
        "evidence_en": "fastest average wind speed refers to Max(avgspeed); number of store refers to count(store_nbr)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.store_nbr) FROM ( SELECT DISTINCT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 ) ) T"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "State the max temperature of the weather station which has the no.21 store on 2012/11/9.",
        "question_ar": "",
        "evidence_en": "no.21 store refers to store_nbr = 21; on 2012/11/9 refers to date = '2012-11-09'; max temperature refers to tmax",
        "evidence_ar": "",
        "SQL": "SELECT tmax FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 21 AND T1.`date` = '2012-11-09'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21.",
        "question_ar": "",
        "evidence_en": "store no. 30 refers to store_nbr = 30; on 2014/2/21 refers to date = '2014-02-21'",
        "evidence_ar": "",
        "SQL": "SELECT T1.sunrise FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2014-02-21' AND store_nbr = 30"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "State the number of stores that belongs to the weather station which recorded the deepest snowfall.",
        "question_ar": "",
        "evidence_en": "deepest snowfall refers to Max(snowfall); number of stores refers to store_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T2.store_nbr FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr ORDER BY snowfall DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Provide the code summarization for the weather recorded by the weather station which contained the no.2 store on 2013/2/12.",
        "question_ar": "",
        "evidence_en": "no.2 store refers to store_nbr = 2; on 2013/2/12 refers to date = '2013-02-12'; code summarization refers to codesum",
        "evidence_ar": "",
        "SQL": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2013-02-12' AND T2.store_nbr = 2"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Show the sea level status recorded by the weather station of store no.19 on 2013/2/24.",
        "question_ar": "",
        "evidence_en": "store no.19 refers to store_nbr = 19; on 2013/2/24 refers to date = '2013-02-24'; sea level status refers to sealevel",
        "evidence_ar": "",
        "SQL": "SELECT T1.sealevel FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2013-02-24' AND T2.store_nbr = 19"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many inches of total precipitation was recorded by the weather station of store no.2 on 2012/12/25?",
        "question_ar": "",
        "evidence_en": "store no.2 refers to store_nbr = 2; on 2012/12/25 refers to date = '2012-12-25'; total precipitation refers to preciptotal",
        "evidence_ar": "",
        "SQL": "SELECT T1.preciptotal FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2012-12-25' AND T2.store_nbr = 2"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Give the station pressure status recorded by the weather station which contained no.12 store on 2012/5/15.",
        "question_ar": "",
        "evidence_en": "no.12 store refers to store_nbr = 12; on 2012/5/15 refers to date = '2012-05-15'; station pressure status refers to stnpressure",
        "evidence_ar": "",
        "SQL": "SELECT T1.stnpressure FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2012-05-15' AND T2.store_nbr = 12"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What percentage was the total unit sales of store no.10 to the total sales of its weather station on 2014/10/31?",
        "question_ar": "",
        "evidence_en": "store no.10 refers to store_nbr = 10; on 2014/10/31 refers to date = '2014-10-31'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.`date` = '2014-10-31'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3?",
        "question_ar": "",
        "evidence_en": "store no.9 refers to store_nbr = 9; 2012/2/2 refers to date = '2012-02-02'; 2012/2/3 refers to date = '2012-02-03'; average temperature refers to tavg; increase percentage = Divide (Subtract (tavg where date = '2012-02-03', tavg where date = '2012-02-02'), tavg where date = '2012-02-02') * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.`date` = '2012-02-03' THEN T1.tavg * 1 ELSE 0 END) - SUM(CASE WHEN T1.`date` = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.`date` = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 9"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the item number of the product with the highest number of units sold in store number 1 on 1/1/2012?",
        "question_ar": "",
        "evidence_en": "item number refers to item_nbr; highest number of units sold refers to Max(units); store no.1 refers to store_nbr = 1; on 1/1/2012 refers to date = '2012-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT item_nbr FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many stores are in weather station 12?",
        "question_ar": "",
        "evidence_en": "weather station 12 refers to station_nbr = 12; number of stores refers to Count(store_nbr)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many items weren't sold in store 2 on 1/1/2012?",
        "question_ar": "",
        "evidence_en": "store no.2 refers to store_nbr = 2; item weren't sold refers to units = 0; on 1/1/2012 refers to date = '2012-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND `date` = '2012-01-01'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Between 1/1/2012 to 12/31/2014, which date recorded the hottest temperature in weather station 1?",
        "question_ar": "",
        "evidence_en": "weather station 1 refers to station_nbr = 1; hottest temperature refers to Max(tmax); between 1/1/2012 to 12/31/2014 refers to SUBSTR(date, 1, 4) between 2012 and 2014",
        "evidence_ar": "",
        "SQL": "SELECT `date` FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR(`date`, 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which weather station has the highest number of stores?",
        "question_ar": "",
        "evidence_en": "number of store refers to store_nbr; highest number of store refers to Max(Count(store_nbr)); weather station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal?",
        "question_ar": "",
        "evidence_en": "in March 2014 refers to substring (date, 1, 4) = '2014' and substring (date, 6, 2) = '03'; temperature is below the 30-year normal refers to depart < 0; highest number of days refers to Max(Count(date))",
        "evidence_ar": "",
        "SQL": "SELECT station_nbr FROM weather WHERE SUBSTR(`date`, 1, 4) = '2014' AND SUBSTR(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT `date`) = ( SELECT COUNT(DISTINCT `date`) FROM weather WHERE SUBSTR(`date`, 1, 4) = '2014' AND SUBSTR(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT(`date`) DESC LIMIT 1 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which weather station does the store that sold the highest quantity of item 9 belongs to?",
        "question_ar": "",
        "evidence_en": "item 9 refers to item_nbr = 9; sold the highest quantity refers to Max(Sum(units)); weather station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 9 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many stores belong to the most windy station?",
        "question_ar": "",
        "evidence_en": "most windy station refers to Max(avgspeed)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day?",
        "question_ar": "",
        "evidence_en": "weather station 14 refers to station_nbr = 14; February 2014 refers to substring (date, 1, 7) = '2014-02' ; sold no less than 300 quantities refers to units > = 300; item no.44 refers to item_nbr = 44; store refers to store_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.station_nbr = 14 AND T1.`date` LIKE '%2014-02%' AND T1.item_nbr = 44 AND units >= 300"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the most purchased products during the rainy days in June 2013 in weather station 9?",
        "question_ar": "",
        "evidence_en": "most purchased product refers to Max(units); during the rainy day refers to codesum = RA; in June 2013 refers to SUBSTR(date, 1, 7) = '2013-06'; weather station 9 refers to station_nbr = 9; product refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T3.station_nbr = 9 AND T1.`date` LIKE '%2013-06%' AND codesum = 'RA' ORDER BY T1.units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which station sold the highest quantity of item number 5 overall?",
        "question_ar": "",
        "evidence_en": "item number 5 refers to item_nbr = 5; sold highest quantity refers to Max(Sum(units)); station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 5 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the earliest sunrise recorded in the stations with no more than 1 store in February 2012?",
        "question_ar": "",
        "evidence_en": "in February 2012 refers to SUBSTR(date, 1, 7) = '2012-02'; earliest sunrise Min(sunrise);  station with no more than 1 store refers to station_nbr where Count(store_nbr) = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.station_nbr FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE sunrise IS NOT NULL AND T2.`date` LIKE '%2012-02%' AND T1.station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 1 ) ORDER BY sunrise LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "In weather station 17, which store sold the highest quantity of item 45 in October 2012?",
        "question_ar": "",
        "evidence_en": "weather station 17 refers to station_nbr = 17; item 45 refers to item_nbr = 45; in October 2012 refers to SUBSTR(date, 1, 7) = '2012-10': highest quantity refers to Max(Sum(units)); store refers to store_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.`date` LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What are the items sold by the store during the day whose station recorded the thickest snowfall?",
        "question_ar": "",
        "evidence_en": "thickest snowfall refers to Max(snowfall); item refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, `date` FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What are the top 3 stations that have sold the highest quantities for an item in a single day?",
        "question_ar": "",
        "evidence_en": "highest quantity refers to Max(units); station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr ORDER BY T1.units DESC LIMIT 3"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many stores belong to the station with the highest recorded heat of all time?",
        "question_ar": "",
        "evidence_en": "highest recorded heat refers to Max(heat); station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.store_nbr) FROM ( SELECT station_nbr FROM weather ORDER BY heat DESC LIMIT 1 ) AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "On February 8, 2014, what is the minimum temperature in the station where store 29 belongs?",
        "question_ar": "",
        "evidence_en": "On February 8, 2014 refers to date = '2014-02-08'; store 29 refers to store_nbr = 29; minimum temperature refers to tmin; station refers to station_nbr",
        "evidence_ar": "",
        "SQL": "SELECT tmin FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr = 29 AND T2.`date` = '2014-02-08'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014?",
        "question_ar": "",
        "evidence_en": "station with 3 stores refers to station_nbr where Count(store_nbr) = 3; station pressure of no more than 30 refers to stnpressure < 30; On February 18, 2014 refers to date = '2014-02-18'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(station_nbr) FROM weather WHERE `date` = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which station has the highest number of stores? Calculate the said station's average maximum temperature in February 2012.",
        "question_ar": "",
        "evidence_en": "station with highest number of stores refers to station_nbr where Max(Count(store_nbr)); station refers to station_nbr; in February 2012 refers to substring (date, 1, 7) = '2012-02'; average maximum temperature = Divide(Sum(tmax), 29)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.`date`, 1, 7) = '2012-02'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Between the stores under weather station 12, what is the percentage of item 5 sold in store 10 in 2014?",
        "question_ar": "",
        "evidence_en": "weather station 12 refers to station_nbr = 12; item 5 refers to item_nbr = 5; 10 store refers to store_nbr = 10; in 2014 refers to SUBSTR(date, 1, 4) = '2014'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE station_nbr = 12 AND item_nbr = 5 AND T2.`date` LIKE '%2014%'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the maximum average speed?",
        "question_ar": "",
        "evidence_en": "maximum average speed refers to Max(avgspeed)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(avgspeed) FROM weather"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many days did the show fell more than 5 inches?",
        "question_ar": "",
        "evidence_en": "snow fell more than 5 inches refers to snowfall > 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT `date`) FROM weather WHERE snowfall > 5"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many days did the sun rise before 5 AM?",
        "question_ar": "",
        "evidence_en": "sunrise before 5 Am refers to sunrise < time ('5:00:00')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT `date`) AS days FROM weather WHERE sunrise < time('05:00:00')"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the minimum dew point?",
        "question_ar": "",
        "evidence_en": "minimum dew point refers to Min(dewpoint)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(dewpoint) FROM weather"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the maximum and minimum temperature for station number 1 on 15 January 2012?",
        "question_ar": "",
        "evidence_en": "station number 1 refers to station_nbr = 1 ; minimum temperature = tmin; maximum temperature = tmax; on 15 January 2012 refers to date = '2012-01-15'",
        "evidence_ar": "",
        "SQL": "SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND `date` = '2012-01-15'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many stations were able to sell item 5 on January 2014?",
        "question_ar": "",
        "evidence_en": "item 5 refers to item_nbr = 5; on January 2014 refers to Substring (date, 1, 7) = '2014-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR(`date`, 1, 7) = '2014-01' AND item_nbr = 5"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the lowest minimum temperature recorded in store 16 on January 2012?",
        "question_ar": "",
        "evidence_en": "lowest minimum temperature refers to Min(tmin); store 16 refers to store_nbr = 16; on January 2012 refers to Substring (date, 1, 7) = '2012-01'",
        "evidence_ar": "",
        "SQL": "SELECT MIN(tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 16 AND T1.`date` LIKE '%2012-01%'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units of item 7 have been sold by store 7 when the snow is less than 5 inches?",
        "question_ar": "",
        "evidence_en": "item 7 refers to item_nbr = 7; store 7 refers to store_nbr = 7; snow is less than 5 inches refers to snowfall < 5",
        "evidence_ar": "",
        "SQL": "SELECT SUM(units) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.store_nbr = 7 AND T3.item_nbr = 7 AND T1.snowfall < 5"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many items were sold by store 9 during a snowy day?",
        "question_ar": "",
        "evidence_en": "store 9 refers to store_nbr = 9; snowy day refers to snowfall < > 0 and snowfall is not null; item refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT item_nbr) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T3.store_nbr = 9 AND T1.snowfall <> 0 AND T1.snowfall IS NOT NULL"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "List out stations number and items sold by store 17.",
        "question_ar": "",
        "evidence_en": "station number refers to station_nbr; store 17 refers to store_nbr = 17",
        "evidence_ar": "",
        "SQL": "SELECT T1.station_nbr, T2.item_nbr FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.store_nbr = 17 GROUP BY T1.station_nbr, T2.item_nbr"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "List out dates when haze is recorded in store 35.",
        "question_ar": "",
        "evidence_en": "store 35 refers to store_nbr = 35; haze is recorded refers to codesum like '%'||'HZ'||'%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`date` FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 35 AND T1.codesum LIKE '%' OR 'HZ' OR '%'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the sea level and average speed for store number 3 and store number 4?",
        "question_ar": "",
        "evidence_en": "store number 3 refers to store_nbr = 3; average speed refers to avgspeed; store number 4 refers to store_nbr = 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "Which items from store 1 have the highest units sold during rainy day?",
        "question_ar": "",
        "evidence_en": "store 1 refers to store_nbr = 1; highest unit sold refers to Max(units); during rainy day refers to codesum like '%'||'RA'||'%'; item refers to item_nbr",
        "evidence_ar": "",
        "SQL": "SELECT T2.item_nbr FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr AND T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 1 AND T1.codesum LIKE '%' OR 'RA' OR '%' GROUP BY T2.item_nbr ORDER BY T2.units DESC LIMIT 1"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the ratio of the highest and lowest temperature in store 11?",
        "question_ar": "",
        "evidence_en": "store 11 refers to store_nbr = 11; highest temperature refers to Max(tmax); lowest temperature refers to Min(tmin); ration = Divide (Max(tmax), Min(tmin))",
        "evidence_ar": "",
        "SQL": "SELECT CAST((MAX(T1.tmax) - MIN(T1.tmin)) AS REAL) / MIN(T1.tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 11"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the difference of number of units sold in station number 1 and number 2 on year 2012?",
        "question_ar": "",
        "evidence_en": "station 1 refers to station_nbr = 1; station 2 refers to station_nbr = 2; on year 2012 refers to substring (date, 1, 4) = '2012'; difference = Subtract (Sum(units where station_nbr = 1), Sum(units where station_nbr = 2))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.station_nbr = 1 THEN units ELSE 0 END) - SUM(CASE WHEN T1.station_nbr = 2 THEN units ELSE 0 END) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.`date` LIKE '%2012%'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the average temperature difference between store number 18 and 19 on 16 September 2022?",
        "question_ar": "",
        "evidence_en": "store number 18 refers to store_nbr = 18; store number 19 refers to store_nbr = 19; on 16 September 2022 refers to date = '2022-09-16'; average temperature difference = Subtract(tavg where store_nbr = 18, tavg where store_nbr = 19)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.store_nbr = 18 THEN T2.tavg ELSE 0 END) - SUM(CASE WHEN T1.store_nbr = 19 THEN T2.tavg ELSE 0 END) FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.`date` = '2012-09-16'"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "How many units are being sold for item 1 when the average temperature is 83?",
        "question_ar": "",
        "evidence_en": "item 1 refers to item_nbr = 1; when the average temperature is 83 refers to tavg = 83",
        "evidence_ar": "",
        "SQL": "SELECT SUM(units) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 1 AND T1.tavg = 83"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What is the difference between the units sold for item 1 when the sunset was the earliest and the latest?",
        "question_ar": "",
        "evidence_en": "item 1 refers to item_nbr = 1; when the sunset earliest refers to Min(sunset); latest sunset refers to Max(sunset); difference unit sold refers to Subtract(Sum(units where Min(sunset)), Sum(units where Max(sunset)))",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset LIMIT 1 ) - ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset DESC LIMIT 1 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the total unit sold for item 10 when the average temperature was below the median temperature?",
        "question_ar": "",
        "evidence_en": "item 10 refers to item_nbr = 10; average temperature below median temperature refers to tavg < avg(tavg); total units refers to Sum(units)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T5.units) FROM weather AS T4 INNER JOIN sales_in_weather AS T5 ON T4.`date` = T5.`date` INNER JOIN relation AS T6 ON T5.store_nbr = T6.store_nbr WHERE T5.item_nbr = 10 AND T4.tavg < ( SELECT AVG(T1.tavg) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 10 )"
    },
    {
        "db_id": "sales_in_weather",
        "question_en": "What was the average temperature differences during May 2012 for store number 6 and 7?",
        "question_ar": "",
        "evidence_en": "during May 2012 refers to SUBSTR(date, 1, 7) = '2012-05'; store number 6 refers to store_nbr = 6; store number 7 refers to store_nbr = 7; average temperature difference = Subtract (Divide (Sum(tavg), Count (date) where the store_nbr = 6), Divide (Sum(tavg), Count(date) where store_nbr = 7))",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr AND T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 6 ) - ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 7 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which country does Polish found least in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Polish' GROUP BY T2.Name, T1.Percentage ORDER BY T1.Percentage ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which countries have more than 90% of African? List the name of the country in full.",
        "question_ar": "",
        "evidence_en": "Percentage = 90 means 90% of the population",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'African' AND T1.Percentage > 90"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State the different ethnic group and percentage of the language in Singapore.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore' GROUP BY T1.Name, T1.Percentage"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Calculate the percentage of country which gained independence as republic after 1970.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Government = 'republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics WHERE STRFTIME('%Y', Independence) > '1970'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Find the GPD for Bosnia and Herzegovina and the type of government it belongs to.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.GDP, T2.Government FROM economy AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Bosnia and Herzegovina'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State the country and its population with population growth greater than 2% but infant mortality rate less than 5%.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth > 2 AND T2.Infant_Mortality < 5"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which is the majority of the ethnic group in country with great than 10,000,000 population",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Population > 10000000 GROUP BY T2.Name, T2.Percentage ORDER BY T2.Percentage DESC LIMIT 2"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the full name of the country with 100% Africans?",
        "question_ar": "",
        "evidence_en": "Percentage = 100 means 100% of the population",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List the infant mortality of country with the least Amerindian.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area > 600000 AND T2.Agriculture IS NOT NULL"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide the country with republic government which has the highest population growth?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM population AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country WHERE T2.Government = 'republic' ORDER BY T1.Population_Growth DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "When did 'Bulgaria' gain independence?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Calculate the population of Arab in each country?",
        "question_ar": "",
        "evidence_en": "Arab is the name of enthic groups in the country; Population of (Arab in each country) = (percentage of Arab) * (population of each country)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arab'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population of African in 'Turks and Caicos Islands'?",
        "question_ar": "",
        "evidence_en": "African is the name of enthic groups in the country; Population of (African in Turks and Calcos Island) = (percentage of African) * (population of Turks and Calcos Island)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the number of growth population for country with the lowest infant mortality?",
        "question_ar": "",
        "evidence_en": "Growth population = population_growth * population",
        "evidence_ar": "",
        "SQL": "SELECT T2.Population_Growth * T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Infant_Mortality IS NOT NULL ORDER BY T2.Infant_Mortality ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among countries with more than 400,000 GDP, state its capital and population.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital, T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Calculate the service of GDP for Brazil.",
        "question_ar": "",
        "evidence_en": "The service of GDP can be computed by service * GDP",
        "evidence_ar": "",
        "SQL": "SELECT T2.Service * T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Brazil'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the highest infant mortality? Also state its population growth.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all countries with negative growth in population. State the country, population and growth.",
        "question_ar": "",
        "evidence_en": "Negative growth in population means population_growth < 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For countries with area between 500000 to 1000000, state the country and infant mortality rate.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with more than 3% population growth rate, state the country name in full along with its GDP.",
        "question_ar": "",
        "evidence_en": "Population_growth = 3 means 3% population growth rate",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Population_Growth > 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the infant mortality rate for Ethiopia?",
        "question_ar": "",
        "evidence_en": "Ethiopia is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Ethiopia'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How much does the gross domestic products goes to the industry sector for Singapore?",
        "question_ar": "",
        "evidence_en": "Singapore is one of country names; GDP refers to gross domestic products; GDP to the industry sector = GDP * Industry",
        "evidence_ar": "",
        "SQL": "SELECT T2.GDP * T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Singapore'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How much is her GDP in agriculture for the country with the least area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.GDP * T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Area ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the biggest percentage of the albanian ethnic group?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with the African ethnic group, how many of them has a population of over 10000000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Area > 10000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the name of the countries with over 5 ethnic groups.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(T1.Name) > 5"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the highest GDP?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with a population of over 10000000, how many of them have a GDP of over 500000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 500000 AND T1.Population > 10000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the capital cities of the countries with an inflation rate under 2.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the lowest inflation rate?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation IS NOT NULL ORDER BY T2.Inflation ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries whose agriculture percentage of the GDP is under 50%, how many of them have an area of over 8000000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Agriculture < 50 AND T1.Area > 8000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many cities have a salt lake located in it?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.City) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T2.Type = 'salt'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the depth of the lakes that are located in the Province of Albania.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Depth FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Albania'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "The lake with the highest altitude is located in which city?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many lakes in the Canary Islands cover an area of over 1000000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Canary Islands' AND T2.Area > 1000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the most languages spoken?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the capital city of the country that has the percentage of Armenian speakers over 90%?",
        "question_ar": "",
        "evidence_en": "Percentage of country > 90% refers to percentage > 90; America is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Armenian' AND T2.Percentage > 90"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with a population of under 1000000, how many of them have over 2 languages?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000 GROUP BY T2.Country HAVING COUNT(T1.Name) > 2"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many organizations are founded in countries with a population of under 1000000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many organizations are established after 1999/1/1 in a country whose GDP is under 500000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country, COUNT(T1.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.GDP < 500000 AND STRFTIME('%Y', T2.Established) < '1999' GROUP BY T1.Country"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with over 3 organizations, how many of them have an inflation rate of over 5%?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM organization GROUP BY Country HAVING COUNT(Country) > 3 ) AND T1.Inflation > 5"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many organizations are established in the country with the most ethnic groups?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Province) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN ethnicGroup AS T3 ON T3.Country = T2.Country GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the organization names established in the countries where Dutch is spoken.",
        "question_ar": "",
        "evidence_en": "Dutch is one of language",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Dutch'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many organizations are established in countries where people speak Bosnian?",
        "question_ar": "",
        "evidence_en": "Bosnian is one of language",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the highest infant mortality rate per thousand of the countries whose inflation is under 3?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries whose GDP is over 1000000, how many of them have a population groth rate of over 3%?",
        "question_ar": "",
        "evidence_en": "population growth rate of over 3% means population_growth > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Country) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.GDP > 1000000 AND T2.Population_Growth > 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the highest GDP per capita?",
        "question_ar": "",
        "evidence_en": "GDP per capita = GDP / population",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the highest lake area coverage of a country?",
        "question_ar": "",
        "evidence_en": "Lake area coverage = [sum(area of the lakes in the country) / (area of the country)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT T2.Area * 100  / T3.Area FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country ORDER BY T2.Longitude DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average population growth rate of countries where more than 3 languages are used?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.Population_Growth) / COUNT(T3.Country) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM language GROUP BY Country HAVING COUNT(Country) > 3 ) GROUP BY T3.Country"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the names of the countries with an inflation rate that's 30% above the average.",
        "question_ar": "",
        "evidence_en": "Average inflation rate = [sum(inflation) / count(countries)]; 30% above average implies inflation > 1.3 average inflation rate",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T2.Inflation HAVING T2.Inflation > AVG(T2.Inflation) * 1.3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Where country does Baghdad belongs to?",
        "question_ar": "",
        "evidence_en": "Baghdad is one of provinces",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM country WHERE Province = 'Baghdad'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which religion has the largest population in Martinique?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T1.population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country is 41% Christian? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Christian' AND T2.Percentage = 41"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two countries does the Detroit River flow through? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T2.Name = 'Detroit River'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two countries have the longest border in the world? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country1, T2.Country2 FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the most neighbors? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country is Mountain Cerro Chirripo located in? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Cerro Chirripo'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many mountains are there in Indonesia?",
        "question_ar": "",
        "evidence_en": "Indonesia refers to one of countries",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Indonesia'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the quantity of the mountains does Japan have?",
        "question_ar": "",
        "evidence_en": "Japan is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the latitude of the island on which Mount Andrinjitra is located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Latitude FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island WHERE T2.Mountain = 'Andringitra'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two countries share the second highest mountain? Give the country code.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the area of Egypt as a percentage of Asia?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the area of Egypt as a percentage of Asia?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Area * 100 / T3.Area FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which city in Japan has the most people in the country?",
        "question_ar": "",
        "evidence_en": "most people refers to largest population",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For the country in which Olsztyn is located, where is the capital?",
        "question_ar": "",
        "evidence_en": "Olsztyn is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Olsztyn'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which province is the highest volcano mountain located in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Province FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcano' ORDER BY T3.Height DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "When did Uganda declare independence?",
        "question_ar": "",
        "evidence_en": "Uganda is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Uganda'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What kind of government does Iran have?",
        "question_ar": "",
        "evidence_en": "Uganda is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T2.Government FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Iran'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Where does Bermuda belong to? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "Bermuda is one of countries",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM locatedOn AS T1 INNER JOIN island AS T2 ON T1.Island = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T3.Name = 'Bermuda'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Where is the capital of country which has the largest percentage of Malay people?",
        "question_ar": "",
        "evidence_en": "Malay is one of country names",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For the third largest country, which ethinic group has the most population?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the city of 114339 in population? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Population = 114339"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many rivers finally flows to the sea of 459m in depth?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM river WHERE Sea IN ( SELECT Name FROM sea WHERE Depth = 459 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the area of the country which became independent in 1921/3/13?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population density of the Petropavl's home country?",
        "question_ar": "",
        "evidence_en": "Population density = Population / area",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.Population AS REAL) / T1.Area FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many more people speak English than speak Scottish in United Kingdom?",
        "question_ar": "",
        "evidence_en": "English and Scottish are two languages; United Kingdom is a country",
        "evidence_ar": "",
        "SQL": "SELECT T3.Population * (T2.Percentage - T1.Percentage) FROM ethnicGroup AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Name = 'Scottish' AND T2.Name = 'English' AND T3.Name = 'United Kingdom'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the most populated city of the 12th highest density country?",
        "question_ar": "",
        "evidence_en": "Population density = Population / area",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY CAST(Population AS REAL) / Area LIMIT 11, 1 ) ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many times longer is the longest border in the United States than the shortest?",
        "question_ar": "",
        "evidence_en": "How many times longer = longest border / shortest border",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the capital cities of the countries that have more than 4 mountains.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T1.Capital HAVING COUNT(T1.Name) > 4"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many mountains are there in the country with the greatest population?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries whose agriculture takes up more than 40% of its GDP, how many of them have less than 2 mountains?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Country) FROM ( SELECT T1.Country FROM economy AS T1 INNER JOIN geo_mountain AS T2 ON T1.Country = T2.Country WHERE T1.Industry < 40 GROUP BY T1.Country HAVING COUNT(T1.Country) < 2 ) AS T3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the mountains in the country with the lowest inflation rate.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Mountain FROM geo_mountain WHERE Country = ( SELECT Country FROM economy ORDER BY Inflation ASC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the independent countries whose type of government is republic, what is the biggest number of deserts they have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the deserts in the countries whose population is over 100000 and covers an area of under 500000.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Desert FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country WHERE T1.Area > 100000 AND T1.Population < 500000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many deserts are there in a country where over 90% of people speaks Armenian?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Desert) FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T1.Code = T2.Country WHERE T3.Name = 'Armenian' AND T3.Percentage > 90"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which mountain is the highest in an independent country?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_mountain AS T3 ON T3.Country = T2.Country INNER JOIN mountain AS T4 ON T4.Name = T3.Mountain WHERE T2.Independence IS NOT NULL ORDER BY T4.Height DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many volcanic mountains are there in countries whose population is no more than 5000000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcanic' AND T1.Population <= 5000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries with a GDP of over 1000000, how many of them have mountains higher than 1000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the greatest length of the border between 2 independent countries?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T3.Length) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Independence IS NOT NULL"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries whose government type is republic, how many of them shares a border that's longer than 200?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Government = 'republic' AND T3.Length > 200"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the countries that share the shortest border.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the GDP of the European Continent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many mountains are there on the African Continent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN province AS T4 ON T4.Country = T1.Code INNER JOIN geo_mountain AS T5 ON T5.Province = T4.Name WHERE T3.Name = 'European'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Of the deserts on the America Continent, which one covers the greatest area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T5.Name FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN geo_desert AS T4 ON T4.Country = T1.Code INNER JOIN desert AS T5 ON T5.Name = T4.Desert WHERE T3.Name = 'America' ORDER BY T5.Area DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the countries on the European Continent that have a population growth of more than 3%.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many countries on the European Continent has an infant mortality rate per thousand of over 100?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Infant_Mortality < 100"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the countries that use Bosnian as their language, how many of them don't have a positive population growth rate?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Name = 'Bosnian' AND T3.Population_Growth < 0"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average percentage of agriculture of GDP in countries on the African Continent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T4.Agriculture) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Africa'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the independent countries, how many of them has a GDP per capita of over 5000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Independence IS NOT NULL AND T3.GDP > 5000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average inflation rate of the biggest continent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T4.Inflation) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = ( SELECT Name FROM continent ORDER BY Area DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which island is city Balikpapan located on? How big is the island?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Balikpapan'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the cities in Sumatra and state the population of each city.",
        "question_ar": "",
        "evidence_en": "Sumatra is an island",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Name = 'Sumatra'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "On which island does South Yorkshire situated? State it's longtitude and latitude.",
        "question_ar": "",
        "evidence_en": "'South Yorkshire' is a province",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Longitude, T3.Latitude FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'South Yorkshire'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all islands that are greater than the island on which Warwickshire is located.",
        "question_ar": "",
        "evidence_en": "Warwickshire is a province",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Name FROM island WHERE Area > ( SELECT DISTINCT T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'Warwickshire' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For island area less than 200, list the island name and city it belongs to.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Name, T1.Name FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Area < 200"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which province is city Glenrothes located? What is the capital of the province?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Province, T1.Capital FROM province AS T1 INNER JOIN city AS T2 ON T1.Name = T2.Province AND T1.Country = T2.Country WHERE T2.Name = 'Glenrothes'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List the all the cities and its city population for provinces with population more than 1000000.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the coral islands along with its city and province.",
        "question_ar": "",
        "evidence_en": "Baltic Sea is a sea located in Northern Europe",
        "evidence_ar": "",
        "SQL": "SELECT City, Province FROM locatedOn WHERE Island IN ( SELECT Name FROM island WHERE Type = 'coral' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average population for all cities location at Baltic Sea?",
        "question_ar": "",
        "evidence_en": "Baltic Sea is a sea located in Northern Europe",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T3.Name = 'Baltic Sea'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Calculate the percentage of population in Edmonton city to the population of its province.",
        "question_ar": "",
        "evidence_en": "Percentage of population in each city = population(city) / population(province) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.Population AS REAL) * 100 / T2.Population FROM city AS T1 INNER JOIN province AS T2 ON T1.Province = T2.Name WHERE T1.Name = 'Edmonton'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which are the rivers that flows to Black Sea?",
        "question_ar": "",
        "evidence_en": "Black Sea is a sea located in Eastern Europe and Western Asia",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM river WHERE Sea = 'Black Sea'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State the name of the lake in Albania province and in which city does it located at.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name the tallest mountain on Himalaya and what is its height.",
        "question_ar": "",
        "evidence_en": "Tallest refers to max(height)",
        "evidence_ar": "",
        "SQL": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the mountains that are volcanic along with its longitude and latitude.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, Latitude, Longitude FROM mountain WHERE Type = 'volcano'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name all the volcano mountains between the height of 2000 to 4000.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please state the longest river that flows to the Mediterranean Sea.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM river WHERE Sea = 'Mediterranean Sea' ORDER BY Length DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many percent of the mountains on Andes which are non-volcanic?",
        "question_ar": "",
        "evidence_en": "Percent of non-volcanic mountains = count(mountains = 'Andes' & type ! = 'volcano') / count(mountains = 'Andes') * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN type != 'volcano' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM mountain WHERE Mountains = 'Andes'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the cities and provinces located at the rivers that flows to Atlantic Ocean.",
        "question_ar": "",
        "evidence_en": "Atlantic Ocean is the second-largest ocean on Earth, after the Pacific Ocean; Ocean and sea share the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the name and length of rivers located at 'Orleans' city?",
        "question_ar": "",
        "evidence_en": "Orleans is a city in north-central France",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Orleans'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the height of the mountain on which river 'Lech' is located? Please also provide its longitude and latitude.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Height, T1.Latitude, T1.Longitude FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN located AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Lech'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name the river of which Lorraine is on. Please name the mountains where to source flow from?",
        "question_ar": "",
        "evidence_en": "Lorraine is a province",
        "evidence_ar": "",
        "SQL": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which mountain does the river source Blue Nile located? State the height of the mountain.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN geo_source AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Blue Nile'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name the river at Little Rock city. State the length of the river.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Little Rock'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all rivers and province it is located that is greater than 1000 in length.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Province, T2.Name FROM geo_river AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T2.Length > 1000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which province and country does Moldoveanu located? State its height.",
        "question_ar": "",
        "evidence_en": "Moldoveanu is a mountain",
        "evidence_ar": "",
        "SQL": "SELECT T2.Province, T2.Country, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Moldoveanu'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide all rivers name and length in USA.",
        "question_ar": "",
        "evidence_en": "USA is a country",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T2.Country = 'USA'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average height of all mountains in Nepal?",
        "question_ar": "",
        "evidence_en": "Nepal is a province",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Height) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Nepal'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For all cities where Seine is located at, which city has the greatest population? Calculate the difference from the city with least population.",
        "question_ar": "",
        "evidence_en": "Seince is a river; Population disparity refers to difference between cities with greatest and least population; Difference between cities with greatest and least population means max(population) - min(population)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.Population) - MIN(T1.population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Seine'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which are the 2 rivers located at Belgrade city? Which river is longer and how by much?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Length FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN city AS T3 ON T3.Name = T2.City WHERE T3.Name = 'Belgrade'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nations have a 100% Spanish-speaking population?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which countries are dependent on the British Crown?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Country FROM politics WHERE Government = 'British crown dependency'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What are the names of the rivers in Canada?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.River FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Canada' AND T1.River IS NOT NULL"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the name of the country whose citizens have the lowest purchasing power?",
        "question_ar": "",
        "evidence_en": "Inflation can reduce purchasing power over time for recipients and payers.",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM economy AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Inflation DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What province does the 4th most populous city in the United Kingdom belong to, and how many people live there?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Province, T1.Population FROM city AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United Kingdom' ORDER BY T1.Population DESC LIMIT 3, 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many Jewish residents are there in Moldova?",
        "question_ar": "",
        "evidence_en": "Moldova is one country located in Eastern Europe; The number of residents can be computed by percentage * population",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Moldova' AND T2.Name = 'Jewish'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average area of Asian countries?",
        "question_ar": "",
        "evidence_en": "Asia is a continent",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country is home to the world's tiniest desert, and what are its longitude and latitude?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country, T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert WHERE T1.Name = ( SELECT Name FROM desert ORDER BY Area ASC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many people in Montenegro speaks Serbian?",
        "question_ar": "",
        "evidence_en": "Serbian is one language; Montenegro is a country located in Southeastern Europe",
        "evidence_ar": "",
        "SQL": "SELECT T1.Percentage * T2.Population FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Serbian' AND T2.Name = 'Montenegro'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many mountains are there in the country with the most land area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Mountain) FROM geo_mountain WHERE Country = ( SELECT Code FROM country ORDER BY Area DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which sea is the shallowest and which country surrounds it?",
        "question_ar": "",
        "evidence_en": "Shallow sea refers to the sea with less depth",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE Sea = ( SELECT Name FROM sea ORDER BY Depth ASC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation's GDP is the lowest among those that are communist states?",
        "question_ar": "",
        "evidence_en": "Communist is a government form",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Government = 'Communist state' ORDER BY T2.GDP ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What kind of political system is in place in the country with the highest inflation rate?",
        "question_ar": "",
        "evidence_en": "Political system refers to government form",
        "evidence_ar": "",
        "SQL": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation has the greatest infant mortality rate among those that attained independence in 1960?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country FROM politics AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE STRFTIME('%Y', T1.Independence) = '1960' ORDER BY T2.Infant_Mortality DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the smallest border's length, and what form of government do the two nations bordering it have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Government, T3.Government FROM politics AS T1 INNER JOIN borders AS T2 ON T1.Country = T2.Country1 INNER JOIN politics AS T3 ON T3.Country = T2.Country2 ORDER BY T2.Length ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which Arabic-speaking country has the smallest population?",
        "question_ar": "",
        "evidence_en": "Arabic-speaking country = country that speaks 100% Arabic",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arabic' AND T2.Percentage = 100 ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What provinces encompass the world's biggest desert in terms of overall area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Province FROM geo_desert WHERE Desert = ( SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many lakes are there in the 4th most populous African country with a republican form of government?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which religion is most prevalent in Asia?",
        "question_ar": "",
        "evidence_en": "Most prevalent religion refers to the religion with the most population percentage",
        "evidence_ar": "",
        "SQL": "SELECT T4.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN religion AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' GROUP BY T4.Name ORDER BY SUM(T4.Percentage) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the difference in population between the two nations where the tallest peak is located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT * FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Country = T2.Country INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T1.Name = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What are the names of the sea that can be found on the island with the biggest area?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM islandIn AS T1 INNER JOIN sea AS T2 ON T2.Name = T1.Sea WHERE T1.Island = ( SELECT Name FROM island ORDER BY Area DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What are the names of the three nations where the longest river that empties into the Atlantic Ocean stretches to?",
        "question_ar": "",
        "evidence_en": "Empties into the Atlantic Ocean = flows to the Atlantic Ocean",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Country FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = ( SELECT Name FROM river WHERE Sea = 'Atlantic Ocean' ORDER BY Length DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many people reside in the nation's capital city, which is situated in the nation that attained independence on 8/15/1947?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the total number of Afro-Asian people in the most populous Asian country governed by a monarchy?",
        "question_ar": "",
        "evidence_en": "Total Number of People = Percentage * Population",
        "evidence_ar": "",
        "SQL": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What are the names of the cities along the Euphrat River's course? Indicate the capital city of the nation where the Euphrat River flows.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.City, T1.Capital FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Euphrat'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the proportion of English-speaking citizens in the countries that rely on the United States compared to the total number of citizens in those countries?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T3.Dependent = 'USA' AND T2.Name = 'English'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which federal republic country in Europe has the most provinces, and what proportion of GDP is devoted to services?\nCalculate the population density as well.",
        "question_ar": "",
        "evidence_en": "Republic is on of government forms; Percentage of Services of the GDP was mentioned in economy.Service; Population Density = Population / Area",
        "evidence_ar": "",
        "SQL": "SELECT T1.Country, T2.Service , SUM(T1.Population) / SUM(T1.Area) FROM province AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Country IN ( SELECT Country FROM encompasses WHERE Continent = 'Europe' ) GROUP BY T1.Country, T2.Service ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the capital of the 3rd most populated country in Asia and what is the capital city's ratio in percentage (%) against the overall population of the country?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Capital, CAST(T3.Population AS REAL) * 100 / T4.Population FROM city AS T3 INNER JOIN ( SELECT T1.Capital , T1.Population FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia' ORDER BY T1.Population DESC LIMIT 2, 1 ) AS T4 ON T3.Name = T4.Capital"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What's the name of the second biggest desert?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM desert ORDER BY Area DESC LIMIT 1, 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the main spoken language in MNE?",
        "question_ar": "",
        "evidence_en": "MNE is one country",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM language WHERE Country = 'MNE' ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What's the percentage of people in Cayman Islands speak English?",
        "question_ar": "",
        "evidence_en": "Cayman Islands is a country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Percentage FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Cayman Islands' AND T1.Name = 'English'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country was the source of Pjandsh River? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Pjandsh'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For the countries have the population north of a billion, which one has the lowest GDP? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "billion = 1000000000",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the capital of the country that has the Licancabur Mountain?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Capital FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T1.Name = 'Licancabur'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How much sea is around the island where Kerinci Mountain is located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which three countries does the Amazonas flow through? Give the full name of the countries.",
        "question_ar": "",
        "evidence_en": "Amazonas flow is a river",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.Name FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River INNER JOIN country AS T4 ON T4.Code = T2.Country WHERE T3.Name = 'Amazonas'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country became independent on 1492-01-01? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1492-01-01'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many cities in France have a population of more than 100,000?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN city AS T2 ON T2.Country = T1.Code WHERE T1.Name = 'France' AND T2.Population > 100000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among all the rivers finally flows to the sea of 540m in depth, which one has the longest length?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM sea AS T1 INNER JOIN river AS T2 ON T2.Sea = T1.Name WHERE T1.Depth = 540 ORDER BY T2.Length DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which Country is the second highest volcanic mountain located in? Give the code of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Country FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province ORDER BY T1.Height DESC LIMIT 1, 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the longitude of the island on which Mount Olympos is located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Longitude FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Olympos'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For all the countries that is smaller than 100 square kilometres, which one has the most GDP?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area < 100 ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the total number of cities that Japan have?",
        "question_ar": "",
        "evidence_en": "Japan is a country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which city has most population other than its capital in Bangladesh?",
        "question_ar": "",
        "evidence_en": "Bangladesh is a country",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Bangladesh' AND T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which non capital city has the most people of all?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which country is the city of Grozny? Give the full name of the country.",
        "question_ar": "",
        "evidence_en": "Grozny is a province",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which religion has the majority of the people in Japan?",
        "question_ar": "",
        "evidence_en": "Japan is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two countries have the border in length of 803 km? Give the full names of the countries.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T2.Length = 803"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many percent of the total area of Russia is in Europe?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Percentage FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Russia' AND T1.Name = 'Europe'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Give the full names of the countries that are located in more than one continent.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country GROUP BY T3.Name HAVING COUNT(T3.Name) > 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many people are there in Fareham's mother country?",
        "question_ar": "",
        "evidence_en": "Mother country refers to home country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Fareham'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What's the number of infant mortality in Switzerland in a year?",
        "question_ar": "",
        "evidence_en": "Number can be calculated = Infant_Mortality * Population * Population_Growth",
        "evidence_ar": "",
        "SQL": "SELECT T2.Infant_Mortality * T1.Population * T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many mountains are there in the United States?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Name) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T4.Name = 'United States'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "When did Equatorial Guinea become independent?",
        "question_ar": "",
        "evidence_en": "Equatorial Guinea is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Equatorial Guinea'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the GDP per capita in Switzerland?",
        "question_ar": "",
        "evidence_en": "GDP per capita = GDP / Population",
        "evidence_ar": "",
        "SQL": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the GDP for Service of the country with Fuenlabrada as its city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Service * T4.GDP FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name INNER JOIN economy AS T4 ON T4.Country = T2.Country WHERE T3.Name = 'Fuenlabrada'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many times longer is the longest river in Tajikistan than the shortest river?",
        "question_ar": "",
        "evidence_en": "TJ is an abbreviated country code of Tajikistan",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T1.Country = 'TJ'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population density of Hanoi's home country?",
        "question_ar": "",
        "evidence_en": "population density = Population / Area",
        "evidence_ar": "",
        "SQL": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In countries where there is more than one ethnic group, name the ethnic group with the greatest presence in each country and the country to which it corresponds.",
        "question_ar": "",
        "evidence_en": "greatest presence can be represented by largest percentage.",
        "evidence_ar": "",
        "SQL": "SELECT Country, Name FROM ethnicGroup AS T1 WHERE Percentage < 100 AND Percentage = ( SELECT MAX(Percentage) FROM ethnicGroup AS T2 WHERE T1.Country = T2.Country )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many deserts are not located in a single country? Name them.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many rivers belong to more than one country? Name the provinces where we can find them.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What percentage of the border does Angola share with each of the countries with which it borders?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Name = 'Angola' THEN T1.Length ELSE 0 END) * 100 / SUM(T1.Length) FROM borders AS T1 LEFT JOIN country AS T2 ON T1.Country1 = T2.Code"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What percent of the non volcanic islands in the Lesser Antilles group of islands have an area of no more than 300 square kilometers?",
        "question_ar": "",
        "evidence_en": "Percent = [count(non volcanic islands Lesser Antilles area 300 or less) / count(non volcanic islands Lesser Antilles)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Area <= 300 THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM island WHERE Islands = 'Lesser Antilles' AND (Type != 'volcanic' OR Type IS NULL)"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Of all the countries in which English is spoken, what percentage has English as their only language?",
        "question_ar": "",
        "evidence_en": "Percentage = [count(countries 100% English) / count(countries English)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Percentage = 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name of the capitals of the countries that have less than 99.95% less population than the country that has the most population.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Capital FROM country WHERE Population <= ( SELECT MAX(Population) - MAX(Population) * 0.9995 FROM country )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Average length of the rivers flowing into the Donau River.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT * FROM river WHERE Name = 'Donau'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Based on the data shown at Target, what percentage of countries are non-Christian?",
        "question_ar": "",
        "evidence_en": "percentage of countries are non-Christian = [count(non-Christian) / count(non-Christian + Christian)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT 100 - (CAST(SUM(CASE WHEN Target = 'Christian' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(Country) FROM target"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country with a city with a population between 50,000 and 300,000 inhabitants and which is a member of an organization established between 03/01/1991 and 04/30/1991 is also a member of the EBRD?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which river with its mouth in the Donau River and a length greater than 500 km is located in Slovenia?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which city is the sea whose depth is 4232 meters less than that of the Bay of Bengal?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM sea AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Sea INNER JOIN city AS T3 ON T3.Name = T2.City WHERE ( SELECT Depth FROM sea WHERE Name LIKE '%Bengal%' ) - T1.Depth = 4235"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which city is the lake located at coordinates longitude -85.35 and latitude 11.6?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN city AS T4 ON T4.Province = T3.Name WHERE T1.Longitude = -85.35 AND T1.Latitude = 11.6"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "On which continent is the country with the most erosion of real income?",
        "question_ar": "",
        "evidence_en": "highest inflation rate results in the most erosion of real income",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code ORDER BY T4.Inflation DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two Asian countries share a border that is 1,782 kilometers long?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.Country1, T4.Country2 FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN borders AS T4 ON T4.Country1 = T3.Code WHERE T1.Name = 'Asia' AND T4.Length = 1782"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Of all the lakes in Bolivia, which is the deepest?",
        "question_ar": "",
        "evidence_en": "Bolivia is the country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM lake AS T1 INNER JOIN geo_lake AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which lake flows the river that is, in turn, the mouth of the Manicouagan River?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT NAME FROM lake WHERE river = ( SELECT river FROM river WHERE NAME = 'Manicouagan' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which group of islands is Rinjani Mountain located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Islands FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Name = 'Rinjani'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the seas with which the deepest sea merges.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Of all the countries that share territory with more than one continent, in which of them does the average population not exceed 10 inhabitants per square kilometer?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT NAME FROM country WHERE CODE IN ( SELECT country FROM encompasses GROUP BY country HAVING COUNT(continent) > 1 ) AND population / Area <= 10"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Of all the countries of the Hindu religion, which has the lowest ratio of people per square meter of surface?",
        "question_ar": "",
        "evidence_en": "ratio of people per square meter of surface = Population / Area",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Hindu' ORDER BY T1.Population / T1.Area ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "On what date did the country have a gross domestic product 400% higher than Saint Kitts and Nevis become independent?",
        "question_ar": "",
        "evidence_en": "GDP refers to gross domestic product",
        "evidence_ar": "",
        "SQL": "SELECT Independence FROM politics WHERE country = ( SELECT country FROM economy WHERE GDP = 1100 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the average population ratio of the countries in which organizations were established in 1947?",
        "question_ar": "",
        "evidence_en": "Average population ratio = Population / Area",
        "evidence_ar": "",
        "SQL": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE STRFTIME('%Y', T2.Established) = '1947'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the name of Anguilla's capital, and where is it located?",
        "question_ar": "",
        "evidence_en": "Anguilla is a country",
        "evidence_ar": "",
        "SQL": "SELECT Capital, Province FROM country WHERE Name = 'Anguilla'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation has the smallest population, and where is its capital located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, Capital FROM country ORDER BY Population ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How much more space does Asia have than Europe?",
        "question_ar": "",
        "evidence_en": "Asia and Europe are two continents.",
        "evidence_ar": "",
        "SQL": "SELECT MAX(Area) - MIN(Area) FROM continent WHERE Name = 'Asia' OR Name = 'Europe'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the geographic location of Aarhus city? Please provide the answer with the coordinates of the location.",
        "question_ar": "",
        "evidence_en": "Longitude, Latitude = coordinates of the location",
        "evidence_ar": "",
        "SQL": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population gap between the United Kingdom and Italy?",
        "question_ar": "",
        "evidence_en": "Population gap = Total population of the United Kingdom - Total population of Italy",
        "evidence_ar": "",
        "SQL": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which city is the European Bank for Reconstruction and Development's headquarters? Please include the city and province where the headquarters are located in your answer.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which lake is the largest in terms of both surface area and depth?",
        "question_ar": "",
        "evidence_en": "Area * Depth can represents the metric in terms of both surface area and depth",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM lake ORDER BY Area * Depth DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which two nations are separated from one another by the longest border? Please include the entire names of the nations in your answer.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Country1, Country2 FROM borders ORDER BY Length DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation has the highest GDP? Please give the nation's full name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation has the lowest proportion of people who speak an African language? Please state the nation's full name.",
        "question_ar": "",
        "evidence_en": "Nation and country share the same meaning. Proportion refers to percentage",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' ORDER BY T2.Percentage ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has three different religions-Anglicanism, Christianity, and Roman Catholicism and uses 100% English?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T3.Country = T2.Country WHERE (T2.Name = 'Anglican' OR T2.Name = 'Christian' OR T2.Name = 'Roman Catholic') AND T3.Name = 'English' AND T3.Percentage = 100 GROUP BY T1.Name HAVING COUNT(T1.Name) = 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please list the top 3 countries with the highest inflation rate.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation DESC LIMIT 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please provide a list of every nation where English is spoken and utilized entirely.",
        "question_ar": "",
        "evidence_en": "Utilizition entirely means Percentage = 100% uses",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English' AND T2.Percentage = 100"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many businesses were founded after 1960 in a nation that wasn't independent?",
        "question_ar": "",
        "evidence_en": "Established means founded; Country means nation; Organization means businesses",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T2.Independence = NULL AND STRFTIME('%Y', T3.Established) > '1960'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What province did the river Klaeaelv travel through and how long is the river?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Klaraelv'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How many Italian regions are bordered by the Mediterranean Sea? How deep is the Mediterranean Sea?",
        "question_ar": "",
        "evidence_en": "Reigion refers to province",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.province), T3.Depth FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T1.Code = 'I' AND T3.Name = 'Mediterranean Sea' GROUP BY T3.Depth"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What nations are considered British Overseas Territories?",
        "question_ar": "",
        "evidence_en": "British Overseas Territories is one government form; Nation and country share the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT name FROM country WHERE CODE IN ( SELECT country FROM politics WHERE government = 'British Overseas Territories' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which of the top 3 economies by GDP has the lowest proportion of the economy devoted to agriculture?",
        "question_ar": "",
        "evidence_en": "Economies refers to countries",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "How big is Africa, and how many nations make up the continent?",
        "question_ar": "",
        "evidence_en": "Area can measure the size of countries; Country and nation share the same meaning",
        "evidence_ar": "",
        "SQL": "SELECT T1.Area, COUNT(T3.Name) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Asia' GROUP BY T1.Name, T1.Area"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which United States province is home to the greatest number of corporations' corporate headquarters?",
        "question_ar": "",
        "evidence_en": "Organization refers to corporation",
        "evidence_ar": "",
        "SQL": "SELECT T1.Province FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'United States' GROUP BY T1.Province ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What are the most recent three independent nations?",
        "question_ar": "",
        "evidence_en": "Larger date of indepedence refers to more recent indepdence; Nation refers to country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country ORDER BY T2.Independence DESC LIMIT 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please name any three sovereign nations that have been governed by the republic since 1991.",
        "question_ar": "",
        "evidence_en": "Nation refers to country",
        "evidence_ar": "",
        "SQL": "SELECT country FROM politics WHERE government = 'republic' AND STRFTIME('%Y', independence) >= '1991' AND country IN ( SELECT country FROM country ) ORDER BY independence LIMIT 3"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which company falls under the category of an associated member? Please provide the organization's full name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nations have a boundary with the Kalahari Desert?",
        "question_ar": "",
        "evidence_en": "Nation refers to country",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which desert in Kazakhstan is the largest?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Kazakstan' ORDER BY T1.Area DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What sea does the Baltic Sea converge with, and how deep is the Baltic Sea?",
        "question_ar": "",
        "evidence_en": "Coverage refers to mergesWith",
        "evidence_ar": "",
        "SQL": "SELECT T2.Sea2, T1.Depth FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = 'Baltic Sea'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which constitutional monarchy nations saw the greatest growth in the number of organizations after 1907?",
        "question_ar": "",
        "evidence_en": "Nation refers to country; Information of growth appears in the column Established",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE STRFTIME('%Y', T2.Established) > '1907' AND T3.Government = 'constitutional monarchy' GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What kind of mountain is Ampato? Which province and nation does this mountain belong to?",
        "question_ar": "",
        "evidence_en": "Nation refers to country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Please provide a list of every volcano mountain in the province of Ecuador.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Ecuador' AND T1.Type = 'volcano'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What percentage of nations have achieved independence since 1993 and practice parliamentary democracy? Please include any three parliament-based democracies that attained independence after 1993.",
        "question_ar": "",
        "evidence_en": "Percentage of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What proportion of rivers have a length of more than 3,000 miles? Please provide the name of a Russian river that is more than 3,000 miles long.",
        "question_ar": "",
        "evidence_en": "Proportion of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Length > 3000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN country AS T3 ON T3.Code = T2.Country"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the full name of ABEDA and when was it established?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, Established FROM organization WHERE Abbreviation = 'ABEDA'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name all the organisations that were established from 1970 to 1980.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM organization WHERE STRFTIME('%Y', Established) BETWEEN '1970' AND '1980'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide a list of all organisations with headquarters in London?",
        "question_ar": "",
        "evidence_en": "London is a city",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM organization WHERE City = 'London'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "For each organisations with headquarters in the USA, provide the its full name and the city where the headquarter is located at.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, City FROM organization WHERE Country = 'USA'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name the first organisation established in the Paris city. State its abbreviation, full name and date of establishment.",
        "question_ar": "",
        "evidence_en": "Paris is a city",
        "evidence_ar": "",
        "SQL": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the organisations that where its name contains 'United Nation'. State its full name and its headquarter city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, City FROM organization WHERE Name LIKE '%United Nation%'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which 2 countries' border span across the longest length? Provide the country's full name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 ORDER BY T2.Length DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name all countries in which have border with Bulgaria.",
        "question_ar": "",
        "evidence_en": "Bulgaria is a country name",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = 'Bulgaria'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State all countries with border greater than 4,000. List the full country name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Length > 4000"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the country member of 'IOC' organization, which country has the most population?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM isMember AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Organization = 'IOC' ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all members and member type of the Islamic Development Bank.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State the area and population of the country where Asia Pacific Economic Cooperation headquarter is located.",
        "question_ar": "",
        "evidence_en": "Asia Pacific Economic Cooperation is an organization name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the organization(s) that has 'National Society' as member type.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T2.Type = 'National Society'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the least organization membership?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all countries with 'Category III' membership in 'IFAD' organization. Please also provide the capital of the country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, Capital FROM country WHERE Code IN ( SELECT Country FROM isMember WHERE type = 'Category III' AND Organization = 'IFAD' )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Name the organizations with the most members.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the capital of Australia? Is the capital a headquarter to any organization? Name the organization(s).",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Capital, T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.City = T2.Capital WHERE T2.Name = 'Australia'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Among the organizations where headquarters are in the 'USA', what is the percentage of the them are in 'Washington'?",
        "question_ar": "",
        "evidence_en": "percentage can be computed by [count(City = 'Washington') / count(all cities)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the border length between 'USA' and 'MEX'",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Length FROM borders WHERE Country1 = 'MEX' AND Country2 = 'USA'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the newest established organization where Singapore is a member of?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide the population of the city of the 'World Tourism Organization' headquarter.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Population FROM organization AS T1 INNER JOIN city AS T2 ON T1.City = T2.Name WHERE T1.Name = 'World Tourism Organization'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the height of mountain Dhaulagiri located and in which province is it located?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Height, T2.Province FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Dhaulagiri'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all the name and height of all mountains in Alaska",
        "question_ar": "",
        "evidence_en": "Alaska is a province",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Alaska'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population of the country with the highest infant mortality rate?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "State the inflation rate of Greece.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Inflation FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Greece'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Find the government type for the country with the highest percentage GDP in Agriculture.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country ORDER BY T2.Agriculture DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List the full name its capital of all the countries with parliamentary democracy government.",
        "question_ar": "",
        "evidence_en": "Parliamentary democracy is a government form",
        "evidence_ar": "",
        "SQL": "SELECT T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Provide a full list of countries and its population with more than 70% of Chinese.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "In which city has the greatest population, what is its percentage to its country population?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, CAST(T3.Population AS REAL) * 100 / T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Country = T2.Country ORDER BY T3.Population DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "When did the United States of America attained it's Independence?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Independence FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United States'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the peak height of the highest volcanic type of mountain? Give it's name.",
        "question_ar": "",
        "evidence_en": "peak means the highest",
        "evidence_ar": "",
        "SQL": "SELECT Height, Name FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the name of the most recently founded organization in Saudi Arabia?",
        "question_ar": "",
        "evidence_en": "Saudi Arabia is a country",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the 5th highest infant mortality rate?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM population AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Infant_Mortality DESC LIMIT 4, 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which country has the widest range of religious practices?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What river has the 17th-longest length overall? Specify it's length.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16, 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "When did the country whose capital is Nouakchott attained it's independence?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the name of the country with the smallest population, and what is its gross domestic product?",
        "question_ar": "",
        "evidence_en": "GDP refers to gross domestic product",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which Zaire region is home to the country's deepest lake's Name it and list its depth.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Name, T1.Name, T1.Depth FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Zaire'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the maximal elevation of the summit of the shortest mountain that can be found in the island of Madagaskar? Indicate what type of mountain it is.",
        "question_ar": "",
        "evidence_en": "The elevation of the summit refers to height",
        "evidence_ar": "",
        "SQL": "SELECT T3.Height, T3.Type FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T1.Name = 'Madagaskar' ORDER BY T3.Height DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which nation, with a population ranging from 60,000,000 to 99,000,000, has the greatest gross domestic product?",
        "question_ar": "",
        "evidence_en": "GDP refers to gross domestic product; Nation and country are synonyms",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population BETWEEN 60000000 AND 90000000 ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Which Asian country gave its agricultural sector the largest share of its gross domestic product?",
        "question_ar": "",
        "evidence_en": "Gross domestic product = GDP; Largest share of GDP in agricultural sector was mentioned in economy.Agriculture",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' ORDER BY T4.Agriculture DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What form of governance does the least prosperous nation in the world have?",
        "question_ar": "",
        "evidence_en": "Nation and country are synonyms; Form of governance was mentioned in politics.Government; Least prosperous means lowest GDP",
        "evidence_ar": "",
        "SQL": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T2.GDP IS NOT NULL ORDER BY T2.GDP ASC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What year saw the greatest number of organizations created on the European continent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T4.Established) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN organization AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Europe' GROUP BY STRFTIME('%Y', T4.Established) ORDER BY COUNT(T4.Name) DESC LIMIT 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What other country does the most populated nation in the world share a border with and how long is the border between the two nations?",
        "question_ar": "",
        "evidence_en": "Nation and country are synonyms",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country2, T2.Length FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = ( SELECT Name FROM country ORDER BY Population DESC LIMIT 1 )"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the population density of the nation whose capital city is in the Distrito Federal province, and what portion of its gross domestic product is devoted to its industries?",
        "question_ar": "",
        "evidence_en": "ation and country are synonyms; Gross domestic product = GDP; Portion of GDP devoted to industries appears in economy.Industry; Population Density = Population / Area",
        "evidence_ar": "",
        "SQL": "SELECT T1.Population / T1.Area, T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Province = 'Distrito Federal'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Lists all governments with a parliamentary democracy that achieved their independence between 01/01/1950 and 12/31/1999.",
        "question_ar": "",
        "evidence_en": "Inhabitants, synonymous with population",
        "evidence_ar": "",
        "SQL": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What percentage of countries became independent during the year 1960?",
        "question_ar": "",
        "evidence_en": "Percentage = count(countries independent 1960) / total num of countries",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Independence) = '1960' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "List all deserts that are not between latitudes 30 and 40.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM desert WHERE Latitude < 30 OR Latitude > 40"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "Indicate the coordinates of all the deserts whose area is in more than one country.",
        "question_ar": "",
        "evidence_en": "coordinates consists of Latitude, Longitude",
        "evidence_ar": "",
        "SQL": "SELECT T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert GROUP BY T1.Name, T1.Latitude, T1.Longitude HAVING COUNT(T1.Name) > 1"
    },
    {
        "db_id": "mondial_geo",
        "question_en": "What is the provincial capital of the province with a population of less than 80,000 that has the highest average population per area?",
        "question_ar": "",
        "evidence_en": "Average population per area = population / area",
        "evidence_ar": "",
        "SQL": "SELECT CapProv FROM province WHERE Population < 80000 ORDER BY Population / Area DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "How many customers have never married?",
        "question_ar": "",
        "evidence_en": "MARITAL_STATUS = 'Never-married';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Never-married'"
    },
    {
        "db_id": "software_company",
        "question_en": "Among all the customers, how many of them are teenagers?",
        "question_ar": "",
        "evidence_en": "teenager is a person aged between 13 and 19 years;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE age >= 13 AND age <= 19"
    },
    {
        "db_id": "software_company",
        "question_en": "Please list the occupations of the customers with an education level of 11.",
        "question_ar": "",
        "evidence_en": "education level of 11 refers to EDUCATIONNUM = 11;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11"
    },
    {
        "db_id": "software_company",
        "question_en": "Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the customers over 30, how many of them are Machine-op-inspcts?",
        "question_ar": "",
        "evidence_en": "over 30 refers to age > 30; OCCUPATION = 'Machine-op-inspct';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30"
    },
    {
        "db_id": "software_company",
        "question_en": "How many female customers have an education level of over 11?",
        "question_ar": "",
        "evidence_en": "education level of 11 refers to EDUCATIONNUM = 11; SEX = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE EDUCATIONNUM > 11 AND SEX = 'Female'"
    },
    {
        "db_id": "software_company",
        "question_en": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true'; SEX = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Female' AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.",
        "question_ar": "",
        "evidence_en": "over 40 refers to age > 40; RESPONSE = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age > 40 AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?",
        "question_ar": "",
        "evidence_en": "SEX = 'Male', over 30,000 inhabitants refer to NHABITANTS_K > 30; place refers to GEOID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30"
    },
    {
        "db_id": "software_company",
        "question_en": "How many customers are from the place with the highest average income per month?",
        "question_ar": "",
        "evidence_en": "place with the highest average income per month refers to GEOID where MAX(INCOME_K);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?",
        "question_ar": "",
        "evidence_en": "place with more than 20,000 and less than 30,000 inhabitants refers to GEOID where INHABITANTS_K BETWEEN 20 AND 30; OCCUPATION = 'Machine-op-inspct';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30"
    },
    {
        "db_id": "software_company",
        "question_en": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?",
        "question_ar": "",
        "evidence_en": "place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true'; place with more than 30,000 inhabitants refers to GEOID where INHABITANTS_K > 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true'; SEX = 'Male'; MARITAL_STATUS = 'Divorced';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced' AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?",
        "question_ar": "",
        "evidence_en": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); RESPONSE = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the number of inhabitants of the place the most customers are from?",
        "question_ar": "",
        "evidence_en": "the most customers are from refers to GEOID where MAX(COUNT(ID)); number of inhabitants refers to INHABITANTS_K;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the customers who come from the place with 25746 inhabitants, how many of them are male?",
        "question_ar": "",
        "evidence_en": "place with 44114 inhabitants refers to GEOID where INHABITANTS_K = 44.114; SEX = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 25.746 AND T1.SEX = 'Male'"
    },
    {
        "db_id": "software_company",
        "question_en": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true'; teenagers are people aged between 13 and 19 years;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age >= 13 AND T1.age <= 19 AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the average education level of customers from the place with the highest average income per month?",
        "question_ar": "",
        "evidence_en": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); average education level refers to AVG(EDUCATIONNUM);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.EDUCATIONNUM) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department?",
        "question_ar": "",
        "evidence_en": "RESPONSE = 'true'; AVG(age);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "How many of the customers are male?",
        "question_ar": "",
        "evidence_en": "SEX = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE SEX = 'Male'"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the customer's geographic identifier who are handlers or cleaners.",
        "question_ar": "",
        "evidence_en": "geographic identifier refers to GEOID; OCCUPATION = 'Handlers-cleaners';",
        "evidence_ar": "",
        "SQL": "SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the total number of customers with an age below 30?",
        "question_ar": "",
        "evidence_en": "age below 30 refers to age < 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE age < 30"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the geographic identifier with an income that ranges from 2100 to 2500.",
        "question_ar": "",
        "evidence_en": "geographic identifier with an income that ranges from 2100 to 2500 refers to GEOID where INCOME_K BETWEEN 2100 AND 2500;",
        "evidence_ar": "",
        "SQL": "SELECT GEOID FROM Demog WHERE INCOME_K >= 2100 AND INCOME_K <= 2500"
    },
    {
        "db_id": "software_company",
        "question_en": "In geographic identifier from 20 to 50, how many of them has a number of inhabitants below 20?",
        "question_ar": "",
        "evidence_en": "geographic identifier from 20 to 50 refers to GEOID BETWEEN 20 AND 50; number of inhabitants below 20 refers to INHABITANTS_K < 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(GEOID) FROM Demog WHERE INHABITANTS_K < 20 AND GEOID >= 20 AND GEOID <= 50"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the number of inhabitants and income of geographic identifier 239?",
        "question_ar": "",
        "evidence_en": "geographic identifier 239 refers to GEOID = 239; number of inhabitants refers to INHABITANTS_K; income refers to INCOME_K;",
        "evidence_ar": "",
        "SQL": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239"
    },
    {
        "db_id": "software_company",
        "question_en": "Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below.",
        "question_ar": "",
        "evidence_en": "customers ages from 20 to 35 refer to ID where age BETWEEN 20 AND 35; income K of 2000 and below refers to INCOME_K < 2000; level of education refers to EDUCATIONNUM;",
        "evidence_ar": "",
        "SQL": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K < 2000 AND T1.age >= 20 AND T1.age <= 35"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.",
        "question_ar": "",
        "evidence_en": "number of inhabitants refers to INHABITANTS_K; older than 50 years old refers to age < 50; MARITAL_STATUS = 'Divorced;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Divorced' AND T1.age < 50"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the geographic identifier and income of the oldest customer?",
        "question_ar": "",
        "evidence_en": "the oldest customer refers to MAX(age); geographic identifier refers to GEOID; income refers to INCOME_K;",
        "evidence_ar": "",
        "SQL": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the male customers with an level of education of 4 and below, list their income K.",
        "question_ar": "",
        "evidence_en": "male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;",
        "evidence_ar": "",
        "SQL": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )"
    },
    {
        "db_id": "software_company",
        "question_en": "List the occupation and income of male customers with an level of education of 4 to 6.",
        "question_ar": "",
        "evidence_en": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;",
        "evidence_ar": "",
        "SQL": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'"
    },
    {
        "db_id": "software_company",
        "question_en": "In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above?",
        "question_ar": "",
        "evidence_en": "widowed male customers ages from 40 to 60 refer to SEX = 'Male' where age BETWEEN 40 AND 60 and MARITAL_STATUS = 'Widowed'; income ranges from 3000 and above refers to INCOME_K BETWEEN 2000 AND 3000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the occupation of customers within number of inhabitants ranges of 30 to 40?",
        "question_ar": "",
        "evidence_en": "number of inhabitants ranges of 30 to 40 refers to INHABITANTS_K BETWEEN 30 AND 40;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the widowed female customers, give the income of those who has an level of education of 5 and below.",
        "question_ar": "",
        "evidence_en": "widowed female customers refer to SEX = 'Female' where MARITAL_STATUS = 'Widowed'; level of education of 5 and below refers to EDUCATIONNUM ≤ 5;",
        "evidence_ar": "",
        "SQL": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed' )"
    },
    {
        "db_id": "software_company",
        "question_en": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.",
        "question_ar": "",
        "evidence_en": "age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);",
        "evidence_ar": "",
        "SQL": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing?",
        "question_ar": "",
        "evidence_en": "male customers ages from 20 to 30 years old refer to SEX = 'Male' where age BETWEEN 20 AND 30; farming or fishing refers to OCCUPATION; number of inhabitants refers to INHABITANTS_K;",
        "evidence_ar": "",
        "SQL": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the customers with a marital status of married-civ-spouse, list the number of inhabitants and age of those who are machine-op-inspct.",
        "question_ar": "",
        "evidence_en": "OCCUPATION = 'Machine-op-inspct'; number of inhabitants refers to INHABITANTS_K;",
        "evidence_ar": "",
        "SQL": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30"
    },
    {
        "db_id": "software_company",
        "question_en": "In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24?",
        "question_ar": "",
        "evidence_en": "female customers ages from 50 to 60 refer to SEX = 'Female' where age BETWEEN 50 AND 60; number of inhabitants ranges from 19 to 24 refers to INHABITANTS_K BETWEEN 19 AND 24;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 50 AND T1.age <= 60 AND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24"
    },
    {
        "db_id": "software_company",
        "question_en": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?",
        "question_ar": "",
        "evidence_en": "age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;",
        "evidence_ar": "",
        "SQL": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)"
    },
    {
        "db_id": "software_company",
        "question_en": "In customers with marital status of never married, what is the percentage of customers with income of 2500 and above?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(INCOME_K ≥ 2500 where MARITAL_STATUS = 'Never-married'), COUNT(INCOME_K where MARITAL_STATUS = 'Never-married')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.INCOME_K > 2500 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Never-married'"
    },
    {
        "db_id": "software_company",
        "question_en": "Find and list the id and geographic ID of the elderly customers with an education level below 3.",
        "question_ar": "",
        "evidence_en": "elderly customers with an education level below 3 refer to age > 65 where EDUCATIONNUM < 3; geographic ID refers to GEOID;",
        "evidence_ar": "",
        "SQL": "SELECT ID, GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND age > 65"
    },
    {
        "db_id": "software_company",
        "question_en": "List the geographic id of places where the income is above average.",
        "question_ar": "",
        "evidence_en": "geographic ID refers to GEOID; income is above average refers to INCOME_K > DIVIDE(SUM(INCOME_K), COUNT(GEOID));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(INCOME_K) FROM Demog"
    },
    {
        "db_id": "software_company",
        "question_en": "Calculate the number of customers who did not respond in February of 2007.",
        "question_ar": "",
        "evidence_en": "did not respond refers to RESPONSE = 'false'; February of 2007 refers to REF_DATE BETWEEN '2007-02-01 12:00:00.0'AND '2007-02-28 12:00:00.0';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'false' AND REF_DATE BETWEEN '2007-02-01' AND '2007-02-28'"
    },
    {
        "db_id": "software_company",
        "question_en": "How many teenagers are working as Machine-op-inspct?",
        "question_ar": "",
        "evidence_en": "teenager is a person aged between 13 and 19 years; OCCUPATION = 'Machine-op-inspct';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19"
    },
    {
        "db_id": "software_company",
        "question_en": "Of customers who provide other services, how many are from places where inhabitants are more than 20000?",
        "question_ar": "",
        "evidence_en": "OCCUPATION = 'Other-service'; inhabitants are more than 20000 refer to INHABITANTS_K > 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the male customer in their twenties, how many are from places where the average income is more than 3000?",
        "question_ar": "",
        "evidence_en": "male customer in their twenties refer to SEX = 'Male' where age BETWEEN 20 AND 29; average income is more than 3000 refers to INCOME_K > 3000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29"
    },
    {
        "db_id": "software_company",
        "question_en": "What percentage of elderly customers who are never married in the place with geographic ID 24?",
        "question_ar": "",
        "evidence_en": "elderly customers refer to age > 65; DIVIDE(COUNT(ID where age > 65, MARITAL_STATUS = 'never married' and GEOID = 24), COUNT(ID where GEOID = 24)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.MARITAL_STATUS = 'never married' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.GEOID = 24"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?",
        "question_ar": "",
        "evidence_en": "average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000"
    },
    {
        "db_id": "software_company",
        "question_en": "How many of the customer's reference ID that has a TRUE response?",
        "question_ar": "",
        "evidence_en": "reference ID refers to REFID;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(REFID) FROM Mailings1_2 WHERE RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the customer's reference ID with true response.",
        "question_ar": "",
        "evidence_en": "reference ID refers to REFID;",
        "evidence_ar": "",
        "SQL": "SELECT REFID FROM Mailings1_2 WHERE RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the total number of widowed customers with an age below 50?",
        "question_ar": "",
        "evidence_en": "widowed customers with an age below 50 refer to MARITAL_STATUS = 'Widowed' where age < 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the geographic identifier with an number of inhabitants less than 30.",
        "question_ar": "",
        "evidence_en": "geographic identifier with an number of inhabitants less than 30 refers to GEOID where INHABITANTS_K < 30;",
        "evidence_ar": "",
        "SQL": "SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30"
    },
    {
        "db_id": "software_company",
        "question_en": "In geographic identifier from 10 to 30, how many of them has an income below 2000?",
        "question_ar": "",
        "evidence_en": "GEOID BETWEEN 10 AND 30; INCOME_K < 2000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(GEOID) FROM Demog WHERE INCOME_K < 2000 AND GEOID >= 10 AND GEOID <= 30"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the marital status of the customer ages 62 with an level of education of 7?",
        "question_ar": "",
        "evidence_en": "customer ages 62 with an level of education of 7 refer age = 62 where EDUCATIONNUM = 7;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT MARITAL_STATUS FROM Customers WHERE EDUCATIONNUM = 7 AND age = 62"
    },
    {
        "db_id": "software_company",
        "question_en": "List down the number of inhabitants of customers with a widowed marital status and false response .",
        "question_ar": "",
        "evidence_en": "number of inhabitants refers to INHABITANTS_K; RESPONSE = 'false';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.MARITAL_STATUS = 'Widowed' AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the response and number of inhabitants of the oldest female customer?",
        "question_ar": "",
        "evidence_en": "number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);",
        "evidence_ar": "",
        "SQL": "SELECT T2.RESPONSE, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the female customers with an level of education of 3 and below, list their income.",
        "question_ar": "",
        "evidence_en": "female customers with level of education of 3 and below refer to SEX = 'Female' where EDUCATIONNUM ≤ 3; income refers to INCOME_K;",
        "evidence_ar": "",
        "SQL": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )"
    },
    {
        "db_id": "software_company",
        "question_en": "List the level of education and income of customers ages from 30 to 55 with a true response.",
        "question_ar": "",
        "evidence_en": "ages from 30 to 55 refer to age BETWEEN 30 AND 55; RESPONSE = 'true'; income refers to INCOME_K; education level refers to EDUCATIONNUM;",
        "evidence_ar": "",
        "SQL": "SELECT T1.EDUCATIONNUM, T3.INCOME_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 30 AND T1.age <= 55 AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "software_company",
        "question_en": "In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300?",
        "question_ar": "",
        "evidence_en": "male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300"
    },
    {
        "db_id": "software_company",
        "question_en": "List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.",
        "question_ar": "",
        "evidence_en": "age of 20 to 30 refers to age BETWEEN 20 AND 30; the highest number of inhabitants refers to MAX(INHABITANTS_K);",
        "evidence_ar": "",
        "SQL": "SELECT T1.EDUCATIONNUM, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 20 AND T1.age <= 30 ORDER BY T3.INHABITANTS_K DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?",
        "question_ar": "",
        "evidence_en": "female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;",
        "evidence_ar": "",
        "SQL": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'"
    },
    {
        "db_id": "software_company",
        "question_en": "List the marital status and response of female customers with an level of education of 8 and above.",
        "question_ar": "",
        "evidence_en": "female customers with an level of education of 8 and above refer to SEX = 'Female' where EDUCATIONNUM ≥ 8;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.MARITAL_STATUS, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.EDUCATIONNUM > 8 AND T1.SEX = 'Female'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the age of female customers within the number of inhabitants below 30?",
        "question_ar": "",
        "evidence_en": "female customers within the number of inhabitants below 30 refer to SEX = 'Female' where INHABITANTS_K < 30;",
        "evidence_ar": "",
        "SQL": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the divorced male customers, give the income and response of those who has an level of education of 6 and above.",
        "question_ar": "",
        "evidence_en": "divorced male customers refer to SEX = 'Male' where MARITAL_STATUS = 'Divorced';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the occupation and response of female customers within the number of inhabitants range of 20 to 25?",
        "question_ar": "",
        "evidence_en": "female customers within the number of inhabitants range of 20 to 25 refer to SEX = 'Female' where INHABITANTS_K BETWEEN 20 AND 25;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OCCUPATION, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' AND T3.INHABITANTS_K >= 20 AND T3.INHABITANTS_K <= 25"
    },
    {
        "db_id": "software_company",
        "question_en": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'"
    },
    {
        "db_id": "software_company",
        "question_en": "List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?",
        "question_ar": "",
        "evidence_en": "reference ID greater than the 50% of average of number of false response refers to REFID > DIVIDE(MULTIPLY(0.5, COUNT(RESPONSE = 'false')), COUNT(RESPONSE)); income refers to INCOME_K; number of inhabitants refer to INHABITANTS_K;",
        "evidence_ar": "",
        "SQL": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the ratio of male and female among the age of teenager when the education is above 10?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(COUNT(SEX = 'Male' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10),COUNT(SEX = 'Female' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10"
    },
    {
        "db_id": "software_company",
        "question_en": "What is the geographic ID and total income per year when the average income is above 3300 dollar.",
        "question_ar": "",
        "evidence_en": "total income per year refers to MULTIPLY(12, INHABITANTS_K, INCOME_K) where INCOME_K > 3300; geographic ID refers to GEOID;",
        "evidence_ar": "",
        "SQL": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300"
    },
    {
        "db_id": "software_company",
        "question_en": "Point out the greater one between the number of actual responding and not responding to mailing.",
        "question_ar": "",
        "evidence_en": "COUNT(REFID where RESPONSE = 'true')>or<COUNT(REFID where RESPONSE = 'false');",
        "evidence_ar": "",
        "SQL": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1"
    },
    {
        "db_id": "software_company",
        "question_en": "Find out the yearly income of geographic ID when the customer is female and occupation as sales.",
        "question_ar": "",
        "evidence_en": "yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12); SEX = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.OCCUPATION = 'Sales'"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow.",
        "question_ar": "",
        "evidence_en": "geographic ID which has 33.658K of inhabitants refers to GEOID where INHABITANTS_K = 33.658; education refers to EDUCATIONNUM; female widow refers to SEX = 'Female' where MARITAL_STATUS = 'Widowed';",
        "evidence_ar": "",
        "SQL": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION, T1.age FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 33.658 AND T1.SEX = 'Female' AND T1.MARITAL_STATUS = 'Widowed'"
    },
    {
        "db_id": "software_company",
        "question_en": "Find the response status to customer whose geographic ID of 134.",
        "question_ar": "",
        "evidence_en": "GEOID = 134;",
        "evidence_ar": "",
        "SQL": "SELECT T2.RESPONSE FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.ID = T2.REFID WHERE T1.GEOID = 134"
    },
    {
        "db_id": "software_company",
        "question_en": "Describe the average income per month and yearly income of the geographic ID in which customer of ID \"209556\" and \"290135\".",
        "question_ar": "",
        "evidence_en": "the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);",
        "evidence_ar": "",
        "SQL": "SELECT T2.INCOME_K, T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 209556 OR T1.ID = 290135"
    },
    {
        "db_id": "software_company",
        "question_en": "Among the reference ID of under 10 who got response by marketing department, compare their education status.",
        "question_ar": "",
        "evidence_en": "reference ID of under 10 refers to REFID < 10; got response refers to RESPONSE = 'true'; education status refers to EDUCATIONNUM;",
        "evidence_ar": "",
        "SQL": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many community areas are there in Central Chicago?",
        "question_ar": "",
        "evidence_en": "Central Chicago refers to side = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which district is the community area Lincoln Square grouped into?",
        "question_ar": "",
        "evidence_en": "district refers to side; community area Lincoln Square refers to community_area_name = 'Lincoln Square'",
        "evidence_ar": "",
        "SQL": "SELECT side FROM Community_Area WHERE community_area_name = 'Lincoln Square'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which district in Chicago has the most community areas?",
        "question_ar": "",
        "evidence_en": "district refers to side; the most community areas refers to max(count(side))",
        "evidence_ar": "",
        "SQL": "SELECT side FROM Community_Area GROUP BY side ORDER BY COUNT(side) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which community area has the least population?",
        "question_ar": "",
        "evidence_en": "community area refers to community_area_name; the least population refers to min(population)",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name FROM Community_Area ORDER BY population ASC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the person responsible for the crime cases in Central Chicago?",
        "question_ar": "",
        "evidence_en": "the person responsible for the crime cases refers to commander; Central Chicago refers to district_name = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT commander FROM District WHERE district_name = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the email address to contact the administrator of Central Chicago?",
        "question_ar": "",
        "evidence_en": "email address refers to email; Central Chicago refers to district_name = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT email FROM District WHERE district_name = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "To which community area does the neighborhood Albany Park belong?",
        "question_ar": "",
        "evidence_en": "community area refers to community_area_name; the neighborhood Albany Park refers to neighborhood_name = 'Albany Park'",
        "evidence_ar": "",
        "SQL": "SELECT T2.community_area_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Albany Park'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many neighborhoods are there in the community area of Lincoln Square?",
        "question_ar": "",
        "evidence_en": "the community area of Lincoln Square refers to community_area_name = 'Lincoln Square'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the names of all the neighborhoods in the community area with the most population.",
        "question_ar": "",
        "evidence_en": "name of neighborhood refers to neighborhood_name; the most population refers to max(population)",
        "evidence_ar": "",
        "SQL": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T2.community_area_no ORDER BY T2.population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the names of all the neighborhoods in Central Chicago.",
        "question_ar": "",
        "evidence_en": "name of neighborhood refers to neighborhood_name; Central Chicago refers to side = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the precise location coordinates of all the crimes in Central Chicago.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to latitude, longitude; Central Chicago refers to district_name = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes had happened in Central Chicago?",
        "question_ar": "",
        "evidence_en": "Central Chicago refers to district_name = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence?",
        "question_ar": "",
        "evidence_en": "Central Chicago refers to district_name = 'Central'; case of domestic violence refers to domestic = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the case numbers of all the crimes with no arrest made in Central Chicago.",
        "question_ar": "",
        "evidence_en": "no arrest made refers to arrest = 'FALSE'; Central Chicago refers to district_name = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.arrest = 'FALSE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes had happened in the community area with the most population?",
        "question_ar": "",
        "evidence_en": "the most population refers to max(population)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no GROUP BY T1.community_area_name ORDER BY T1.population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes in Woodlawn, how many of them happened in January, 2018?",
        "question_ar": "",
        "evidence_en": "Woodlawn refers to community_area_name = 'Woodlawn'; in January 2018 refers to date like '%1/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "More crimes happened in which community area in January, 2018, Woodlawn or Lincoln Square?",
        "question_ar": "",
        "evidence_en": "in January 2018 refers to date like '%1/2018%'; Woodlawn or Lincoln Square refers to community_area_name in ('Woodlawn', 'Lincoln Square'); number of crime refers to COUNT(report_no); the higher the report_no, the more crimes happened in the community;",
        "evidence_ar": "",
        "SQL": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name IN ('Woodlawn', 'Lincoln Square') AND T2.date LIKE '%1/2018%' GROUP BY T1.community_area_name ORDER BY COUNT(T1.community_area_name) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the fax number for the district with the most number of crimes in January, 2018?",
        "question_ar": "",
        "evidence_en": "fax number refers to fax; the most number of crimes refers to max(count(case_number)); in January 2018 refers to date like '%1/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.fax FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.date LIKE '%1/2018%' GROUP BY T2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the average number of crimes in a neighborhood in Central Chicago?",
        "question_ar": "",
        "evidence_en": "Central Chicago refers to side = 'Central'; average number = divide(count(report_no), count(community_area_no))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district?",
        "question_ar": "",
        "evidence_en": "the Central district refers to district_name = 'Central'; percentage = divide(count(case_number where district_name = 'Central'), count(case_number)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many community areas are in the Far North side?",
        "question_ar": "",
        "evidence_en": "the Far North side refers to side = 'Far North'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North '"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the commander of Morgan Park district?",
        "question_ar": "",
        "evidence_en": "Morgan Park district refers to district_name = 'Morgan Park'",
        "evidence_ar": "",
        "SQL": "SELECT commander FROM District WHERE district_name = 'Morgan Park'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Where did case No. JB100065 happen? Give the name of the district.",
        "question_ar": "",
        "evidence_en": "case No. JB100065 refers to case_number = 'JB100065'; name of the district refers to district_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Where is the coordinate (41.66236555, -87.63470194) located? Give the name of the district.",
        "question_ar": "",
        "evidence_en": "coordinate (41.66236555, -87.63470194) refers to latitude = '41.66236555' AND longitude = '-87.63470194'; name of the district refers to district_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.longitude = '-87.63470194' AND T1.latitude = '41.66236555'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the name of the person who was responsible for case No.JB524952.",
        "question_ar": "",
        "evidence_en": "name of the person refers to commander; case No.JB524952 refers to case_number = 'JB524952'",
        "evidence_ar": "",
        "SQL": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many simple assaults happened on 2018/9/8?",
        "question_ar": "",
        "evidence_en": "simple assault refers to primary_description = 'ASSAULT'AND secondary_description = 'SIMPLE'; on 2018/9/8 refers to date like '%9/8/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which district had the most number of first degree murders? Give the district number.",
        "question_ar": "",
        "evidence_en": "the most number refers to max(count(case_number)); first degree murder refers to secondary_description = 'FIRST DEGREE MURDER'; district number refers to district_no",
        "evidence_ar": "",
        "SQL": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How severe was case JB296775? Give the index code for severity.",
        "question_ar": "",
        "evidence_en": "index code refers to iucr_no; case JB296775 refers to case_number = 'JB296775'",
        "evidence_ar": "",
        "SQL": "SELECT T2.iucr_no FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.case_number = 'JB296775'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the name of the community area which had the most pocket-picking thefts.",
        "question_ar": "",
        "evidence_en": "name of the community area refers to community_area_name; the most refers to max(case_number); pocket-picking theft refers to primary_description = 'THEFT' AND secondary_description = 'POCKET-PICKING'",
        "evidence_ar": "",
        "SQL": "SELECT T3.community_area_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.primary_description = 'THEFT' AND T1.secondary_description = 'POCKET-PICKING' GROUP BY T2.community_area_no ORDER BY T2.case_number DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who was the alderman of the legislative district where case No. JB103470 took place? Give the full name.",
        "question_ar": "",
        "evidence_en": "case No. JB103470 refers to case_number = 'JB103470'; full name refers to alderman_first_name, alderman_last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the neighborhood name of West Englewood community.",
        "question_ar": "",
        "evidence_en": "West Englewood community refers to community_area_name = 'West Englewood'",
        "evidence_ar": "",
        "SQL": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'West Englewood'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many different neighborhoods are there in Roseland community?",
        "question_ar": "",
        "evidence_en": "Roseland community refers to community_area_name = 'Roseland'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.community_area_name = 'Roseland' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the FBI code description of case No.JB134191.",
        "question_ar": "",
        "evidence_en": "case No.JB134191 refers to case_number = 'JB134191'",
        "evidence_ar": "",
        "SQL": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Tell the number of cases with arrests in North Lawndale community.",
        "question_ar": "",
        "evidence_en": "number of cases refers to count(case_number); arrest refers to arrest = 'TRUE'; North Lawndale community refers to community_area_name = 'North Lawndale'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.community_area_name = 'North Lawndale' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.arrest = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the percentage of under $500 thefts among all cases that happened in West Englewood?",
        "question_ar": "",
        "evidence_en": "under $500 refers to secondary_description = '$500 AND UNDER'; theft refers to primary_description = 'THEFT'; West Englewood refers to community_area_name = 'West Englewood'; percentage = divide(count(case_number where secondary_description = '$500 AND UNDER'), count(case_number)) where primary_description = 'THEFT' and community_area_name = 'West Englewood' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.secondary_description = '$500 AND UNDER' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'THEFT' AND T3.community_area_name = 'West Englewood'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the percentage of larceny cases among all cases that happened in Edgewater community?",
        "question_ar": "",
        "evidence_en": "larceny case refers to title = 'Larceny'; Edgewater community refers to community_area_name = 'Edgewater'; percentage = divide(count(case_number where title = 'Larceny'), count(case_number)) where community_area_name = 'Edgewater' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.title = 'Larceny' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.case_number) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Edgewater'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes were committed at 018XX S KOMENSKY AVEin May 2018?",
        "question_ar": "",
        "evidence_en": " in May 2018 refers to date LIKE '5/%/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN date LIKE '5/%/2018%' THEN 1 ELSE 0 END) FROM Crime WHERE block = '018XX S KOMENSKY AVE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the name of the community with the highest population?",
        "question_ar": "",
        "evidence_en": "name of the community refers to community_area_name; the highest population refers to max(population)",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many incidents of domestic violence occurred in an abandoned building in 2018?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; in an abandoned building refers to location_description = 'ABANDONED BUILDING'; in 2018 refers to date LIKE '%2018%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN location_description = 'ABANDONED BUILDING' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the population of the district with the least population?",
        "question_ar": "",
        "evidence_en": "the least population refers = min(sum(population))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many arrests were made in 2018 in an animal hospital under FBI code 08B?",
        "question_ar": "",
        "evidence_en": "arrest refers to arrest = 'TRUE'; in 2018 refers to date LIKE '%2018%'; in an animal hospital refers to location_description = 'ANIMAL HOSPITAL'; FBI code 08B refers to fbi_code_no = '08B'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND location_description = 'ANIMAL HOSPITAL' AND fbi_code_no = '08B'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the detailed description of all the crimes against society.",
        "question_ar": "",
        "evidence_en": "crime against society refers to crime_against = 'Society'",
        "evidence_ar": "",
        "SQL": "SELECT description FROM FBI_Code WHERE crime_against = 'Society'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the commanding officer in the district with the highest number of disorderly conduct?",
        "question_ar": "",
        "evidence_en": "commanding officer refers to commander; the highest number refers to max(count(district_no)); disorderly conduct refers to title = 'Disorderly Conduct'",
        "evidence_ar": "",
        "SQL": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Disorderly Conduct' AND T2.fbi_code_no = 24 GROUP BY T2.fbi_code_no ORDER BY COUNT(T1.district_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which crime was committed the most by criminals?",
        "question_ar": "",
        "evidence_en": "crime refers to title; committed the most refers to max(fbi_code_no)",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no ORDER BY T2.fbi_code_no DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In Albany Park, how many arrests were made in an apartment due to criminal sexual abuse?",
        "question_ar": "",
        "evidence_en": "Albany Park refers to district_name = 'Albany Park'; in an apartment refers to location_description = 'APARTMENT'; criminal sexual abuse refers to title = 'Criminal Sexual Abuse'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.title = 'Criminal Sexual Abuse' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.district_name = 'Albany Park' AND T2.arrest = 'TRUE' AND T2.location_description = 'APARTMENT'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the precise location or coordinate where most of the robberies in Rogers Park occurred?",
        "question_ar": "",
        "evidence_en": "precise location or coordinate refers to latitude, longitude; most refers to fbi_code_no = 3; robbery refers to title = 'Robbery'; Rogers Park refers to community_area_name = 'Rogers Park'",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Rogers Park' AND T3.title = 'Robbery' AND T3.fbi_code_no = 3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many solicit on public way prostitution crimes were arrested in West Garfield Park?",
        "question_ar": "",
        "evidence_en": "solicit on public way prostitution crime refers to secondary_description = 'SOLICIT ON PUBLIC WAY' AND primary_description = 'PROSTITUTION'; arrested refers to arrest = 'TRUE'; West Garfield Park refers to community_area_name = 'West Garfield Park'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T1.community_area_name = 'West Garfield Park' AND T3.secondary_description = 'SOLICIT ON PUBLIC WAY' AND T3.primary_description = 'PROSTITUTION'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern?",
        "question_ar": "",
        "evidence_en": "the most populated refers to max(population); domestic violence refers to domestic = 'TRUE'; in a bar or tavern refers to location_description = 'BAR OR TAVERN'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' AND T2.location_description = 'BAR OR TAVERN' ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many neighborhoods are there in Near North Side?",
        "question_ar": "",
        "evidence_en": "Near North Side refers to community_area_name = 'Near North Side'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.community_area_name = 'Near North Side' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Out of all the incidents of domestic violence reported at the ward represented by alderman Walter Burnett Jr., how many were arrested?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Walter' AND T1.alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' AND T2.domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the short description of the crime committed the most by criminals in the least populated community?",
        "question_ar": "",
        "evidence_en": "short description refers to title; committed the most refers to max(fbi_code_no); the least populated community refers to min(population)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no GROUP BY T3.title ORDER BY T1.population ASC, T3.fbi_code_no DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the legislative district's office address where 010XX W LAKE ST is located?",
        "question_ar": "",
        "evidence_en": "the legislative district's office address refers to ward_office_address; 010XX W LAKE ST refers to block = '010XX W LAKE ST'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ward_office_address FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.block = '010XX W LAKE ST' GROUP BY T1.ward_office_address"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the name of the community that has the highest number of crimes related to prostitution?",
        "question_ar": "",
        "evidence_en": "name of the community refers to community_area_name; the highest number of crimes refers to max(case_number); prostitution refers to primary_description = 'PROSTITUTION'",
        "evidence_ar": "",
        "SQL": "SELECT T3.community_area_name FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'PROSTITUTION' GROUP BY T1.iucr_no ORDER BY T1.case_number DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many vandalisms were arrested in the ward represented by Edward Burke?",
        "question_ar": "",
        "evidence_en": "vandalism refers to title = 'Vandalism'; arrested refers to arrest = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Burke' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Vandalism' AND T2.arrest = 'TRUE' AND T1.alderman_first_name = 'Edward'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many domestic violence cases were reported in May 2018?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; in May 2018 refers to date LIKE '5/%/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the IUCR numbers and index status of homicide incidents.",
        "question_ar": "",
        "evidence_en": "index status refers to index_code; homicide incident refers to primary_description = 'HOMICIDE'",
        "evidence_ar": "",
        "SQL": "SELECT index_code FROM IUCR WHERE primary_description = 'HOMICIDE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Provide the responsible person and his/her email address of Chicago Lawn.",
        "question_ar": "",
        "evidence_en": "responsible person refers to commander; email address refers to email; Chicago Lawn refers to district_name = 'Chicago Lawn'",
        "evidence_ar": "",
        "SQL": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the alderman's full name of the most crowded ward?",
        "question_ar": "",
        "evidence_en": "alderman's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; the most crowded refers to max(population)",
        "evidence_ar": "",
        "SQL": "SELECT alderman_name_suffix, alderman_first_name, alderman_last_name FROM Ward ORDER BY population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the community area names in the Northwest.",
        "question_ar": "",
        "evidence_en": "the Northwest refers to side = 'Northwest'",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name FROM Community_Area WHERE side = 'Northwest'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List down the titles and descriptions of the crimes cases against persons.",
        "question_ar": "",
        "evidence_en": "crime case against persons refers to crime_against = 'Persons'",
        "evidence_ar": "",
        "SQL": "SELECT title, description FROM FBI_Code WHERE crime_against = 'Persons'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Describe the specific description and case locations under IUCR 142.",
        "question_ar": "",
        "evidence_en": "specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142",
        "evidence_ar": "",
        "SQL": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes were handled by Brendan Reilly on 7th October 2018?",
        "question_ar": "",
        "evidence_en": "7th October 2018 refers to date like '10/7/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.alderman_last_name = 'Reilly' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.alderman_name_suffix IS NULL AND T2.alderman_first_name = 'Brendan' AND date LIKE '10/7/2018%'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many cases have been arrested among the crimes that happened in the restaurant of Englewood?",
        "question_ar": "",
        "evidence_en": "arrested refers to arrest = 'TRUE'; restaurant refers to location_description = 'RESTAURANT'; Englewood refers to district_name = 'Englewood'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Englewood' AND T1.location_description = 'RESTAURANT'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Provide case numbers, aldermen's full names, and district names of the crimes that happened in 0000X N FRANCISCO AVE.",
        "question_ar": "",
        "evidence_en": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; 0000X N FRANCISCO AVE refers to block = '0000X N FRANCISCO AVE'",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T2.block = '0000X N FRANCISCO AVE' GROUP BY T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes were Misc Non-Index Offense?",
        "question_ar": "",
        "evidence_en": "Misc Non-Index Offense refers to title = 'Misc Non-Index Offense'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.title = 'Misc Non-Index Offense' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List down the neighborhood areas of Douglas.",
        "question_ar": "",
        "evidence_en": "neighborhood area refers to neighborhood_name; Douglas refers to community_area_name = 'Douglas'",
        "evidence_ar": "",
        "SQL": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Douglas'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Calculate the average crime rate per month in the highest populous area.",
        "question_ar": "",
        "evidence_en": "the highest populous refers to max(population); average crime rate per month = divide(count(report_no where population = max(population)), 12)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.report_no) AS REAL) / 12 FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes in the Central, calculate the percentage of larceny incidents.",
        "question_ar": "",
        "evidence_en": "Central refers to side = 'Central'; larceny refers to title = 'Larceny'; percentage = divide(count(report_no where title = 'Larceny'), count(report_no)) where side = 'Central' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.title = 'Larceny' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the location descriptions and aldermen's full names of the arson by explosive.",
        "question_ar": "",
        "evidence_en": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; arson by explosive refers to primary_description = 'ARSON' AND secondary_description = 'BY EXPLOSIVE'",
        "evidence_ar": "",
        "SQL": "SELECT T2.location_description, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.primary_description = 'ARSON' AND T3.secondary_description = 'BY EXPLOSIVE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Provide the occurrence date and location of the deceptive practice due to the unlawful use of recorded sound.",
        "question_ar": "",
        "evidence_en": "location refers to latitude, longitude; deceptive practice refers to primary_description = 'DECEPTIVE PRACTICE'; unlawful use of recorded sound refers to secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T1.primary_description = 'DECEPTIVE PRACTICE' AND T1.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the criminal sexual assaults in the district of Adnardo Gutierrez, how many cases happened in the residence?",
        "question_ar": "",
        "evidence_en": "criminal sexual assault refers to title = 'Criminal Sexual Assault'; Adnardo Gutierrez refers to commander = 'Adnardo Gutierrez'; in the residence refers to location_description = 'RESIDENCE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.report_no) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Criminal Sexual Assault' AND T1.commander = 'Adnardo Gutierrez' AND T2.location_description = 'RESIDENCE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many percent of domestic violence cases were arrested in West Pullman?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'; West Pullman refers to community_area_name = 'West Pullman'; percent = divide(count(report_no where arrest = 'TRUE'), count(report_no)) where domestic = 'TRUE' and community_area_name = 'West Pullman' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Calculate the percentage of the domestic violence cases handled by Christopher Taliaferro. Among them, list report numbers of cases that happened in the bank.",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; report number refers to report_no; in the bank refers to location_description = 'BANK'; percentage = divide(count(report_no where domestic = 'TRUE'), count(report_no)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS \"number\" FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many aldermen have \"James\" as their first name?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes are commited on January 1, 2018?",
        "question_ar": "",
        "evidence_en": "on January 1 2018 refers to date LIKE '1/1/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Calculate the average population of community areas in the West side.",
        "question_ar": "",
        "evidence_en": "the West side refers to side = 'West'; average population = avg(population) where side = 'West'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(population) FROM Community_Area WHERE side = 'West '"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the cases reported in the ward with Edward Burke as the alderman and happened in the community area with the highest population, provide the report number of the crime with the highest beat.",
        "question_ar": "",
        "evidence_en": "the highest population refers to max(population); report number refers to report_no; the highest beat refers to max(beat)",
        "evidence_ar": "",
        "SQL": "SELECT T2.report_no FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.alderman_first_name = 'Edward' AND T1.alderman_last_name = 'Burke' ORDER BY T2.beat DESC, T3.population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many of the crimes that happened in the street have FBI title \"Homicide 1st & 2nd Degree\"?",
        "question_ar": "",
        "evidence_en": "in the street refers to location_description = 'STREET'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.location_description = 'STREET' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the alderman in the ward associated with the crime with report number 23769?",
        "question_ar": "",
        "evidence_en": "alderman refers to alderman_suffix, alderman_first_name, alderman_last_name; report number 23769 refers to report_no = 23769",
        "evidence_ar": "",
        "SQL": "SELECT T2.alderman_first_name, T2.alderman_last_name FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.report_no = 23769"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the case numbers of domestic violence crimes reported in Lincoln Square.",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; Lincoln Square refers to community_area_name = 'Lincoln Square'",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Lincoln Square' AND T2.domestic = 'TRUE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes reported to the ward located at 1958 N. Milwaukee Ave., list down the report number of the crimes happened inside the apartment.",
        "question_ar": "",
        "evidence_en": "1958 N. Milwaukee Ave. refers to ward_office_address = '1958 N. Milwaukee Ave.'; report number refers to case_number; inside the apartment refers to location_description = 'APARTMENT'",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T2.ward_office_address = '1958 N. Milwaukee Ave.'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the total number of crimes that happened in Bridgeport with beat less than 1000?",
        "question_ar": "",
        "evidence_en": "Bridgeport refers to community_area_name = 'Bridgeport'; with beat less than 1000 refers to beat < 1000; total number = count(beat) where community_area_name = 'Bridgeport' and beat < 1000",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.beat < 1000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Bridgeport'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the report number of crimes reported in a community area in the far north side with a population greater than 60,000.",
        "question_ar": "",
        "evidence_en": "report number refers to report_no; the far north side refers to side = 'Far North'; population greater than 60,000 refers to population > '60000'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the report number of crimes against property happened in Riverdale.",
        "question_ar": "",
        "evidence_en": "crime against property refers to crime_against = 'Property'; Riverdale refers to community_area_name = 'Riverdale'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.crime_against = 'Property' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T3.community_area_name = 'Riverdale'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many domestic violence cases were brought in the ward that uses \"ward13@cityofchicago.org\"?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; uses \"ward13@cityofchicago.org\" refers to ward_email = 'ward13@cityofchicago.org'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the district address associated with the case JB107731?",
        "question_ar": "",
        "evidence_en": "case JB107731 refers to case_number = 'JB107731'",
        "evidence_ar": "",
        "SQL": "SELECT T1.address FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T2.case_number = 'JB107731'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Calculate the total beat of the crimes reported in a community area in the central side with population of 50,000 and above.",
        "question_ar": "",
        "evidence_en": "the central side refers to side = 'Central'; population of 50,000 and above refers to population > '50000'; total beat = sum(beat) where side = 'Central' and population > '50000'",
        "evidence_ar": "",
        "SQL": "SELECT 1.0 * SUM(CASE WHEN T1.population > 50000 THEN T2.beat ELSE 0 END) AS sum FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the case number of crimes against society that happened in June 2018.",
        "question_ar": "",
        "evidence_en": "crime against society refers to crime_against = 'Society'; in June 2018 refers to date LIKE '6/%/2018%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T2.date LIKE '6/%/2018%' AND T1.crime_against = 'Society'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes located in the community area with the highest population, what is the percentage of domestic violence?",
        "question_ar": "",
        "evidence_en": "the highest population refers to max(population); domestic violence refers to domestic = 'TRUE'; percentage = divide(count(domestic = 'TRUE'), count(domestic)) where population = max(population) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'TRUE' THEN T2.domestic END) AS REAL) * 100 / COUNT(T2.domestic) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the case number of the crimes in wards with population below 52000 that have beat greater than the 90% of the average beat of all crimes.",
        "question_ar": "",
        "evidence_en": "population below 52000 refers to population < 52000; beat greater than the 90% of the average beat refers to beat > multiply(avg(beat), 0.9) where population < 52000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.report_no) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 AND T1.beat > ( SELECT AVG(T1.beat) * 0.9 FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 )"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000.",
        "question_ar": "",
        "evidence_en": "area name refers to community_area_name; the Far north side refers to side = 'Far North'; a population of more than 50000 but less than 70000 refers to population BETWEEN '50000' AND '70000'",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name, side FROM Community_Area WHERE side = 'Far North ' AND population BETWEEN 50000 AND 70000"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the coordinate of the alleys where a crime was reported and an arrest was made.",
        "question_ar": "",
        "evidence_en": "coordinate refers to latitude, longitude; alley refers to location_description = 'ALLEY'; an arrest was made refers to arrest = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE' GROUP BY latitude, longitude"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Find the commander's name, email address, and phone number of the Ogden district.",
        "question_ar": "",
        "evidence_en": "commander's name refers to commander; email address refers to email; phone number refers to phone",
        "evidence_ar": "",
        "SQL": "SELECT commander, email, phone FROM District WHERE district_name = 'Ogden'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the FBI code and definition of Gambling?",
        "question_ar": "",
        "evidence_en": "FBI code refers to fbi_code_no; definition refers to description; Gambling refers to title = 'Gambling'",
        "evidence_ar": "",
        "SQL": "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes, what percentage are severe?",
        "question_ar": "",
        "evidence_en": "severe refers to index_code = 'I'; percentage = divide(count(iucr_no where index_code = 'I'), count(iucr_no)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN index_code = 'I' THEN iucr_no ELSE NULL END) AS REAL) * 100 / COUNT(iucr_no) FROM IUCR"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What kind of location in Austin reported the most number of crimes?",
        "question_ar": "",
        "evidence_en": "\"Austin\" is the district_name; the most number of crime refers to Max(Count(case_number)); kind of location refers to location_description",
        "evidence_ar": "",
        "SQL": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "On average, how many community areas are there in a side?",
        "question_ar": "",
        "evidence_en": "average = Divide(Count(ward_no), Count(side))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which community area has the highest number of crimes reported on the street?",
        "question_ar": "",
        "evidence_en": "reported on the street refers to location_description = 'STREET'; community area with highest number of crime refers to Max(Count(location_description)); community area refers to community_area_no",
        "evidence_ar": "",
        "SQL": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the average number of reckless homicides that happened in a district?",
        "question_ar": "",
        "evidence_en": "\"RECKLESS HOMICIDE\" is the secondary_description; average = Divide (Count(report_no), Count(district_name))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.report_no) AS REAL) / COUNT(DISTINCT T1.district_name) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.secondary_description = 'RECKLESS HOMICIDE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Find the ward office's address and phone number of the ward where the most crimes without arrest occurred.",
        "question_ar": "",
        "evidence_en": "the most crime without arrest refers to Max(Count(arrest = 'FALSE')); phone number refers to ward_office_phone; address refers to ward_office_address",
        "evidence_ar": "",
        "SQL": "SELECT T2.ward_office_address, T2.ward_office_phone FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.arrest = 'FALSE' GROUP BY T2.ward_office_address, T2.ward_office_phone ORDER BY COUNT(T1.arrest) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the case number and coordinates of the places where child abduction is reported.",
        "question_ar": "",
        "evidence_en": "\"CHILD ABDUCTION\" is the secondary_description; coordinates refers to latitude, longitude",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number, T1.latitude, T1.longitude FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.secondary_description = 'CHILD ABDUCTION'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the most reported crime in the Northwest side?",
        "question_ar": "",
        "evidence_en": "most reported crime refers to max(Count(secondary_description))",
        "evidence_ar": "",
        "SQL": "SELECT T3.secondary_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T1.side = 'Northwest ' GROUP BY T3.secondary_description ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Find the community area where the least number of domestic crimes happened.",
        "question_ar": "",
        "evidence_en": "least number of domestic crime refers to Min(Count(domestic = \"TRUE\")); community area refers to community_area_no",
        "evidence_ar": "",
        "SQL": "SELECT T2.community_area_no FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.domestic = 'TRUE' GROUP BY T2.community_area_no ORDER BY COUNT(T2.community_area_no) ASC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In drug abuse crimes, what percentage is related to cannabis?",
        "question_ar": "",
        "evidence_en": "drug abuse crime refer to title = 'Drug Abuse'; percentage = Divide (Count (secondary_description LIKE '%CANNABIS%'), Count (secondary_description)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.secondary_description LIKE '%CANNABIS%' THEN T1.secondary_description END) AS REAL) * 100 / COUNT(T1.secondary_description) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Drug Abuse'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the average number of less severe crimes reported a day in February of 2018?",
        "question_ar": "",
        "evidence_en": "day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List the name and population of the communities where more than average solicit for prostitutes were reported.",
        "question_ar": "",
        "evidence_en": "\"SOLICIT FOR PROSTITUTE\" is the secondary_description; more than average refers to count(iucr_no) > Divide (Count(secondary_description = 'SOLICIT FOR PROSTITUTE'), Count(iucr_no)); name of community refers to community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the incidents reported in Harrison, what percentage are disorderly conduct?",
        "question_ar": "",
        "evidence_en": "\"Harrison\" is the district_name;  'Disorderly Conduct' is the title; percentage = Divide (Count(title = 'Disorderly Conduct'), Count(report_no)) * 100; incident report refers to report_no",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T3.title = 'Disorderly Conduct' THEN T2.report_no END) * 100.0 / COUNT(T2.report_no) AS per FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.district_name = 'Harrison'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Calculate the difference in the average number of vehicular hijackings and aggravated vehicular hijackings in the districts.",
        "question_ar": "",
        "evidence_en": "\"VEHICULAR HIJACKING\" and \"AGGRAVATED VEHICULAR HIJACKING\" are both secondary_description; difference in average = Subtract (Divide(Count(secondary_description = 'VEHICULAR HIJACKING'), Count(district_name)), Divide(Count(secondary_description = \"AGGRAVATED VEHICULAR HIJACKING\"), Count(district_name)))",
        "evidence_ar": "",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL) - CAST(COUNT(CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL), 4) AS \"difference\" FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes happened in longitude -8772658001?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Crime WHERE longitude = '-87.72658001'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List all the crimes of the narcotic type that exist.",
        "question_ar": "",
        "evidence_en": "narcotic type refers to primary_description = 'NARCOTICS'; crime refers to secondary_description",
        "evidence_ar": "",
        "SQL": "SELECT secondary_description FROM IUCR WHERE primary_description = 'NARCOTICS' GROUP BY secondary_description"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the first name of the aldermen of wards with more than 50,000 inhabitants?",
        "question_ar": "",
        "evidence_en": "more than 50000 inhabitants refers to Population > 50000; first name of alderman refers to alderman_first_name",
        "evidence_ar": "",
        "SQL": "SELECT alderman_first_name FROM Ward WHERE Population > 50000"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List crimes that the FBI has classified as Drug Abuse by their report number.",
        "question_ar": "",
        "evidence_en": "\"Drug Abuse\" is the title of crime",
        "evidence_ar": "",
        "SQL": "SELECT T2.report_no FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Drug Abuse'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many weapons violation crimes have occurred in the Calumet district?",
        "question_ar": "",
        "evidence_en": "\"Calumet\" is the district_name; 'WEAPON VIOLATION' is the primary_description of crime",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.district_name = 'Calumet' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'WEAPONS VIOLATION'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the exact location of the crimes that occurred in the Belmont Cragin community?",
        "question_ar": "",
        "evidence_en": "Belmont Cragin community refers to community_area_name = 'Belmont Cragin'; exact location refers to latitude, longitude",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many different types of crimes, according to the primary description, have occurred in the Hermosa neighborhood?",
        "question_ar": "",
        "evidence_en": "\"Hermosa\" is the neighborhood_name",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many domestic crime cases has Commander Ronald A. Pontecore Jr. been responsible for investigating?",
        "question_ar": "",
        "evidence_en": "domestic crime refers to domestic = 'TRUE'; person responsible for investigating refers to commander",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.commander = 'Ronald A. Pontecore Jr.'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes against society happened in the Wentworth district according to the FBI?",
        "question_ar": "",
        "evidence_en": "\"Wentworth\" is the district_name; crime against society refers to crime_against = 'Society\"",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What phone number does alderman Emma Mitts have to call if she wants to speak to the commander in charge of the investigation of the crimes that have occurred in her ward?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.phone FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.alderman_first_name = 'Emma' AND T1.alderman_last_name = 'Mitts'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crimes described as 'The theft of a motor vehicle' by the FBI have taken place in the Lake View community?",
        "question_ar": "",
        "evidence_en": "lake view community refers to community_area_name = 'Lake View'; 'The theft of a motor vehicle' is the description",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.community_area_name = 'Lake View' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.description = 'The theft of a motor vehicle.'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In which district have there been more intimidation-type crimes?",
        "question_ar": "",
        "evidence_en": "more intimidation-type crime refers to Max(Count(primary_description = 'INTIMIDATION')); district refers to district_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.district_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'INTIMIDATION' GROUP BY T3.district_name ORDER BY COUNT(T1.primary_description) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What types of domestic crimes have occurred the most in the North Lawndale community?",
        "question_ar": "",
        "evidence_en": "\"North Lawndale' is the community_area_name; occur the most domestic crime refers to Max(Count(domestic = 'TRUE'))",
        "evidence_ar": "",
        "SQL": "SELECT T2.domestic FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'North Lawndale' AND T2.domestic = 'TRUE' GROUP BY T2.domestic ORDER BY COUNT(T2.domestic) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In which ward of more than 55,000 inhabitants are there more crimes of intimidation with extortion?",
        "question_ar": "",
        "evidence_en": "more than 55000 inhabitants refers to Population > 55000; 'INTIMIDATION' is the primary_description; 'EXTORTION' refers to secondary_description; more crime refers to Count(ward_no)",
        "evidence_ar": "",
        "SQL": "SELECT T3.ward_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Ward AS T3 ON T3.ward_no = T2.ward_no WHERE T1.primary_description = 'INTIMIDATION' AND T1.secondary_description = 'EXTORTION' AND T3.Population > 55000 GROUP BY T3.ward_no ORDER BY COUNT(T3.ward_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which commander has had to deal with more cases of criminal sexual abuse?",
        "question_ar": "",
        "evidence_en": "more cases of criminal sexual abuse refers to Max(Count(secondary_description = 'CRIMINAL SEXUAL ABUSE'))",
        "evidence_ar": "",
        "SQL": "SELECT T3.commander FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T3.commander ORDER BY COUNT(T1.secondary_description) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What percentage of non-domestic crimes have occurred in the Jefferson Park district?",
        "question_ar": "",
        "evidence_en": "non domestic crime refers to domestic = 'FALSE'; 'Jefferson Park' is the district_name; percentage = Divide (Count (case_number where domestic = 'FALSE'), Count(case_number)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the average population of the wards where apartment crimes have been reported without arrests?",
        "question_ar": "",
        "evidence_en": "apartment crime refers to location_description = 'APARTMENT';  without arrest refers to arrest = 'FALSE'; average population = AVG(Population)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What are the full names of the top 5 most crowded ward aldermen?",
        "question_ar": "",
        "evidence_en": "most crowded ward refers to Max(Population); full name of alderman refers to alderman_first_name, alderman_last_name",
        "evidence_ar": "",
        "SQL": "SELECT alderman_first_name, alderman_last_name FROM Ward ORDER BY Population DESC LIMIT 5"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crime against property are there?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) AS cnt FROM FBI_Code WHERE crime_against = 'Property'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many districts are there in the police district building with a zip code of 60608?",
        "question_ar": "",
        "evidence_en": "district refers to district_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the crime against criminal sexual abuse?",
        "question_ar": "",
        "evidence_en": "\"Criminal Sexual Abuse\" is the title of crime",
        "evidence_ar": "",
        "SQL": "SELECT crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which community has the highest number of neighborhoods?",
        "question_ar": "",
        "evidence_en": "community with highest number of neighborhoods refers to Max(Count(community_area_no)); community refers to community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no ORDER BY T2.community_area_no DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many severe crime incidents were reported at coordinate 41.64820151, -87.54430496?",
        "question_ar": "",
        "evidence_en": "coordinates refers to latitude, longitude; severe crime refers to index_code = 'I'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.longitude = '-87.54430496' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.report_no = T2.iucr_no WHERE T2.index_code = 'I' AND T1.latitude = '41.64820251'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is the commanding officer in the district with the highest number of reported crimes where no arrest has been made?",
        "question_ar": "",
        "evidence_en": "where no arrest refers to arrest = 'FALSE'; highest number of crime refers to Max(Count(report_no)); commanding officer refers to commander",
        "evidence_ar": "",
        "SQL": "SELECT T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.arrest = 'FALSE' GROUP BY T2.commander ORDER BY COUNT(T1.report_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What are the general and specific descriptions of the most common crime incidents that happened in an aircraft?",
        "question_ar": "",
        "evidence_en": "in aircraft refers to location_description = 'AIRCRAFT'; general description refers to primary_description; specific description refers to secondary_description; most common crime incidents refers to Max(Count(iucr_no))",
        "evidence_ar": "",
        "SQL": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Between Deering and Near West districts, which district reported the most number of crime incidents that happened in a library?",
        "question_ar": "",
        "evidence_en": "\"Deering\" and \"Near West\" are both district_name; 'LIBRARY' is the location_description; district with the most number of crime Max(Count(district_no))",
        "evidence_ar": "",
        "SQL": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name IN ('Deering', 'Near West') AND T2.location_description = 'LIBRARY' GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many arrests have been made due to forcible entry burglary that took place in a day care center?",
        "question_ar": "",
        "evidence_en": "\"BURGLARY\" is the primary_description; 'FORCIBLE ENTRY' is the secondary_description; 'DAY CARE CENTER' is the location_description; arrests have been made refers to arrest = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the name of the district with the highest number of domestic violence cases?",
        "question_ar": "",
        "evidence_en": "domestic violence refers to domestic = 'TRUE'; highest number of case refers to Max(Count(district_no)); name of district refers to distric_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.domestic = 'TRUE' GROUP BY T2.district_name ORDER BY COUNT(T1.district_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In the least populated community, what is the most common location of all the reported crime incidents?",
        "question_ar": "",
        "evidence_en": "least populated refers to Min(Population); community refers to community_area_no; most common location refers to Max(Count(location_description))",
        "evidence_ar": "",
        "SQL": "SELECT T2.location_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.population = ( SELECT MIN(population) FROM Community_Area ) AND T2.location_description IS NOT NULL GROUP BY T2.location_description"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many violation of laws are there where no arrest has been made?",
        "question_ar": "",
        "evidence_en": "\"The violation of laws \" is the description of incidents; no arrest has been made refers to arrest = 'FALSE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.description LIKE '%The violation of laws%' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.Arrest = 'FALSE'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the precise coordinate of the location where simple assault incidents happened the most in Chatham?",
        "question_ar": "",
        "evidence_en": "precise coordinates refers to latitude, longitude; 'Simple Assault' is the title of incident; 'Chatham' is the community_area_name; most incident happened refers to Max(Count(latitude, longitude))",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Simple Assault' AND T3.community_area_name = 'Chatham' AND T3.community_area_no = 44 ORDER BY T2.latitude DESC, T2.longitude DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "In the South side community, what is the name of the community with the most reported incidents of unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person?",
        "question_ar": "",
        "evidence_en": "\"unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person\" is the description; name of community refer to community_area_name; most reported incidents refers to Max(Count(fbi_code_no))",
        "evidence_ar": "",
        "SQL": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.side = 'South' AND T1.description = 'The unlawful taking, carrying, leading, or riding away of property FROM the possession or constructive possession of another person.' GROUP BY T3.community_area_name ORDER BY COUNT(T1.fbi_code_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crime against society were reported in Englewood?",
        "question_ar": "",
        "evidence_en": "\"Englewood\" is the community_area_name; 'Society' is the crime_against",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.community_area_name = 'Englewood' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.crime_against = 'Society'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the weekly average number of fraud incidents that were reported in January 2018? Provide the description of the location where the majority of fraud incidents occurred in the said month.",
        "question_ar": "",
        "evidence_en": "fraud incident refers to title = 'Fraud'; reported in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; description of location refers to location_description; weekly average refers to Divide (Count(report_no), 4); majority of incidents occurred refers to Max(Count(location_description))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.fbi_code_no) AS REAL) / 4 FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list any three community areas with a population of more than 50,000.",
        "question_ar": "",
        "evidence_en": "population of more than 50000 refers to Population > 50000; community area refers to community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What are the communities that are grouped together on the central side?",
        "question_ar": "",
        "evidence_en": "central side refers to side = 'Central'; community refers to community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT community_area_name FROM Community_Area WHERE side = 'Central'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the difference between the number of communities that are located on the north and south sides with a population of more than 30,000?",
        "question_ar": "",
        "evidence_en": "population of more than 30000 refers to Population > 30000; 'North' and 'South' both are the side; different number of community refers to Subtract(Count(Community_area_no where side = 'South'), Count(Community_area_no where side = 'North'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN side = 'South ' THEN 1 ELSE 0 END) - SUM(CASE WHEN side = 'North' THEN 1 ELSE 0 END) AS DIFF FROM Community_Area WHERE population > 300000"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list all of the contact information for the police district Near West.",
        "question_ar": "",
        "evidence_en": "\"Near West\" is the district_name; all contact information refers to phone, fax, tty, twitter",
        "evidence_ar": "",
        "SQL": "SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Who is responsible for crime cases in district Lincoln?",
        "question_ar": "",
        "evidence_en": "\"Lincoln\" is the district_name; responsible for crime case refers to commander",
        "evidence_ar": "",
        "SQL": "SELECT commander FROM District WHERE district_name = 'Lincoln'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the general and specific description of incident 275?",
        "question_ar": "",
        "evidence_en": "incident 275 refers to iucr_no = 275; general description refers to primary_description; specific description refers to secondary_description",
        "evidence_ar": "",
        "SQL": "SELECT primary_description, secondary_description FROM IUCR WHERE iucr_no = 275"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the percentage of severe cases that are related to sexual assault?",
        "question_ar": "",
        "evidence_en": "related to sexual assault refers to primary_description = 'CRIME SEXUAL ASSAULT'; severe case refers to index_code = 'I'; percentage = Divide (Count (iucr_no where primary_description = 'CRIME SEXUAL ASSAULT'), Count (iucr_no)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN primary_description = 'CRIM SEXUAL ASSAULT' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM IUCR WHERE index_code = 'I'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What are the neighborhoods that are located in the North Center community area?",
        "question_ar": "",
        "evidence_en": "\"North Center\" is the community_area_name; neighborhoods refers to neighborhood_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'North Center'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many neighborhoods can be found in the Forest Glen community area?",
        "question_ar": "",
        "evidence_en": "\"Forest Glen\" is the community_area_name; neighborhoods refers to neighborhood_name",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.community_area_name = 'Forest Glen' THEN 1 ELSE 0 END) FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the total population of the neighborhoods Avondale Gardens, Irving Park, Kilbourn Park, Merchant Park, Old Irving Park, and The Villa?",
        "question_ar": "",
        "evidence_en": "\"Avoladale Gardens\", \"Irving Park\", \"Kilbourn Park\", \"Merchant Park\", \"Old Irving Park\", \"The Villa\" are neighborhood_name; total population refers to Sum(Population)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.population) AS sum FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Avondale Gardens' OR T1.neighborhood_name = 'Irving Park' OR T1.neighborhood_name = 'Kilbourn Park' OR T1.neighborhood_name = 'Merchant Park' OR T1.neighborhood_name = 'Old Irving Park' OR T1.neighborhood_name = 'The Villa'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many crime cases have been classified as \"Weapons Violation\" by the FBI?",
        "question_ar": "",
        "evidence_en": "\"Weapons Violation\" is the title of crime; crime cases refers to report_no;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.title = 'Weapons Violation' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list any three criminal sexual assault cases against persons where the criminals have been arrested.",
        "question_ar": "",
        "evidence_en": "\"Criminal Sexual Assault\" is the title of crime; against person refers to crime_against = 'Persons'; criminals have been arrested refers to arrest = 'TRUE'; cases refers to case_number",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please state the district name where incident number JB106545 took place.",
        "question_ar": "",
        "evidence_en": "incident number JB106545 refers to case_number = 'JB106545'",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the general description for case number JB106010?",
        "question_ar": "",
        "evidence_en": "general description refers to primary_description",
        "evidence_ar": "",
        "SQL": "SELECT T1.primary_description FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please name three communities that experience the fraud incident.",
        "question_ar": "",
        "evidence_en": "communities refers to community_area_name; 'Fraud Incident' is the title of crime",
        "evidence_ar": "",
        "SQL": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What was the major type of crime that happened in the Rogers Park community area?",
        "question_ar": "",
        "evidence_en": "\"Rogers Park\" is the community_area_name; major type of crime refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "At which district did the multiple homicide case number JB120039 occurred?",
        "question_ar": "",
        "evidence_en": "multiple homicide refers to Count(case_number) > 1; district refers to district_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.district_no, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB120039' GROUP BY T1.district_no, T1.district_name"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the percentage of crime cases that have been classified as \"drug abuse\" by the FBI and happened on the street?",
        "question_ar": "",
        "evidence_en": "\"Drug Abuse\" is the title of crime; happened on the street refers to location_description = 'STREET';  percentage = Divide (Count(fbi_code_no where location_description = 'STREET'), Count(fbi_code_no)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.title = 'Drug Abuse' AND T1.location_description = 'STREET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.fbi_code_no) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Provide the ward number with the highest population.",
        "question_ar": "",
        "evidence_en": "highest population refers to Max(Population); ward number refers to ward_no",
        "evidence_ar": "",
        "SQL": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the beat and location description of the case JB112212?",
        "question_ar": "",
        "evidence_en": "case JB112212 refers to case_number = 'JB112212'",
        "evidence_ar": "",
        "SQL": "SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Give the FBI code for the crime described by \"The killing of one human being by another.\"",
        "question_ar": "",
        "evidence_en": "\"The killing of one human being by another\" is the description; FBI code refers to fbi_code_no",
        "evidence_ar": "",
        "SQL": "SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare.",
        "question_ar": "",
        "evidence_en": "\"Montclare\" is the community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.ward_office_address FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T1.community_area_name = 'Montclare' GROUP BY T3.ward_office_address LIMIT 5"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List down the district's commander associated with the crime that happened at the yard and has a beat of 532.",
        "question_ar": "",
        "evidence_en": "beat of 532 refers to beat = 532; happened in the Yard refers to location_description = 'YARD'; district commander refers to commander",
        "evidence_ar": "",
        "SQL": "SELECT T2.address, T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.location_description = 'YARD' AND T1.beat = 532"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the neighborhood name in the community area of Lake View?",
        "question_ar": "",
        "evidence_en": "\"Lake View\" is the community_area_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Lake View'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Name the neighborhood of the community area in crime with report number 23843?",
        "question_ar": "",
        "evidence_en": "neighborhood refers to neighborhood_name; '23778' is the report_no",
        "evidence_ar": "",
        "SQL": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the FBI description of the crime for report number 23778?",
        "question_ar": "",
        "evidence_en": "\"23778\" is the report_no; FBI description refers to description",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23843"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "List down the report number of crimes associated with the district commander named Jill M. Stevens.",
        "question_ar": "",
        "evidence_en": "report number refers report_no; 'Jill M. Stevens\" is the commander",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes happened in the neighborhood called \"Avalon Park\", what is the percentage of crimes that happened inside the house?",
        "question_ar": "",
        "evidence_en": "\"Avalon Park\" is the neghborhood_name; happened inside the house refers to location_description = 'HOUSE'; percentage = Divide (Count(location_description = 'HOUSE'), Count(location_description)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.location_description = 'HOUSE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.location_description) AS persent FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.neighborhood_name = 'Avalon Park'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the full name of the alderman of ward no.21?",
        "question_ar": "",
        "evidence_en": "full name of alderman refers to alderman_first_name, alderman_last_name, alderman_name_suffix",
        "evidence_ar": "",
        "SQL": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the ward ID of the most crowded ward?",
        "question_ar": "",
        "evidence_en": "most crowded ward refers to Max(Population)",
        "evidence_ar": "",
        "SQL": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many incidents have the general description of \"ASSAULT\" in the IUCR classification?",
        "question_ar": "",
        "evidence_en": "general description refers to primary_description; 'ASSAULT' is the primary_description; incidents refers to iucr_no",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "How many incidents are considered \"severe\" in the IUCR classification?",
        "question_ar": "",
        "evidence_en": "severe refers to index_code = 'I'; incidents refers to iucr_no",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM IUCR WHERE index_code = 'I'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes with no arrest made, how many of them happened in the ward represented by alderman Pat Dowell?",
        "question_ar": "",
        "evidence_en": "no arrest has been made refers to arrest = 'FALSE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Dowell' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.arrest = 'FALSE' AND T1.alderman_first_name = 'Pat'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which alderman represents the ward with the most number of crimes in January, 2018? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; ward with the most number of crime refers to Max (Count(ward_no)); full name refers to alderman_first_name, alderman_last_name, alderman_name_suffix",
        "evidence_ar": "",
        "SQL": "SELECT T1.ward_no, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.ward_no ORDER BY COUNT(T1.ward_no) DESC LIMIT 1"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the crimes in the ward with the most population, how many of them are cases of domestic violence?",
        "question_ar": "",
        "evidence_en": "most population refers to Max(Population); domestic violence refers to domestic = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' ORDER BY T1.Population = ( SELECT Population FROM Ward ORDER BY Population DESC LIMIT 1 )"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the location coordinates of all the incidents that had happened in the ward represented by alderman Pat Dowell.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to latitude, longitude",
        "evidence_ar": "",
        "SQL": "SELECT T2.latitude, T2.longitude FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell' AND T2.latitude IS NOT NULL AND T2.longitude IS NOT NULL"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "The ward represented by which alderman had more incidents in January, 2018, Pat Dowell or Sophia King?",
        "question_ar": "",
        "evidence_en": "January, 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; had more incidents refers to Max(Count(ward_no))",
        "evidence_ar": "",
        "SQL": "SELECT T1.alderman_first_name, T1.alderman_last_name, COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE (SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' AND T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell') OR (T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') GROUP BY T1.ward_no"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the case numbers of all the incidents with the generic description of \"BATTERY\" in the IUCR classification.",
        "question_ar": "",
        "evidence_en": "general description refers to primary_description; 'BATTERY' is the primary_description",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the incidents with the generic description of \"BATTERY\" in the IUCR classification, how many of them do not have arrests made?",
        "question_ar": "",
        "evidence_en": "general description refers to primary_description; 'BATTERY' is the primary_description; do not have arrest made refers to arrest = 'FALSE'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the case numbers of all the crimes whose short description of the kind of crime is \"Homicide 1st & 2nd Degree\" in the FBI classification.",
        "question_ar": "",
        "evidence_en": "\"Homicide 1st & 2nd Degree\" is the title",
        "evidence_ar": "",
        "SQL": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among the incidents in January, 2018, how many of them were stated \"against Property\" in the FBI classification?",
        "question_ar": "",
        "evidence_en": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; against property refers to crime_against = 'Property'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Property' AND SUBSTR(T2.date, 1, 1) = '1'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "District commander Robert A. Rubio was responsible for how many incidents in January, 2018?",
        "question_ar": "",
        "evidence_en": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio' AND SUBSTR(T2.date, 1, 1) = '1'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Which district commander was responsible for more incidents in January, 2018, Robert A. Rubio or Glenn White?",
        "question_ar": "",
        "evidence_en": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; 'Robert A. Rubio' and 'Glenn White' are both commander; responsible for more incident refers to Max(count(ward_no))",
        "evidence_ar": "",
        "SQL": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander IN ('Robert A. Rubio', 'Glenn White') AND SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.commander"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Please list the blocks where all the incidents in the district commanded by Robert A. Rubio took place.",
        "question_ar": "",
        "evidence_en": "\"Robert A. Rubio\" is the commander",
        "evidence_ar": "",
        "SQL": "SELECT T2.block FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio'"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "What is the average number of incidents per month in 2018 in the ward with the most population?",
        "question_ar": "",
        "evidence_en": "in 2018 refers to date like '%2018%'; ward with most population refers to Max(Population); average number of incident per month refers to Divide(Count(ward_no), 12)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ward_no) / 12 AS average FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' AND T1.Population = ( SELECT MAX(T1.Population) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' )"
    },
    {
        "db_id": "chicago_crime",
        "question_en": "Among all the incidents with no arrest made, what is the percentage of them having a generic description of \"BATTERY\" in the IUCR classification?",
        "question_ar": "",
        "evidence_en": "incident with no arrest made refers to arrest = 'FALSE'; general description refers to primary_description; \"BATTERY\" is the primary_description; percentage = Divide (Count(iucr_no where primary_description = 'BATTERY'), Count(iucr_no)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.primary_description = 'BATTERY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.arrest = 'FALSE'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many restaurants' owners are in California?",
        "question_ar": "",
        "evidence_en": "restaurants' owners in California refer to owner_state = 'CA';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many restaurants have met all requirements in the inspection?",
        "question_ar": "",
        "evidence_en": "met all requirements in the inspection refers to score = 100;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(score) FROM inspections WHERE score = 100"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the inspections carried out in 2016, how many of them are routine?",
        "question_ar": "",
        "evidence_en": "inspections carried out in 2016 refer to YEAR(date) = 2016; routine inspections refer to type = 'Routine - Unscheduled';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(`date`) FROM inspections WHERE STRFTIME('%Y', `date`) = '2016' AND type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Please list the names of all the restaurants that have met all requirements in one inspection.",
        "question_ar": "",
        "evidence_en": "met all requirements refers to inspections where score = 100;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the restaurants being inspected in 2016, how many of them are in San Francisco?",
        "question_ar": "",
        "evidence_en": "inspected in 2016 refers to YEAR(date) = 2016; San Francisco refers to city in ('San Francisco', 'SF' ,'S.F.', 'SAN FRANCISCO');",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What was the type of inspection Tiramisu Kitchen had on 2014/1/14?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14';",
        "evidence_ar": "",
        "SQL": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many low risk violations were found in the inspection on 2014/1/14 for Tiramisu Kitchen?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Please list the names of the restaurants that had a low risk violation in inspections in 2014.",
        "question_ar": "",
        "evidence_en": "inspection in 2014 refers to year(date) = 2014; low risk violations refer to risk_category = 'Low Risk';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2014' AND T1.risk_category = 'Low Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the description of the low risk violation of Tiramisu Kitchen on 2014/1/14?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Please list the descriptions of all the high risk violations of Tiramisu Kitchen.",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; high risk violations refer to risk_category = 'High Risk';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T2.name = 'Tiramisu Kitchen'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many routine inspections did Tiramisu Kitchen have?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Routine - Unscheduled' AND T2.name = 'Tiramisu Kitchen'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled'; score of over 70 refers to score > 70;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen and OMNI S.F. Hotel - 2nd Floor Pantry are names of the business; more low risk violations refer to MAX(COUNT(risk_category = 'Low Risk'));",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many high risk violations do the restaurants in San Francisco have in total?",
        "question_ar": "",
        "evidence_en": "restaurants in San Francisco refer to business_id where city in ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO'); high risk violations refer to risk_category = 'High Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') AND T1.risk_category = 'High Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which restaurant has the highest total number of high risk violations?",
        "question_ar": "",
        "evidence_en": "the highest total number of high risk violations refer to MAX(COUNT(risk_category = 'High Risk'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the average scores of Tiramisu Kitchen in all inspections?",
        "question_ar": "",
        "evidence_en": "avg(score);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which business had the most number of inspections? Give the Id number for that business.",
        "question_ar": "",
        "evidence_en": "the most number of inspections refers to MAX(COUNT(business_id)); Id number for that business refers to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Tell the Id number of the business with the most number of violations.",
        "question_ar": "",
        "evidence_en": "Id number for that business refers to business_id; the most number of violations refers to MAX(COUNT(business_id));",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Give the name of the business which met all the required standards during the unscheduled routine inspection on 2016/9/28.",
        "question_ar": "",
        "evidence_en": "met all the required standards refers to score = 100; unscheduled routine inspection on 2016/9/28 refers to type = 'Routine - Unscheduled' where date = '2016-09-28';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 AND T1.`date` = '2016-09-28' AND T1.type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which business had the most number of high risk violations? Give the name of the business.",
        "question_ar": "",
        "evidence_en": "the most number of high risk violations refers to MAX(COUNT(business_id)) where risk_category = 'High';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many kinds of violations did \"Stacks Restaurant\" have on 2016/10/4?",
        "question_ar": "",
        "evidence_en": "\"Stacks Restaurant\" is the name of the business; date = '2016-10-04';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.`date` = '2016-10-04'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Give the description of the moderate risk violation which \"Chez Fayala, Inc.\" had on 2016/7/1.",
        "question_ar": "",
        "evidence_en": "\"Chez Fayala, Inc.\" is the name of the business; moderate risk violation refers to risk_category = 'Moderate Risk'; date = '2016-07-01';",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Chez Fayala, Inc.' AND T1.`date` = '2016-07-01' AND T1.risk_category = 'Moderate Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which business had the lowest score for the unscheduled routine inspection on 2016/9/26? Give the name of the business.",
        "question_ar": "",
        "evidence_en": "the lowest score for unscheduled routine inspection refers to type = 'Routine - Unscheduled' where MIN(score); date = '2016-09-26';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE score = ( SELECT MIN(score) FROM inspections WHERE `date` = '2016-09-26' AND type = 'Routine - Unscheduled' ) AND T1.`date` = '2016-09-26' AND T1.type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Provide the name of the business which had the most number of inspections because of complaint.",
        "question_ar": "",
        "evidence_en": "the most number of inspections because of complaint refers to type = 'Complaint' where MAX(business_id);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Complaint' GROUP BY T2.name ORDER BY COUNT(T1.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many unscheduled routine inspections did \"Soma Restaurant And Bar\" have?",
        "question_ar": "",
        "evidence_en": "\"Soma Restaurant And Bar\" is the name of the business; unscheduled routine inspections refer to type = 'Routine - Unscheduled';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Give the address of the business with the most number of the low risk violations.",
        "question_ar": "",
        "evidence_en": "the most number of the low risk violations refers to MAX(COUNT(business_id)) where risk_category = 'Low Risk' ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which business was the first one to get a low risk violation because of \"Permit license or inspection report not posted\"? Give the name of the business.",
        "question_ar": "",
        "evidence_en": "low risk violation because of \"Permit license or inspection report not posted\" refers to risk_category = 'Low Risk' where description = 'Permit license or inspection report not posted'; business was the first one refers to name where MIN(date);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = ( SELECT MIN(`date`) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "For the business which got the most number of violations, how many inspections did it have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id GROUP BY T1.business_id ORDER BY COUNT(T1.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?",
        "question_ar": "",
        "evidence_en": "date = '2013-10-07';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_certificate = '304977' AND T1.`date` = '2013-10-07'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the average score for \"Chairman Bao\" in all its unscheduled routine inspections?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(score where type = 'Routine - Unscheduled' and name = 'Chairman Bao'), COUNT(type = 'Routine - Unscheduled' where name = 'Chairman Bao'));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What percentage of the violations for \"Melody Lounge\" are moderate risks?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(risk_category = 'Moderate Risk' where name = 'Melody Lounge'), COUNT(business_id where name = 'Melody Lounge')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.risk_category = 'Moderate Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM businesses AS T1 INNER JOIN violations AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'Melody Lounge'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many eateries are located in Hayward?",
        "question_ar": "",
        "evidence_en": "eateries in Hayward refer city = 'HAYWARD';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many establishments have an inspection score of no more than 50?",
        "question_ar": "",
        "evidence_en": "establishments have the same meaning as businesses; inspection score of no more than 50 refers to score < 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score < 50"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many eateries applied in 2012?",
        "question_ar": "",
        "evidence_en": "eateries applied in 2012 refer to business_id where application_date between '2012-01-01' and '2012-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM businesses WHERE STRFTIME('%Y', application_date) = '2012'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many foodborne illness investigations were done in 2014?",
        "question_ar": "",
        "evidence_en": "foodborne illness investigations refer to inspections where type = 'Foodborne Illness Investigation'; investigations in 2014 refers to date between '2014-01-01' and '2014-12-31';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM inspections WHERE STRFTIME('%Y', `date`) = '2014' AND type = 'Foodborne Illness Investigation'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many owners have 5 or more establishments?",
        "question_ar": "",
        "evidence_en": "5 or more establishments COUNT(business_id) > = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.owner_name) FROM ( SELECT owner_name FROM businesses GROUP BY owner_name HAVING COUNT(owner_name) > 5 ) T1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What are the names of the establishments that met all of the required standards in 2013?",
        "question_ar": "",
        "evidence_en": "establishments have the same meaning as businesses; met all of the required standards refers to score = 100; year(date) = 2013",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2013' AND T1.score = 100"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In 2016, which city has the highest number of establishments with the highest health and safety hazards?",
        "question_ar": "",
        "evidence_en": "the highest health and safety hazards refer to risk_category = 'High Risk'; year(date) = 2016; establishments has the same meaning as businesses;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the name of the establishment with the lowest inspection score of all time?",
        "question_ar": "",
        "evidence_en": "the lowest inspection score refers to MIN(score);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many high risks violations did the Tiramisu Kitchen violate?",
        "question_ar": "",
        "evidence_en": "Tiramisu Kitchen is the name of the business; high risks violations refer to risk_category = 'High Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'High Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many establishments with the tax code H24 have complaint inspections of 5 or more?",
        "question_ar": "",
        "evidence_en": "establishments with the tax code H24 refer to business_id where tax_code = 'H24'; complaint inspections of 5 or more refer to inspections where type = 'Complaint' and COUNT(business_id) ≥ 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In 2013, what are the names of the establishments with contaminated or adulterated food?",
        "question_ar": "",
        "evidence_en": "establishments have the same meaning as businesses; contaminated or adulterated food refers to violations where description = 'Contaminated or adulterated food'; date = '2013';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2013' AND T1.description = 'Contaminated or adulterated food'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015?",
        "question_ar": "",
        "evidence_en": "establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.`date`) = '2015' AND T2.postal_code = '94102' AND T3.score > 90"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What are the names of the establishments that met all the required standards for 4 consecutive years?",
        "question_ar": "",
        "evidence_en": "establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', `date`) AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Between 2014 to 2016, what is the average inpsection score of the establishment owned by Yiu Tim Chan in 808 Pacific Ave, San Francisco?",
        "question_ar": "",
        "evidence_en": "average inspection score refers to avg(score); establishment owned by Yiu Tim Chan refers to business_id where owner_name = 'Yiu Tim Chan'; Between 2014 to 2016 refers to year(date) between 2014 and 2016; address = '808 Pacific Ave'; city = 'San Francisco';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the average score of the establishments owned by the owner with the highest number of establishments?",
        "question_ar": "",
        "evidence_en": "average score refers avg(score); owner with the highest number of establishments refers to owner_name where MAX(COUNT(business_id));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T2.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the name of the establishment with the highest number of low risk violations in 2014?",
        "question_ar": "",
        "evidence_en": "establishment with the highest number of low risk violations refers to business_id where MAX(COUNT(risk_category = 'Low Risk')); year(date) = 2014;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2014' AND T1.risk_category = 'Low Risk' GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the top 5 owners with highest number of establishments, which owner has the highest number of high risk violations? Give the name of the owner.",
        "question_ar": "",
        "evidence_en": "5 owners with highest number of establishments refer to owner_name where MAX(COUNT(business_id)) LIMIT 5; the highest number of high risk violations refers to MAX(COUNT(risk_category = 'High Risk'));",
        "evidence_ar": "",
        "SQL": "SELECT T4.owner_name FROM violations AS T3 INNER JOIN businesses AS T4 ON T3.business_id = T4.business_id INNER JOIN ( SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T1.business_id) DESC LIMIT 5 ) AS T5 ON T4.owner_name = T5.owner_name WHERE T3.risk_category = 'High Risk' GROUP BY T4.owner_name ORDER BY COUNT(T3.risk_category) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Which establishment has the highest number of inspections done? Give the name of the establishment and calculate for its average score per inspection.",
        "question_ar": "",
        "evidence_en": "establishment refers to business_id; the highest number of inspections refers to MAX(COUNT(business_id)); avg(score);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many eateries got highest inspection in 2013?",
        "question_ar": "",
        "evidence_en": "eateries got highest inspection score in 2013 refer to business_id from inspections where score = 100 and year(date) = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE STRFTIME('%Y', `date`) = '2013' AND score = ( SELECT MAX(score) FROM inspections WHERE STRFTIME('%Y', `date`) = '2013' )"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List down the eateries' IDs with structural inspection type in February 2016.",
        "question_ar": "",
        "evidence_en": "eateries' IDs refer to business_id; structural inspection type refers to inspections WHERE type = 'Structural Inspection'; in February 2016 refers to year(date) = 2016 and month(date) = 2;",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND `date` LIKE '2016-02%'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many eateries had low risk for violation with unpermitted food facility description?",
        "question_ar": "",
        "evidence_en": "eateries represent business; low risk for violation refers to risk_category = 'Low Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Provide eateries' IDs, risk categories and descriptions with violation ID of 103101.",
        "question_ar": "",
        "evidence_en": "eateries' IDs refer to business_id; violation ID of 103101 refers to violation_type_id = '103101';",
        "evidence_ar": "",
        "SQL": "SELECT business_id, risk_category, description FROM violations WHERE violation_type_id = '103101'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "When did eateries from San Bruno city get highest score in inspection?",
        "question_ar": "",
        "evidence_en": "eateries represent business; highest score in inspection refers to score = 100;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`date` FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'SAN BRUNO' ORDER BY T1.score DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Describe the inspection types and violation descriptions under moderate risk category for ART's CAFÉ.",
        "question_ar": "",
        "evidence_en": "ART's CAFÉ is the name of the business; moderate risk category refers to risk_category = 'Moderate Risk';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.type, T1.description FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'ART''S CAFÉ' AND T1.risk_category = 'Moderate Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Mention the violation type ID and description of high risk category for STARBUCKS.",
        "question_ar": "",
        "evidence_en": "STARBUCKS is the name of the business; high risk category refers to risk_category = 'High Risk';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.violation_type_id, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'STARBUCKS' AND T1.risk_category = 'High Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the inspection dates, scores and inspection types for the eateries with tax code AA.",
        "question_ar": "",
        "evidence_en": "eateries with tax code AA refer to business_id where tax_code = 'AA';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`date`, T1.score, T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'AA'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Provide eateries' IDs, names and addresses which were inspected on 30th July, 2016.",
        "question_ar": "",
        "evidence_en": "eateries' IDs inspected on 30th July, 2016 refer to business_id where business_id is not null and date = '2016-07-30';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Describe the violation dates, risk categories, descriptions and names of the eateries under Jade Chocolates LLC.",
        "question_ar": "",
        "evidence_en": "eateries under Jade Chocolates LLC refer to business_id where owner_name = 'Jade Chocolates LLC';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`date`, T1.risk_category, T1.description, T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'Jade Chocolates LLC'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Provide the names, risk categories and descriptions for the eateries with violation type ID of 103111.",
        "question_ar": "",
        "evidence_en": "eateries refer to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.risk_category, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = '103111'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among violations on 3rd June, 2014, describe any 5 names, located cities and tax codes of the eateries with high risk category.",
        "question_ar": "",
        "evidence_en": "eateries with high risk category refer to business_id where risk_category = 'High Risk'; 3rd June, 2014 refers to date = '2014-06-03';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.`date` = '2014-06-03' LIMIT 5"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What was the inspection type when El Aji Peruvian Restaurant got highest inspection score?",
        "question_ar": "",
        "evidence_en": "El Aji Peruvian Restaurant is the name of the business; highest inspection score refers to MAX(score);",
        "evidence_ar": "",
        "SQL": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'El Aji Peruvian Restaurant' ORDER BY T1.score DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Who were the owners of eateries which had highest health hazard by improper cooking time or temperatures?",
        "question_ar": "",
        "evidence_en": "owners of eateries refer to owner_name; highest health hazard by improper cooking time or temperatures refers to risk_category = 'High Risk' and description = 'Improper cooking time or temperatures';",
        "evidence_ar": "",
        "SQL": "SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.description = 'Improper cooking time or temperatures'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the eateries' names and addresses which had reinspection on 2nd February, 2015.",
        "question_ar": "",
        "evidence_en": "eateries which had reinspection on 2nd February, 2015 refer to business_id where date = '2015-02-02' and type = 'Reinspection/Followup';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2015-02-02' AND T1.type = 'Reinspection/Followup'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the names and business certificates of the eateries which got inspection score under 50.",
        "question_ar": "",
        "evidence_en": "eateries which got inspection score under 50 refer to business_id where score < 50;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50"
    },
    {
        "db_id": "food_inspection",
        "question_en": "How many of the businesses are located at 1825 POST St #223, San Francisco?",
        "question_ar": "",
        "evidence_en": "1825 POST St #223 refers to address = '1825 POST St #223', San Francisco is the name of the city;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM businesses WHERE address = '1825 POST St #223' AND city = 'SAN FRANCISCO'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List down the owner's name with a zip code 94104.",
        "question_ar": "",
        "evidence_en": "zip code 94104 refers to owner_zip = '94104';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT owner_name FROM businesses WHERE owner_zip = '94104'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the total number of businesses with a tax code H25?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In the violations in 2014, how many of them have a low risk category?",
        "question_ar": "",
        "evidence_en": "in 2014 refers to year(date) = 2014; risk_category = 'Low Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(risk_category) FROM violations WHERE STRFTIME('%Y', `date`) = '2014' AND risk_category = 'Low Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Give the business ID and risk category of the business owned by San Francisco Madeleine, Inc.",
        "question_ar": "",
        "evidence_en": "business owned by San Francisco Madeleine, Inc. refers to business_id where owner_name = 'San Francisco Madeleine, Inc.';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.business_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'San Francisco Madeleine, Inc.'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List owner's name of businesses with a 100 score.",
        "question_ar": "",
        "evidence_en": "owner's name of businesses refers to owner_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the businesses within the postal code 94117, what is total number of businesses with a high risk category?",
        "question_ar": "",
        "evidence_en": "businesses with a high risk category refer to business_id where risk_category = 'High Risk';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.postal_code = 94117 AND T1.risk_category = 'High Risk'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the businesses with score that ranges from 70 to 80, list their violation type ID and risk category.",
        "question_ar": "",
        "evidence_en": "businesses with score that ranges from 70 to 80 refer to business_id where score between 80 and 90;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.violation_type_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE T3.score BETWEEN 70 AND 80"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the tax code and inspection type of the business named \"Rue Lepic\".",
        "question_ar": "",
        "evidence_en": "\"Rue Lepic\" is the name of the business;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.tax_code, T2.type FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'Rue Lepic'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In businesses that violates 103157 on May 27, 2016 , what is the name of the business that has an unscheduled inspection?",
        "question_ar": "",
        "evidence_en": "businesses that violates 103157 refer to business_id where violation_type_id = 103157; date = '2016-05-27'; unscheduled inspection refers to type = 'Routine - Unscheduled';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.`date` = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Who is the owner of the business that has a high risk violation of 103109 and described as unclean or unsanitary food contact surfaces?",
        "question_ar": "",
        "evidence_en": "owner refers to owner_name; high risk violation of 103109 and described as unclean or unsanitary food contact surfaces refers to risk_category = 'High Risk' where violation_type_id = 103109 and description = 'Unclean or unsanitary food contact surfaces';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.violation_type_id = 103109 AND T1.description = 'Unclean or unsanitary food contact surfaces'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the owners from Cameron Park, what is the business name of the business with a score of 100?",
        "question_ar": "",
        "evidence_en": "Cameron Park is a name of city;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_city = 'Cameron Park' AND T1.score = 100"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the violation type ID of business with business ID from 30 to 50 and located at 747 IRVING St, San Francisco.",
        "question_ar": "",
        "evidence_en": "business ID from 30 to 50 refers to business_id between 30 and 50; address = '747 IRVING St'; city = 'San Francisco';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.violation_type_id FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_id BETWEEN 30 AND 50 AND T2.address = '747 IRVING St' AND T2.city = 'San Francisco'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "What is the owner's name of the of the business that violates 103156 on June 12, 2014?",
        "question_ar": "",
        "evidence_en": "business that violates 103156 on June 12, 2014 refers to business_id where violation_type_id = 103156 and date = '2014-06-12';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = 103156 AND T1.`date` = '2014-06-12'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In businesses with an owner address 500 California St, 2nd Floor of Silicon Valley, list the type of inspection of the business with the highest score.",
        "question_ar": "",
        "evidence_en": "the highest score MAX(score); Silicon Valley is located in 'SAN FRANCISCO';",
        "evidence_ar": "",
        "SQL": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_address = '500 California St, 2nd Floor' AND T2.owner_city = 'SAN FRANCISCO' ORDER BY T1.score DESC LIMIT 1"
    },
    {
        "db_id": "food_inspection",
        "question_en": "Among the violations in 2016, how many of them have unscheduled inspections?",
        "question_ar": "",
        "evidence_en": "unscheduled inspections refer to type = 'Routine - Unschedule'; year(date) = 2016;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2016' AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "db_id": "food_inspection",
        "question_en": "List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses.",
        "question_ar": "",
        "evidence_en": "score greater than the 80% of average score of all businesses refers to score > MULTIPLY(0.8, avg(score) from inspections);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name, T3.risk_category FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN violations AS T3 ON T1.business_id = T3.business_id WHERE T2.score > 0.8 * ( SELECT AVG(score) FROM inspections )"
    },
    {
        "db_id": "food_inspection",
        "question_en": "In businesses with a score lower than 95 and located around the postal code of 94110, what is the percentage of businesses with a risk category of low risk?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(business_id where risk_category = 'Low Risk', score < 95 and postal_code = 94110), COUNT(business_id where score < 95 and postal_code = 94110)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110"
    },
    {
        "db_id": "craftbeer",
        "question_en": "Which distinct state makes beer that has the least amount of bitterness?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )"
    },
    {
        "db_id": "craftbeer",
        "question_en": "Where in New York can you locate the brewery that makes the bitterest beer? List both the brewery's name and the name of the city.",
        "question_ar": "",
        "evidence_en": "The more IBU, the more bitter the beer is, bitterest means highest IBU.",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T2.city FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.state = 'NY' ORDER BY T1.ibu DESC LIMIT 1"
    },
    {
        "db_id": "craftbeer",
        "question_en": "What is the average alcohol content per 12-ounce beer bottle produced by Boston Beer Company?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.abv) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Boston Beer Company' AND T1.ounces = 12"
    },
    {
        "db_id": "craftbeer",
        "question_en": "Of all the beer styles produced by Stevens Point Brewery, how many percent do they allot for American Adjunct Lager?",
        "question_ar": "",
        "evidence_en": "Percent allotted = count(American Adjunct Lager beer styles) / count(styles) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.style = 'American Adjunct Lager', 1, 0)) AS REAL) * 100 / COUNT(T1.brewery_id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Stevens Point Brewery'"
    },
    {
        "db_id": "craftbeer",
        "question_en": "Which city and state produces the most and least bitter beer, and what is the difference in bitterness between the two? List also the names of the beer.",
        "question_ar": "",
        "evidence_en": "The more IBU, the more bitter the beer is, most bitter means highest IBU; The less IBU, the less bitter the beer is, least bitter means lowest IBU",
        "evidence_ar": "",
        "SQL": "SELECT T1.state, T1.city, T2.name, T2.ibu FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id GROUP BY T1.state, T1.city, T2.name, T2.ibu HAVING MAX(ibu) AND MIN(ibu) LIMIT 2"
    },
    {
        "db_id": "craftbeer",
        "question_en": "When compared to the total number of breweries in the US producing American Blonde Ale, how many in the state of Wisconsin produces American Blonde Ale? Indicate your answer in percentage (%).",
        "question_ar": "",
        "evidence_en": "Percentage of the state of Wisconsin produces American Blonde Ale could be computed by count(breweries in Wisconsin producing American Blonde Ale) / count(all breweries)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.state = 'WI', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.style = 'American Blonde Ale'"
    },
    {
        "db_id": "cookbook",
        "question_en": "What is the title of the recipe that is most likely to gain weight?",
        "question_ar": "",
        "evidence_en": "most likely to gain weight refers to MAX(total_fat)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "What is the unsaturated fat content in the recipe \"Raspberry Chiffon Pie\"?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers to title; unsaturated fat refers to SUBTRACT(total_fat, sat_fat)",
        "evidence_ar": "",
        "SQL": "SELECT T2.total_fat - T2.sat_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Please list the titles of all the recipes that are salt/sodium-free.",
        "question_ar": "",
        "evidence_en": "salt/sodium-free refers to sodium < 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.sodium < 5"
    },
    {
        "db_id": "cookbook",
        "question_en": "Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain.",
        "question_ar": "",
        "evidence_en": "may lead to constipation, feeling sick or stomach pain refers to iron > 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipe is more beneficial in wound healing, \"Raspberry Chiffon Pie\" or \"Fresh Apricot Bavarian\"?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie and Fresh Apricot Bavarian are title; vitamin_c is higher refers to MAX(vitamin_c)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN CASE WHEN T2.title = 'Raspberry Chiffon Pie' THEN T1.vitamin_c END > CASE WHEN T2.title = 'Fresh Apricot Bavarian' THEN T1.vitamin_c END THEN 'Raspberry Chiffon Pie' ELSE 'Fresh Apricot Bavarian' END AS \"vitamin_c is higher\" FROM Nutrition T1 INNER JOIN Recipe T2 ON T2.recipe_id = T1.recipe_id"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories?",
        "question_ar": "",
        "evidence_en": "more than 10 minutes to prepare refers to prep_min > 10; the most calories refers to MAX(calories)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.prep_min > 10 ORDER BY T2.calories DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many calories does the recipe \"Raspberry Chiffon Pie\" contain?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Is the ingredient \"graham cracker crumbs\" optional in the recipe \"Raspberry Chiffon Pie\"?",
        "question_ar": "",
        "evidence_en": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.optional FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many ingredients must be rationed in the recipe \"Raspberry Chiffon Pie\"?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers to title; ingredient must be rationed refers to max_qty = min_qty",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.max_qty = T2.min_qty"
    },
    {
        "db_id": "cookbook",
        "question_en": "Please list the names of all the ingredients needed for the recipe \"Raspberry Chiffon Pie\" that do not need preprocessing.",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers to title; do not need preprocessing refers to preparation IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.preparation IS NULL"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many recipes include the ingredient \"graham cracker crumbs\"?",
        "question_ar": "",
        "evidence_en": "'graham cracker crumbs' is a name of an ingredient",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'graham cracker crumbs'"
    },
    {
        "db_id": "cookbook",
        "question_en": "At least how many cups of graham cracker crumbs does the recipe \"Raspberry Chiffon Pie\" need?",
        "question_ar": "",
        "evidence_en": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.min_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many calories from fat are there in the recipe \"Raspberry Chiffon Pie\"?",
        "question_ar": "",
        "evidence_en": "calories from fat refers to MULTIPLY(calories, pcnt_cal_fat)||'%; Raspberry Chiffon Pie refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.calories * T2.pcnt_cal_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many calories on average does a recipe that comes from \"Produce for Better Health Foundation and 5 a Day\" contain?",
        "question_ar": "",
        "evidence_en": "Produce for Better Health Foundation and 5 a Day is a source of recipe; calculation = DIVIDE(SUM(calories), COUNT(recipe_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many calories does the turkey tenderloin bundles recipe have?",
        "question_ar": "",
        "evidence_en": "turkey tenderloin refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Turkey Tenderloin Bundles'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many cups of 1% lowfat milk should be added to no.1436 recipe?",
        "question_ar": "",
        "evidence_en": "1% lowfat milk is a name of an ingredient; no.1436 recipe refers to recipe_id = 1436; max_qty = min_qty",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = '1% lowfat milk' AND T2.unit = 'cup(s)' AND T2.recipe_id = 1436"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipe in the database contains the most total fat? Give its title.",
        "question_ar": "",
        "evidence_en": "the most total fat refers to MAX(total_fat)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many times do seedless red grapes appear in the recipes?",
        "question_ar": "",
        "evidence_en": "seedless red grapes is a name of an ingredient",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'seedless red grapes'"
    },
    {
        "db_id": "cookbook",
        "question_en": "State the name of the optional ingredient of no.1397 recipe.",
        "question_ar": "",
        "evidence_en": "no.1397 recipe refers to recipe_id = 1397; optional ingredient refers to optional = 'TRUE'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.recipe_id = 1397 AND T2.optional = 'TRUE'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipe needs the most frozen raspberries in light syrup? State its title.",
        "question_ar": "",
        "evidence_en": "frozen raspberries in light syrup is a name of an ingredient; max_qty = min_qty",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty"
    },
    {
        "db_id": "cookbook",
        "question_en": "Give the name of the most widely used ingredient.",
        "question_ar": "",
        "evidence_en": "the most widely used ingredient refers to MAX(COUNT(ingredient_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?",
        "question_ar": "",
        "evidence_en": "apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many cups of almonds do you need for a chicken pocket sandwich?",
        "question_ar": "",
        "evidence_en": "cups is a unit; almonds is a name of an ingredient; chicken pocket sandwich refers to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Name the recipe with the most Vitamin C.",
        "question_ar": "",
        "evidence_en": "the most Vitamin C refers to MAX(vitamin_c)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How much Vitamin A is in Sherry beef?",
        "question_ar": "",
        "evidence_en": "Sherry beef refers to title = 'Sherried Beef'",
        "evidence_ar": "",
        "SQL": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'"
    },
    {
        "db_id": "cookbook",
        "question_en": "State the title of the recipe with most kinds of ingredients.",
        "question_ar": "",
        "evidence_en": "the most kinds of ingredients refers to MAX(COUNT(recipe_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T1.title ORDER BY COUNT(title) DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets?",
        "question_ar": "",
        "evidence_en": "sodium is a name of an ingredient; calculation = DIVIDE(SUM(title = 'Lasagne-Spinach Spirals' THEN sodium), SUM(title = 'Beef and Spinach Pita Pockets' THEN sodium))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.title = 'Lasagne-Spinach Spirals' THEN T2.sodium ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.title = 'Beef and Spinach Pita Pockets' THEN T2.sodium ELSE 0 END) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id"
    },
    {
        "db_id": "cookbook",
        "question_en": "What is the average calorie count for all recipes using coarsely ground black pepper?",
        "question_ar": "",
        "evidence_en": "coarsely ground black pepper is a name of an ingredient; calculation = AVG(calories)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.calories) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.name = 'coarsely ground black pepper'"
    },
    {
        "db_id": "cookbook",
        "question_en": "What are the names of the recipes that will cause stomach pain?",
        "question_ar": "",
        "evidence_en": "cause stomach pain refers to iron > 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many ingredients are there in Apricot Yogurt Parfaits?",
        "question_ar": "",
        "evidence_en": "Apricot Yogurt Parfaits refers to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Apricot Yogurt Parfaits'"
    },
    {
        "db_id": "cookbook",
        "question_en": "What are the names of the ingredients that need to be cook in beef broth?",
        "question_ar": "",
        "evidence_en": "'cook in beef broth' refers to a preparation",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.preparation = 'cooked in beef broth'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection?",
        "question_ar": "",
        "evidence_en": "best in helping your body's natural defence against illness and infection refers to MAX(vitamin_a);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Nutrition AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.vitamin_a > 0"
    },
    {
        "db_id": "cookbook",
        "question_en": "What are the names of the top 5 recipes that are best for wound healing?",
        "question_ar": "",
        "evidence_en": "names of the recipes refers to title; best for wound healing refers to MAX(vitamin_c)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which ingredient appeared the least in recipes?",
        "question_ar": "",
        "evidence_en": "ingredient appeared the least in recipes refers to MIN(ingredient_id)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) ASC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many baking product ingredients are there in the No-Bake Chocolate Cheesecake?",
        "question_ar": "",
        "evidence_en": "baking product is a category; No-Bake Chocolate Cheesecake refers to title;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'baking products' AND T1.title = 'No-Bake Chocolate Cheesecake'"
    },
    {
        "db_id": "cookbook",
        "question_en": "List all the ingredients for Strawberry Sorbet.",
        "question_ar": "",
        "evidence_en": "Strawberry Sorbet refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Strawberry Sorbet'"
    },
    {
        "db_id": "cookbook",
        "question_en": "What are the optional ingredients for Warm Chinese Chicken Salad?",
        "question_ar": "",
        "evidence_en": "optional refers to optional = 'TRUE'; Warm Chinese Chicken Salad refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Warm Chinese Chicken Salad' AND T2.optional = 'TRUE'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among the recipes with alcohol content over 10, which recipe takes the longest to prepare?",
        "question_ar": "",
        "evidence_en": "with alcohol content over 10 refers to alcohol > 10; takes the longest to prepare refers to MAX(prep_min)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol > 10 ORDER BY T1.prep_min DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many servings does the recipe with the highest unsaturated fat have?",
        "question_ar": "",
        "evidence_en": "with the highest unsaturated fat refers MAX(SUBTRACT(total_fat, sat_fat))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.title) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among the recipes whose source is the National Potato Board, which recipe has the highest calories?",
        "question_ar": "",
        "evidence_en": "the National Potato Board is a source; the highest calories refers to MAX(calories)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'National Potato Board' ORDER BY T2.calories DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipe has the highest number of ingredients? Calculate the said recipe's total time of cooking.",
        "question_ar": "",
        "evidence_en": "the highest number of ingredients refers to MAX(ingredient_id); total time refers to recipe_id, total time of cooking refers to TOTAL(prep_min, cook_min, stnd_min)",
        "evidence_ar": "",
        "SQL": "SELECT T2.recipe_id, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T2.recipe_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which ingredient appeared the most in recipes? Calculate its amount of appearance in percentage.",
        "question_ar": "",
        "evidence_en": "ingredient appeared the most in recipes refers to MAX(COUNT(ingredient_id)); calculation = MULTIPLY(DIVIDE(COUNT(MAX(ingredient_id)), COUNT(ingredient_id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, CAST(COUNT(T2.ingredient_id) AS FLOAT) * 100 / ( SELECT COUNT(T2.ingredient_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id ) AS \"percentage\" FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Provide the title and total time of the recipe which has the highest possibility of gaining weight.",
        "question_ar": "",
        "evidence_en": "the highest possibility of gaining weight refers to MAX(total_fat); total time refers to recipe_id, total time refers to TOTAL(prep_min, cook_min, stnd_min)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipes contain almond extract?",
        "question_ar": "",
        "evidence_en": "almond extract is a name of an ingredient",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'almond extract'"
    },
    {
        "db_id": "cookbook",
        "question_en": "List the ingredients in Tomato-Cucumber Relish.",
        "question_ar": "",
        "evidence_en": "Tomato-Cucumber Relish refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Tomato-Cucumber Relish'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many ingredients are needed to prepare Idaho Potato Supreme?",
        "question_ar": "",
        "evidence_en": "Idaho Potato Supreme refers to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Idaho Potato Supreme'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Provide the ingredients that are rationed in the recipe with the highest carbohydrate content.",
        "question_ar": "",
        "evidence_en": "the highest carbohydrate content refers to MAX(carbo)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T2.max_qty = T2.min_qty ORDER BY T3.carbo DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Name the recipes which can lead to constipation.",
        "question_ar": "",
        "evidence_en": "can lead to constipation refers to iron > 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "db_id": "cookbook",
        "question_en": "Describe the ingredients in the recipe with the highest vitamin that helps vision in dim light.",
        "question_ar": "",
        "evidence_en": "the highest vitamin that helps vision in dim light refers to MAX(vitamin_a)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Provide the ingredients and maximum quantities of the recipe which can serve 7 people.",
        "question_ar": "",
        "evidence_en": "can serve 7 people refers to servings = 7",
        "evidence_ar": "",
        "SQL": "SELECT T3.name, T2.max_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.servings = 7"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among the recipes from The California Tree Fruit Agreement, calculate the percentage of sodium-free recipes.",
        "question_ar": "",
        "evidence_en": "The California Tree Fruit Agreement is a source; calculation = MULTIPLY(DIVIDE(COUNT(sodium BETWEEN 0 AND 5 THEN recipe_id), COUNT(recipe_id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.sodium < 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'The California Tree Fruit Agreement'"
    },
    {
        "db_id": "cookbook",
        "question_en": "List the ingredients which measure in slices.",
        "question_ar": "",
        "evidence_en": "slices refers to unit = 'slice(s)'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.unit = 'slice(s)'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many recipes can be made with canned dairy?",
        "question_ar": "",
        "evidence_en": "canned dairy is a category",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.category = 'canned dairy'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Provide the title and total time of the recipe which can be made with only lima beans.",
        "question_ar": "",
        "evidence_en": "total time refers to total time refers to TOTAL(prep_min, cook_min, stnd_min); lima beans is a name of an ingredient",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'lima beans'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among the recipes with sea bass, how many percent of recipes can serve 10 people and above?",
        "question_ar": "",
        "evidence_en": "sea bass is a name of an ingredient; can serve 10 people and above refers to servings > = 10; calculation = MULTIPLY(DIVIDE(COUNT(servings > = 10 THEN recipe_id)), COUNT(recipe_id), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.servings >= 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'sea bass steak'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How much fat does the Raspberry Chiffon Pie have?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T2.total_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "What is the percentage calories protein of Raspberry Chiffon Pie?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refers title; percentage calories protein refers to pcnt_cal_prot",
        "evidence_ar": "",
        "SQL": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many ingredients are required to make the Raspberry Chiffon Pie?",
        "question_ar": "",
        "evidence_en": "Raspberry Chiffon Pie refer to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "db_id": "cookbook",
        "question_en": "List the names of alcohol free recipes.",
        "question_ar": "",
        "evidence_en": "alcohol free refers to alcohol = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol = 0"
    },
    {
        "db_id": "cookbook",
        "question_en": "What is the average vitamin C amount of all cakes?",
        "question_ar": "",
        "evidence_en": "average vitamin C refers to AVG(vitamin_c); all cakes refers to title LIKE '%cake%'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.vitamin_c) FROM Nutrition AS T1 INNER JOIN Recipe AS T2 ON T2.recipe_id = T1.recipe_id WHERE T2.title LIKE '%cake%'"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many dairy recipes can serve more than 10 people?",
        "question_ar": "",
        "evidence_en": "dairy recipes refers to category = 'dairy'; serve more than 10 people refers to servings > 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'dairy' AND T1.servings > 10"
    },
    {
        "db_id": "cookbook",
        "question_en": "List the names of recipes that can lead to constipation.",
        "question_ar": "",
        "evidence_en": "lead to constipation refers to iron > 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "db_id": "cookbook",
        "question_en": "Which recipe has the highest calories?",
        "question_ar": "",
        "evidence_en": "the highest calories refers to MAX(calories)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.calories DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "How many recipes are non-dairy?",
        "question_ar": "",
        "evidence_en": "non-dairy refers to category NOT LIKE '%dairy\"",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.recipe_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.category NOT LIKE '%dairy%'"
    },
    {
        "db_id": "cookbook",
        "question_en": "List all the ingredients of Apricot Yogurt Parfaits.",
        "question_ar": "",
        "evidence_en": "Apricot Yogurt Parfaits refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.name, T3.category FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Apricot Yogurt Parfaits'"
    },
    {
        "db_id": "cookbook",
        "question_en": "Identify recipes with different maximum and minimum quantities.",
        "question_ar": "",
        "evidence_en": "maximum quantities refers to max_qty; minimum quantities refers to max_qty <> min_qty",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.max_qty <> T2.min_qty"
    },
    {
        "db_id": "cookbook",
        "question_en": "What ingredients does the longest cooking time recipe have?",
        "question_ar": "",
        "evidence_en": "the longest cooking time refers to MAX(cook_min)",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1"
    },
    {
        "db_id": "cookbook",
        "question_en": "Calculate the percentage of recipes with no cholesterol included and have a cooking time less than 20 minutes among all recipes.",
        "question_ar": "",
        "evidence_en": "no cholesterol refers to cholestrl = 0; cooking time less than 20 minutes refers to cook_min < 20; calculation = MULTIPLY(DIVIDE(COUNT(cholestrl = 0 THEN recipe_id), COUNT(recipe_id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id"
    },
    {
        "db_id": "cookbook",
        "question_en": "Among all recipes containing cheese, what is the percentage of recipes with calories greater than 200?",
        "question_ar": "",
        "evidence_en": "cheese is a category; calories greater than 200 refers to calories > 200; calculation = MULTIPLY(DIVIDE(COUNT(calories > 200 THEN recipe_id), COUNT(recipe_id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which employee has the highest salary? Please give his or her full name.",
        "question_ar": "",
        "evidence_en": "the highest salary refers to MAX(salary); full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many emplyees have a good job performance?",
        "question_ar": "",
        "evidence_en": "good job performance refers to performance = 'Good'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee WHERE performance = 'Good'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Please list the social security numbers of the male employees with a salary of over $70,000 a year.",
        "question_ar": "",
        "evidence_en": "social security numbers refers to ssn; male employees refers to gender = 'M'; salary of over $70,000 a year refers to salary > '70000'",
        "evidence_ar": "",
        "SQL": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the required education for the position of regional manager?",
        "question_ar": "",
        "evidence_en": "required education refers to educationrequired; position of regional manager refers to  positiontitle = 'Regional Manager'",
        "evidence_ar": "",
        "SQL": "SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which position has a lower minimum salary, Account Representative or Trainee?",
        "question_ar": "",
        "evidence_en": "position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)",
        "evidence_ar": "",
        "SQL": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "In which city's office does Sandy Adams work at?",
        "question_ar": "",
        "evidence_en": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; city refers to locationcity",
        "evidence_ar": "",
        "SQL": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Among the employees working at the office in New York, how many of them have a good job performance?",
        "question_ar": "",
        "evidence_en": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; New York refers to state = 'NY'; good job performance refers to performance = 'Good';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the office phone number of the location at which Sandy Adams works?",
        "question_ar": "",
        "evidence_en": "Sandy Adams is the fullname of an employee; full name = firstname, lastname;",
        "evidence_ar": "",
        "SQL": "SELECT T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many male employees work at the address 450 Peachtree Rd?",
        "question_ar": "",
        "evidence_en": "male employees refers to gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many employees work as an Account Representative?",
        "question_ar": "",
        "evidence_en": "work as an Account Representative refers to positiontitle = 'Account Representative'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Account Representative'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How much higher is James Johnson's salary from the minimum salary of his title?",
        "question_ar": "",
        "evidence_en": "James Johnson is the fullname of an employee; full name = firstname, lastname; minimum salary refers to minsalary; calculation = SUBTRACT(salary, minsalary)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS diff FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Among the employees who are Trainees, how many of them work in New York?",
        "question_ar": "",
        "evidence_en": "Trainees is a position title; California refers to state = 'NY'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Trainee' AND T2.state = 'NY'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Please list the full names of the employees who are working as a Trainee.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; trainees is a position title",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?",
        "question_ar": "",
        "evidence_en": "Jose Rodriguez AND Sandy Adams are the fullname of employee; full name = firstname, lastname; higher education level refers to MAX(educationrequired)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "Please list the zip codes of the offices where all the male employees with a good job performance work at.",
        "question_ar": "",
        "evidence_en": "male employees refers to gender = 'M'; good job performance refers to performance = 'Good'",
        "evidence_ar": "",
        "SQL": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Please list the social security numbers of all the employees who work in California.",
        "question_ar": "",
        "evidence_en": "social security numbers refers to ssn; California refers to state = 'CA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'CA'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?",
        "question_ar": "",
        "evidence_en": "Trainee is a position title; salary of over 20,000 refers to salary > '20000'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the average salary of the employees who work as a Trainee?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE( SUM(salary), COUNT(positiontitle) where positiontitle = 'Trainee'; Trainee is a position title",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'"
    },
    {
        "db_id": "human_resources",
        "question_en": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?",
        "question_ar": "",
        "evidence_en": "AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100",
        "evidence_ar": "",
        "SQL": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Give the number of female employees.",
        "question_ar": "",
        "evidence_en": "number of female employees means COUNT(gender = 'F')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee WHERE gender = 'F'"
    },
    {
        "db_id": "human_resources",
        "question_en": "State the name of the city where Jose Rodriguez works.",
        "question_ar": "",
        "evidence_en": "Jose Rodriguez is the fullname of an employee; full name = firstname, lastname; name of city refers to locationcity",
        "evidence_ar": "",
        "SQL": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'"
    },
    {
        "db_id": "human_resources",
        "question_en": "In which state does Emily Wood work?",
        "question_ar": "",
        "evidence_en": "Emily Wood is the full name of an employee; full name = firstname, lastname;",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the education required for David Whitehead to reach his current position?",
        "question_ar": "",
        "evidence_en": "David Whitehead is the full name of an employee; full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT T2.educationrequired FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many employees are there in the \"Miami\" office?",
        "question_ar": "",
        "evidence_en": "Miami office refers to locationcity = 'Miami'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Who is the highest paid employee in \"Boston\"? Give the full name.",
        "question_ar": "",
        "evidence_en": "Boston refers to locationcity = 'Boston'; the highest paid employee refers to MAX(salary); full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Boston' ORDER BY T1.salary DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "Who is the employee in “New York City” with a good performance? Give the social security number of the employee.",
        "question_ar": "",
        "evidence_en": "New York City refers to locationcity = 'New York City'; good performance refers to performance = 'Good'; social security number refers to ssn",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many \"account representatives\" are there in Chicago with a good performance?",
        "question_ar": "",
        "evidence_en": "account representatives is a position title; Chicago refers to locationcity = 'Chicago'; good performance refers to performance = 'Good'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T2.locationcity = 'Chicago' AND T1.performance = 'Good'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is Kenneth Charles's position title?",
        "question_ar": "",
        "evidence_en": "Kenneth Charles is the full name of an employee; full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Give the full address of the office of the highest paid manager.",
        "question_ar": "",
        "evidence_en": "the highest paid refers to MAX(salary); manager is a position title",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' ORDER BY T1.salary DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?",
        "question_ar": "",
        "evidence_en": "Tracy Coulter is the full name of an employee; full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT T2.maxsalary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Tracy' AND T1.lastname = 'Coulter'"
    },
    {
        "db_id": "human_resources",
        "question_en": "If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?",
        "question_ar": "",
        "evidence_en": "Jose Rodriguez is the full name of an employee; full name = firstname, lastname; calculation = DIVIDE(SUBTRACT(maxsalary, salary), salary) * 100",
        "evidence_ar": "",
        "SQL": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many employees whose performance is poor have a salary of over $50,000 per year?",
        "question_ar": "",
        "evidence_en": "performance is poor refers to performance = 'Poor'; salary of over $50,000 refers to salary > '50000'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 50000"
    },
    {
        "db_id": "human_resources",
        "question_en": "Who is the employee with the highest salary? Specify his/her full name.",
        "question_ar": "",
        "evidence_en": "the highest salary refers to MAX(salary); full name = firstname, lastname",
        "evidence_ar": "",
        "SQL": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many positions have a maximum salary of no more than US$1000,000?",
        "question_ar": "",
        "evidence_en": "maximum salary of no more than US$1000,000 refers to maxsalary < '100000';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000"
    },
    {
        "db_id": "human_resources",
        "question_en": "How much is the salary of the first ever employee that was hired?",
        "question_ar": "",
        "evidence_en": "first-ever employee that was hired refers to MIN(hiredate)",
        "evidence_ar": "",
        "SQL": "SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "How much is the minimum salary given to the position with the most complex work?",
        "question_ar": "",
        "evidence_en": "most complex work refers to MAX(educationrequired); minimum salary refers to minsalary",
        "evidence_ar": "",
        "SQL": "SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the full office location address where most of the employees work at?",
        "question_ar": "",
        "evidence_en": "full office location address = address, locationcity, state, zipcode; location where most employees work at refers to MAX(locationID)",
        "evidence_ar": "",
        "SQL": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the average salary of all employees with a 2 year degree position?",
        "question_ar": "",
        "evidence_en": "2 year degree refers to educationrequired = '2 year degree'; calculation = DIVIDE(SUM(salary), COUNT(positiontitle))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many male Regional Managers are there?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; Regional Managers is a position title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which position has the highest amount of poor performing employees?",
        "question_ar": "",
        "evidence_en": "poor performing employees refers to performance = 'Poor'; the highest amount of employees refers to MAX(positiontitle)",
        "evidence_ar": "",
        "SQL": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which position has the highest number of female employees with a 2 year degree?",
        "question_ar": "",
        "evidence_en": "2 year degree refers to educationrequired = '2 year degree'; female refers to gender = 'F'; the highest number of employees refers to MAX(positionID)",
        "evidence_ar": "",
        "SQL": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "How many Account Representatives are there in Illinois with satisfying performance?",
        "question_ar": "",
        "evidence_en": "Account Representatives is a position title; satisfying performance mostly refers togood performance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' AND T2.state = 'IL'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the average salary of the worst performing managers?",
        "question_ar": "",
        "evidence_en": "the worst performing refers to performance = 'Poor'; manager is a positiontitle; average salary refers to AVG(salary)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Manager'"
    },
    {
        "db_id": "human_resources",
        "question_en": "In which state can you find the highest amount of good performing Account Representatives?",
        "question_ar": "",
        "evidence_en": "good performing refers to performance = 'Good'; Account Representatives is a positiontitle; highest amount of employee refers to MAX(positionID);",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "Mention the employee's full name and performance status who got the lowest in salary per year.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; the lowest salary refers to MIN(salary)",
        "evidence_ar": "",
        "SQL": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1"
    },
    {
        "db_id": "human_resources",
        "question_en": "List the location cities in the Western states.",
        "question_ar": "",
        "evidence_en": "Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity",
        "evidence_ar": "",
        "SQL": "SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA')"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which city and address has zip code of above 90000?",
        "question_ar": "",
        "evidence_en": "zip code of above 90000 refers to zipcode > 90000; city refers to locationcity",
        "evidence_ar": "",
        "SQL": "SELECT locationcity, address FROM location WHERE zipcode > 90000"
    },
    {
        "db_id": "human_resources",
        "question_en": "Which positions are suitable with 4 years degree education?",
        "question_ar": "",
        "evidence_en": "4 years degree education refers to educationrequired = '4 year degree'; positions refers to positiontitle",
        "evidence_ar": "",
        "SQL": "SELECT positiontitle FROM position WHERE educationrequired = '4 year degree'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the maximum salary of position \"Trainer\"?",
        "question_ar": "",
        "evidence_en": "maximum salary refers to maxsalary; Trainee is a positiontitle",
        "evidence_ar": "",
        "SQL": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainee'"
    },
    {
        "db_id": "human_resources",
        "question_en": "List the full name and social security number of the account representative with average performance.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; social security number refers to ssn; account representative is a position title; average performance refers to performance = 'Average'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Average'"
    },
    {
        "db_id": "human_resources",
        "question_en": "When was Emily Wood hired? Mention her position and salary.",
        "question_ar": "",
        "evidence_en": "Emily Wood is the full name of an employee; full name = firstname, lastname; when was she hired refers to hiredate",
        "evidence_ar": "",
        "SQL": "SELECT T1.hiredate, T2.positiontitle, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What are the maximum and minimum salary range and position title of Bill Marlin?",
        "question_ar": "",
        "evidence_en": "Bill Marlin is the full name of an employee; full name = firstname, lastname; maximum salary refers to maxsalary; minimum salary refers to minsalary",
        "evidence_ar": "",
        "SQL": "SELECT T2.maxsalary, T2.minsalary, T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Bill' AND T1.lastname = 'Marlin'"
    },
    {
        "db_id": "human_resources",
        "question_en": "List the full names, gender and positions who's location is in New York city.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; New York city refers to locationcity = 'New York City'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Mention the full name, hired date and performance status of the employee whose location is in Utah state.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; Utah refers to state = 'UT'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T1.hiredate, T1.performance FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'UT'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.",
        "question_ar": "",
        "evidence_en": "poor performance refers to performance = 'Poor'; full name = firstname, lastname; managers is a position title",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'"
    },
    {
        "db_id": "human_resources",
        "question_en": "What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.",
        "question_ar": "",
        "evidence_en": "account representative is a position title; full name = firstname, lastname; poor performance refers to performance = 'Poor'",
        "evidence_ar": "",
        "SQL": "SELECT T2.educationrequired, T1.firstname, T1.lastname, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Account Representative'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Write down the full name, performance status and located city of the employee who's social security number is \"767-74-7373\".",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; ssn = '767-74-7373'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T2.state, T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.ssn = '767-74-7373'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Describe the employees' full name, positions, located city and office phone number within Colorado state.",
        "question_ar": "",
        "evidence_en": "full name = firstname, lastname; Colorado state refers to state = 'CO'; positions refers to positiontitle; located city refers to locationcity; office phone number refers to officephone;",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstname, T1.lastname, T3.positiontitle, T2.locationcity, T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.state = 'CO'"
    },
    {
        "db_id": "human_resources",
        "question_en": "Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.",
        "question_ar": "",
        "evidence_en": "highest salary refers to MAX(salary); name = firstname, lastname; calculation = DIVIDE(MAX(salary), 12)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / 12 AS avg, T1.firstname, T1.lastname , T2.positiontitle, T3.locationcity FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which trip had the longest duration? State the start and end station.",
        "question_ar": "",
        "evidence_en": "start station refers to start_station_name; end station refers to end_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT start_station_name, end_station_name FROM trip WHERE duration = ( SELECT MAX(duration) FROM trip )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the percentage of the trip were done by a subscriber?",
        "question_ar": "",
        "evidence_en": "subscription_type = 'Subscriber'; DIVIDE(COUNT(id where subscription_type = 'Subscriber'), COUNT(id)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(subscription_type) AS REAL) * 100 / ( SELECT COUNT(subscription_type) FROM trip ) FROM trip WHERE subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "State the final station of bike id 13. Which city was it at?",
        "question_ar": "",
        "evidence_en": "final station refers to end_station_name where MAX(end_date);",
        "evidence_ar": "",
        "SQL": "SELECT T2.end_station_id, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T2.bike_id = 13 ORDER BY T2.end_date DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned.",
        "question_ar": "",
        "evidence_en": "the bike was borrowed and returned on a different day implies that start_date and end_date are not equal to each other; where the bike was returned refers to end_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which is the station where no bike could not be borrowed form on the 2013/11/03 02:01:01? State the location of the station.",
        "question_ar": "",
        "evidence_en": "Latitude and longitude coordinates can be used to indicate a location, where latitude refers to lat longtitude refer to long; bikes_available = 0 means no bike can be borrowed; 3/11/2013 02:01:01 refers to time;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/11/03 02:01:01' AND T2.bikes_available = 0"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Name the station and city with the most borrowed bike.",
        "question_ar": "",
        "evidence_en": "the station with the most borrowed bikes refers to MAX(start_station);",
        "evidence_ar": "",
        "SQL": "SELECT T2.start_station_name, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name GROUP BY T2.start_station_name ORDER BY COUNT(T2.start_station_name) DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What was the hottest temperature on the day of trip ID 4080?",
        "question_ar": "",
        "evidence_en": "the hottest temperature refers to max_temperature_f;",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.max_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.id = 4080"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "At what date and time did San Jose Diridon Caltrain Station have most bikes available.",
        "question_ar": "",
        "evidence_en": "San Jose Diridon Caltrain Station is the name of the station; most bikes available refers to MAX(bikes_available);",
        "evidence_ar": "",
        "SQL": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Name all the trip on the days when it rained. State the duration of the trip",
        "question_ar": "",
        "evidence_en": "events = 'Rain';",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.",
        "question_ar": "",
        "evidence_en": "37.331415 and -121.8932 are latitude (lat) and longitude (long) coordinates indicating location; returned at refers to end_station_name; the date the bike was borrowed refers to start_date;",
        "evidence_ar": "",
        "SQL": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among the trips in August 2013, how many bikes were borrowed from Redwood City.",
        "question_ar": "",
        "evidence_en": "Redwood City is the name of the city; trips in August 2013 refers to start_date like '8%2013%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "For all trips which took less 5 minutes, state the station name where the bike were borrowed and returned. Indicate mean temperature of the day.",
        "question_ar": "",
        "evidence_en": "less than 5 minutes refers to duration<300 in seconds; the station where the bike was borrowed refers to start_station_name; the station where the bike was returned refers to end_station_name; mean temperature refers to min_temperature_f;",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_station_name, T1.end_station_name, T2.mean_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.duration < 300"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among all the trips, which day had the most bikes borrowed? What was the average coldest temperature on that day?",
        "question_ar": "",
        "evidence_en": "which day had the most bikes borrowed refers to MAX(start_date); the average coldest temperature can be computed as DIVIDE(SUM(min_temperature_f), COUNT(min_temperature_f));",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, AVG(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code GROUP BY T2.date ORDER BY COUNT(T1.start_date) DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Calculate the average usage of each bike in the third quarter of year 2013. Find the average wind direction within the same period.",
        "question_ar": "",
        "evidence_en": "the third quarter of year 2013 implies 3 month interval, including July, August, and September of 2013 and refers to date; the average usage of each bike = DIVIDE(SUM(duration), COUNT(bike_id)); the average wind direction = DIVIDE(SUM(wind_dir_degrees), COUNT(date));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration), AVG(T2.wind_dir_degrees) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), 1, INSTR(T2.date, '/') - 1) IN ('7', '8', '9') AND SUBSTR(CAST(T2.date AS TEXT), -4) = '2013'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bike stations were installed in San Jose in 2014? Indicate the names of the stations.",
        "question_ar": "",
        "evidence_en": "San Jose is the name of the city; 2014 refers to installation_date between '1/1/2014' and '12/31/2014';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station UNION SELECT name FROM station WHERE city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the longest trip duration that started and ended August 29, 2013?",
        "question_ar": "",
        "evidence_en": "started and ended August 29, 2013 refers to start_date = '8/29/2013' and end_date = '8/29/2013';",
        "evidence_ar": "",
        "SQL": "SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How long did it take for bike id 426 to reach 2nd at South Park from Market at 4th on 8/29/2013? Indicate the duration in minutes.",
        "question_ar": "",
        "evidence_en": "duration in minutes refers to DIVIDE(duration, 60 seconds); 2nd at South Park refers to end_station_name; Market at 4th refers to start_station_name; start_date = '8/29/2013'; end_date = '8/29/2013';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(duration AS REAL) / 60  FROM trip WHERE bike_id = 426 AND end_station_name = '2nd at South Park' AND start_station_name = 'Market at 4th' AND start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.",
        "question_ar": "",
        "evidence_en": "start_date = '8/29/2013'; end_date = '8/29/2013'; end_station_name = 'California Ave Caltrain Station'; start_station_name = 'University and Emerson'; who took the longest to arrive refers to MAX(duration);",
        "evidence_ar": "",
        "SQL": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many stations in San Francico can hold more than 20 bikes?",
        "question_ar": "",
        "evidence_en": "San Francico is the name of the city; can hold more than 20 bikes implies dock's capacity and refers to dock_count≥20;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN city = 'San Francisco' AND dock_count > 20 THEN 1 ELSE 0 END) FROM station"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "When was the hottest temperature recorded? If there are multiple dates with the hottest temperature, indicate all of the dates.",
        "question_ar": "",
        "evidence_en": "the hottest temperature refers to max_temperature_f;",
        "evidence_ar": "",
        "SQL": "SELECT max_temperature_f, date FROM weather WHERE max_temperature_f = ( SELECT MAX(max_temperature_f) FROM weather WHERE max_temperature_f IS NOT NULL AND max_temperature_f IS NOT '' )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the maximum dew point in Fahrenheit degree on 7/15/2014 in the area with a zip code of 94301?",
        "question_ar": "",
        "evidence_en": "the maximum dew point in Fahrenheit degree refers to max_dew_point_f; date = '7/15/2014';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN date = '7/15/2014' AND zip_code = 94301 THEN max_dew_point_f END FROM weather"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which year experienced the most rain?",
        "question_ar": "",
        "evidence_en": "events = 'Rain'; year refers to YEAR(date);",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(CAST(date AS TEXT), -4) FROM weather GROUP BY SUBSTR(CAST(date AS TEXT), -4) ORDER BY SUM(CASE WHEN events LIKE '%Rain%' OR events LIKE '%rain%' THEN 1 ELSE 0 END) DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "On 10/20/2014, what is the duration of the fastest trip which started from the station with latitude and longitudes of 37.789625 and -122.400811, respectively? Indicate the bike id.",
        "question_ar": "",
        "evidence_en": "lat = '37.789625' and long = '-122.400811' are latitude and longitude coordinates indicating location; started from the station refers to start_station_name; start_date = '10/20/2014'; duration of the fastest trip refers to MIN(duration);",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.duration), T2.bike_id FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '10/20/2014%' AND T1.lat = 37.789625 AND T1.long = -122.400811"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among the subscribers who rented a bike from South Van Ness at Market on 12/1/2013, whose duration was the shortest and to which station was the bike returned to? Indicate South Van Ness's dock count.",
        "question_ar": "",
        "evidence_en": "South Van Ness at Market refers to start_station_name; subscriber refers to subscription_type; start_date = '12/1/2013'; the shortest duration refers to MIN(duration); which station was the bike returned to refers to end_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.duration), T2.end_station_name, COUNT(T2.start_station_name) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '12/1/2013%' AND T2.start_station_name = 'South Van Ness at Market' AND T2.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the maximum humidity in Powell Street BART when bike 496 was borrowed from the station on 8/29/2013?",
        "question_ar": "",
        "evidence_en": "Powell Street refers to start_station_name; bike 496 refers to bike_id = '496'; start_date = '8/29/2013';",
        "evidence_ar": "",
        "SQL": "SELECT T2.max_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date LIKE '8/29/2013%' AND T1.bike_id = 496 AND T1.start_station_name = 'Powell Street BART'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which day in the month of November, 2014 have a foggy weather in the zip code 94301 and in total, how many bikes were borrowed by subscribers from all of the stations in the said day?",
        "question_ar": "",
        "evidence_en": "day in the month of November, 2014 refers to start_date between '11/1/2014' and '11/30/2014'; foggy weather refers to events = 'Fog'; subscriber refers to subscription_type; all of the stations bikes were borrowed from refer to start_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '11/%/2014%' AND T2.zip_code = 94301 AND T2.events = 'Fog' AND T1.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the name of the station that is less used by customers who borrow bikes from? Indicate when was the station installed.",
        "question_ar": "",
        "evidence_en": "less used station where bikes are borrowed from refers to start_station_name which has the least number of customers; subscription_type = 'Customer'; when installed refers to installation_date;",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_station_name, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.subscription_type = 'Customer' GROUP BY T1.start_station_name ORDER BY COUNT(T1.subscription_type) LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "On 11/3/2013, which stations are often empty? Indicate the names of the stations.",
        "question_ar": "",
        "evidence_en": "time = '11/3/2013'; which stations are empty refers to bikes_available = '0';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0 AND T2.time LIKE '2013/11/03%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average duration of bike trips in the city of Palo Alto?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(duration where city = 'Palo Alto'), COUNT(start_station_id));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the route that has the longest duration? Indicate the city of where the stations are located.",
        "question_ar": "",
        "evidence_en": "route implies a course taken in getting from start_station_name to end_station_name; the longest duration refers to MAX(duration);",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_station_name, T1.end_station_name, T2.city FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List the name of stations that were installed from 8/5/2013 to 12/31/2013. Indicate their installation date and city name.",
        "question_ar": "",
        "evidence_en": "from 8/5/2013 to 12/31/2013 refers to installation_date between '8/5/2013' and '12/31/2013';",
        "evidence_ar": "",
        "SQL": "SELECT name, installation_date, city FROM station WHERE (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) = '5' AND SUBSTR(CAST(installation_date AS TEXT), INSTR(installation_date, '/') + 1, -6) >= '8' AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ( '6', '7', '8', '9', '10', '11', '12' ) AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013')"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average duration of trips which are started at Adobe on Almaden station to Ryland Park?",
        "question_ar": "",
        "evidence_en": "trips refer to id; DIVIDE(SUM(duration where start_station_name = 'Adobe on Almaden', end_station_name = 'Ryland Park'), COUNT(id));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(duration) FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Write down the times when there is no available bike to borrow in a station. List down the stations name and location coordinate.",
        "question_ar": "",
        "evidence_en": "no available bike to borrow refers to bikes_available = 0; latitude and longitude coordinates can be used to indicate a location;",
        "evidence_ar": "",
        "SQL": "SELECT T2.time, T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List down the trips in which their start and end station are similar. Give me their trip IDs and location coordinates.",
        "question_ar": "",
        "evidence_en": "start and end station are similar refers to start_station_name = end_station_name; latitude and longitude coordinates can be used to indicate a location;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = T1.end_station_name"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "On 8/29/2013 at 6:14:01 PM, how many bikes were borrowed from San Jose Diridon Caltrain Station?",
        "question_ar": "",
        "evidence_en": "How many bikes borrowed can be computed as SUBTRACT(SUM(dock_count), bikes_available where name = 'San Jose Diridon Caltrain Station' and time = '2013/08/29 06:14:01');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.dock_count - T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 06:14:01'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List down the trip IDs when bike no. 10 was used by subscribers and the weather's mean temperature is no less than 62 degress Fahrenheit.",
        "question_ar": "",
        "evidence_en": "bike no. 10 refers to bike_id = '10'; subscription_type = 'Subscriber'; the weather's mean temperature is no less than 62 degress Fahrenheit refers to mean_temperature_f>62;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What were the max gust speed and cloud clover when the customer using bike no. 10 recorded the 386 seconds duration of the trip from MLK Library to San Salvador at 1st?",
        "question_ar": "",
        "evidence_en": "subscription_type = 'Customer'; duration = '364'; bike no. 10 refers to bike_id = 10; start_station_name = 'San Jose Civic Center'; end_station_name = 'San Jose City Hall';",
        "evidence_ar": "",
        "SQL": "SELECT T2.max_gust_speed_mph, T2.cloud_cover FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Customer' AND T1.start_station_name = 'MLK Library' AND T1.end_station_name = 'San Salvador at 1st' AND T1.duration = 386"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among the subscriber, how many of them finished the 2nd at Folsom and Civic Center BART (7th at Market) as their start and end stations respectively for no more than 490 seconds under minimum visibility of 4 miles.",
        "question_ar": "",
        "evidence_en": "subscription_type = 'Subscriber'; no more than 490 seconds refers to duration<490; start_station_name = '2nd at Folsom'; end_station_name = 'Civic Center BART (7th at Market)'; min_visibility_miles = 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.subscription_type = 'Subscriber' AND T2.min_visibility_miles = 4 AND T1.duration < 490 AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = 'Civic Center BART (7th at Market)'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many docks were available at the starting station of trip ID 912900?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.start_station_id WHERE T1.zip_code = 912900"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please write down the trip IDs which ended on the days when the minimum temperature is less than 45 degrees Fahrenheit.",
        "question_ar": "",
        "evidence_en": "the minimum temperature is less than 45 degrees Fahrenheit refers to min_temperature_f<45;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.min_temperature_f < 45"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "In 2014, what is the shortest duration of trips by subscribers which started at 2nd at Folsom and ended in the 5th at Howard stations, and by how much shorter than the average? Give me the minimum temperature, maximum gust speed and weather event on that trip.",
        "question_ar": "",
        "evidence_en": "the shortest duration refers to MIN(duration); subscription_type = 'Subscriber', start_station_name = '2nd at Folsom', end_station_name = '5th at Howard'; in 2014 refers to time period between start_date = '1/1/2014 0:00' and end_date = '12/31/2014 11:59; Average duration = DIVIDE(SUM(duration), COUNT(id));",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.duration) , MIN(T1.duration) - AVG(T1.duration), T2.min_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date = '1/1/2014 0:00' AND T1.end_date = '12/31/2014 11:59' AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = '5th at Howard' AND T1.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Find the average ride time of the bikes that started at Steuart at Market station and ended at Embarcadero at Sansome station in July 2014.",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start_station_name = 'Steuart at Market'; ended at refers to end_station_name; end_station_name = 'Embarcadero at Sansome'; rides in July 2004 refers to start_date = '7/1/2014 0:00'AND end_date = '7/31/2014 12:59';average ride time = DIVIDE(SUM(duration), COUNT(id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(duration) FROM trip WHERE start_date = '7/1/2014%' AND end_date = '7/31/2014%' AND start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What are the average maximum and minimum temperatures in May 2015 when the mean humidity is between 65 and 75?",
        "question_ar": "",
        "evidence_en": "average maximum temperature = DIVIDE(SUM(max_temperature_f), COUNT(date)); average minimum temperature = DIVIDE(SUM(min_temperature_f), COUNT(date)); May 2015 refers to date BETWEEN '5/1/2015'AND '5/31/2015';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(max_temperature_f), AVG(min_temperature_f) FROM weather WHERE date LIKE '5/%/2015' AND mean_humidity BETWEEN 65 AND 75"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Calculate the difference between the number of customers and the number of subscribers who did the trip in June 2013.",
        "question_ar": "",
        "evidence_en": "customer refers to subscription_type = 'Customer'; subscribers refers to subscription_type = 'Subscriber'; difference = SUBTRACT(SUM(subscription_type = 'Subscriber' t), SUM(subscription_type = 'Customer')); trip in June 2013 refers to start_date BETWEEN '6/1/2013 0:00'AND '6/31/2013 12:59';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(subscription_type = 'Subscriber', 1, 0)) - SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_date LIKE '6/%/2013%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List the days in 2013 when rain and fog occurred together and find the id of bikes borrowed on these days.",
        "question_ar": "",
        "evidence_en": "in 2013 refers to year(date) = 2013; rain and fog ocurred together refers to events = 'Fog-Rain'; id of bikes refers to biked_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, T1.bike_id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.events = 'Fog-Rain'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Find the longest ride on foggy day. What were the mean visibility, mean wind speed, and weather event during that ride? Also, list the coordinates and names of the start and end stations.",
        "question_ar": "",
        "evidence_en": "foggy day refers to events = 'fog'; longest ride on a foggy day refers to MAX(duration) where events = 'fog'; mean visibility refers to mean_visibility_miles; mean wind speed refers to mean_wind_speed_mph; weather event refers to events; coordinates refers to (lat, long); start station refers to start_station_id; end station refers to end_station_id;",
        "evidence_ar": "",
        "SQL": "SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat, T1.long , T2.start_station_name, T2.end_station_name FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.events = 'Fog' ORDER BY T2.duration DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "For the rides that started at Market at 10th station and ended at South Van Ness at Market station in August of 2013, which day had the coldest temperature?",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start_station_name = 'Market at 10th'; ended at refers to end_station_name; end_station_name = 'South Van Ness at Market'; in August of 2013 refers to start_date BETWEEN '8/1/2013 0:00' AND '8/31/2013 12:59'; day that had the coldest temperature refers to MIN(min_temperature_f);",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_date FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' AND T2.min_temperature_f = ( SELECT MIN(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among the rides during the rainy days, which ride was the longest? List the start station, end station, and duration of this ride.",
        "question_ar": "",
        "evidence_en": "rainy days refers to events = 'rain'; longest ride refers to MAX(duration); start station refers to start_station_name; end station refers to end_station_name; duration of the ride refers to duration;",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_station_name, T1.end_station_name, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Rain' OR T2.events = 'rain' ORDER BY T1.duration DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Find the average ride duration during the rain of more than 0.8 inches.",
        "question_ar": "",
        "evidence_en": "rain of more than 0.8 inches refers to events = rain where precipitation_inches>0.8; average ride duration = DIVIDE(SUM(duration), COUNT(duration));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE (T2.events = 'Rain' AND T2.precipitation_inches > 0.8) OR (T2.events = 'rain' AND T2.precipitation_inches > 0.8)"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List the name and city of starting stations which has an above-average duration trips.",
        "question_ar": "",
        "evidence_en": "starting stations refers to start_station_name; above average duration trips = DIVIDE(SUM(duration), COUNT(main_trip.id))<duration;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.start_station_name, T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration > ( SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many stations in San Francisco are installed in 2014?",
        "question_ar": "",
        "evidence_en": "stations refers to name; San Francisco refers to city = 'San Francisco'; installed in 2004 refers to installation_date like'%2014';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN city = 'San Francisco' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "In 2006, how many trips ended at stations in Mountain View?",
        "question_ar": "",
        "evidence_en": "in 2006 refers to start_date LIKE'%2006%'; ended at station refers to end_station_name; Mountain View refers to city = 'Mountain View';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.city) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T2.city = 'Mountain View' AND T1.start_date LIKE '%2006%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which trip id had the longest duration and the start station is in Redwood City?",
        "question_ar": "",
        "evidence_en": "longest duration refers to MAX(duration); start station refers to start_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' AND T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please list bikes id were used in trips which start station were installed in 2013.",
        "question_ar": "",
        "evidence_en": "start station refers to start_station_name; installed in 2013 refers to installation_date LIKE '%2013';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.bike_id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.installation_date LIKE '%2013'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many trips which subscription types were Subscriber and ended in San Jose city?",
        "question_ar": "",
        "evidence_en": "ended in refers to end_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which trip had the shortest duration and started at the station that can hold 15 bikes?",
        "question_ar": "",
        "evidence_en": "shortest duration refers to MIN(duration); started at the station refers to start_station_name; can hold 15 bikes refers to dock_count = 15;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 AND T1.duration = ( SELECT MIN(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which year had the most number of trips that started at stations in San Francisco?",
        "question_ar": "",
        "evidence_en": "started at station refers to start_station_name; San Francisco refers to city = 'San Francisco'; year that had the most number of trips refers to MAX(year(start_date));",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(CAST(T1.start_date AS TEXT), INSTR(T1.start_date, ' '), -4) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco' GROUP BY T1.start_station_name ORDER BY COUNT(T1.id) DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the percentage of trips that started in San Jose and durations were longer than 800 seconds?",
        "question_ar": "",
        "evidence_en": "percentage of trips = DIVIDE(COUNT(duration>800), COUNT(duration)) as percentage; San Jose refers to city = 'San Jose'; duration>800;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.duration > 800 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Jose'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many trips in 2013 had durations longer than 1000 seconds?",
        "question_ar": "",
        "evidence_en": "trips in 2013 refers to start_date like'%2013%'; duration>1000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(duration) FROM trip WHERE start_date LIKE '%/%/2013%' AND duration > 1000"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please calculate the average duration of trips started at South Van Ness at Market in 2015.",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start_station_name = 'South Van Ness at Market'; average duration = DIVIDE(SUM(duration), COUNT(duration));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(duration) FROM trip WHERE start_date LIKE '%2015%' AND start_station_name = 'South Van Ness at Market'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many trips which start station and end station are the same?",
        "question_ar": "",
        "evidence_en": "start station refers to start_station_id; end station refers to end_station_id; start station and end station are the same refers to start_station_id = end_station_id;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(start_station_id = end_station_id, 1, 0)) FROM trip"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please list trips id started on the hottest day.",
        "question_ar": "",
        "evidence_en": "started refers to start_date; the hottest day refers to max_temperature_f;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code ORDER BY T2.max_temperature_f DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which were the trips that started at Mountain View City Hall and ended on a rainy day?",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start_station_name = 'Mountain View City Hall'; ended on a rainy day refers to end_date where events = 'rain';",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 WHERE T2.events = 'Rain' AND T1.start_station_name = 'Mountain View City Hall'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average duration of trips that ended on a foggy day?",
        "question_ar": "",
        "evidence_en": "ended on a foggy day refers to end_date where events = 'fog'; average duration = DIVIDE(SUM(duration), COUNT(duration));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Fog'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What was duration of the longest trip started on the day that has a maximum wind speed of 30 mph?",
        "question_ar": "",
        "evidence_en": "longest trip refers to MAX(duration); started on the day refers to start_date; maximum wind speed refers to max_wind_speed_mph; max_wind_speed_mph = 30;",
        "evidence_ar": "",
        "SQL": "SELECT T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.max_wind_Speed_mph = 30 ORDER BY T1.duration DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please calculate the average temperature of those trips that started at Market at 4th in 2013.",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start station_name = 'Market at 4th'; in 2013 refers to start_date like '%2013%'; temperature refers to mean_temperature_f; average temperature = DIVIDE(SUM(mean_temperature_f), COUNT(mean_temperature_f));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.mean_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T1.start_station_name = 'Market at 4th'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What was the mean humidity of a trip with id 4275?",
        "question_ar": "",
        "evidence_en": "mean humidity refers to mean_humidity;",
        "evidence_ar": "",
        "SQL": "SELECT T2.mean_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.id = 4275"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "In 2015, what percentage of trips that had the subscription type was Customer and ended on a rainy day?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to end_date like '%2015%'; percentage = DIVIDE(COUNT(events = 'Rain'), COUNT(events));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.events = 'Rain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2015' AND T1.subscription_type = 'Customer'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bike stations are installed after August, 2013 in San Jose?",
        "question_ar": "",
        "evidence_en": "installed after August, 2013 refers to year(installation_date)>2013; in San Jose refers to city = 'San Jose';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(installation_date) FROM station WHERE city = 'San Jose' AND (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ('8', '9', '10', '11', '12') AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR SUBSTR(CAST(installation_date AS TEXT), -4) > '2013'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the mean temperature in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?",
        "question_ar": "",
        "evidence_en": "mean temperature in Fahrenheit refers to mean_temperature_f; on 8/29/2013 refers to date = '8/29/2013';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', mean_temperature_f, 0)) FROM weather"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the difference between the hottest temperature and the coldest temperature in in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?",
        "question_ar": "",
        "evidence_en": "hottest temperature refers to max_temperatutre_f; coldest temperature refers to min_temperature_f; difference = SUBTRACT(max_temperature_f, min_temperature_f); date = '8/29/2013'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', max_temperature_f - min_temperature_f, 0)) FROM weather"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bikes can be borrowed in San Jose Diridon Caltrain Station at 12:06:01 on 2013/8/29?",
        "question_ar": "",
        "evidence_en": "number of bikes that can be borrowed refers to bikes_available; San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; time = '2013/8/29 12:06:01'",
        "evidence_ar": "",
        "SQL": "SELECT T2.bikes_available FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 12:06:01'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "In which city's station is a bike borrowed on trip ID4069?",
        "question_ar": "",
        "evidence_en": "bike is borrowed from refers to start_station_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bike trips started on the days in September, 2013 with the hottest temperature over 70 degrees Fahrenheit in the area where the zip code is 94107?",
        "question_ar": "",
        "evidence_en": "started on the days in September, 2013 refers to date LIKE'9%'AND date LIKE'%2013' hottest temperature over 70 degrees Fahrenheit refers to max_temperature_f>70;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '9/%/2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 70"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.",
        "question_ar": "",
        "evidence_en": "starting stations refers to start_station_name; day with a max humidity over 80 refers to max_humidity>80; in 2013 refers to date LIKE'%2013';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?",
        "question_ar": "",
        "evidence_en": "subscriber refers to subscription_type = 'Subscriber'; in August 2013 refers to start_date LIKE'8%' AND start_date LIKE'%2013%'; station that can hold more than 20 bikes refers to dock_count>20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the location coordinates of the bike station from which the bike for the trip that last the longest was borrowed?",
        "question_ar": "",
        "evidence_en": "location coordinates refers to (lat, long); bike that was borrowed the longest refers to MAX(duration);",
        "evidence_ar": "",
        "SQL": "SELECT T2.lat, T2.long FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many docks were left at the end station for trip ID4069?",
        "question_ar": "",
        "evidence_en": "end station refers to end_station_id; docks that were left refers to docks_available;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.end_station_id WHERE T1.ID = 4069"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station \"2nd at Townsend\"?",
        "question_ar": "",
        "evidence_en": "started on the days with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013'; started from station refers to start_station_name; start_station_name = '2nd at Townsend';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the longest duration for a bike trip starting on a day with a fog in 2013?",
        "question_ar": "",
        "evidence_en": "longest duration refers to MAX(duration); starting on a day with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013';",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T2.zip_code = 94107"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "When was the bike station from which the bike was borrowed on trip ID4069 installed?",
        "question_ar": "",
        "evidence_en": "bike was borrowed from refers to start_station_id; when the bike station was installed refers to installation_date;",
        "evidence_ar": "",
        "SQL": "SELECT T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many trips with a bike borrowed from the stations in San Francisco were made by a subscriber?",
        "question_ar": "",
        "evidence_en": "bike was borrowed from refers to start_station_id; San Francisco refers to city = 'San Francisco'; subscriber refers to subscription_type = 'Subscriber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.ID = T1.start_station_id WHERE T2.city = 'San Francisco' AND T1.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "On the day with the hottest temperature ever in 2014, how many bike trips started from the station 2nd at Folsom?",
        "question_ar": "",
        "evidence_en": "hottest temperature refers to max_temperatutre_f; in 2014 refers to date LIKE '%2014'; started from station refers to start_station_name; start_station_name = '2nd at Folsom';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T2.zip_code = 94107 AND T1.start_station_name = '2nd at Folsom' ORDER BY T2.max_temperature_f DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average duration of a bike trip made on the day with the hottest temperature ever in 2014?",
        "question_ar": "",
        "evidence_en": "average duration = DIVIDE(SUM(duration), COUNT(id)); hottest temperature refers to max_temperature_f; in 2014 refers to date LIKE '%2014';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T1.start_station_name = '2nd at Folsom' AND T2.max_temperature_f = ( SELECT max_temperature_f FROM weather ORDER BY max_temperature_f DESC LIMIT 1 )"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List out all end stations for a bicycle that were making a trip starting from 2nd at South Park station? Only retain the unique value.",
        "question_ar": "",
        "evidence_en": "end station refers to end_station_name; starting from refers to start_station_name; start_station_name = '2nd at South Park';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many rainy days were recorded in Mountain View?",
        "question_ar": "",
        "evidence_en": "rainy days refers to events = 'rain'; Mountain View refers to zip_code = 94041;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(zip_code = 94041 AND events = 'Rain', 1, 0)) FROM weather"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the total number of bikes that can be hold in Redwood City before 2014.",
        "question_ar": "",
        "evidence_en": "total number of bikes that can be hold = MAX(dock_count); before 2014 refers to year(installation_date)<2014;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN city = 'Redwood City' AND SUBSTR(installation_date, -4) < '2014' THEN dock_count ELSE 0 END) NUM FROM station"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the longest trip duration according? Convert the it to number of days.",
        "question_ar": "",
        "evidence_en": "longest trip duration refers to MAX(duration); days conversion = DIVIDE(duration, 86400);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(duration), CAST(MAX(duration) AS REAL) / 86400 FROM trip"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Convert all temperature recorded at San Francisco city during August 2013 into degree Celsius.",
        "question_ar": "",
        "evidence_en": "temperature refers to max_temperature_f; March 2013 refers to date like '3/%/2013'; conversion to Celcius = DIVIDE(SUBTRACT(max_temperature_f, 32), 1.800) as Celsius1; DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.800) as Celsius2; DIVIDE(SUBTRACT(min_temperature_f, 32), 1.800) as Celcius3;",
        "evidence_ar": "",
        "SQL": "SELECT (max_temperature_f - 32) / 1.8000 , (mean_temperature_f - 32) / 1.8000 , (min_temperature_f - 32) / 1.8000 FROM weather WHERE SUBSTR(CAST(date AS TEXT), 1, INSTR(date, '/') - 1) = '8' AND SUBSTR(CAST(date AS TEXT), -4) = '2013' AND zip_code = 94107"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the ratio for subscriber to customer given that the starting and the ending stations is 2nd at South Park?",
        "question_ar": "",
        "evidence_en": "subscriber refers to subscription_type = 'Subscriber'; customer refers to subscription_type = 'customer';starting station refers to start_station_name; ending station refers to end_statio_name; start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(subscription_type = 'Subscriber', 1, 0)) AS REAL) / SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Are all stations with zip code 94107 located in San Francisco city?",
        "question_ar": "",
        "evidence_en": "station refers to name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.zip_code = 94107"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List out all stations name that having a mean temperature 20 degree Celsius in year 2014.",
        "question_ar": "",
        "evidence_en": "mean temperature refers to mean_temperature_f; mean temperature of 20 degree Celsius refers to DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.8) = 20; in 2014 refers to date LIKE'%2015%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.start_station_name, T2.end_station_name FROM weather AS T1 INNER JOIN trip AS T2 ON T1.zip_code = T2.zip_code WHERE T1.date LIKE '%2014' AND T1.mean_temperature_f = 20 * 1.8 + 32"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bicycle trip were made within San Jose city during August 2013?",
        "question_ar": "",
        "evidence_en": "during August 2013 refers to start_date like '8/%/2013%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.city = 'San Jose' AND T2.start_date LIKE '8/%/2013%' AND T2.start_station_name LIKE 'San Jose%' AND T2.end_station_name LIKE 'San Jose%'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Is there any intercity trip were made during 2014? If yes, list out the city name for the start and end station.",
        "question_ar": "",
        "evidence_en": "intercity trip refers to start_station_name! = end_station_name; during 2014 refers to start_date like '%2014%'; start station refers to start_station_name; end station refers to end_station_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_date LIKE '%/%/2014%' AND T1.start_station_name != T1.end_station_name"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Does the bike with Id number 16 making any intercity trip? If yes, calculate the total travel duration during all the intercity trip. Convert the duration to hour.",
        "question_ar": "",
        "evidence_en": "intercity trip refers to start_station_name! = end_station_name; total travel duration to hour = DIVIDE(SUM(duration), 3600) AS hour;",
        "evidence_ar": "",
        "SQL": "SELECT T1.end_station_name, T2.city, CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.bike_id = 16 AND T1.start_station_name != T1.end_station_name"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the ratio of customer to subscriber that making a trip inside Mountain View city?",
        "question_ar": "",
        "evidence_en": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; ratio = MULTIPLY(DIVIDE(COUNT(subscription_type = 'Customer'), COUNT(subscription_type = 'Subscriber'). 1.0)) AS ratio;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Mountain View'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the total trip duration made within Palo Alto city? Convert the duration to hour.",
        "question_ar": "",
        "evidence_en": "total trip duration to hour = DIVIDE(SUM(duration), 3600);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which bicycle is the least used bike. Check if the start and end station are from the same city and calculate the total duration travelled by the bicycle in hours for a trip made within the same city.",
        "question_ar": "",
        "evidence_en": "least used bike refers to bike_id with MIN(COUNT(main_trip.id)); start station refers to start_station_name; end station refers to end_station_name; total duration in hour = DIVIDE(duration, 3600) AS hour;",
        "evidence_ar": "",
        "SQL": "SELECT T2.bike_id, T2.start_station_name, T2.end_station_name, T1.city , CAST(T2.duration AS REAL) / 3600 FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.start_station_name GROUP BY T2.bike_id ORDER BY COUNT(T2.id) DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Count the number of subscribers who started their trips in Market at 4th.",
        "question_ar": "",
        "evidence_en": "subsscriber refers to subscription_type = subscriber; started their trips in refers to start_station_name; start_station_name = 'Market at 4th';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END) FROM trip"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "List the names of the stations within Mountain View that were installed on 12/31/2013.",
        "question_ar": "",
        "evidence_en": "Mountain View refers to city = 'Mountain View'; installed on 12/31/2013 refers to installation_date = '12/31/2013';",
        "evidence_ar": "",
        "SQL": "SELECT name FROM station WHERE installation_date = '12/31/2013' AND city = 'Mountain View'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which city is Townsend at 7th Station located and how many bikes could it hold?",
        "question_ar": "",
        "evidence_en": "Townsend at 7th Station refers to city = 'Townsend at 7th Station'; number of bikes a station can hold refers to SUM(dock_count);",
        "evidence_ar": "",
        "SQL": "SELECT city, SUM(dock_count) FROM station WHERE name = 'Townsend at 7th'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bikes could Evelyn Park and Ride hold and how many users who started on that station are subscribers?",
        "question_ar": "",
        "evidence_en": "number of bikes a station can hold refers to SUM(dock_count); Evelyn Park and Ride refers to name = 'Evelyn Park and Ride'; started on the station refers to start_station_name; subscribers refers to subscription_type = 'subscriber';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.dock_count), COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.name = 'Evelyn Park and Ride' AND T1.start_station_name = T2.name AND T1.subscription_type = 'Subscriber'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many subscribers are in the zip code of 94301 and what is the hottest temperature recorded on that zip code?",
        "question_ar": "",
        "evidence_en": "hottest temperature refers to MAX(max_temperature_f);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.zip_code), T3.max_temperature_f FROM trip AS T2 INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301 AND T2.subscription_type = 'Subscriber' ORDER BY T3.max_temperature_f DESC LIMIT 1"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the percentage ration of customers to subscribers that started their trips within the city of San Francisco?",
        "question_ar": "",
        "evidence_en": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; started their trips within refers to start_station_id; percentage ratio = DIVIDE(SUM(subscription_type = 'Customer'), SUM(subscription_type = 'Subscriber')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average duration of trips for the starting station of Santa Clara at Almaden and what is the latitude and longitude of this station?",
        "question_ar": "",
        "evidence_en": "average duration = DIVIDE(SUM(duration), COUNT(id)); starting station refers to start_station_name; start_station_name = 'Santa Clara at Almaden'; latitude refers to lat; longitude refers to long;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration), T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name LEFT JOIN station AS T3 ON T3.name = T1.end_station_name WHERE T1.start_station_name = 'Santa Clara at Almaden'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the shortest trip made starting from Franklin at Maple and what is the maximum wind speed at that date?",
        "question_ar": "",
        "evidence_en": "shortest trip refers to MIN(duration); starting from refers to start_station_name; start_station_name = 'Franklin at Maple'; maximum wind speed refers to max_wind_Speed_mph;",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.duration), MAX(T2.max_wind_Speed_mph) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_station_name = 'Franklin at Maple' AND T2.date = '9/4/2013'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many bikes have been borrowed at San Jose Diridon Caltrain Station on the date and time of 10/20/2013 8:11:01 AM and indicate the station's coordinates.",
        "question_ar": "",
        "evidence_en": "number of bikes that have been borrowed refers to SUM(bikes_available); San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; station's coordinates refers to (lat, long);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.bikes_available), T1.long, T1.lat FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/10/20 8:11:01' AND T1.name = 'San Jose Diridon Caltrain Station'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Name the city of the station that trip ID 585842 borrowed a bike and indicate when that station was first installed.",
        "question_ar": "",
        "evidence_en": "when the station was first installed refers to installation_date;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 585842"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many stations were installed on the date of 8/16/2013 and how many users on those stations are classified as a customer?",
        "question_ar": "",
        "evidence_en": "installed on refers to installation_date; installation_date = '8/16/2013'; customers refers to subscription_type = customers;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) , SUM(CASE WHEN T2.subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.installation_date = '8/16/2013' AND T2.subscription_type = 'Customer'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Which station did the user who started at Market at 4th station ended their trip at the time of 12:45:00 PM and the date of 8/29/2013 and what is the location coordinates of the ending station?",
        "question_ar": "",
        "evidence_en": "started at refers to start_station_name; start_station_name = 'Market at 4th'; location coordinates refers to (lat, long);",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T2.start_station_name = 'Market at 4th' AND T2.end_date = '8/29/2013 12:45'"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "How many subscribers have ended their trip at MLK Library and how many docks does that station have?",
        "question_ar": "",
        "evidence_en": "subscribers refers to subscription_type = 'subscribers'; ended their trip at refers to end_station_name; end_station_name = 'MLK Library'; number of docks a station have refers to dock_count;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id), T2.dock_count FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.end_station_name = 'MLK Library' AND T1.subscription_type = 'Subscriber' AND T2.dock_count = 19"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "What is the average coldest temperature for the zip code of 94301 and what stations are within the zip code? Include the latitude and longitude as well.",
        "question_ar": "",
        "evidence_en": "coldest temperature refers to min_temperature_f; average coldest temperature refers = AVG(min_temperature_f); stations refers to name; latitude refers to lat; longitude refers to long;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.min_temperature_f), T1.long, T1.lat FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301"
    },
    {
        "db_id": "bike_share_1",
        "question_en": "Calculate the average duration travelled by subscribers that both started and ended their trip in Mountain View City Hall and indicate the date when the station was first installed.",
        "question_ar": "",
        "evidence_en": "average duration = DIVIDE(SUM(duration), COUNT(id)); subscribers refers to subscription_type = 'subscriptions'; started and ended their trip at Mountain View City Hall refers to start_station_name = 'Mountain View City Hall' and end_station_name = 'Mountain View City Hall'; when the station was first installed refers to installation_date;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.duration), T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = 'Mountain View City Hall' AND T1.subscription_type = 'Subscriber' AND T1.end_station_name = 'Mountain View City Hall'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the description of the film ACADEMY DINOSAUR?",
        "question_ar": "",
        "evidence_en": "\"ACADEMY DINOSAUR\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films have a rental duration of over 6 days?",
        "question_ar": "",
        "evidence_en": "rental duration of over 6 days refers to rental_duration > 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rental_duration > 6"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of the films that are released in 2006 and have a rental rate of $2.99.",
        "question_ar": "",
        "evidence_en": "released in 2006 refers to release_year = 2006; rental rate of $2.99 refers to rental_rate = 2.99",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which film has the longest duration of film screening? Please give its title.",
        "question_ar": "",
        "evidence_en": "longest duration of film refers to Max(length)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film ORDER BY length DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which film has a higher replacement cost, ACE GOLDFINGER or ACADEMY DINOSAUR?",
        "question_ar": "",
        "evidence_en": "higher replacement cost refers to Max(replacement_cost); 'ACE GOLDFIINGER' and 'ACADEMY DINOSAUR' are both the title of film",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films that are released in 2006, how many of them are rated Adults Only in the Motion Picture Association Film Rating?",
        "question_ar": "",
        "evidence_en": "released in 2006 refers to release_year = 2006; rated Adults Only refers to rating = 'NC-17'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND release_year = 2006"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films with the rental rate of $2.99 have the special feature of \"Deleted Scenes\"?",
        "question_ar": "",
        "evidence_en": "rental rate of $2.99 refers to rental_rate = 2.99; film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of all the films that have more than 2 special features.",
        "question_ar": "",
        "evidence_en": "more than 2 special features refers to Count(special_features) > 2",
        "evidence_ar": "",
        "SQL": "SELECT title FROM ( SELECT title, COUNT(special_features) AS num FROM film GROUP BY title ) AS T ORDER BY T.num > 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the email address of the staff Jon Stephens?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please give the full names of all the active staff.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; active staff refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM staff WHERE active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "In which year was the film with the highest replacement cost released?",
        "question_ar": "",
        "evidence_en": "highest replacement_cost refers to Max (replacement_cost); year refers to release_year",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT release_year FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of the top 3 films with the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "highest replacement_cost refers to Max (replacement_cost); film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film ) LIMIT 3"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the language of the film ACADEMY DINOSAUR?",
        "question_ar": "",
        "evidence_en": "\"ACADEMY DINOSAUR\" is the title of film; language refers to language.name",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films are in English?",
        "question_ar": "",
        "evidence_en": "\"English\" is the name of language",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of all the films starring the actor PENELOPE GUINESS.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = 'PENELOPE' AND T3.last_name = 'GUINESS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many actors have starred in the film ACADEMY DINOSAUR?",
        "question_ar": "",
        "evidence_en": "\"ACADEMY DINOSAUR\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the full names of all the actors that have starred in the film ACADEMY DINOSAUR.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; \"ACADEMY DINOSAUR\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films starring PENELOPE GUINESS, how many of them are released in 2006?",
        "question_ar": "",
        "evidence_en": "release in 2006 refers to release_year = 2006;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.release_year = 2006 AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please give the title of the film starring PENELOPE GUINESS and has the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "highest replacement cost refers to Max (replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "highest replacement cost refers to Max (replacement_cost); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films starring PENELOPE GUINESS, how many of them are in English?",
        "question_ar": "",
        "evidence_en": "\"English\" is the name of language",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN language AS T4 ON T3.language_id = T4.language_id WHERE T4.name = 'English' AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the title of the film with the longest duration time and stars PENELOPE GUINESS?",
        "question_ar": "",
        "evidence_en": "longest duration of film refers to Max(length)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of all the films in the category of \"Horror\".",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films are there under the category of \"Horror\"?",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of all the films under the category of \"Horror\" and has a rental rate of $2.99.",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category; rental rate of $2.99 refers to rental_rate = 2.99",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rental_rate = 2.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "For how many times has the customer RUTH MARTINEZ rented a film?",
        "question_ar": "",
        "evidence_en": "times of rented refers to Count(rental_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of all the films that the customer RUTH MARTINEZ has rented.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films that the customer RUTH MARTINEZ has rented, how many of them are released in 2006?",
        "question_ar": "",
        "evidence_en": "release in 2006 refers to release_year = 2006",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.release_year = 2006 AND T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films that the customer RUTH MARTINEZ has rented, what is the title of the one with the highest replacement cost?",
        "question_ar": "",
        "evidence_en": "highest replacement cost refers to Max(replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' ORDER BY T4.replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the full names of all the customers who have rented the film with the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; highest replacement cost refers to Max(replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id ORDER BY T4.replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films rented to the customer RUTH MARTINEZ were returned in August, 2005?",
        "question_ar": "",
        "evidence_en": "returned in August, 2005 refers to year(return_date) = 2005 and month (return_date) = 8",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' AND STRFTIME('%m',T2.return_date) = '8' AND STRFTIME('%Y', T2.return_date) = '2005'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please give the full name of the customer that have rented the most films.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.rental_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the customers who have rented the film ACADEMY DINOSAUR, how many of them are active?",
        "question_ar": "",
        "evidence_en": "\"ACADEMY DINOSAUR\" is the title of film; customer refers to customer_id; active refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.active = 1 AND T4.title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which film is rented for the most times by the customers? Please give its title.",
        "question_ar": "",
        "evidence_en": "film refers to title; film rented the most times refers to title where Max(Count(rental_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which customer has rented more movies, RUTH MARTINEZ or LINDA WILLIAMS?",
        "question_ar": "",
        "evidence_en": "rented more movie Max(Count(customer_id)); \"RUTH MARTINEZ\" and \"LINDA WILLIAMS\" are both full name of customer",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE (T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ') OR (T1.first_name = 'LINDA' AND T1.last_name = 'WILLIAMS') GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among all the films starring PENELOPE GUINESS, what is the title of the one with the highest rental price per day?",
        "question_ar": "",
        "evidence_en": "highest rental price per day refers to Max(Divide(rental_rate, rental_duration))",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.rental_rate / T3.rental_duration DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average replacement cost of the films under the category of \"Horror\"?",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category; average replacement cost = Divide (Sum(replacement_cost), Count(film_id where name = Horror))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.replacement_cost) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among all films that the customer RUTH MARTINEZ has rented, what is the percentage of it being a Music film?",
        "question_ar": "",
        "evidence_en": "music film refers to name = 'Music'; percentage = Divide (Count(film_id where name = 'Music'), Count(film_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.name = 'Music', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average duration time of the films starring PENELOPE GUINESS?",
        "question_ar": "",
        "evidence_en": "average duration time = AVG(length)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is Diane Collins' email address?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT email FROM customer WHERE first_name = 'DIANE' AND last_name = 'COLLINS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the number of inactive customers.",
        "question_ar": "",
        "evidence_en": "inactive refers to active = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE active = 0"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the owner of email address \"JEREMY.HURTADO@sakilacustomer.org\"? Give the full name.",
        "question_ar": "",
        "evidence_en": "\"JEREMY.HURTADO@sakilacustomer.org\" is the email; owner refers to customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the postal code for the address No.65.",
        "question_ar": "",
        "evidence_en": "address no. 65 refers to address_id = 65",
        "evidence_ar": "",
        "SQL": "SELECT postal_code FROM address WHERE address_id = 65"
    },
    {
        "db_id": "movie_3",
        "question_en": "State the number of addresses in the Nordrhein-Westfalen district.",
        "question_ar": "",
        "evidence_en": "number of address refers to address_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(address_id) FROM address WHERE district = 'Nordrhein-Westfalen'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the phone number of address No.72?",
        "question_ar": "",
        "evidence_en": "address no. 72 refers to address_id = 72; phone number refers to phone",
        "evidence_ar": "",
        "SQL": "SELECT phone FROM address WHERE address_id = '72'"
    },
    {
        "db_id": "movie_3",
        "question_en": "State the number of films that are 178 minutes long.",
        "question_ar": "",
        "evidence_en": "178 min long refers to length = '178'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE length = '178'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Tell the special features of the film Uprising Uptown.",
        "question_ar": "",
        "evidence_en": "\"UPRISING UPTOWN\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT special_features FROM film WHERE title = 'UPRISING UPTOWN'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the description of the film Artist Coldblooded?",
        "question_ar": "",
        "evidence_en": "\"ARTIST COLDBLOODED\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT description FROM film WHERE title = 'ARTIST COLDBLOODED'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the detailed address for store No.2.",
        "question_ar": "",
        "evidence_en": "store no. 22 refers to store_id = 2; detailed address refers to address, address2, district",
        "evidence_ar": "",
        "SQL": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which continent is the mother country of Clarksville city in?",
        "question_ar": "",
        "evidence_en": "\"Clarksville\" is the city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Clarksville'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many actors played a role in the 2006 film whose rental duration is 7 days, rental rate is 4.99 and is 98 minutes duration?",
        "question_ar": "",
        "evidence_en": "in 2006 refers to release_year = 2006; 98 min duration refers to length = 98; number of actors refers to count(actor_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.release_year = 2006 AND T2.rental_duration = 7 AND T2.rental_duration = 4.99 AND T2.length = 98"
    },
    {
        "db_id": "movie_3",
        "question_en": "The actor Dan Harris played in a 77 minute film with replacement cost of 9.99, what was the rating for that film?",
        "question_ar": "",
        "evidence_en": "77 min film refers to length = 77",
        "evidence_ar": "",
        "SQL": "SELECT T3.rating FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'DAN' AND T1.last_name = 'HARRIS' AND T3.length = 77 AND T3.replacement_cost = '9.99'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films did actor Daryl Wahlberg appear in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Sherri Rhodes rented a film at 12:27:27 on 2005/7/28, when did she/he return that film?",
        "question_ar": "",
        "evidence_en": "rented at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'",
        "evidence_ar": "",
        "SQL": "SELECT T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'SHERRI' AND T1.last_name = 'RHODES' AND T2.rental_date = '2005-07-28 12:27:27'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the name of the manager staff for store No.1.",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_id = 1; name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM staff AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T2.store_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "State the address location of store No.1.",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_id = 1; address location refers to address, address2, district",
        "evidence_ar": "",
        "SQL": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Where does the staff Jon Stephens live?",
        "question_ar": "",
        "evidence_en": "location refers to address, address2, district",
        "evidence_ar": "",
        "SQL": "SELECT T1.address, T1.address2 FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many addresses are there in Woodridge city?",
        "question_ar": "",
        "evidence_en": "\"Woodridge\" is the city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films are in English?",
        "question_ar": "",
        "evidence_en": "\"English\" is the name of language",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the address location of Heather Morris.",
        "question_ar": "",
        "evidence_en": "address location refers to address",
        "evidence_ar": "",
        "SQL": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'HEATHER' AND T2.last_name = 'MORRIS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the email address of the person who lives in \"1411 Lillydale Drive\".",
        "question_ar": "",
        "evidence_en": "\"1411 Lillydate Drive\" is the address",
        "evidence_ar": "",
        "SQL": "SELECT T2.email FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '1411 Lillydale Drive'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How much money did the customer No.297 pay for the rental which happened at 12:27:27 on 2005/7/28?",
        "question_ar": "",
        "evidence_en": "customer no. 297 refers to customer_id = 297; at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'; money pay for rent refers to amount",
        "evidence_ar": "",
        "SQL": "SELECT T1.amount FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id WHERE T2.rental_date = '2005-07-28 12:27:27' AND T2.customer_id = 297"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which category does the film Working Microcosmos belong to?",
        "question_ar": "",
        "evidence_en": "\"WORKING MICROCOSMOS\" is the title of film; category refers to name",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the number of documentary films.",
        "question_ar": "",
        "evidence_en": "\"Documentary\" is the name of category; number of film refers to Count(film_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Documentary'"
    },
    {
        "db_id": "movie_3",
        "question_en": "State the name of the category which has the most number of films.",
        "question_ar": "",
        "evidence_en": "category refers to name; most number of films refers to Max(Count(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.name FROM ( SELECT T2.name, COUNT(T1.film_id) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the name of the film for inventory No.3479.",
        "question_ar": "",
        "evidence_en": "inventory no. 3479 refers to inventory_id = '3479'; name of film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the percentage more for the rental payment for store No.2 than store No.1?",
        "question_ar": "",
        "evidence_en": "store no. 1 refers to store_id = 1; store no.2 refers to store_id = 2; rental payment refers to amount; percent more = Divide (Subtract(amount where store_id = 2, amount where store_id = 1), amount where store_id = 1) *100",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(IIF(T2.store_id = 2, T1.amount, 0)) - SUM(IIF(T2.store_id = 1, T1.amount, 0))) AS REAL) * 100 / SUM(IIF(T2.store_id = 1, T1.amount, 0)) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many times is the number of Indian cities than Italian cities?",
        "question_ar": "",
        "evidence_en": "indian refers to country = 'India'; Italian refers to country = 'Italy'; times = Divide(Count(city where country = 'India), Count(city where country = 'Italy'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) / SUM(IIF(T1.country = 'Italy', 1, 0)) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many times is the number of films Gina DeGeneres acted in than Penelope Guinness?",
        "question_ar": "",
        "evidence_en": "\"Gina DeGeneres\" and \"Penelope Guinness\" are both full name of actor; times number of film = Divide (Count (film_id where first_name = 'GINA' and last_name = 'DEGENERES'), Count(film_id where first_name = 'PENELOPE' and last_name = 'GUINESS'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES', 1, 0)) AS REAL) * 100 / SUM(IIF(T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS', 1, 0)) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "In 2006, how many restricted films were released?",
        "question_ar": "",
        "evidence_en": "restricted refers to rating = 'R'; release refers to release_year; in 2006 refers to release_year = 2006; film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rating = 'R' AND release_year = 2006"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many actors starred in the film id 508?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(actor_id) FROM film_actor WHERE film_id = 508"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the special features for the film \"Smoochy Control\"?",
        "question_ar": "",
        "evidence_en": "\"SMOOCHY CONTROL\" is the title of film",
        "evidence_ar": "",
        "SQL": "SELECT special_features FROM film WHERE title = 'SMOOCHY CONTROL'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers paid over the amount of 10 on August 2005?",
        "question_ar": "",
        "evidence_en": "over the amount of 10 refers to amount > 10; paid on August 2005 refers to payment_date like '2005_08%'; customer refers to customer_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM payment WHERE SUBSTR(payment_date, 1, 7) LIKE '2005-08'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the names of the films that are more than 180 minutes long.",
        "question_ar": "",
        "evidence_en": "more than 180 min long refers to length > 180; name of film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE length > 180"
    },
    {
        "db_id": "movie_3",
        "question_en": "How much is the total rental payment for the first 10 rentals?",
        "question_ar": "",
        "evidence_en": "first 10 rental refers to rental id between 1 and 10; total rental payment refers to sum(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(amount) FROM payment WHERE rental_id BETWEEN 1 AND 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the full names of all the active employees?",
        "question_ar": "",
        "evidence_en": "active employee refers to active = 1; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM staff WHERE active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the staff manager in store id 2?",
        "question_ar": "",
        "evidence_en": "staff manager refers to manager_staff_id",
        "evidence_ar": "",
        "SQL": "SELECT manager_staff_id FROM store WHERE store_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many rentals were returned on 5/27/2005?",
        "question_ar": "",
        "evidence_en": "return on 5/27/2005 refers to return_date = '2005-05-27'; rental refers to rental_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the names of the movies which Laura Brody starred in?",
        "question_ar": "",
        "evidence_en": "name of movie refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Laura' AND T1.last_name = 'Brody'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the name of the films that can only be found in store id 2.",
        "question_ar": "",
        "evidence_en": "name of film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the full name of the customer who rented movies for 7 consecutive days?",
        "question_ar": "",
        "evidence_en": "rented for 7 consecutive days refers to Subtract(return_date, rental_date) = 7; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN ( SELECT customer_id, COUNT(*) AS num_days FROM ( SELECT *, date(days, '-' || rn || ' day') AS results FROM ( SELECT customer_id, days, row_number() OVER (PARTITION BY customer_id ORDER BY days) AS rn FROM ( SELECT DISTINCT customer_id, date(rental_date) AS days FROM rental ) ) ) GROUP BY customer_id, results HAVING num_days = 7 ) AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films are categorized as horror?",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the name of the most rented movie?",
        "question_ar": "",
        "evidence_en": "most rented movie refers to title where Max(Count(rental_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the most common special features of science-fiction movies?",
        "question_ar": "",
        "evidence_en": "\"science fiction\" is the name of category; most common special features refers to Max(frequency(special_features))",
        "evidence_ar": "",
        "SQL": "SELECT T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'sci-fi' ORDER BY T1.special_features DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the full name of the actor who starred in most movies?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; actor who starred in the most movies refers to actor_id where Max(Count(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films with a rental duration of 7 days, how many are comedies?",
        "question_ar": "",
        "evidence_en": "rental duration of 7 refers to rental_duration = 7; comedies refers to name = 'Comedy'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration = 7 AND T3.name = 'Comedy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the staff manager of the store with the most non-active customers?",
        "question_ar": "",
        "evidence_en": "most non-active customer refers to Max(Count(active = 0))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.store_id = T3.store_id WHERE T1.active = 0 GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the rental price per day of the most expensive children's film?",
        "question_ar": "",
        "evidence_en": "children's film refers to name = 'Children'; average price per day of most expensive film = Max(Divide(rental_rate, rental_duration))",
        "evidence_ar": "",
        "SQL": "SELECT T1.rental_rate FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Children' ORDER BY T1.rental_rate / T1.rental_duration DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the complete address of store id 1?",
        "question_ar": "",
        "evidence_en": "complete address refers to address, address2, district",
        "evidence_ar": "",
        "SQL": "SELECT T3.address, T3.address2, T3.district FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN store AS T4 ON T3.address_id = T4.address_id WHERE T4.store_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers are from the city of Lethbridge?",
        "question_ar": "",
        "evidence_en": "customer refers to customer_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Lethbridge'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many cities are there in the United States?",
        "question_ar": "",
        "evidence_en": "\"United States\" is the country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.city) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'United States'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the names of the customers from India.",
        "question_ar": "",
        "evidence_en": "\"India\" is the country; name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the classic movies, how many movies have a rental rate of less than 1?",
        "question_ar": "",
        "evidence_en": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the full name of the customer who rented the highest number of movies of all time?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.rental_id) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many times was \"Blanket Beverly\" rented?",
        "question_ar": "",
        "evidence_en": "\"BLANKET BEVERLY\" is the title of film; rented times refers to count(rental_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.rental_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'Blanket Beverly'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the full name of the actor who has the highest number of restricted films?",
        "question_ar": "",
        "evidence_en": "restricted refers to rating = 'R'; highest number of film refers to Max(Count(film_id)); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'R' GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who are the top 5 actors with the highest number of films? List their full names and calculate the average number of films for each of the actors.",
        "question_ar": "",
        "evidence_en": "actors with highest number of films refers to actor_id with Max(Count(film_id)); full name refers to first_name, last_name; average number of film = Divide (Count(film_id), 5)",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name, num FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the actors' IDs who have \"KILMER\" as last name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT actor_id FROM actor WHERE last_name = 'KILMER'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down the films titles with the lowest replacement cost under the general audiences rating.",
        "question_ar": "",
        "evidence_en": "lowest replacement cost refers to Min(replacement_cost); under general audience rating refers to rating = G",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE replacement_cost = ( SELECT MIN(replacement_cost) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films with the longest duration, list any five title with their descriptions and special features.",
        "question_ar": "",
        "evidence_en": "longest duration of film refers to Max(length)",
        "evidence_ar": "",
        "SQL": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films rented on 26th May, 2005 were returned on 30th May, 2005?",
        "question_ar": "",
        "evidence_en": "rented on 26th May 2005 refers to rental_date = '2005-05-26'; return on 30th May, 2005 refers to return_date = '2005-05-30'; number of rented film refers to Count (rental_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE date(rental_date) BETWEEN '2005-05-26' AND '2005-05-30'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the average payment amount per customer.",
        "question_ar": "",
        "evidence_en": "average payment refers to AVG(amount)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(amount) FROM payment GROUP BY customer_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the name and email of the staff in store ID 2?",
        "question_ar": "",
        "evidence_en": "name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many percent of customers were inactive?",
        "question_ar": "",
        "evidence_en": "inactive refers to active = 0; percent = Divide (Count (customer_id where active = 0), Count(customer_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the description and film title of ID 996?",
        "question_ar": "",
        "evidence_en": "ID 996 refers to film_id = 996",
        "evidence_ar": "",
        "SQL": "SELECT description, title FROM film_text WHERE film_id = 996"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate customers' total payment amount in August, 2005.",
        "question_ar": "",
        "evidence_en": "in August 2005 refers to payment_date like '2005-08%'; total payment amount refers to Sum(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down the film titles performed by Emily Dee.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down the actors' full names who performed in \"CHOCOLATE DUCK\" film.",
        "question_ar": "",
        "evidence_en": "\"CHOCOLATE DUCK\" is the title of film; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films in the horror category were included in PG-13-rated?",
        "question_ar": "",
        "evidence_en": "\"Horror\" is the name of category; PG-13 rated refers to rating = 'PG-13'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rating = 'PG-13'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Distinguish the films performed by Judy Dean according to category.",
        "question_ar": "",
        "evidence_en": "films performed refers to film",
        "evidence_ar": "",
        "SQL": "SELECT T5.name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T2.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T1.first_name = 'Judy' AND T1.last_name = 'Dean'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Write down any five film names under the documentary category.",
        "question_ar": "",
        "evidence_en": "\"Documentary\" is the name of category; film name refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' LIMIT 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "Mention the language of Untouchables Sunrise film and calculate its rental cost per day.",
        "question_ar": "",
        "evidence_en": "\"UNTOUCHABLES SUNRISE\" is the title of film; language refers to name; rental cost per day = Divide (rental_cost, rental_duration)",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the films' titles which were rented on 24th May,2005.",
        "question_ar": "",
        "evidence_en": "rented on 24th May 2005 refers to rental_date = '2005-05-24%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE SUBSTR(T3.rental_date, 1, 10) = '2005-05-24'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the films' titles which were rented by Brian Wyman in July, 2005.",
        "question_ar": "",
        "evidence_en": "rented in July 2005 refers to year (rental_date) = 2005 and month (rental_date) = 7",
        "evidence_ar": "",
        "SQL": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'BRIAN' AND T1.last_name = 'WYMAN' AND STRFTIME('%Y', T2.rental_date) = '2005' AND STRFTIME('%m',T2.rental_date) = '7'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Write down the inventories' IDs and actors' names of \"STREETCAR INTENTIONS\".",
        "question_ar": "",
        "evidence_en": "\"STREETCAR INTENTIONS\" is the title of film; actor's names refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films rented by Natalie Meyer, describe the titles and categories of the films which were rented in February 2006.",
        "question_ar": "",
        "evidence_en": "category refers to name; rented in February 2006 refers to year(rental_date) = 2006 and month (rental_rate) = 2",
        "evidence_ar": "",
        "SQL": "SELECT T3.title, T2.name FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'Natalie' AND T5.last_name = 'Meyer' AND STRFTIME('%Y',T3.rental_rate) = '2006' AND STRFTIME('%m',T3.rental_rate) = '2'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many rental IDs belong to Eleanor Hunt?",
        "question_ar": "",
        "evidence_en": "'Eleanor Hunt' is the full name of a customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Eleanor' AND T2.last_name = 'Hunt'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Describe the full names and cities of the customers who rented \"DREAM PICKUP\".",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'DREAM PICKUP' is a title of film",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate how many percent of customers were located in India.",
        "question_ar": "",
        "evidence_en": "'India' is a country; calculation = DIVIDE(SUM(country = 'India'), COUNT(customer_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "How much percentage of the film did Mary Keitel perform more than Angela Witherspoon?",
        "question_ar": "",
        "evidence_en": "'Mary Keitel' AND 'Angela Witherspoon' are full name of actors; full name refers to FirstName, LastName; calculation = DIVIDE(SUBTRACT(SUM('Mary Keitel'), SUM('Angela Witherspoon')), SUM('Angela Witherspoon')) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(IIF(T1.first_name = 'ANGELA' AND T1.last_name = 'WITHERSPOON', 1, 0)) - SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0))) AS REAL) * 100 / SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0)) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide the email, address, city, and country of the customer Lillie Kim.",
        "question_ar": "",
        "evidence_en": "'Lillie Kim' is the full name of a customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.email, T2.address, T3.city, T4.country FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T1.first_name = 'Lillie' AND T1.last_name = 'Kim'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide any 5 customers' full names who have rented from Mike Hillyer.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'Mike Hillyer' is a full name of a staff;",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM staff AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.first_name = 'Mike' AND T1.last_name = 'Hillyer' LIMIT 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the total payment amount by Diane Collins.",
        "question_ar": "",
        "evidence_en": "'Diane Collins' is a full name of a customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide the full names and emails of customers whose payments were greater than 70% of the average.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; average payment refers to AVG(amount); payments were greater than 70% of the average refers to amount > (AVG(amount) MULTIPLY 0.7)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.first_name, T2.last_name, T2.email FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T1.amount > ( SELECT AVG(amount) FROM payment ) * 0.7"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films have a rental rate of 0.99?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 0.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the customers with customer ID of 100 and below, how many of them have Thomas as their last name?",
        "question_ar": "",
        "evidence_en": "customer ID of 100 and below refers to customer_id < 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE last_name = 'Thomas' AND customer_id < 100"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the actor's last name that starred the film with the description of \"A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the title of the film starred by Liza Bergman with the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "Liza Bergman' is a full name; full name refers to first_name, last_name; highest replacement cost refers to MAX(replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Liza' AND T1.last_name = 'Bergman' ORDER BY replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among films with store ID of 2, list the title of films with the highest rental rate.",
        "question_ar": "",
        "evidence_en": "highest rental rate refers to MAX(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 ORDER BY rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films starred by Angelina Astaire, what is the title of the film with a replacement cost of 27.99?",
        "question_ar": "",
        "evidence_en": "Angelina Astaire' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Angelina' AND T1.last_name = 'Astaire' AND T3.replacement_cost = 27.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the inventory ID of the film titled \"African Egg\".",
        "question_ar": "",
        "evidence_en": "'African Egg' is a title of a film",
        "evidence_ar": "",
        "SQL": "SELECT T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'African Egg'"
    },
    {
        "db_id": "movie_3",
        "question_en": "In films with a length duration of 113 minutes, how many of the films are starred by Kirk Jovovich?",
        "question_ar": "",
        "evidence_en": "length duration of 113 minutes refers to length = 113; 'Kirk Jovovich' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'"
    },
    {
        "db_id": "movie_3",
        "question_en": "In the film with an inventory ID between 20 to 60, how many of the films have a G rating?",
        "question_ar": "",
        "evidence_en": "G rating refers to rating = 'G'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id BETWEEN 20 AND 60 AND T1.rating = 'G'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among films with a rental rate of 4.99, what is the total number of films starred by Bob Fawcett?",
        "question_ar": "",
        "evidence_en": "Bob Fawcett' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rental_rate = 4.99 AND T1.first_name = 'Bob' AND T1.last_name = 'Fawcett'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the inventory ID of the films starred by Russell Close with a duration between 110 to 150 minutes?",
        "question_ar": "",
        "evidence_en": "'Russell Close' is a full name of an actor; full name refers to first_name, last_name; duration between 110 to 150 minutes refers to length BETWEEN 110 AND 150",
        "evidence_ar": "",
        "SQL": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the store and inventory ID of the film with the longest duration?",
        "question_ar": "",
        "evidence_en": "the longest duration refers to MAX(length)",
        "evidence_ar": "",
        "SQL": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the titles of the films starred by Elvis Marx.",
        "question_ar": "",
        "evidence_en": "'Elvis Marx' is a full name of a film; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'"
    },
    {
        "db_id": "movie_3",
        "question_en": "In films with rental rate of 4.99, list down the inventory ID of the films starred by Lucille Dee.",
        "question_ar": "",
        "evidence_en": "'Lucille Dee' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'Lucille' AND T1.last_name = 'Dee' AND T3.rental_rate = 4.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the store ID of the films with a rental rate greater than the 60% of average rental rate of all listed films.",
        "question_ar": "",
        "evidence_en": "average rental rate of all listed films refers to AVG(rental_rate); rental rate greater than the 60% of average rental rate refers to rental_rate > (AVG(rental_rate)) MULTIPLY 0.6",
        "evidence_ar": "",
        "SQL": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films starred by Nick Wahlberg, what is the percentage of the films with G rating?",
        "question_ar": "",
        "evidence_en": "'Nick Wahlberg' is a full name of an actor; full name refers to first_name, last_name; G rating refers to rating = 'G'; calculation = DIVIDE(SUM(rating = 'G'), SUM(rating)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.rating = 'G', 1, 0)) AS REAL) / COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Elvis' AND T1.last_name = 'Marx'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the address in Texas in the ascending order of city id.",
        "question_ar": "",
        "evidence_en": "'Texas' is a district",
        "evidence_ar": "",
        "SQL": "SELECT address FROM address WHERE district = 'Texas' AND city_id = ( SELECT MIN(city_id) FROM address WHERE district = 'Texas' )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Find the full name and email address of inactive customers whose record was created in 2006.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; record created in 2006 refers to create_date = 2006; inactive customers refers to active = 0",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name, email FROM customer WHERE STRFTIME('%Y',create_date) = '2006' AND active = 0"
    },
    {
        "db_id": "movie_3",
        "question_en": "What percentage of the movies are PG-13?",
        "question_ar": "",
        "evidence_en": "PG-13 is a rating; calculation = DIVIDE(SUM(rating = PG-13), SUM(rating)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(rating = 'PG-13', 1, 0)) AS REAL) * 100 / COUNT(film_id) FROM film"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the top ten movies with the most price per day in descending order of price per day.",
        "question_ar": "",
        "evidence_en": "movies with the most price per day refers to MAX(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film ORDER BY rental_rate / rental_duration DESC LIMIT 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the average rent amount paid by the customer with customer id 15.",
        "question_ar": "",
        "evidence_en": "average rent amount refers to AVG(amount)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(amount) FROM payment WHERE customer_id = 15"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers rented for an above-average period?",
        "question_ar": "",
        "evidence_en": "rented period refers to SUBTRACT(return_date, rental_date); calculation = rented period > (AVG(rented period))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM rental WHERE return_date - rental_date > ( SELECT AVG(return_date - rental_date) FROM rental )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the movies, what percentage are horror?",
        "question_ar": "",
        "evidence_en": "horror is a name of film category; calculation = DIVIDE(COUNT('horror'), COUNT(category_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the full name of the actor who acted in the most number of movies?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; acted in the most number of movies refers to MAX(COUNT(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the full name of the actor who acted the most in drama movies?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; drama is a category of a film; acted the most in a movies refers to MAX(COUNT(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id WHERE T3.category_id = 7 GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the difference in the average number of films rented each day in Australia and Canada?",
        "question_ar": "",
        "evidence_en": "'Australia' AND 'Canada' are country; average number of films refers to AVG('Australia') AND AVG('Canada'); calculation = SUBTRACT(AVG('Australia'), AVG('Canada'))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(IIF(T4.country = 'Australia', 1, 0)) - AVG(IIF(T4.country = 'Canada', 1, 0)) AS diff FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Of the movies in which Reese Kilmer acted, what percentage are action movies?",
        "question_ar": "",
        "evidence_en": "'Reese Kilmer' is a full name of an actor; 'action' is the name of the category; calculation = DIVIDE(COUNT('action'), COUNT(category_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T4.name = 'Action', 1, 0)) AS REAL) * 100 / COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id INNER JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T1.first_name = 'Reese' AND T1.last_name = 'Kilmer'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the total amount of rent for the movie Clockwork Paradice.",
        "question_ar": "",
        "evidence_en": "'Clockwork Paradice' is a title of a film",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'CLOCKWORK PARADICE'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Find and list the full name of customers who rented more than five types of movies.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; types of movies means category of movies; \nrented more than five types of movies refers to COUNT(film_category) > 5",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id GROUP BY T1.first_name, T1.last_name ) AS T WHERE T.num > 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average number of actors acted in comedy movies?",
        "question_ar": "",
        "evidence_en": "comedy is the name of a category; average number of actors refers to AVG(actor_id)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.actor_id) FROM film_actor AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN actor AS T4 ON T4.actor_id = T1.actor_id WHERE T3.name = 'comedy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "In children's movies, which was rented the most?",
        "question_ar": "",
        "evidence_en": "children is the name of the category; rented the most refers to MAX(COUNT(title))",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T4.title, COUNT(T4.title) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id INNER JOIN category AS T6 ON T5.category_id = T6.category_id WHERE T6.name = 'Children' GROUP BY T4.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the percentage of customers who paid more than the average rent amount in store 1.",
        "question_ar": "",
        "evidence_en": "store 1 refers to store_id = 1; average rent amount refers to AVG(amount); calculation = DIVIDE(amount > AVG(amount), COUNT(customer_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Find and list the full name of customers who rented more family movies than Sci-Fi movies.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'family' AND 'Sci-Fi' are names of the category; customers who rented more family movies than Sci-Fi movies refers to count(name = 'Family') > count(name = 'Sci-Fi')",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IIF(SUM(IIF(T5.name = 'Family', 1, 0)) - SUM(IIF(T5.name = 'Sci-Fi', 1, 0)) > 0, T1.first_name, 0) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film_category AS T4 ON T4.film_id = T3.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Indicate the title of all the films rated as 'Adults Only'.",
        "question_ar": "",
        "evidence_en": "'Adults Only' refers to rating = 'NC-17'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE rating = 'NC-17'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many actors with the surname Kilmer are there?",
        "question_ar": "",
        "evidence_en": "surname means last_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(actor_id) FROM actor WHERE last_name = 'Kilmer'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many movies have a length longer than 100?",
        "question_ar": "",
        "evidence_en": "length longer than 100 refers to length > 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE length > 100"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many payments were made throughout the month of August 2005?",
        "question_ar": "",
        "evidence_en": "payments made refers to amount; throughout the month of August 2005 refers to payment_date like '2005-08%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(amount) FROM payment WHERE payment_date LIKE '2005-08%'"
    },
    {
        "db_id": "movie_3",
        "question_en": "To which country does the address '1386 Nakhon Sawan Boulevard' belong?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id WHERE T3.address = '1386 Nakhon Sawan Boulevard'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What language was the most used in movies released in 2006?",
        "question_ar": "",
        "evidence_en": "released in 2006 refers to release_year = 2006; the most used language refers to MAX(COUNT(language_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.language_id FROM ( SELECT T1.language_id, COUNT(T1.language_id) AS num FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE STRFTIME('%Y',T1.release_year) = '2006' GROUP BY T1.language_id ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Indicate the title of all the films that are in the Classics category.",
        "question_ar": "",
        "evidence_en": "'classics' is the name of category",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id WHERE T3.name = 'Classics'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many rentals did Ella Oliver hire in June 2016?",
        "question_ar": "",
        "evidence_en": "'Ella Oliver' is a full name of a customer; full name refers to first_name, last_name; rental hired in June 2016 refers to rental_date BETWEEN '2005-06-01' AND '2005-06-30'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'ELLA' AND T2.last_name = 'ELLA' AND date(T1.rental_date) BETWEEN '2005-06-01' AND '2005-06-30'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many different clients have rented materials from Jon Stephens?",
        "question_ar": "",
        "evidence_en": "'Jon Stephens' is a full name of a customer; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM rental AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the total amount paid for rentals made on July 29, 2005?",
        "question_ar": "",
        "evidence_en": "July 29, 2005 refers to rental_date like '2005-07-29'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.amount) FROM rental AS T1 INNER JOIN payment AS T2 ON T1.rental_id = T2.rental_id WHERE date(T1.rental_date) = '2005-07-29%'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the first name of the customers whose address is in the postal code that begins with 76?",
        "question_ar": "",
        "evidence_en": "postal code that begins with 76 refers to postal_code like '76%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE SUBSTR(T2.postal_code, 1, 2) = '76'"
    },
    {
        "db_id": "movie_3",
        "question_en": "On what date was the rented material for the movie BLOOD ARGONAUTS returned?",
        "question_ar": "",
        "evidence_en": "'BLOOD ARGONAUTS' is a title of a film; date a movie was returned refers to return_date",
        "evidence_ar": "",
        "SQL": "SELECT T1.rental_date FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BLOOD ARGONAUTS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the title of the films in which Cuba Allen acted?",
        "question_ar": "",
        "evidence_en": "'Cuba Allen' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Cuba' AND T1.last_name = 'Allen'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many actors acted in movies in the Music category?",
        "question_ar": "",
        "evidence_en": "Music' is a name of a category",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T3.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T5.name = 'Music'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the full name of the actor who has acted the most times in comedy films?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'comedy' is a name of a category;",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T4.first_name, T4.last_name, COUNT(T2.actor_id) AS num FROM film_category AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN actor AS T4 ON T2.actor_id = T4.actor_id WHERE T3.name = 'Comedy' GROUP BY T4.first_name, T4.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers did not rent material at Mike's store?",
        "question_ar": "",
        "evidence_en": "not at Mike's store refers to staff.first_name ! = 'Mike'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Indicate the name of the actors of the films rated as 'Parents Strongly Precautioned' with the highest replacement cost.",
        "question_ar": "",
        "evidence_en": "name refers to first_name, last_name; Parents Strongly Precautioned' refers to rating = 'PG-13'; \nhighest replacement cost refers to MAX(replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'PG-13' ORDER BY T3.replacement_cost DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the name of the client who has the largest quantity of rented material without returning it?",
        "question_ar": "",
        "evidence_en": "name refers to first_name, last_name; without returning a rented material refers to return_date is null",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers live in the city of Miyakonojo?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Miyakonojo'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many non-active clients have not returned the rented material?",
        "question_ar": "",
        "evidence_en": "non-active clients refers to active = 0; not returning a rented material refers to rental_date is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.customer_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.active = 0"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the title of the animated films that have the shortest length?",
        "question_ar": "",
        "evidence_en": "animated film means animation; animation is a name of a category",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id ORDER BY T1.length LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "In which country is the store where Hector Poinexter rents equipment located?",
        "question_ar": "",
        "evidence_en": "'Hector Poinexter' is a full name of a customer; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T5.country FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id INNER JOIN city AS T4 ON T3.city_id = T4.city_id INNER JOIN country AS T5 ON T4.country_id = T5.country_id WHERE T1.first_name = 'HECTOR' AND T1.last_name = 'POINDEXTER'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average rental payment in Horror movies?",
        "question_ar": "",
        "evidence_en": "'Horror' is a name of a category; average rental payment refers to AVG(amount)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T5.amount) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id INNER JOIN inventory AS T3 ON T2.film_id = T3.film_id INNER JOIN rental AS T4 ON T3.inventory_id = T4.inventory_id INNER JOIN payment AS T5 ON T4.rental_id = T5.rental_id WHERE T1.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average amount of rent that Christy Vargas paid?",
        "question_ar": "",
        "evidence_en": "'Christy Vargas' is a full name of a customer; full name refers to first_name, last_name; average amount of rent refers to AVG(amount)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'CHRISTY' AND T1.Last_name = 'VARGAS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What percentage of films with a length of less than 100 belong to the Drama category?",
        "question_ar": "",
        "evidence_en": "Drama' is a name of a category; calculation = DIVIDE(SUM(length < 100 AND name = 'Drama'), COUNT(film_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.length < 100 AND T3.name = 'Drama', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the actors that have the same forename as Johnny? Please include in your answer the full names of these actors.",
        "question_ar": "",
        "evidence_en": "forename means first_name; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM actor WHERE first_name = 'Johnny'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the address numbers that are located in Gansu district?",
        "question_ar": "",
        "evidence_en": "address numbers refers to address_id;",
        "evidence_ar": "",
        "SQL": "SELECT address_id FROM address WHERE district = 'Gansu'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list three types of film along with their IDs and the latest update.",
        "question_ar": "",
        "evidence_en": "types of film refers to the name of a category; IDs refers to category_id; latest update refers to last_update.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name, category_id, last_update FROM category LIMIT 3"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the full names of any three inactive customers.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; inactive customers refers to active = 0",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the rental price per day for Airplane Sierra?",
        "question_ar": "",
        "evidence_en": "rental price per day refers to DIVIDE(rental_price, rental_duration); 'Airplane Sierra' is a title of a film",
        "evidence_ar": "",
        "SQL": "SELECT rental_rate / rental_duration AS result FROM film WHERE title = 'AIRPLANE SIERRA'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Where is store number 2 located?",
        "question_ar": "",
        "evidence_en": "store number 2 refers to store_id = 2; where is a store located refers to address, address2, district",
        "evidence_ar": "",
        "SQL": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which city does the address 1623 Kingstown Drive belong to?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please name three cities that belong to Algeria.",
        "question_ar": "",
        "evidence_en": "Algeria is a country",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the category of the film Agent Truman?",
        "question_ar": "",
        "evidence_en": "'Agent Truman' is a title of a film; category refers to name",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the titles of any three action films.",
        "question_ar": "",
        "evidence_en": "action is a name of category",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Action' LIMIT 3"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the difference between the number of children's films and action films?",
        "question_ar": "",
        "evidence_en": "'children' AND 'action' are names of a category; Calculation = SUBTRACT(AVG('children'), AVG('action'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which district does Maria Miller live in?",
        "question_ar": "",
        "evidence_en": "'Maria Miller' is a name of a customer; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.district FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the customer that is active and lives at 1795 Santiago de Compostela Way, Texas?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1; '1795 Santiago de Compostela Way' is an address; Texas is a district; who refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T2.address = '1795 Santiago de Compostela Way' AND T1.active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many English films have a duration of over 50 minutes and the cost of replacement are under 10.99?",
        "question_ar": "",
        "evidence_en": "English is a name of a language; duration of over 50 minutes refers to length > 50; cost of replacement are under 10.99 refers to replacement_cost < 10.99",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.length > 50 AND T1.replacement_cost < 10.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who are the actors that act in the ACADEMY DINOSAUR film?",
        "question_ar": "",
        "evidence_en": "Who are the actors refers to full name; full name refers to first_name, last_name; 'ACADEMY DINOSAUR' is a title of a film",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list any two films that Penelope Guiness acted in.",
        "question_ar": "",
        "evidence_en": "film refers to title of the film; 'Penelope Guiness' is a full name of an actor; full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Penelope' AND T1.last_name = 'Guiness' LIMIT 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the percentage of documentary films?",
        "question_ar": "",
        "evidence_en": "documentary' is a name of a category; calculation = DIVIDE(SUM(name = 'Documentary'), COUNT(film_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name = 'Documentary', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films in English are for adults only?",
        "question_ar": "",
        "evidence_en": "English is a name of a language; for adults only refers to rating = 'NC-17'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.rating = 'NC-17'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which film has the longest duration?",
        "question_ar": "",
        "evidence_en": "film refers to the title; the longest duration refers to MAX(length)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many of the actors are named \"Dan\"?",
        "question_ar": "",
        "evidence_en": "'Dan' is a first_name of an actor",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(actor_id) FROM actor WHERE first_name = 'Dan'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the most common first name among the customers?",
        "question_ar": "",
        "evidence_en": "the most common first name refers to MAX(COUNT(first_name))",
        "evidence_ar": "",
        "SQL": "SELECT first_name FROM customer GROUP BY first_name ORDER BY COUNT(first_name) DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the ratings of the film featuring behind the scenes?",
        "question_ar": "",
        "evidence_en": "film featuring behind the scenes refers to special_features = 'Behind the Scenes'",
        "evidence_ar": "",
        "SQL": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the largest number of films rented per customer?",
        "question_ar": "",
        "evidence_en": "the largest number of films refers to MAX(rental_id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(rental_id) FROM rental GROUP BY customer_id ORDER BY COUNT(rental_id) DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the films with the word \"Lacklusture\" in their description.",
        "question_ar": "",
        "evidence_en": "films refers to title",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films did a customer named Francis Sikes rent?",
        "question_ar": "",
        "evidence_en": "'Francis Sikes' is a full name of a customer; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'FRANCIS' AND T1.last_name = 'SIKES'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the manager of the store with the largest collection of films?",
        "question_ar": "",
        "evidence_en": "Who refers to first_name, last_name; the largest collection of films refers to MAX(film_id)",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.film_id) AS num FROM inventory AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the addresses of the inactive customers?",
        "question_ar": "",
        "evidence_en": "inactive customers refers to active = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.active = 0"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which category is the most common?",
        "question_ar": "",
        "evidence_en": "most common category refers to MAX(COUNT(category.name))",
        "evidence_ar": "",
        "SQL": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide the cast for the film \"Jason trap\".",
        "question_ar": "",
        "evidence_en": "'Jason trap' is a title of a film; cast means actor; actor refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'JASON TRAP'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who is the customer with the largest payment for rental films?",
        "question_ar": "",
        "evidence_en": "Who refers to first_name, last_name; the largest payment for rental refers to MAX(SUM(amount))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS num FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the top 5 most-rented films.",
        "question_ar": "",
        "evidence_en": "film refers to title; most rented refers to MAX(inventory_id)",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which country does Sasebo belong to?",
        "question_ar": "",
        "evidence_en": "'Sasebo' is a city",
        "evidence_ar": "",
        "SQL": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Sasebo'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the addresses for the stores?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.address FROM store AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the animation titles.",
        "question_ar": "",
        "evidence_en": "'animation' is a name of a category",
        "evidence_ar": "",
        "SQL": "SELECT T3.title AS per FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Animation'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the city with the most customers?",
        "question_ar": "",
        "evidence_en": "the most customers refers to MAX(COUNT(customer_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.city FROM ( SELECT T1.city, COUNT(T3.customer_id) AS num FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id GROUP BY T1.city ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which actor acted in the most films?",
        "question_ar": "",
        "evidence_en": "actor refers to first_name, last_name; the most film refers to MAX(SUM(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, SUM(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What percentage of films are horror films?",
        "question_ar": "",
        "evidence_en": "horror' is a name of a category; calculation = DIVIDE(SUM(name = 'Horror'), COUNT(film_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please indicate the full name of actor id 5.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM actor WHERE actor_id = 5"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many id movies have category id 11?",
        "question_ar": "",
        "evidence_en": "id movies refers to film_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film_category WHERE category_id = 11"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which category does BABY HALL film belong to?",
        "question_ar": "",
        "evidence_en": "category refers to name; BABY HALL film refers to title = 'BABY HALL'",
        "evidence_ar": "",
        "SQL": "SELECT T3.`name` FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BABY HALL'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the full name of the actor with the highest rental rate.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the highest rental rate refers to max(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please give the description of the movie starring JENNIFER DAVIS.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.description FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T1.first_name = 'JOHNNY' AND T1.last_name = 'DAVIS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the full names of customers who have paid more than 10$.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; more than 10$ refers to amount > 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please provide the address of the customer whose first name is SUSAN with the postal code 77948.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers have an address in Abu Dhabi city? List those customer names.",
        "question_ar": "",
        "evidence_en": "name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.city_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Abu Dhabi'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please provide the full name of the customer at 692 Joliet Street.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 692 Joliet Street refers to address = '692 Joliet Street'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '692 Joliet Street'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List movie titles with duration over 120 minutes that are in the action category.",
        "question_ar": "",
        "evidence_en": "duration over 120 minutes refers to length > 120; action category refers to category.name = 'action'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.`name` = 'action' AND T1.length > 120"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which actor acted in ANONYMOUS HUMAN?",
        "question_ar": "",
        "evidence_en": "actor refers to first_name, last_name; ANONYMOUS HUMAN refers to title = 'ANONYMOUS HUMAN'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which movie title has the lowest movie rental in the horror category?",
        "question_ar": "",
        "evidence_en": "the lowest movie rental refers to min(rental_rate); the horror category refers to category.name = 'Horror'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.`name` = 'Horror' ORDER BY T1.rental_rate LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the descriptions of movies under the category Travel.",
        "question_ar": "",
        "evidence_en": "the category Travel refers to category.name = 'Travel'",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.`name` = 'Travel'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the total payment amount of customers in Nagasaki district.",
        "question_ar": "",
        "evidence_en": "the total payment amount refers to sum(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.district = 'Nagasaki'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the percentage of total payment of MARGARET MOORE customers.",
        "question_ar": "",
        "evidence_en": "percentage = divide(sum(amount where first_name = 'MARGARET' and last_name = 'MOORE'), sum(amount)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the percentage of movie titles with a screen length of more than 120 minutes that have a category of horror movies.",
        "question_ar": "",
        "evidence_en": "screen length of more than 120 minutes refers to length > 120; category of horror refers to category.name = 'Horror'; percentage = divide(count(title where length > 120 and category.name = 'Horror'), count(title)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.`name` = 'Horror', 1, 0)) * 100 / COUNT(T1.film_id) AS REAL) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.length > 120"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many film titles were released in 2006?",
        "question_ar": "",
        "evidence_en": "released in 2006 refers to release_year = 2006",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE release_year = 2006"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down film titles from id 1 to 10.",
        "question_ar": "",
        "evidence_en": "id 1 to 10 refers to film_id BETWEEN 1 and 10",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all of the film IDs with highest rental duration.",
        "question_ar": "",
        "evidence_en": "highest rental duration refers to max(rental_duration)",
        "evidence_ar": "",
        "SQL": "SELECT film_id FROM film WHERE rental_duration = ( SELECT MAX(rental_duration) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which film titles have the most expensive rental rate?",
        "question_ar": "",
        "evidence_en": "the most expensive rental rate refers to max(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE rental_rate = ( SELECT MAX(rental_rate) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all of the film titles that are rated for general audiences.",
        "question_ar": "",
        "evidence_en": "rated for general audiences means rating = 'G'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE rating = 'G'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the language for film titled \"CHILL LUCK\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.`name` FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the last updated date for English film titles that were released in 2006?",
        "question_ar": "",
        "evidence_en": "the last updated date refers to last_update; English is name of language; released in 2006 refers to release_year = 2006\n\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T2.`name` = 'English' AND T1.release_year = 2006"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many Italian film titles were special featured with deleted scenes?",
        "question_ar": "",
        "evidence_en": "Italian is name of language; special featured with deleted scenes refers to special_features = 'deleted scenes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T2.`name` = 'Italian' AND T1.special_features = 'deleted scenes'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many animation film titles are rated for adults only?",
        "question_ar": "",
        "evidence_en": "animation film refers to category.name = 'animation'; for adults only means rating = 'NC-17'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.title) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'animation' AND T1.rating = 'NC-17'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all ratings of action film titles.",
        "question_ar": "",
        "evidence_en": "for General Audiences means rating = 'G'; Parental Guidance Suggested means rating = 'PG'; Parents Strongly Cautioned means rating = 'PG-13'; Restricted means rating = 'R'; Adults Only means rating = 'NC-17'; action film refers to category.name = 'action'",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'action'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all film IDs of comedy film titles.",
        "question_ar": "",
        "evidence_en": "comedy is name of category",
        "evidence_ar": "",
        "SQL": "SELECT T1.film_id FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'comedy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "State the documentary film titles with longest length.",
        "question_ar": "",
        "evidence_en": "documentary film refers to name = 'documentary'; longest length refers to max(length)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'documentary' ORDER BY T1.length DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the category of film titled \"BLADE POLISH\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BLADE POLISH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is Mary Smith's rental ID?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.rental_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'MARY' AND T1.last_name = 'SMITH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all of the customers' first name who were attended by staff with ID 1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down email address of customers who were attended by staff with ID 2.",
        "question_ar": "",
        "evidence_en": "email address refers to email",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.email FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 2"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down the actor IDs of film titled \"BOUND CHEAPER\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.actor_id FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'BOUND CHEAPER'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the inventory ID of Karen Jackson?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down all film titles starred by Jane Jackman.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T3.first_name = 'JANE' AND T3.last_name = 'JACKMAN'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who are the actors of film titled \"BIRD INDEPENDENCE\"?",
        "question_ar": "",
        "evidence_en": "actor refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the total rental rate for animation film titles.",
        "question_ar": "",
        "evidence_en": "animation film refers to category.name = 'Animation'; total rental rate = sum(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.`name` = 'Animation'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average rental rate of sci-fi film titles?",
        "question_ar": "",
        "evidence_en": "sci-fi film refers to category.name = 'Sci-Fi'; average rental rate = avg(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.`name` = 'Sci-Fi'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the percentage of horror film titles in English film titles?",
        "question_ar": "",
        "evidence_en": "horror film refers to category.name = 'Horror'; English film refers to language.name = 'English'; percentage = divide(count(film_id where category.name = 'Horror'), count(film_id)) where language.name = 'English' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the adult films, how many of them have a rental duration of fewer than 4 days?",
        "question_ar": "",
        "evidence_en": "adult film refers to rating = 'NC-17'; rental duration of fewer than 4 days refers to rental_duration < 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the title of the restricted film, whose length is 71 minutes and whose replacement cost is $29.99?",
        "question_ar": "",
        "evidence_en": "restricted means rating = 'R'; length is 71 minutes refers to length = 71; replacement cost is $29.99 refers to replacement_cost = 29.99",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE replacement_cost = 29.99 AND rating = 'R' AND length = 71"
    },
    {
        "db_id": "movie_3",
        "question_en": "Write down the email addresses of active customers who rented between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM.",
        "question_ar": "",
        "evidence_en": "email address refers to email; active refers to active = 1; between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM refers to rental_date between '2005-5-25 07:37:47' and '2005-5-26 10:06:49'",
        "evidence_ar": "",
        "SQL": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Compute the total payment made by Sarah Lewis for film rentals so far.",
        "question_ar": "",
        "evidence_en": "total payment = sum(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.amount) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN payment AS T3 ON T1.rental_id = T3.rental_id WHERE T2.first_name = 'SARAH' AND T2.last_name = 'LEWIS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "From 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM, how many times did Susan Wilson pay for film rentals?",
        "question_ar": "",
        "evidence_en": "from 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM refers to payment_date between '2005-05-30 03:43:54' and '2005-07-31 10:08:29'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Tally the full names of actors in the film \"Alabama Devil.\"",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; \"Alabama Devil\" refers to title = 'ALABAMA DEVIL'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ALABAMA DEVIL'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Tell me the title of the film in which Sandra Kilmer is one of the actors.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'SANDRA' AND T2.last_name = 'KILMER'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many documentary films are rated PG-13?",
        "question_ar": "",
        "evidence_en": "documentary film refers to category.name = 'documentary'; rated PG-13 refers to rating = 'PG-13'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' AND T1.rating = 'PG-13'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give me the title and category name of films whose price per day is more than $30. Please include their special features.",
        "question_ar": "",
        "evidence_en": "category name refers to category.name; price per day is more than $30 refers to multiply(rental_duration, rental_rate) > 30",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T3.name, T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration * T1.rental_rate > 30"
    },
    {
        "db_id": "movie_3",
        "question_en": "Name the cast members of the movie 'African Egg'.",
        "question_ar": "",
        "evidence_en": "cast member name refers to first_name, last_name; 'African Egg' refers to title = 'AFRICAN EGG'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Identify the number of movies rented by Maria Miller.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Name the most recent movie rented by Dorothy Taylor.",
        "question_ar": "",
        "evidence_en": "movie name refers to title; the most recent refers to max(rental_date)",
        "evidence_ar": "",
        "SQL": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'DOROTHY' AND T1.last_name = 'TAYLOR' ORDER BY T2.rental_date DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Determine the number of action movies available for rent.",
        "question_ar": "",
        "evidence_en": "action movie refers to category.name = 'Action'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.film_id) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id WHERE T1.name = 'Action'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Where can you rent the movie 'Wyoming Storm'? Identify the address of the rental store and the rental rate.",
        "question_ar": "",
        "evidence_en": "'Wyoming Storm' refers to title = 'WYOMING STORM'",
        "evidence_ar": "",
        "SQL": "SELECT T2.store_id, T1.address, T4.rental_rate FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id INNER JOIN inventory AS T3 ON T2.store_id = T3.store_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'WYOMING STORM'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How long did Austin Cintron take to return the movie 'Destiny Saturday'?",
        "question_ar": "",
        "evidence_en": "'Destiny Saturday' refers to title = 'DESTINY SATURDAY'; length = subtract(return_date, rental_date)",
        "evidence_ar": "",
        "SQL": "SELECT T2.rental_date - T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'AUSTIN' AND T4.title = 'DESTINY SATURDAY'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Identify the number of movies that starred Nick Stallone.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id AND T2.first_name = 'NICK' AND T2.last_name = 'STALLONE'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Name the movie with the highest rental revenue among the shortest films.",
        "question_ar": "",
        "evidence_en": "movie name refers to title; the highest rental revenue refers to max(multiply(rental_duration, rental_rate)); the shortest film refers to min(length)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE length = ( SELECT MIN(length) FROM film ) ORDER BY rental_duration * rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the total amount paid by Stephanie Mitchell for film rentals in June 2005.",
        "question_ar": "",
        "evidence_en": "the total amount = sum(amount); in June 2005 refers to payment_date like '2005-06%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'STEPHANIE' AND T2.last_name = 'MITCHELL' AND SUBSTR(T1.payment_date, 1, 7) = '2005-06'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average replacement cost for the movies with a rental rate of 4.99?",
        "question_ar": "",
        "evidence_en": "a rental rate of 4.99 refers to rental_rate = 4.99; average replacement cost = avg(replacement_cost)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average rental rate for PG-13 rated movies?",
        "question_ar": "",
        "evidence_en": "PG-13 rated movie refers to rating = 'PG-13'; average rental rate = avg(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Indicate the percentage of inactive customers at store no.1.",
        "question_ar": "",
        "evidence_en": "inactive refers to active = 0; store no.1 refers to store_id = 1; percentage = divide(count(customer_id where active = 0), count(customer_id)) * 100% where store_id = 1",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(customer_id) FROM customer WHERE store_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "For how long can you rent the movie 'Dirty Ace'?",
        "question_ar": "",
        "evidence_en": "length refers to rental_duration; 'Dirty Ace' refers to title = 'DIRTY ACE'",
        "evidence_ar": "",
        "SQL": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Identify the full name of the customer, who has the following email address: SHEILA.WELLS@sakilacustomer.org.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide the list of the longest movies. Arrange these titles in alphabetical order.",
        "question_ar": "",
        "evidence_en": "the longest refers to max(length)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many film categories are there?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT category_id) FROM category"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many titles did Mary Smith rent in 2005? Determine the percentage of titles rented in June 2005.",
        "question_ar": "",
        "evidence_en": "in June 2005 refers to month(rental_date) = 6 and year(rental_date) = 2005; percentage = divide(count(inventory_id where month(rental_date) = 6 and year(rental_date) = 2005), count(inventory_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers are still active?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the films that are rated as PG-13.",
        "question_ar": "",
        "evidence_en": "film refers to title; rated as PG-13 refers to rating = 'PG-13'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM film WHERE rating = 'PG-13'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List at least 10 films that the customers can rent for more than 5 days.",
        "question_ar": "",
        "evidence_en": "film refers to title; rent for more than 5 days refers to rental_duration > 5",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.customer_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.rental_duration > 5 GROUP BY T1.title ) AS T WHERE T.num > 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the cities that belong to United Arab Emirates.",
        "question_ar": "",
        "evidence_en": "United Arab Emirates refers to country = 'United Arab Emirates'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'United Arab Emirates'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List at least 5 customers who paid greater than $10. Provide the full name of the customers.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; greater than $10 refers to amount > 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10"
    },
    {
        "db_id": "movie_3",
        "question_en": "What films did Burt Dukakis got star in?",
        "question_ar": "",
        "evidence_en": "film refers to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Provide the full name of all the actors of the film \"Ending Crowds\".",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; film \"Ending Crowds\" refers to title = 'ENDING CROWDS'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ENDING CROWDS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who are the actors starred in the film \"Bound Cheaper\"?",
        "question_ar": "",
        "evidence_en": "actor refers to first_name, last_name; film \"Bound Cheaper\" refers to title = 'BOUND CHEAPER'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BOUND CHEAPER'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the films that Karl Berr starred in and rated as PG.",
        "question_ar": "",
        "evidence_en": "film refers to title; rated as PG refers to rating = 'PG'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List at least 3 cities under the country of Philippines.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'Philippines'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the films that are least rented by the customers?",
        "question_ar": "",
        "evidence_en": "film refers to title; least rented refers to count(min(customer_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.title FROM ( SELECT T3.title, COUNT(T1.customer_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "List all the description of the films starring Lucille Tracy?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.film_id FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'LUCILLE' AND T2.last_name = 'TRACY'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which category is the film \"Beach Heartbreakers\" falls into?",
        "question_ar": "",
        "evidence_en": "category refers to name; film \"Beach Heartbreakers\" refers to title = 'BEACH HEARTBREAKERS'",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'BEACH HEARTBREAKERS'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List at least 10 films that falls into the Horror category.",
        "question_ar": "",
        "evidence_en": "film refers to title; Horror category refers to category.name = 'Horror'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Who among the actors starred in a NC-17 rated film? Provide only the last name of the actors.",
        "question_ar": "",
        "evidence_en": "NC-17 rated refers to rating = 'NC-17'",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'NC-17'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Calculate the average rate of renting the film that Lucille Tracy got starred.",
        "question_ar": "",
        "evidence_en": "average rate = divide(sum(rental_rate), count(film_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.rental_rate) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'LUCILLE' AND T1.last_name = 'TRACY'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many films have a duration between 100 to 110 minutes?",
        "question_ar": "",
        "evidence_en": "duration between 100 to 110 minutes refers to length between 100 and 110",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE length BETWEEN 100 AND 110"
    },
    {
        "db_id": "movie_3",
        "question_en": "List down the actor ID of actors with Dee as their last name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT actor_id FROM actor WHERE last_name = 'Dee'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the active customers, how many of them have Nina as their first name?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE first_name = 'Nina' AND active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "In store ID 2, how many of the films are R rating?\n",
        "question_ar": "",
        "evidence_en": "R rating refers to rating = 'R'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 AND T1.rating = 'R'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the store ID of the films starred by Reese West with a duration of 100 minutes and below?",
        "question_ar": "",
        "evidence_en": "a duration of 100 minutes and below refers to length < 100",
        "evidence_ar": "",
        "SQL": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Give the duration of the film starred by Nick Wahlberg with the highest rental rate.",
        "question_ar": "",
        "evidence_en": "duration refers to length; the highest rental rate refers to max(rental_rate)",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Nick' AND T1.last_name = 'Wahlberg' ORDER BY T3.rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What are the titles of the films starred by Russell Close?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'Russell' AND T2.last_name = 'Close'"
    },
    {
        "db_id": "movie_3",
        "question_en": "List the store ID of the film titled \"Amadeus Holy\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'Amadeus Holy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "In films with a rental rate of 2.99, how many of the films are starred by Nina Soto?",
        "question_ar": "",
        "evidence_en": "a rental rate of 2.99 refers to rental_rate = 2.99",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the films starred by Reese West, what is the difference between the films that have store ID of 1 and store ID of 2?",
        "question_ar": "",
        "evidence_en": "result = subtract(count(film_id where store_id = 1), count(film_id where store_id = 2))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T4.film_id = 1, 1, 0)) - SUM(IIF(T4.film_id = 2, 1, 0)) AS diff FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T2.first_name = 'Reese' AND T2.last_name = 'West'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the postal code of the address 692 Joliet Street?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT postal_code FROM address WHERE address = '692 Joliet Street'"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many customers are active?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE active = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among all the customers of store no.1, how many of them are active?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the address of Mary Smith?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among all the active customers, how many of them live in Arlington?",
        "question_ar": "",
        "evidence_en": "active refers to active = 1; Arlington refers to city = 'Arlington'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.customer_id) FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.active = 1 AND T3.city = 'Arlington'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please list the full names of all the customers who live in Italy.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; Italy refers to country = 'Italy'",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T3.country = 'Italy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Which country does Mary Smith live in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T4.first_name = 'MARY' AND T4.last_name = 'SMITH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the biggest amount of payment for a rental made by Mary Smith?",
        "question_ar": "",
        "evidence_en": "the biggest amount refers to max(amount)",
        "evidence_ar": "",
        "SQL": "SELECT T1.amount FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How many times has Mary Smith rented a film?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the total amount of money Mary Smith has spent on film rentals?",
        "question_ar": "",
        "evidence_en": "the total amount = sum(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the times Mary Smith had rented a movie, how many of them happened in June, 2005?",
        "question_ar": "",
        "evidence_en": "in June 2005 refers to year(payment_date) = 2005 and month(payment_date) = 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND STRFTIME('%Y',T1.payment_date) = '2005' AND STRFTIME('%Y', T1.payment_date) = '6'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Please give the full name of the customer who had made the biggest amount of payment in one single film rental.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; the biggest amount refers to max(amount)",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "db_id": "movie_3",
        "question_en": "How much in total had the customers in Italy spent on film rentals?",
        "question_ar": "",
        "evidence_en": "total = sum(amount); Italy refers to country = 'Italy'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'"
    },
    {
        "db_id": "movie_3",
        "question_en": "Among the payments made by Mary Smith, how many of them are over 4.99?",
        "question_ar": "",
        "evidence_en": "over 4.99 refers to amount > 4.99",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99"
    },
    {
        "db_id": "movie_3",
        "question_en": "What is the average amount of money spent by a customer in Italy on a single film rental?",
        "question_ar": "",
        "evidence_en": "Italy refers to country = 'Italy'; average amount = divide(sum(amount), count(customer_id)) where country = 'Italy'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'"
    }
]