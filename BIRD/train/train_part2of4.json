[
    {
        "db_id": "superstore",
        "question_en": "What was the original price of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?",
        "question_ar": "",
        "evidence_en": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); original price refers to DIVIDE(Sales, SUTRACT(1, discount))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Sales / (1 - T2.Discount) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952' AND T2.`Order Date` = '2014-09-10'"
    },
    {
        "db_id": "superstore",
        "question_en": "What was the total cost of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?",
        "question_ar": "",
        "evidence_en": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); total cost refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952' AND T2.`Order Date` = '2014-09-10'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many art products were ordered in 2013 in the east superstore?",
        "question_ar": "",
        "evidence_en": "ordered in 2013 refers to strftime('%Y', \"Order Date\") = '2013'; art products refers to \"Sub-Category\" = 'Art'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Product ID`) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Sub-Category` = 'Art' AND T1.Region = 'East' AND STRFTIME('%Y', T1.`Order Date`) = '2013'"
    },
    {
        "db_id": "superstore",
        "question_en": "Who is the customer who purchased the largest total cost of products in a single order?",
        "question_ar": "",
        "evidence_en": "largest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` GROUP BY T1.`Order ID`, T2.`Customer Name` ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the name of the product that has the highest original price?",
        "question_ar": "",
        "evidence_en": "has the highest original price refers to MAX(DIVIDE(Sales, SUTRACT(1, discount))); name of the product refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the name of the product that was ordered recently by Darren Powers?",
        "question_ar": "",
        "evidence_en": "Darren Powers is the \"Customer Name\"; name of the product refers to \"Product Name\"; recently refers to MAX(\"Order Date\")",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Darren Powers' ORDER BY T2.`Order Date` DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "How many quantities of Advantus plastic paper clips were ordered overall?",
        "question_ar": "",
        "evidence_en": "Advantus plastic paper clips is the \"Product Name\";",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Advantus Plastic Paper Clips'"
    },
    {
        "db_id": "superstore",
        "question_en": "Which order of Logitech G600 MMO Gaming Mouse has the highest total cost?",
        "question_ar": "",
        "evidence_en": "Logitech G600 MMO Gaming Mouse refers to \"Product Name\"; highest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Order ID` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Logitech G600 MMO Gaming Mouse' GROUP BY T1.`Order ID` ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the names of the products that were ordered by Alejandro Grove?",
        "question_ar": "",
        "evidence_en": "ordered by Alejandro Grove refers to \"Customer Name\" = 'Alejandro Grove'; names of the products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Alejandro Grove'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many customers in Chicago ordered at least 10 Cardinal EasyOpen D-Ring Binders in a single order?",
        "question_ar": "",
        "evidence_en": "at least 10 goods refers to Quantity > = 14; Cardinal EasyOpen D-Ring Binders refers to \"Product Name\"; customers in Chicago refers to City = 'Chicago'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Customer ID`) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the names of the products with a profit of no less than 1,000 in one single order?",
        "question_ar": "",
        "evidence_en": "profit of no less than 1,000 refers to Profit > = 1000; names of the products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.Profit > 1000"
    },
    {
        "db_id": "superstore",
        "question_en": "Name 10 products that were shipped first class from the East region.",
        "question_ar": "",
        "evidence_en": "shipped first class refers to \"Ship Mode\" = 'First Class'; Region = 'East'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'First Class' AND T2.Region = 'East' LIMIT 10"
    },
    {
        "db_id": "superstore",
        "question_en": "List the products ordered by Becky Martin around the Central region.",
        "question_ar": "",
        "evidence_en": "ordered by Becky Martin refers to \"Customer Name\" = 'Becky Martin'; Region = 'Central'; products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Becky Martin' AND T3.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "List 5 customers in the West region who had their item shipped 'Second Class.'",
        "question_ar": "",
        "evidence_en": "shipped 'Second Class.' refers to \"Ship Mode\" = 'Second Class'; customers refers to \"Customer Name\"; Region = 'West'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'West' AND T1.`Ship Mode` = 'Second Class' LIMIT 5"
    },
    {
        "db_id": "superstore",
        "question_en": "Add the total profit of Patrick Gardner in the Central region.",
        "question_ar": "",
        "evidence_en": "Patrick Gardner is the \"Customer Name\"; Region = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Patrick Gardner' AND T1.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Which item was shipped on 3/4/2013 and scheduled for same day delivery in the South region?",
        "question_ar": "",
        "evidence_en": "shipped on 3/4/2013 refers to \"Order Date\" = date('2013-03-04'); same day delivery refers to \"Ship Mode\" = 'Same Day'; item refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Date` = '2013-03-04' AND T2.Region = 'South' AND T1.`Order Date` = '2013-03-04'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the total sales of 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' in the Central region?",
        "question_ar": "",
        "evidence_en": "'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' is the \"Product Name\";",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Sales) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' AND T2.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Name the item ordered by Jonathan Doherty with the highest quantity in the East region.",
        "question_ar": "",
        "evidence_en": "Jonathan Doherty is the \"Customer Name\"; highest quantity refers to MAX(Quantity); Region = 'East'",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Product Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Jonathan Doherty' AND T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "How much is the total quantity of items from the East region shipped on 3/25/2015? Name the products.",
        "question_ar": "",
        "evidence_en": "shipped on 3/25/2015 refers to \"Ship Date\" = Date('2015-03-25');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Quantity), T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Date` = '2015-03-25' AND T2.Region = 'East'"
    },
    {
        "db_id": "superstore",
        "question_en": "Which customer ordered 'Global High-Back Leather Tilter, Burgundy' on 10/13/2013 in the East region?",
        "question_ar": "",
        "evidence_en": "'Global High-Back Leather Tilter, Burgundy' is the \"Product Name\"; on 10/13/2013 refers to \"Order Date\" = Date('2013-10-13'); Region = 'East'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Global High-Back Leather Tilter, Burgundy' AND T1.`Order Date` = '2013-10-13' AND T1.Region = 'East'"
    },
    {
        "db_id": "superstore",
        "question_en": "What category does the item ordered by Katherine Murray on 11/4/2018 in the South region belong to?",
        "question_ar": "",
        "evidence_en": "ordered by Katherine Murray refers to \"Customer Name\" = 'Katherine Murray'; on 11/4/2018 refers to \"Order Date\" = Date('2018-11-04');",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Katherine Murray' AND T1.`Order Date` = '2018-11-04' AND T2.Region = 'South'"
    },
    {
        "db_id": "superstore",
        "question_en": "What percentage do items under the category of 'Furniture' make up the total number of items ordered that are shipped as standard in the West region?",
        "question_ar": "",
        "evidence_en": "shipped as standard refers to \"Ship Mode\" = 'Standard Class'; Region = 'West'; percentage refers to DIVIDE(SUM(Quantity where Category = 'Furniture'), SUM(Quantity)) * 1.0",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T2.Category = 'Furniture' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'West' AND T1.`Ship Mode` = 'Standard Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the ship date of the order by the customer named Ann Chong in the central region?",
        "question_ar": "",
        "evidence_en": "Ann Chong' is the \"Customer Name\"; Region = 'Central'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Ship Date` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Ann Chong' AND T1.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Give the customer segment from the West region that orders the order ID CA-2011-108189.",
        "question_ar": "",
        "evidence_en": "Region = 'West'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'West' AND T1.`Order ID` = 'CA-2011-108189'"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the total sales of the accumulated orders of Hon Valutask Swivel Chairs in the West region?",
        "question_ar": "",
        "evidence_en": "'Hon Valutask Swivel Chairs' is the \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Sales) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Hon Valutask Swivel Chairs' AND T1.Region = 'West'"
    },
    {
        "db_id": "superstore",
        "question_en": "Provide the order ID of Frank Olsen of the South region.",
        "question_ar": "",
        "evidence_en": "Frank Olsen' is the \"Customer Name\"; Region = 'South'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Order ID` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Region = 'South' AND T2.`Customer Name` = 'Frank Olsen'"
    },
    {
        "db_id": "superstore",
        "question_en": "What product was ordered in the Central region on April 26, 2018, and shipped by April 27, 2018?",
        "question_ar": "",
        "evidence_en": "on April 26, 2018 refers to \"Order Date\" = date('2018-04-26'); shipped by April 27, 2018 refers to \"Ship Date\" = date('2018-04-27');",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order Date` = '2018-04-26' AND T1.`Ship Date` = '2018-04-27' AND T2.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "From which city and state does the customer that bought the product with the highest sales?",
        "question_ar": "",
        "evidence_en": "highest sales refers to max(Sales)",
        "evidence_ar": "",
        "SQL": "SELECT T5.City, T5.State FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN central_superstore AS T3 ON T3.`Customer ID` = T2.`Customer ID` INNER JOIN south_superstore AS T4 ON T4.`Customer ID` = T3.`Customer ID` INNER JOIN people AS T5 ON T5.`Customer ID` = T4.`Customer ID` ORDER BY T2.Sales DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Who is the customer from the East region that purchased the order with the highest profit?",
        "question_ar": "",
        "evidence_en": "highest profit refers to MAX(profit); Region = 'East'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'East' ORDER BY T1.Profit DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the customers from Chicago, Illinois, what is the highest quantity of products bought in a single order?",
        "question_ar": "",
        "evidence_en": "from Chicago refers to City = 'Chicago'; Illinois refers to State = 'Illinois'; highest quantity refers to max(Quantity)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Quantity FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN central_superstore AS T3 ON T3.`Customer ID` = T2.`Customer ID` INNER JOIN south_superstore AS T4 ON T4.`Customer ID` = T3.`Customer ID` INNER JOIN people AS T5 ON T5.`Customer ID` = T4.`Customer ID` WHERE T5.City = 'Chicago' AND T5.State = 'Illinois' ORDER BY T1.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the order date and product name of the order ID CA-2011-137274 from the Central region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Order Date`, T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-137274' AND T2.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "List down the customers that purchased the product named Xerox 23 in the South region.",
        "question_ar": "",
        "evidence_en": "product named Xerox 23 refers to \"Product Name\" = 'Xerox 23'; customers refers to \"Customer Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T1.Region = 'South' AND T3.`Product Name` = 'Xerox 23'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the products under the office supplies category, what is the product that made the highest sales in the Central region?",
        "question_ar": "",
        "evidence_en": "made the highest sales refers to MAX(Sales)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Category = 'Office Supplies' AND T2.Region = 'Central' ORDER BY T1.Sales DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Who is the customer from the West region that received the highest discount?",
        "question_ar": "",
        "evidence_en": "received the highest discount refers to MAX(discount); customer refers to \"Customer Name\"",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'West' ORDER BY T1.Discount DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Provide the names of the products with a profit greater than 98% of the average profit of all products in the East region.",
        "question_ar": "",
        "evidence_en": "names of the products refers to \"Product Name\";  profit greater than 98% of the average profit refers to Profit > MULTIPLY(AVG(Profit), 0.98)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'East' AND T1.Profit > ( SELECT AVG(Profit) * 0.98 FROM east_superstore )"
    },
    {
        "db_id": "superstore",
        "question_en": "Name the customers from the Eastern region whose orders cost above 80000.",
        "question_ar": "",
        "evidence_en": "cost above 80000 refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit) > 80000",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'East' AND T1.Sales / (1 - T1.Discount) * T1.Quantity - T1.Profit > 80000"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders were made by Maxwell Schwartz in 2015?",
        "question_ar": "",
        "evidence_en": "Maxwell Schwartz' is the \"Customer Name\"; in 2015 refers to strftime('%Y', \"Order Date\") = '2015';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Order ID`) FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.`Customer Name` = 'Maxwell Schwartz' AND STRFTIME('%Y', T1.`Order Date`) = '2015'"
    },
    {
        "db_id": "superstore",
        "question_en": "Who ordered the Bush Mission Pointe Library in the Central Region?",
        "question_ar": "",
        "evidence_en": "Bush Mission Pointe Library' is the \"Product Name\";",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM central_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Bush Mission Pointe Library' AND T3.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Calculate the total profit by Cisco SPA301 for all regions.",
        "question_ar": "",
        "evidence_en": "Cisco SPA301' is the \"Product Name\"; all regions refers to central_superstore, south_superstore, west_superstore, east_superstore",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Profit) + SUM(T2.Profit) + SUM(T3.Profit) + SUM(T4.Profit) AS totalProfit FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN central_superstore AS T3 ON T3.`Customer ID` = T2.`Customer ID` INNER JOIN south_superstore AS T4 ON T4.`Customer ID` = T3.`Customer ID` INNER JOIN product AS T5 ON T5.`Product ID` = T4.`Product ID` WHERE T5.`Product Name` = 'Cisco SPA301'"
    },
    {
        "db_id": "superstore",
        "question_en": "List the products that were ordered by Anne McFarland from the Western store.",
        "question_ar": "",
        "evidence_en": "Anne McFarland' is the \"Customer Name\"; Western store refers to west_superstore; products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Anne McFarland'"
    },
    {
        "db_id": "superstore",
        "question_en": "List the products ordered by customers in Coachella.",
        "question_ar": "",
        "evidence_en": "in Coachella refers to City = 'Coachella'; products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.City = 'Coachella'"
    },
    {
        "db_id": "superstore",
        "question_en": "Compare the numbers of orders between the Eastern and Western stores in 2015.",
        "question_ar": "",
        "evidence_en": "in 2015 refers to strftime('%Y', \"Order Date\") = '2015'; Eastern store refers to east_superstore; Western store refers west_superstore;",
        "evidence_ar": "",
        "SQL": "SELECT east, west FROM ( SELECT COUNT(`Order ID`) AS east , ( SELECT COUNT(`Order ID`) FROM west_superstore WHERE `Order Date` LIKE '2015%' ) AS west FROM east_superstore WHERE `Order Date` LIKE '2015%' )"
    },
    {
        "db_id": "superstore",
        "question_en": "List the products ordered by Matt Abelman from the Western store in 2013.",
        "question_ar": "",
        "evidence_en": "ordered by Matt Abelman refers to \"Customer Name\" = 'Matt Abelman'; in 2013 refers to \"Order Date\" like '2013%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Matt Abelman' AND STRFTIME('%Y', T1.`Order Date`) = '2013'"
    },
    {
        "db_id": "superstore",
        "question_en": "Calculate the total cost of the orders by Brad Thomas in 2016.",
        "question_ar": "",
        "evidence_en": "Brad Thomas is the \"Customer Name\"; in 2016 refers to strftime('%Y', \"Order Date\") = '2016'; total cost refers to SUM(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))",
        "evidence_ar": "",
        "SQL": "SELECT SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) AS cost FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T1.`Product ID` = T3.`Product ID` AND T1.Region = T3.Region WHERE T1.Region = 'East' AND T2.`Customer Name` = 'Brad Thomas' AND strftime('%Y', T1.`Order Date`) = '2016'"
    },
    {
        "db_id": "superstore",
        "question_en": "Provide the names, cities, and countries of the customers who ordered the Plantronics single ear headset.",
        "question_ar": "",
        "evidence_en": "Plantronics Single Ear Headset' is the \"Product Name\"; name refers to \"Customer Name\";",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name`, T2.City, T2.Country FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Plantronics Single Ear Headset'"
    },
    {
        "db_id": "superstore",
        "question_en": "Provide the shipping dates and products of the orders by Gene Hale.",
        "question_ar": "",
        "evidence_en": "Gene Hale' refers to \"Customer Name\"; shipping date refers to \"Ship Date\"; products refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Ship Date`, T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Gene Hale'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders in the south superstore with the fastest delivery are items of furniture?",
        "question_ar": "",
        "evidence_en": "fastest delivery refers to Ship Mode = 'First Class'; furniture refers to Category = 'Furniture'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Order ID`) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'First Class' AND T2.Category = 'Furniture'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many office supply orders were made by Cindy Stewart in the south superstore?",
        "question_ar": "",
        "evidence_en": "office supply refers to Category = 'Office Supplies'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.Category = 'Office Supplies' AND T2.`Customer Name` = 'Cindy Stewart'"
    },
    {
        "db_id": "superstore",
        "question_en": "What product category got the highest profit in the south superstore?",
        "question_ar": "",
        "evidence_en": "highest profit refers to MAX(Profit)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Category FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` ORDER BY T1.Profit DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "List the name of all products that Cindy Stewart ordered in the east superstore.",
        "question_ar": "",
        "evidence_en": "name of all products refers to Product Name; Cindy Stewart is the Customer Name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Product Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Cindy Stewart'"
    },
    {
        "db_id": "superstore",
        "question_en": "List the name of all products in the west superstore that customers chose for same-day shipment in the year 2013.",
        "question_ar": "",
        "evidence_en": "name of all products refers to Product Name; same-day shipment refers to \"Ship Mode\" = 'Same Day'; year 2013 refers to \"Ship Date\" BETWEEN '2013-01-01' AND '2013-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'Same Day' AND T1.`Ship Date` LIKE '2013%'"
    },
    {
        "db_id": "superstore",
        "question_en": "What product category that Sam Craven ordered from the central and east superstore?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Category FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` LEFT JOIN central_superstore AS T4 ON T3.`Product ID` = T4.`Product ID` WHERE T2.`Customer Name` = 'Sam Craven'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the total quantity that Cindy Stewart order \"Lexmark X 9575 Professional All-in-One Color Printer\" in the south superstore?",
        "question_ar": "",
        "evidence_en": "Lexmark X 9575 Professional All-in-One Color Printer' is the \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Cindy Stewart' AND T3.`Product Name` = 'Lexmark X 9575 Professional All-in-One Color Printer'"
    },
    {
        "db_id": "superstore",
        "question_en": "List the name of all the products with order quantities greater than or equal to 10 in the central superstore that has been shipped by the slowest delivery method.",
        "question_ar": "",
        "evidence_en": "name of all the products refers to Product Name; order quantities greater than or equal to 10 refers to COUNT(\"Order ID\") > = 10; slowest delivery refers to \"Ship Mode\" = 'Standard Class'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'Standard Class' AND T1.Quantity >= 10"
    },
    {
        "db_id": "superstore",
        "question_en": "What product category got the least sales in the west superstore?",
        "question_ar": "",
        "evidence_en": "least sales refers to Sales = MIN(Sales)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` ORDER BY T1.Sales LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the total profit of \"Memorex Froggy Flash Drive 8 GB in south superstore?",
        "question_ar": "",
        "evidence_en": "\"Memorix Froggy Flash Drive 8 GB\" is the \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Profit) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` GROUP BY T2.`Product Name` = 'Memorix Froggy Flash Drive 8 GB'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the total sales of furniture products in the east superstore in the year 2016.\n",
        "question_ar": "",
        "evidence_en": "furniture products refers to Category = 'Furnitures'; in the year 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE STRFTIME('%Y', T1.`Order Date`) = '2016' AND T2.Category = 'Furniture'"
    },
    {
        "db_id": "superstore",
        "question_en": "Calculate the average sales of \"\"Sharp AL-1530CS Digital Copier in the east and the west superstore.",
        "question_ar": "",
        "evidence_en": "Sharp AL-1530CS Digital Copier' is the \"Product Name\"; average sales = AVG(Sales)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Sharp AL-1530CS Digital Copier'"
    },
    {
        "db_id": "superstore",
        "question_en": "Calculate the percentage of ordered office supplies products in the central and the south superstore.",
        "question_ar": "",
        "evidence_en": "office supplies products refers to Category = 'Office Supplies'; central refers to Region = 'Central'; south superstore refers to Region = 'South'; percentage = divide(SUM(Product ID where Category = 'Office Supplies'), count(Product ID)) * 100 where Region = 'Central' OR Region = 'South'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T3.Category = 'Office Supplies' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Category) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID`"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the ratio between customers who live in Texas and customers who live in Indiana?",
        "question_ar": "",
        "evidence_en": "live in Texas refers to State = 'Texas'; live in Indiana refers to State = 'Indiana'; Ratio = divide(sum(State = 'Texas'), sum(State = 'Indiana'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the orders in Central superstore, which art product were ordered the most?",
        "question_ar": "",
        "evidence_en": "art product refers to Sub-Category = 'Art'; the most refers to max(order_number)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Sub-Category` = 'Art' GROUP BY T2.`Product Name` ORDER BY COUNT(T2.`Product ID`) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the customers in South superstore, which customers ordered more than 3 times in 2015? State the name of the customers.",
        "question_ar": "",
        "evidence_en": "name of the customers refers to Customer_Name; in 2015 refers to \"Order Date\" BETWEEN '2015-01-01' AND '2015-12-31'; more than 3 times refers to count(Order_ID) > 3",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE STRFTIME('%Y', T1.`Order Date`) = '2015' GROUP BY T2.`Customer Name` HAVING COUNT(T2.`Customer Name`) > 3"
    },
    {
        "db_id": "superstore",
        "question_en": "State the highest profit made by Anna Chung's orders in the Central Superstore.",
        "question_ar": "",
        "evidence_en": "highest profit refers to max(Profit)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Anna Chung'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders were made by Corey Roper in 2015?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.`Customer ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Corey Roper' AND STRFTIME('%Y', T2.`Ship Date`) = '2015'"
    },
    {
        "db_id": "superstore",
        "question_en": "Calculate the difference between the total sales in the East superstore and the total sales in the West superstore.",
        "question_ar": "",
        "evidence_en": "East superstore refers to Region = 'East'; West superstore refers to Region = 'West'; difference = subtract(sum(Sales) when Region = 'East', sum(Sales) when Region = 'West')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Sales) - SUM(T2.Sales) AS difference FROM east_superstore AS T1 INNER JOIN west_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID`"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the names of the ordered products that have profit deficiency in central superstore?",
        "question_ar": "",
        "evidence_en": "names of the ordered products refers to Product Name; deficiency refers to profit value is negative; profit > 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'Central' AND T1.Profit < 0"
    },
    {
        "db_id": "superstore",
        "question_en": "In west superstore, what is the name and the shipping mode of the product that was ordered with the shortest shipment time?",
        "question_ar": "",
        "evidence_en": "name refers to \"Product Name\"; shipping mode refers to Ship Mode; shortest shipment time refers to min(subtract(Ship Date, Order Date))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name`, T1.`Ship Mode` FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'West' ORDER BY T1.`Ship Date` - T1.`Order Date` LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders of O'Sullivan Plantations 2-Door Library in Landvery Oak in central superstore were shipped through the shipping mode with the fastest delivery speed?",
        "question_ar": "",
        "evidence_en": "'O'Sullivan Cherrywood Estates Traditional Bookcase' is the \"Product Name\"; shipping mode with the fastest delivery speed refers to \"Ship Mode\" = 'First Class'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Order ID`) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'O''Sullivan Plantations 2-Door Library in Landvery Oak' AND T2.Region = 'Central' AND T1.`Ship Mode` = 'First Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the name of the corporate customer from Rhode Island who had the highest number of orders in 2016 from the east superstore?",
        "question_ar": "",
        "evidence_en": "corporate customer refers to Segment = 'Corporate'; Rhode Island refers to State = 'Rhode Island'; in 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'; east superstore refers to Region = 'East'; highest number of orders refers to max(order_number); name of corporate customer refers to \"Customer Name\"",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Segment = 'Corporate' AND T2.State = 'Rhode Island' AND T2.Region = 'East' AND STRFTIME('%Y', T1.`Order Date`) = '2016' GROUP BY T2.`Customer Name` ORDER BY COUNT(T2.`Customer Name`) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California?",
        "question_ar": "",
        "evidence_en": "customers in California refers to State = 'California'; orders with sales value of no less than 5,000 refers to Sales > = 5,000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.`Order ID`) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` INNER JOIN people AS T3 ON T3.`Customer ID` = T1.`Customer ID` WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'"
    },
    {
        "db_id": "superstore",
        "question_en": "In which segment does the customer who purchased the product from the east superstore with the highest original price belong?",
        "question_ar": "",
        "evidence_en": "highest original price refers to max(divide(Sales, subtract(1, Discount)))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Segment FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T1.Region = 'East' ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the shipment duration for order number CA-2011-134103?",
        "question_ar": "",
        "evidence_en": "shipment duration = subtract(\"Ship Date\", \"Order Date\"); order number CA-2011-134103 refers to \"Order ID\" = 'CA-2011-134103'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT strftime('%J', `Ship Date`) - strftime('%J', `Order Date`) AS duration FROM central_superstore WHERE `Order ID` = 'CA-2011-134103'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders with a quantity greater than 5 have been shipped by the fastest delivery method?",
        "question_ar": "",
        "evidence_en": "orders with a quantity greater than 5 refers to Quantity > 5; shipped by the fastest delivery method refers to Ship Mode = 'First Class'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT `Order ID`) FROM central_superstore WHERE Quantity > 5 AND `Ship Mode` = 'First Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "Please list any three orders that caused a loss to the company.",
        "question_ar": "",
        "evidence_en": "caused a loss to the company refers to Profit < 0",
        "evidence_ar": "",
        "SQL": "SELECT `Order ID` FROM central_superstore WHERE Profit < 0 LIMIT 3"
    },
    {
        "db_id": "superstore",
        "question_en": "Which product did Phillina Ober buy?",
        "question_ar": "",
        "evidence_en": "product refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Phillina Ober'"
    },
    {
        "db_id": "superstore",
        "question_en": "Who was the customer in the South Region superstore who bought the most “Hon Multipurpose Stacking Arm Chairs\"?",
        "question_ar": "",
        "evidence_en": "customer refers to \"Customer Name\"; “Hon Multipurpose Stacking Arm Chairs\" is the \"Product Name\";",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Hon Multipurpose Stacking Arm Chairs' GROUP BY T2.`Customer Name` ORDER BY COUNT(T2.`Customer Name`) DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the profit from selling the \"O'Sullivan Living Dimensions 2-Shelf Bookcases\"?",
        "question_ar": "",
        "evidence_en": "\"O'Sullivan Living Dimensions 2-Shelf Bookcases\" refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Profit FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many of the \"Hon Pagoda Stacking Chairs\" have been sold in total in the west superstore?",
        "question_ar": "",
        "evidence_en": "Hon Pagoda Stacking Chairs' is the \"Product Name\"; west superstore refers to Region = 'West'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Hon Pagoda Stacking Chairs'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders purchased by Aaron Bergman have been delivered with the slowest shipping speed?",
        "question_ar": "",
        "evidence_en": "slowest shipping speed refers to \"Ship Mode\" = 'Standard Class'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aaron Bergman' AND T2.`Ship Mode` = 'Standard Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the original price of the \"Black Avery Flip-Chart Easel Binder\"?",
        "question_ar": "",
        "evidence_en": "\"Black Avery Flip-Chart Easel Binder\" is the \"Product Name\"; original price = divide(Sales, subtract(1, Discount))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Sales / (1 - T1.Discount) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Blackstonian Pencils'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the name of the product that Aimee Bixby bought?",
        "question_ar": "",
        "evidence_en": "name of the product refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Aimee Bixby'"
    },
    {
        "db_id": "superstore",
        "question_en": "Indicate the profit of product Sauder Camden County Barrister Bookcase, Planked Cherry Finish.",
        "question_ar": "",
        "evidence_en": "Sauder Camden County Barrister Bookcase, Planked Cherry Finish' refers to \"Product Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Profit FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many furniture products had been shipped by standard class in the East superstore?",
        "question_ar": "",
        "evidence_en": "furniture products refers to Category = 'Furniture'; shipped by standard class refers to \"Ship Mode\" = 'Standard Class'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Category) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'Standard Class'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the highest profit order in the East superstore of customers from Houston, Texas?",
        "question_ar": "",
        "evidence_en": "highest profit refers to max(Profit); Houston, Texas refers to City = 'Houston' and State = 'Texas'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Order ID` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.City = 'Houston' AND T2.State = 'Texas' ORDER BY T1.Profit DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "How many furniture products were ordered at central superstore?",
        "question_ar": "",
        "evidence_en": "furniture products refers to Category = 'Furniture'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Category = 'Furniture'"
    },
    {
        "db_id": "superstore",
        "question_en": "What are the names of the products that had been shipped in March 2013 at central superstore?",
        "question_ar": "",
        "evidence_en": "names of the products refers to Product Name; shipped in March 2013 refers to \"Ship Date\" = '2013-03%'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE strftime('%Y-%m', T1.`Ship Date`) = '2013-03'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders were made by customers who live in Texas at the Central superstore?",
        "question_ar": "",
        "evidence_en": "customer live in Texas refers to State = 'Texas'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.State = 'Texas'"
    },
    {
        "db_id": "superstore",
        "question_en": "How many orders were made by Alan Barnes in 2015 at the Central superstore?",
        "question_ar": "",
        "evidence_en": "in 2015 refers to \"Order Date\" = '2015%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Alan Barnes' AND STRFTIME('%Y', T2.`Order Date`) = '2015'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the product name of order CA-2011-115791 in the East superstore?",
        "question_ar": "",
        "evidence_en": "order CA-2011-115791 refers to \"Order ID\" = 'CA-2011-115791'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-141817'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the percentage of orders with 0.2 discount in the Central superstore were purchased by customers who live in Texas?",
        "question_ar": "",
        "evidence_en": "live in Texas refers to State = 'Texas'; percentage = divide(sum(Order ID) when Discount = 0.2, sum(Order ID)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0.2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.State = 'Texas'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the percentage of furniture orders that were shipped through first class in 2013 at the Central superstore?",
        "question_ar": "",
        "evidence_en": "furniture refers to Category = 'Furniture'; shipped through first class in 2013 refers to ship mode = 'first class' and \"Ship Date\" = '2013%'; percentage = divide(sum(Order ID) when Category = 'Furniture' and \"Ship Date\" = '2013%', sum(Order ID)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T1.`Ship Mode` = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.`Ship Date`) = '2013'"
    },
    {
        "db_id": "superstore",
        "question_en": "Who order from the west region on August 12, 2013, and received a discount of 0.2?",
        "question_ar": "",
        "evidence_en": "Who refers to \"Customer Name\"; on August 12, 2013 refers to \"Order Date\" = '2013-08-12'; discount of 0.2 refers to discount = 0.2",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Order Date` = '2013-08-12' AND T1.Discount = 0.2 AND T1.Region = 'West'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the order ID of the security-Tint Envelopes product ordered on June 3, 2013, in the Central region?",
        "question_ar": "",
        "evidence_en": "Security-Tint Envelopes' refers to \"Product Name\"; ordered on June 3, 2013 refers to \"Order Date\" = '2013-06-03'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Order ID` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Security-Tint Envelopes' AND T1.`Order Date` = '2013-06-03'"
    },
    {
        "db_id": "superstore",
        "question_en": "List the product's name bought by the customer named Bill Shonely from the Central region.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Bill Shonely' AND T2.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Please give the name of customers from the West region that bought exactly 8 items in their purchase.",
        "question_ar": "",
        "evidence_en": "name of customers refers to \"Customer Name\"; bought exactly 8 items refers to Quantity = 8",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Quantity = 8 AND T1.Region = 'West'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the customers from Houston, Texas, what is the total profit of their orders in the Central region?",
        "question_ar": "",
        "evidence_en": "customers from Houston, Texas refers to State = 'Texas' and City = 'Houston'; total profit = sum(Profit)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.City = 'Houston' AND T1.State = 'Texas' AND T2.Region = 'Central'"
    },
    {
        "db_id": "superstore",
        "question_en": "Who is the customer with an order shipped on March 5, 2013, in the eastern region?",
        "question_ar": "",
        "evidence_en": "Who is the customer refers to Customer Name; shipped on March 5, 2013 refers to \"Ship Date\" = '2013-03-05'; eastern region refers to Region = 'East'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Ship Date` = '2013-03-05'"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the orders from 2016 in the Central region, what is the product with the lowest profit?",
        "question_ar": "",
        "evidence_en": "orders from 2016 refers to \"Order Date\" = '2016%'; product refers to \"Product Name\"; lowest profit refers to min(Profit)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'Central' AND STRFTIME('%Y', T1.`Order Date`) = '2016' ORDER BY T1.Profit ASC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "Who ordered the order ID CA-2011-118976 from the East region?",
        "question_ar": "",
        "evidence_en": "Who refers to \"Customer Name\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Order ID` = 'CA-2011-118976' AND T2.Region = 'East'"
    },
    {
        "db_id": "superstore",
        "question_en": "Provide the product's name of the product with the highest sales in the South region.",
        "question_ar": "",
        "evidence_en": "highest sales refers to max(Sales)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'South' ORDER BY T1.Sales DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "List down the sales, profit, and subcategories of the product ordered in the order ID US-2011-126571 in the East region.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Sales, T1.Profit, T2.`Sub-Category` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'US-2011-126571' AND T2.Region = 'East'"
    },
    {
        "db_id": "superstore",
        "question_en": "What is the product's name in the highest quantity in a single purchase?",
        "question_ar": "",
        "evidence_en": "highest quantity refers to max(Quantity)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "superstore",
        "question_en": "List the customer's name from the South region with a standard class ship mode and sales greater than the 88% of the average sales of all orders.",
        "question_ar": "",
        "evidence_en": "sales greater than the 88% of the average sales of all orders refers to Sales > avg(Sales) * 0.88; South region refers to south_superstore",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Region = 'South' AND T1.`Ship Mode` = 'Standard Class' AND 100 * T1.Sales / ( SELECT AVG(Sales) FROM south_superstore ) > 88"
    },
    {
        "db_id": "superstore",
        "question_en": "Among the customers from Indiana, what is the percentage of their purchased orders in the Central region with no discount?",
        "question_ar": "",
        "evidence_en": "Indiana refers to State = 'Indiana'; no discount refers to Discount = 0; percentage = divide(sum(Discount) when Discount = 0, count(Discount)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Region = 'Central' AND T1.State = 'Indiana'"
    },
    {
        "db_id": "shooting",
        "question_en": "Among all the male officers, what is the percentage of them are White?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; white refers to race = 'W'; percentage = divide(count(officers where race = 'W'), count(officers)) where gender = 'M' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'"
    },
    {
        "db_id": "shooting",
        "question_en": "What is the percentage of the cases involved more than 3 officers from year 2010 to 2015?",
        "question_ar": "",
        "evidence_en": "more than 3 officers refers to officer_count > 3; from year 2010 to 2015 refers to date between '2010-01-01' and '2015-12-31'; percentage = divide(count(case_number where officer_count > 3), count(case_number)) where date between '2010-01-01' and '2015-12-31' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(officer_count > 3, 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE STRFTIME('%Y', date) BETWEEN '2010' AND '2015'"
    },
    {
        "db_id": "shooting",
        "question_en": "In which year has the greatest number of cases where Handgun was used as weapon?",
        "question_ar": "",
        "evidence_en": "year refers to year(date); the greatest number of cases refers to max(count(case_number)); OS Spray was used as weapon refers to subject_weapon = 'OS Spray'",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', date) FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY STRFTIME('%Y', date) ORDER BY COUNT(case_number) DESC LIMIT 1"
    },
    {
        "db_id": "shooting",
        "question_en": "Among the cases dismissed by the grand jury disposition, what percentage of cases is where the subject is injured?",
        "question_ar": "",
        "evidence_en": "dismissed by the grand jury disposition refers to grand_jury_disposition = 'No Bill'; the subject is injured refers to subject_statuses = 'injured'; percentage = divide(count(incidents where subject_statuses = 'injured'), count(incidents)) where grand_jury_disposition = 'No Bill' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(subject_statuses = 'Injured') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE grand_jury_disposition = 'No Bill'"
    },
    {
        "db_id": "shooting",
        "question_en": "Did the number of cases with Vehicle as subject weapon increase or decrease from year 2007 to 2008. State the difference.",
        "question_ar": "",
        "evidence_en": "number of cases refers to count(case_number); with Vehicle as subject weapon refers to subject_weapon = 'Vehicle'; year 2007 refers to date between '2007-01-01' and '2007-12-31'; year 2008 refers to date between '2008-01-01' and '2008-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(STRFTIME('%Y', date) = '2007', 1, 0)) - SUM(IIF(STRFTIME('%Y', date) = '2008', 1, 0)) FROM incidents WHERE subject_weapon = 'Vehicle'"
    },
    {
        "db_id": "shooting",
        "question_en": "Among the 'Handgun' weapon used by subject, how many percent were 'Shoot and Miss'?",
        "question_ar": "",
        "evidence_en": "'Handgun' weapon refers to subject_weapon = 'Handgun'; 'Shoot and Miss' refers to subject_statuses = 'Shoot and Miss'; percent = divide(count(incidents where subject_statuses = 'Shoot and Miss'), count(incidents)) where subject_weapon = 'Handgun' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'"
    },
    {
        "db_id": "shooting",
        "question_en": "Who are the officers involved in cases that are voted as 'No Bill'. List their last name and gender.",
        "question_ar": "",
        "evidence_en": "voted as 'No Bill' refers to grand_jury_disposition = 'No Bill'",
        "evidence_ar": "",
        "SQL": "SELECT T2.last_name, T2.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.grand_jury_disposition = 'No Bill'"
    },
    {
        "db_id": "shooting",
        "question_en": "Which are the cases where the subject are female. List the case number, subject status and weapon.",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; weapon refers to subject_weapon",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number, T1.subject_statuses, T1.subject_weapon FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'"
    },
    {
        "db_id": "shooting",
        "question_en": "From the cases where the subject are male, list the case number and the location and subject status.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number, T1.location, T1.subject_statuses FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'M'"
    },
    {
        "db_id": "shooting",
        "question_en": "For case(s) where officer 'Evenden, George' is in charged, state the case number and the grand jury disposition?",
        "question_ar": "",
        "evidence_en": "officer 'Evenden, George' refers to full_name = 'Evenden, George'",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number, T1.grand_jury_disposition FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T2.first_name = 'George' AND T2.last_name = 'Evenden'"
    },
    {
        "db_id": "shooting",
        "question_en": "For case number '134472-2015', list the last name of the officers involved and state the subject statuses.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'"
    },
    {
        "db_id": "shooting",
        "question_en": "From the cases where the subject were deceased, list the subject's last name, gender, race and case number.",
        "question_ar": "",
        "evidence_en": "subject were deceased refers to subject_statuses = 'Deceased'",
        "evidence_ar": "",
        "SQL": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'"
    },
    {
        "db_id": "shooting",
        "question_en": "What is the percentage of subject who are female used the Vehicle as weapon?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; use Vehicle as weapon refers to subject_weapon = 'Vehicle'; percentage = divide(count(case_number where subject_weapon = 'Vehicle'), count(case_number)) where gender = 'F' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'"
    },
    {
        "db_id": "shooting",
        "question_en": "From the 'Injured' statuses of the subject, what is the ratio of weapons used are knife against handgun?",
        "question_ar": "",
        "evidence_en": "the 'Shoot and Miss' status refers to subject_statuses = 'Shoot and Miss'; knife refers to subject_weapon = 'knife'; toy handgun refers to subject_weapon = 'toy handgun'; ratio = divide(count(case_number where subject_weapon = 'knife'), count(case_number where subject_weapon = 'toy handgun')) where subject_statuses = 'Shoot and Miss'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.subject_weapon = 'Knife') AS REAL) * 100 / SUM(T1.subject_weapon = 'Handgun') FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'"
    },
    {
        "db_id": "shooting",
        "question_en": "List all cases from the year 2012 in which the subject was deceased",
        "question_ar": "",
        "evidence_en": "case refers to case_number; year 2012 refers to date between '2012-01-01' and '2012-12-31'; subject was deceased refers to subject_statuses = 'Deceased'",
        "evidence_ar": "",
        "SQL": "SELECT case_number FROM incidents WHERE STRFTIME('%Y', date) > '2011' AND subject_statuses = 'Deceased'"
    },
    {
        "db_id": "shooting",
        "question_en": "Of all male officers, what percentage are black officers?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; black refers to race = 'B'; percentage = divide(count(officers where race = 'B'), count(officers)) where gender = 'M' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(race = 'B') AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'"
    },
    {
        "db_id": "shooting",
        "question_en": "How many incidents in which the subject's weapon was a vehicle were investigated by a female officer?",
        "question_ar": "",
        "evidence_en": "subject's weapon was a vehicle refers to subject_weapon = 'Vehicle'; female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_weapon = 'Vehicle' AND T2.gender = 'F'"
    },
    {
        "db_id": "shooting",
        "question_en": "In how many cases where the subject was a female was the subject's status listed as Deceased?",
        "question_ar": "",
        "evidence_en": " female refers to gender = 'F'; subject's status listed as Deceased refers to subject_statuses = 'Deceased'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F' AND T1.subject_statuses = 'Deceased'"
    },
    {
        "db_id": "shooting",
        "question_en": "Of the black officers, how many of them investigated cases between the years 2010 and 2015?",
        "question_ar": "",
        "evidence_en": "black refers to race = 'B'; between the years 2010 and 2015 refers to date between '2010-01-01' and '2015-12-31'; case refers to case_number",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.case_number) FROM officers AS T1 INNER JOIN incidents AS T2 ON T2.case_number = T1.case_number WHERE T1.race = 'B' AND T2.date BETWEEN '2010-01-01' AND '2015-12-31'"
    },
    {
        "db_id": "shooting",
        "question_en": "How many instances were found in June 2015?",
        "question_ar": "",
        "evidence_en": "in June 2015 refers to date between '2015-06-01' and '2015-06-30'; record number refers to case_number",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'"
    },
    {
        "db_id": "shooting",
        "question_en": "How many people were injured between 2006 and 2014 as a result of a handgun?",
        "question_ar": "",
        "evidence_en": "injured refers to subject_statuses = 'injured'; between 2006 and 2014 refers to date between '2006-01-01' and '2013-12-31'; handgun refers to subject_weapon = 'handgun'; where the incidents took place refers to location",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(location) FROM incidents WHERE subject_weapon = 'Handgun' AND subject_statuses = 'Injured' AND date BETWEEN '2006-01-01' AND '2013-12-31'"
    },
    {
        "db_id": "shooting",
        "question_en": "What is the most common type of weapon that causes death?",
        "question_ar": "",
        "evidence_en": "the most common type of weapon refers to max(count(subject_weapon)); causes death refers to subject_statuses = 'Deceased'",
        "evidence_ar": "",
        "SQL": "SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(case_number) DESC LIMIT 1"
    },
    {
        "db_id": "shooting",
        "question_en": "What is the proportion of white males and females in the police force?",
        "question_ar": "",
        "evidence_en": "white refers to race = 'W'; male refers to gender = 'M'; female refers to gender = 'F'; proportion of white males = divide(count(officers where race = 'W' and gender = 'M'), count(officers)) * 100%; proportion of white females = divide(count(officers where race = 'W' and gender = 'F'), count(officers)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'"
    },
    {
        "db_id": "shooting",
        "question_en": "How many more black female victims than white female victims were discovered?",
        "question_ar": "",
        "evidence_en": "black refers to race = 'B'; female refers to gender = 'F'; white refers to race = 'W'; result = subtract(count(victims where race = 'B'), count(victims where race = 'W')) where gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(race = 'B') - SUM(race = 'W') FROM subjects WHERE gender = 'F'"
    },
    {
        "db_id": "shooting",
        "question_en": "What percentage of deaths were caused by rifles?",
        "question_ar": "",
        "evidence_en": "rifle refers to subject_weapon = 'rifles'; death refers to subject_statuses = 'Deceased'; percentage = divide(count(incidents where subject_weapon = 'rifles'), count(incidents)) where subject_statuses = 'Deceased' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(subject_statuses = 'Deceased') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Rifle'"
    },
    {
        "db_id": "shooting",
        "question_en": "Which type of weapon was used to attack the victim in the record number 031347-2015? What is the victim's race and gender?",
        "question_ar": "",
        "evidence_en": "type of weapon refers to subject_weapon; record number 031347-2015 refers to case_number = '031347-2015'",
        "evidence_ar": "",
        "SQL": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'"
    },
    {
        "db_id": "shooting",
        "question_en": "Which near-death incident did a policeman by the name of Ruben Fredirick look into? What is the victim in this incident's race and gender?",
        "question_ar": "",
        "evidence_en": "near-death refers to subject_statuses = 'Deceased Injured'; incident refers to case_number; Ruben Fredirick refers to full_name = 'Ruben Fredirick'",
        "evidence_ar": "",
        "SQL": "SELECT T1.case_number, T3.race, T3.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number INNER JOIN subjects AS T3 ON T1.case_number = T3.case_number WHERE T2.first_name = 'Fredirick' AND T2.last_name = 'Ruben'"
    },
    {
        "db_id": "shooting",
        "question_en": "What proportion of male police officers looked into events where people were injured?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; people were injured refers to subject_statuses = 'Injured'; proportion = divide(count(case_number where gender = 'M'), count(case_number)) where subject_statuses = 'Injured' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN officers T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'"
    },
    {
        "db_id": "genes",
        "question_en": "For the genes that are located in the plasma membrane, please list their number of chromosomes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Chromosome FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'plasma membrane'"
    },
    {
        "db_id": "genes",
        "question_en": "How many non-essential genes are located in the nucleus?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'"
    },
    {
        "db_id": "genes",
        "question_en": "Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'"
    },
    {
        "db_id": "genes",
        "question_en": "Please list the location of the genes that have the most chromosomes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Localization FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID ORDER BY T1.Chromosome DESC LIMIT 1"
    },
    {
        "db_id": "genes",
        "question_en": "Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1"
    },
    {
        "db_id": "genes",
        "question_en": "What are the functions of the pair of genes that have the lowest expression correlation score?a",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Function FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 ORDER BY T2.Expression_Corr ASC LIMIT 1"
    },
    {
        "db_id": "genes",
        "question_en": "Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated?",
        "question_ar": "",
        "evidence_en": "If Expression_Corr < 0, it means the negatively correlated",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'"
    },
    {
        "db_id": "genes",
        "question_en": "For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Chromosome = 6 OR T1.Chromosome = 8 ORDER BY T2.Expression_Corr DESC LIMIT 1"
    },
    {
        "db_id": "genes",
        "question_en": "Please list the motif of the genes that are located in the cytoplasm and have 7 chromosomes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.GeneID1, T2.GeneID2 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'cytoplasm' AND T1.Chromosome = 7"
    },
    {
        "db_id": "genes",
        "question_en": "For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization != 'cytoplasm' AND T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'NON-Essential'"
    },
    {
        "db_id": "genes",
        "question_en": "How many pairs of positively correlated genes are both non-essential?",
        "question_ar": "",
        "evidence_en": "If Expression_Corr > 0, it means the expression correlation is positive",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.GeneID2) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Essential = 'Non-Essential'"
    },
    {
        "db_id": "genes",
        "question_en": "If a pair of genes is positively correlated, what is the possibility of it being composed of two genes both with over 10 chromosomes?",
        "question_ar": "",
        "evidence_en": "Positively correlated means Expression_Corr > 0; Possibility = count(the pairs of genes with both chromosomes over 20) / count(pairs of genes that are positively correlated)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.Chromosome > 10 AND T3.Chromosome > 10, 1, 0)) AS REAL) * 100 / COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T2.Expression_Corr > 0"
    },
    {
        "db_id": "genes",
        "question_en": "For the pairs of genes both from the class ATPases, what is the average expression correlation score?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Expression_Corr) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Class = 'ATPases'"
    },
    {
        "db_id": "genes",
        "question_en": "Lists all genes by identifier number located in the cytoplasm and whose function is metabolism.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'"
    },
    {
        "db_id": "genes",
        "question_en": "How many different genes do we have if we add those located in the plasma and in the nucleus?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(GeneID) FROM Classification WHERE Localization IN ('plasma', 'nucleus')"
    },
    {
        "db_id": "genes",
        "question_en": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?",
        "question_ar": "",
        "evidence_en": "If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'"
    },
    {
        "db_id": "genes",
        "question_en": "What percentage of genes located in the cytoskeleton are of unknown class? And of these, how many are not conditional phenotypes?",
        "question_ar": "",
        "evidence_en": "Percentage = count(genes located in the cytoskeleton unknown class) / count(genes located in the cytoskeleton) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Localization = 'cytoskeleton' AND Phenotype = 'Conditional phenotypes') , CAST(SUM(Localization = 'cytoskeleton') AS REAL) * 100 / COUNT(GeneID) FROM Genes;"
    },
    {
        "db_id": "genes",
        "question_en": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'"
    },
    {
        "db_id": "genes",
        "question_en": "List all genes whose interaction is with genes located in the nucleus in which it is positively correlated.",
        "question_ar": "",
        "evidence_en": "If the Expression_Corr value is positive then it's positively correlated",
        "evidence_ar": "",
        "SQL": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'"
    },
    {
        "db_id": "genes",
        "question_en": "Taking all the essential genes of the transcription factors class located in the nucleus as a reference, how many of them carry out a genetic-type interaction with another gene? List them.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.GeneID1 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'nucleus' AND T1.Class = 'Transcription factors' AND T1.Essential = 'Essential' AND T2.Expression_Corr != 0"
    },
    {
        "db_id": "genes",
        "question_en": "Of all the nonessential genes that are not of the motorprotein class and whose phenotype is cell cycle defects, how many do not have a physical type of interaction?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Type != 'Physical' AND T1.Phenotype = 'Cell cycle defects' AND T1.Class != 'Motorproteins' AND T1.Essential = 'Non-Essential'"
    },
    {
        "db_id": "genes",
        "question_en": "Of the genes whose phenotype and motif are nucleic acid metabolism defects, PS00107, what percentage perform positive interaction with another gene?",
        "question_ar": "",
        "evidence_en": "Percentage of no interaction = [count(nucleic acid metabolism, PS00107, no interaction) / count(nucleic acid metabolism, PS00107) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'"
    },
    {
        "db_id": "genes",
        "question_en": "Which negatively correlated, genetically interacting genes are non-essential? What percentage do they represent with respect to those that are essential?",
        "question_ar": "",
        "evidence_en": "If the Expression_Corr value is negative then it's negatively correlated; Percentage of Essensity = [count(negatively correlated, genetical interaction, non-essential) / count(negatively correlated, genetical interaction, non-essential+negatively correlated, genetical interaction, essential)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.GeneID) AS REAL) * 100 / ( SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 ) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Essential = 'Non-Essential'"
    },
    {
        "db_id": "app_store",
        "question_en": "How many apps were last updated in January of 2018? Please write one translated review with positive sentiment for each app, if there's any.",
        "question_ar": "",
        "evidence_en": "updated in January of 2018 refers to Last Updated BETWEEN 'January 1, 2018' and 'January 31, 2018';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Translated_Review FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE `Last Updated` BETWEEN 'January 1, 2018' AND 'January 31, 2018' ) AND Sentiment = 'Positive'"
    },
    {
        "db_id": "app_store",
        "question_en": "How many users mildly likes the 7 Minute Workout app and when was it last updated?",
        "question_ar": "",
        "evidence_en": "mildly likes the app refers to Sentiment_Polarity> = 0 and Sentiment_Polarity<0.5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Sentiment_Polarity), T1.\"Last Updated\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '7 Minute Workout' AND T2.Sentiment_Polarity BETWEEN 0 AND 0.5"
    },
    {
        "db_id": "app_store",
        "question_en": "How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store.",
        "question_ar": "",
        "evidence_en": "user holds neutral attitude refers to Sentiment = 'Neutral';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Rating), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the name and category of the app with the highest amount of -1 sentiment polarity score?",
        "question_ar": "",
        "evidence_en": "highest amount of -1 sentiment polarity score refers to MAX(Count(Sentiment_Polarity = 1.0))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.App, T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = '-1.0'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at.",
        "question_ar": "",
        "evidence_en": "average sentiment polarity score = AVG(Sentiment_Polarity); age group the app is target at refers to Content Rating;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Sentiment_Polarity), T1.\"Content Rating\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Cooking Fever'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have?",
        "question_ar": "",
        "evidence_en": "lowest sentiment polarity score refers to MIN(Sentiment_Polarity); user dislike the app pretty much refers to Sentiment_Polarity<-0.5; number of downloads it has refers to installs;",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T2.Sentiment_Polarity), T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Basketball Stars'"
    },
    {
        "db_id": "app_store",
        "question_en": "For the Akinator app, how many reviews have sentiment subjectivity of no more than 0.5 and what is its current version?",
        "question_ar": "",
        "evidence_en": "Sentiment_Subjectivity<0.5; current version refers to Current Ver;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Sentiment_Subjectivity), T1.\"Current Ver\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Akinator' AND T2.Sentiment_Subjectivity < 0.5"
    },
    {
        "db_id": "app_store",
        "question_en": "How many apps have rating of 5?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(App) FROM playstore WHERE Rating = 5"
    },
    {
        "db_id": "app_store",
        "question_en": "What are the top 5 installed free apps?",
        "question_ar": "",
        "evidence_en": "free app refers to price = 0; most installed app refers to MAX(Installs);",
        "evidence_ar": "",
        "SQL": "SELECT App FROM playstore WHERE Price = 0 ORDER BY CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 5"
    },
    {
        "db_id": "app_store",
        "question_en": "Name the top 10 most reviewed apps.",
        "question_ar": "",
        "evidence_en": "most reviewed app refers to MAX(Reviews);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App FROM playstore ORDER BY Reviews DESC LIMIT 10"
    },
    {
        "db_id": "app_store",
        "question_en": "How many of the users hold neutral attitude on \"10 Best Foods for You\" app and what category is this app?",
        "question_ar": "",
        "evidence_en": "neutral attitude refers to Sentiment = 'Neutral';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.App), T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '10 Best Foods for You' AND T2.Sentiment = 'Neutral'"
    },
    {
        "db_id": "app_store",
        "question_en": "What are the apps that users pretty like this app and how many installs amount of these apps?",
        "question_ar": "",
        "evidence_en": "users pretty much likes the app refers to Sentiment_Polarity = 'Positive';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0"
    },
    {
        "db_id": "app_store",
        "question_en": "List apps whose rating is 3.9 and state the translated review of each app.",
        "question_ar": "",
        "evidence_en": "lowest rating refers to Rating = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 3.9"
    },
    {
        "db_id": "app_store",
        "question_en": "How many apps that are only compatible with Android ver 8.0 and above? List down the users' sentiment of these apps.",
        "question_ar": "",
        "evidence_en": "compatible with android refers to Android Ver; Android Ver\" = '8.0 and up';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Sentiment FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE `Android Ver` = '8.0 and up' )"
    },
    {
        "db_id": "app_store",
        "question_en": "Which apps have multiple genres and what is the total sentiment subjectivity of these apps?",
        "question_ar": "",
        "evidence_en": "multiple genres refers to COUNT(Genres>1; total sentiment subjectivity = Sum(Sentiment_Subjectivity);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1"
    },
    {
        "db_id": "app_store",
        "question_en": "Which apps have not been updated since year 2015 and what kind of sentiment users hold on it?",
        "question_ar": "",
        "evidence_en": "since year 2015 refers to \"Last Updated\"<'January 1, 2015';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App, Sentiment FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE CAST(SUBSTR('Last Updated', -4, 4) AS INTEGER) < 2015 )"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the total installs of apps with content rating of adults only 18+ and what are the translated reviews of it?",
        "question_ar": "",
        "evidence_en": "total installs = SUM(Installs);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Installs), T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Adults only 18+'"
    },
    {
        "db_id": "app_store",
        "question_en": "Which of the app is the best selling app and what is the sentiments polarity of it?",
        "question_ar": "",
        "evidence_en": "best selling app = MAX(MULTIPLY(Price, Installs));",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, T2.Sentiment_Polarity FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App ORDER BY T1.Price * CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average rating of comic category apps? How many users hold positive attitude towards this app?",
        "question_ar": "",
        "evidence_en": "average rating = AVG(Rating where Category = 'COMICS'); number of users who hold a positive attitude towards the app refers to SUM(Sentiment = 'Positive');",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Rating) , COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the rating for \"Draw A Stickman\"?",
        "question_ar": "",
        "evidence_en": "Draw A Stickman refers to App = 'Draw A Stickman';",
        "evidence_ar": "",
        "SQL": "SELECT Rating FROM playstore WHERE APP = 'Draw A Stickman'"
    },
    {
        "db_id": "app_store",
        "question_en": "How many of the reviews for the app \"Brit + Co\" have a comment?",
        "question_ar": "",
        "evidence_en": "Brit + Co refers to App = 'Brit + Co'; comment refers to Translated Review NOT null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL"
    },
    {
        "db_id": "app_store",
        "question_en": "List the top 5 shopping apps with the most reviews.",
        "question_ar": "",
        "evidence_en": "shopping apps refers to Genre = 'Shopping'; most reviews refers to MAX(Reviews);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5"
    },
    {
        "db_id": "app_store",
        "question_en": "How many neutral reviews does the app \"Dino War: Rise of Beasts\" have?",
        "question_ar": "",
        "evidence_en": "neutral reviews refers to Sentiment = 'Neutral';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral'"
    },
    {
        "db_id": "app_store",
        "question_en": "What are the apps with only 5,000+ installs?",
        "question_ar": "",
        "evidence_en": "Installs = '5,000+';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App FROM playstore WHERE Installs = '5,000+'"
    },
    {
        "db_id": "app_store",
        "question_en": "List all the negative comments on the \"Dog Run - Pet Dog Simulator\" app.",
        "question_ar": "",
        "evidence_en": "negative comment refers to Sentiment = 'Negative';",
        "evidence_ar": "",
        "SQL": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'"
    },
    {
        "db_id": "app_store",
        "question_en": "Which free app has the most Negative comments?",
        "question_ar": "",
        "evidence_en": "paid app refers to Type = 'Paid'; negative comment refers to Sentiment = 'Negative'; paid app with most negative comments refers to MAX(COUNT(Sentiment = 'Negative')) where Type = 'Paid';",
        "evidence_ar": "",
        "SQL": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY COUNT(T2.Sentiment) DESC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "How many negative comments are there in all the apps with 100,000,000+ installs?",
        "question_ar": "",
        "evidence_en": "negative comment refers to Sentiment = 'Negative'; Installs = '100,000,000+';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '100,000,000+' AND T2.Sentiment = 'Negative'"
    },
    {
        "db_id": "app_store",
        "question_en": "What are the content ratings for the apps that have \"gr8\" in their comments?",
        "question_ar": "",
        "evidence_en": "app with gr8 in their comments refers to Translated_Review LIKE '%gr8%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Content Rating` FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review LIKE '%gr8%'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the total Sentiment polarity score of the most expensive app?",
        "question_ar": "",
        "evidence_en": "total sentiment polarity score = sum(Sentiment_Polarity); most expensive app refers to MAX(Price);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Price = ( SELECT MAX(Price) FROM playstore )"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the rating for \"Garden Coloring Book\"? List all of its reviews.",
        "question_ar": "",
        "evidence_en": "Golfshot Plus: Golf GPS refers to App = 'Golfshot Plus: Golf GPS'; review refers to Translated_Review;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rating, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Garden Coloring Book'"
    },
    {
        "db_id": "app_store",
        "question_en": "Which Photography app has the highest total Sentiment subjectivity score?",
        "question_ar": "",
        "evidence_en": "Photography app refers to Genre = 'Photography'; highest total sentiment subjectivity score = MAX(sum(Sentiment_Subjectivity));",
        "evidence_ar": "",
        "SQL": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Photography' GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Subjectivity) DESC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "List all the comments on the lowest rated Mature 17+ app.",
        "question_ar": "",
        "evidence_en": "comments refers to Translated_Review; lowest rated refers to Rating = 1; Mature 17+ refers to Content Rating = 'Mature 17+ ';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Mature 17+' ORDER BY T1.Rating LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the number of installments of the app with the highest total Sentiment polarity score?",
        "question_ar": "",
        "evidence_en": "installments refers to Installs; highest total sentiment polarity score = MAX(SUM(Sentiment_Polarity));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Polarity) DESC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the number of neutral comments from all the weather apps?",
        "question_ar": "",
        "evidence_en": "neutral comments refers to Sentiment = 'Neutral'; weather app refers to Genre = 'Weather';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Weather' AND T2.Sentiment = 'Neutral'"
    },
    {
        "db_id": "app_store",
        "question_en": "Which 1,000,000,000+ intalls apps has the most no comment reviews?",
        "question_ar": "",
        "evidence_en": "no comment refers to Translated_Review = 'nan'; most no comment reviews = (MAX(COUNT(Translated_Review = 'nan')));",
        "evidence_ar": "",
        "SQL": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000+' AND T2.Translated_Review = 'nan' GROUP BY T1.App ORDER BY COUNT(T2.Translated_Review) DESC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the rating and the total Sentiment subjectivity score of \"Onefootball - Soccer Scores\"?",
        "question_ar": "",
        "evidence_en": "Onefootball - Soccer Scores refers to App = 'Onefootball - Soccer Scores';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'"
    },
    {
        "db_id": "app_store",
        "question_en": "What percentage of no comment reviews are from \"Teen\" content rating apps?",
        "question_ar": "",
        "evidence_en": "no comment refers to Translated_Review = 'nan'; percentage = DIVIDE((SUM(Content Rating = 'Teen')), COUNT(*));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.`Content Rating` = 'Teen' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review = 'nan'"
    },
    {
        "db_id": "app_store",
        "question_en": "Which apps have 5 rating? List out then application name.",
        "question_ar": "",
        "evidence_en": "application name refers to App;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App FROM playstore WHERE Rating = 5"
    },
    {
        "db_id": "app_store",
        "question_en": "Which apps have been reviewed more than 75 000 000 times and the content is suitable for teenagers?",
        "question_ar": "",
        "evidence_en": "Reviews>75000000; suitable for teenagers refers to Content Rating = 'Teen';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND `Content Rating` = 'Teen'"
    },
    {
        "db_id": "app_store",
        "question_en": "List out genre that have downloads more than 1000000000.",
        "question_ar": "",
        "evidence_en": "downloads and installs are synonyms; Installs = '1,000,000,000+';",
        "evidence_ar": "",
        "SQL": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average price for a dating application?",
        "question_ar": "",
        "evidence_en": "average price = AVG(Price where Genre = 'Dating'); dating application refers to Genre = 'Dating';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average download for entertainment apps with size no more than 1.0 M?",
        "question_ar": "",
        "evidence_en": "downloads and installs are synonyms; entertainment apps refers to Category = 'ENTERTAINMENT';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER)) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size < '1.0M'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average review number for application with 5 rating?",
        "question_ar": "",
        "evidence_en": "average review = AVG(Review); application refers to app; Rating = 5;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Reviews) FROM playstore WHERE Rating = 5"
    },
    {
        "db_id": "app_store",
        "question_en": "List out the top 3 genre for application with a sentiment review greater than 0.5.",
        "question_ar": "",
        "evidence_en": "sentiment review refers to Sentiment_Polarity; Sentiment_Polarity>0.5;",
        "evidence_ar": "",
        "SQL": "SELECT Genres FROM playstore WHERE App IN ( SELECT App FROM user_reviews WHERE Sentiment = 'Positive' AND Sentiment_Polarity > 0.5 ORDER BY Sentiment_Polarity DESC LIMIT 3 )"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the percentage of application with 4.7 rating having more positives sentiment than negative sentiment?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative')), SUM(Sentiment = 'Negative')) as percentage; having more positive sentiment than negative sentiment refers to Sentiment = 'Positive'>Sentiment = 'Negative';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN ( SELECT COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE NULL END) - COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE NULL END) FROM user_reviews GROUP BY App ) > 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 4.7"
    },
    {
        "db_id": "app_store",
        "question_en": "List down app that does not have negative sentiment and give their average rating?",
        "question_ar": "",
        "evidence_en": "doest not have negative sentiment refers to Sentiment! = 'Negative'; average = AVG(Sentiment_Polarity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment != 'Negative' GROUP BY T1.App"
    },
    {
        "db_id": "app_store",
        "question_en": "List down application that have not been updated since 2015. What is the percentage of this application having more negative sentiment than positive sentiment?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), (SUM(Sentiment = 'Negative')) as percent; Last Updated>'2015';",
        "evidence_ar": "",
        "SQL": "SELECT CAST((( SELECT COUNT(*) Po FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.\"Last Updated\", -4, 4) > '2015' AND T2.Sentiment = 'Positive' ) - ( SELECT COUNT(*) Ne FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.\"Last Updated\", -4, 4) > '2015' AND T2.Sentiment = 'Negative' )) AS REAL) * 100 / ( SELECT COUNT(*) NUM FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.\"Last Updated\", -4, 4) > '2015' )"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the percentage for free application with a rating 4.5 and above have not been updated since 2018?",
        "question_ar": "",
        "evidence_en": "paid refers to Type = 'Paid'; application refers to App; Rating>4.5; Last Updated>'2018; percentage = DIVIDE(SUM(Genres = 'Mature 17+' and Rating>4.5 and substr(\"Last Updated\",-4,4)>'2018' )), (COUNT(App)) as percent;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN SUBSTR('Last Updated', -4) > '2018' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(App) PER FROM playstore WHERE Type = 'Free' AND Rating >= 4.5"
    },
    {
        "db_id": "app_store",
        "question_en": "What genre does Honkai Impact 3rd belong to?",
        "question_ar": "",
        "evidence_en": "Honkai Impact 3rd is the App;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Genres FROM playstore WHERE App = 'Honkai Impact 3rd'"
    },
    {
        "db_id": "app_store",
        "question_en": "List down the rating for the App Learn C++.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average price of games belonging in the arcade genre which has a content rating of Everyone 10+?",
        "question_ar": "",
        "evidence_en": "average price = AVG(Price);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Price) FROM playstore WHERE 'Content Rating' = 'Everyone 10+' AND Genres = 'Arcade'"
    },
    {
        "db_id": "app_store",
        "question_en": "How much is the size of Browser 4G and how many users have a pretty positive favorability on it?",
        "question_ar": "",
        "evidence_en": "Browser 4G is the App; pretty positive favorability refers to Sentiment_Polarity score = 0.5",
        "evidence_ar": "",
        "SQL": "SELECT T1.Size, COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Browser 4G' AND T2.Sentiment_Polarity >= 0.5"
    },
    {
        "db_id": "app_store",
        "question_en": "Name the Apps with a sentiment objectivity of 0.3 and include their number of installs.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = 0.3"
    },
    {
        "db_id": "app_store",
        "question_en": "How much is the average sentiment polarity score of Golf GPS Rangefinder: Golf Pad and what is it's rating in the Google Play Store?",
        "question_ar": "",
        "evidence_en": "average sentiment polarity score = AVG(Sentiment_Polarity); Golf GPS Rangefinder: Golf Pad  is the App;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Sentiment_Polarity), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Golf GPS Rangefinder: Golf Pad'"
    },
    {
        "db_id": "app_store",
        "question_en": "List the top 5 lowest rated puzzle games and count the number of negative sentiments the games received.",
        "question_ar": "",
        "evidence_en": "lowest rating refers to MIN(Rating); puzzle is the genre;",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the percentage ratio between positive sentiments and negative sentiments that are in Fate/Grand Order? Also indicate the current version.",
        "question_ar": "",
        "evidence_en": "Fate/Grand Order is the App; percentage ratio = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Sentiment = 'Negative' THEN 1 ELSE 0 END), T1.`Current Ver` FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Fate/Grand Order (English)' AND T1.`Current Ver` = '1.18.0'"
    },
    {
        "db_id": "app_store",
        "question_en": "Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security.",
        "question_ar": "",
        "evidence_en": "FREEDOME VPN Unlimited anonymous Wifi Security is the App; percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*))), 100)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Installs , CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T2.Sentiment IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'"
    },
    {
        "db_id": "app_store",
        "question_en": "For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to?",
        "question_ar": "",
        "evidence_en": "highest sentiment polarity score refers to MAX(Sentiment_Polarity);",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.Sentiment_Polarity), T1.Genres FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Honkai Impact 3rd' AND T2.Sentiment_Polarity > 0.5 GROUP BY T1.Genres"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the rating of Dragon Ball Legends and how many users dislike this App?",
        "question_ar": "",
        "evidence_en": "Dragon Ball Legends is the app; users who dislikes the app refers to Sentiment_Polarity<-0.5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5"
    },
    {
        "db_id": "app_store",
        "question_en": "Which education App has the worst rating and state the translated review if available.",
        "question_ar": "",
        "evidence_en": "education App refers to Category = 'EDUCATION'; worst rated app refers to Rating = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' GROUP BY T1.App, T2.Translated_Review ORDER BY T1.Rating ASC LIMIT 1"
    },
    {
        "db_id": "app_store",
        "question_en": "List all free sports Apps and their translated review.",
        "question_ar": "",
        "evidence_en": "paid sports Apps refers to type = 'Paid' and Category = 'SPORTS';",
        "evidence_ar": "",
        "SQL": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T1.Category = 'SPORTS'"
    },
    {
        "db_id": "app_store",
        "question_en": "Among the role playing game genre, how many are targeted to teens and what is their average sentiment polarity score?",
        "question_ar": "",
        "evidence_en": "targeted to teen refers to Content Rating = 'Teen'; average = AVG(Sentiment_Polarity);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'"
    },
    {
        "db_id": "app_store",
        "question_en": "What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews?",
        "question_ar": "",
        "evidence_en": "average rating = AVG(Rating); percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*)), 100));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Rating), CAST(COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Racing'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which region has the most number of sales team?",
        "question_ar": "",
        "evidence_en": "the most number of sales team refers to MAX(COUNT(Sales Team));",
        "evidence_ar": "",
        "SQL": "SELECT Region FROM `Sales Team` GROUP BY Region ORDER BY COUNT(DISTINCT `Sales Team`) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the customers with name containing the word 'Group'.",
        "question_ar": "",
        "evidence_en": "name containing the word 'Group' refers to Customer Names LIKE '%Group%';",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT IIF(`Customer Names` LIKE '%Group%', `Customer Names`, NULL) AS T FROM Customers ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the average median income for all City type of stores?",
        "question_ar": "",
        "evidence_en": "AVG(Median Income) where Type = 'City';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(`Median Income`) FROM `Store Locations` WHERE Type = 'City'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name the sales team and the region of order number 'SO - 000137'.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sales Team`, T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProductID, T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.`Sales Team` = 'Douglas Tucker'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'",
        "question_ar": "",
        "evidence_en": "MAX(Discount Applied) where Product Name = 'Cocktail Glasses'; orders in 2020 refer to the OrderDate between 01-01-2020 and 31-12-2020;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.`Discount Applied` = ( SELECT T2.`Discount Applied` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.`Discount Applied` DESC LIMIT 1 )"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the order numbers for In-Store sales and find the city where the store is located.",
        "question_ar": "",
        "evidence_en": "In-Store sales refer to Sales Channel = 'In-Store'; city refers to City Name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OrderNumber, T2.`City Name` FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.`Sales Channel` = 'In-Store'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name the most expensive ordered? Who, when was it ordered?",
        "question_ar": "",
        "evidence_en": "the most expensive refers to MAX(Unit Cost); who refers to Customer Names; when refers to OrderDate;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OrderNumber, T1.`Customer Names`, T2.OrderDate FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.`Unit Cost` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the numbers ordered by 'Rochester Ltd' in 2018.",
        "question_ar": "",
        "evidence_en": "Rochester Ltd is the name of the customer; all the numbers ordered refer to OrderNumber; 2018 refers to SUBSTR(OrderDate, -2) = '18';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.`Customer Names` = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.",
        "question_ar": "",
        "evidence_en": "all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to Product Name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Product Name`, T3.`Sales Team` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the name of all customers who had made orders online.",
        "question_ar": "",
        "evidence_en": "orders online refer to Sales Channel = 'Online';",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT CASE  WHEN T2.`Sales Channel` = 'Online' THEN T1.`Customer Names` ELSE NULL END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the average net profit for bakeware product.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bakeware';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', ''))  FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bakeware'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name the sales team name who had orders with the greatest net profit in 2020.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the greatest net profit in 2020 refers to MAX(net profit) where OrderDate LIKE '%/20';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.`Sales Team` ORDER BY SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Sate the order number and calculate the net profit for each order under Joshua Bennett.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); Joshua Bennett is the name of Sales Team;",
        "evidence_ar": "",
        "SQL": "SELECT T1.OrderNumber , REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')  FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.`Sales Team` = 'Joshua Bennett'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the sales order shipped in July 2018, calculate the percentage of orders for home fragrances.",
        "question_ar": "",
        "evidence_en": "shipped in July 2018 refers to ShipDate between 01-07-2018 and 31-07-2018; DIVIDE(COUNT(OrderNumber where Product Name = 'Home Fragrances' and SUBSTR(OrderDate, 1, 1) = '7'), COUNT(OrderNumber where SUBSTR(ShipDate, -2) = '18')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.`Product Name` = 'Home Fragrances' THEN 1 ELSE 0 END) * 100 / COUNT(T1.OrderNumber)  FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.ShipDate LIKE '7/%/18'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List down the customer IDs and names that start with alphabet \"W\".",
        "question_ar": "",
        "evidence_en": "names that start with alphabet \"W\" refer to Customer Names LIKE 'W%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CustomerID, `Customer Names` FROM Customers WHERE `Customer Names` LIKE 'W%' ORDER BY `Customer Names` DESC"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List down the product IDs and names that include the word \"Outdoor\".",
        "question_ar": "",
        "evidence_en": "names that include the word \"Outdoor\" refer to Product Name LIKE '%Outdoor%';",
        "evidence_ar": "",
        "SQL": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN `Product Name` LIKE '%Outdoor%' THEN `Product Name` ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the sales with 40% discount via in-store channel, how many products were shipped from warehouse code of WARE-NMK1003?",
        "question_ar": "",
        "evidence_en": "40% discount refers to Discount Applied = 0.4; in-store channel refers to Sales Channel = 'In-Store'; orders refer to OrderNumber;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN `Sales Channel` = 'In-Store' AND WarehouseCode = 'WARE-NMK1003' AND `Discount Applied` = '0.4' THEN OrderNumber ELSE NULL END AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Mention the most populated city and median income of the store in Florida state.",
        "question_ar": "",
        "evidence_en": "most populated refers to Max(Population);",
        "evidence_ar": "",
        "SQL": "SELECT `City Name`, `Median Income` FROM `Store Locations` WHERE State = 'Florida' ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Describe the ID, city and region of the stores which are in Allen country.",
        "question_ar": "",
        "evidence_en": "ID refers to StoreID;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.StoreID, T2.`City Name`, T1.Region FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.County = 'Allen County'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the ID, city, state and region for the store type which is fewer between borough and CDP.",
        "question_ar": "",
        "evidence_en": "COUNT(StoreID) < COUNT(StoreID where Type = 'Borough') < COUNT(StoreID where Type = 'CDP');",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.StoreID, T2.`City Name`, T1.State, T2.Type FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Write down the region and name of the sale team ID of 18 and compare their orders between in-store and online.",
        "question_ar": "",
        "evidence_en": "sale team ID of 18 refers to _SalesTeamID = 18; COUNT(OrderNumber where Sales Channel = 'In-Store') > COUNT(OrderNumber where Sales Channel = 'Online');",
        "evidence_ar": "",
        "SQL": "SELECT T2.Region, T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeamID = 18 AND T1.`Sales Channel` = 'In-Store' OR T1.`Sales Channel` = 'Online'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the percentage of order via in-store channel of customer \"Medline\".",
        "question_ar": "",
        "evidence_en": "Medline is the name of the customer; DIVIDE(COUNT(OrderNumber where Sales Channel = 'In-Store' and Customer Names = 'Medline'), COUNT(OrderNumber where Customer Names = 'Medline')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.`Sales Channel` = 'In-Store' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1._CustomerID) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Medline '"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Describe the customer names and lasting delivery periods for the product of \"Bedroom Furniture\" by wholesale channel in 2019.",
        "question_ar": "",
        "evidence_en": "delivery period in 2019 means time between placing of an order and the receipt of product and refers to SUBTRACT(DeliveryDate, OrderDate) where SUBSTR(OrderDate, -2 ) = '19'; Sales Channel = 'Wholesale'; Product Name = 'Bedroom Furniture';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Customer Names`, T2.DeliveryDate FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.`Sales Channel` = 'Wholesale' AND T3.`Product Name` = 'Bedroom Furniture' AND T2.OrderDate LIKE '%/%/19'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Describe the customer names and product names which had over 3800 USD in net profit.",
        "question_ar": "",
        "evidence_en": "over 3800 USD in net profit refers to SUBTRACT(Unit Price, Unit Cost) where Net Profit > 3800;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT `Customer Names`, `Product Name` FROM ( SELECT T1.`Customer Names`, T3.`Product Name` , REPLACE(T2.`Unit Price`, ',', '') - REPLACE(T2.`Unit Cost`, ',', '') AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the store located cities with regions in no water area of California state.",
        "question_ar": "",
        "evidence_en": "cities refer to City Name; no water area refers to Water Area = 0;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`City Name` FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'California' AND T2.`Water Area` = '0'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the order percentage by \"Carlos Miller\" sales team.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OrderNumber where Sales Team = 'Carlos Miller'), COUNT(OrderNumber)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.`Sales Team` = 'Carlos Miller' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Compare the number of orders between \"Platters\" and \"Serveware\" products.",
        "question_ar": "",
        "evidence_en": "COUNT(OrderNumber where Product Name = 'Platters') > COUNT(OrderNumber where Product Name = 'Serveware');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.`Product Name` = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.`Product Name` = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the total net profit of the store located in highest median income city.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); highest median income city refers to City Name where MAX(Median Income);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.`Median Income` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit.",
        "question_ar": "",
        "evidence_en": "sales team ID of one digit refers to _SalesTeamID BETWEEN 1 AND 9; numbers of orders refer to COUNT(OrderNumber);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'South' AND T2.SalesTeamID BETWEEN 1 AND 9 GROUP BY T2.SalesTeamID HAVING COUNT(T1.OrderNumber)"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders have order date in 5/31/2018?",
        "question_ar": "",
        "evidence_en": "orders refer to OrderNumber;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(OrderDate = '5/31/18', 1, 0)) FROM `Sales Orders`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List out the name of orders which have delivery date of 6/13/2018.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(DeliveryDate = '6/13/18', OrderNumber, NULL) AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders placed were with more than 5 product quantities?",
        "question_ar": "",
        "evidence_en": "orders refer to OrderNumber; more than 5 product quantities refer to Order Quantity > 5;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(`Order Quantity` > 5, 1, 0)) FROM `Sales Orders`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State the full name of state code \"GA\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT IIF(StateCode = 'GA', State, NULL) AS T FROM Regions ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many states located in the Midwest region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN StateCode ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List out the product name of order which has unit cost of 781.22.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T1.`Unit Cost` = 781.22, T2.`Product Name`, NULL) AS T FROM `Sales Orders` T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State the delivery date of cookware.",
        "question_ar": "",
        "evidence_en": "Cookware is the name of the product;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T2.`Product Name` = 'Cookware', T1.DeliveryDate, NULL) AS T FROM `Sales Orders` T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many furniture cushions orders which have date of order in 2018?",
        "question_ar": "",
        "evidence_en": "furniture cushions orders refer to OrderNumber where Product Name = 'Furniture Cushions'; date of order in 2018 refers to SUBSTR(OrderDate, -2) = '18'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.`Product Name` = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List out the name of products which have been applied 10% discount.",
        "question_ar": "",
        "evidence_en": "applied 10% discount refers to Discount Applied = 0.1;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T1.`Discount Applied` = 0.1, T2.`Product Name`, NULL) AS T FROM `Sales Orders` T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the average net profit of phones which have sales channel of distributor.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Phones' and Sales Channel = 'Distributor';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Phones' AND T1.`Sales Channel` = 'Distributor'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List out the city name of states located in South region.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.Region = 'South' THEN T2.`City Name` END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the region of stores which have type of \"Town\" in the list?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.Type = 'Town' THEN T1.Region END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders that Medsep Group had made?",
        "question_ar": "",
        "evidence_en": "Medsep Group is the name of the customer; orders refer to OrderNumber;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Customer Names` = 'Medsep Group' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List out the discount levels applied for all orders from Ole Group.",
        "question_ar": "",
        "evidence_en": "Ole Group is the name of the customer; discount levels applied refer to Discount Applied NOT NULL;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.`Customer Names` = 'Ole Group' THEN T2.`Discount Applied` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State the customer name of orders which has shipped date in 7/8/2018.",
        "question_ar": "",
        "evidence_en": "shipped date in 7/8/2018 refers to ShipDate = '7/8/18'",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.ShipDate = '7/8/18' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the orders placed by Ei, how many orders have quantity greater than 4?",
        "question_ar": "",
        "evidence_en": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Order Quantity` > 4 AND T2.`Customer Names` = 'Ei ' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the orders placed by Pacific Ltd, how many orders have been applied 5% discount ?",
        "question_ar": "",
        "evidence_en": "orders by Pacific Ltd refer to OrderNumber where Customer Names = 'Pacific Ltd'; applied 5% discount refers to Discount Applied = 0.05;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Discount Applied` = 0.05 AND T2.`Customer Names` = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the customer names of orders which have unit cost greater than 4000USD?",
        "question_ar": "",
        "evidence_en": "unit cost greater than 4000USD refers to Unit Cost > 4000;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Unit Cost` > 4000 THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please list the id and detailed position of all stores in Birmingham city.",
        "question_ar": "",
        "evidence_en": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; id refers to StoreID;",
        "evidence_ar": "",
        "SQL": "SELECT StoreID, Latitude, Longitude FROM `Store Locations` WHERE `City Name` = 'Birmingham'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which city has the largest population?",
        "question_ar": "",
        "evidence_en": "city has the largest population refers to City Name where MAX(Population);",
        "evidence_ar": "",
        "SQL": "SELECT `City Name` FROM `Store Locations` ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many CDP stores are there in California?",
        "question_ar": "",
        "evidence_en": "California is a state; CDP stores refer to StoreID where Type = 'CDP';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN State = 'California' AND Type = 'CDP' THEN 1 ELSE 0 END) FROM `Store Locations`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please give the order number and product name of the order which has the lowest unit price.",
        "question_ar": "",
        "evidence_en": "the lowest unit price refers to MIN(Unit Price);",
        "evidence_ar": "",
        "SQL": "SELECT T1.OrderNumber, T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE REPLACE(T1.`Unit Price`, ',', '') = ( SELECT REPLACE(T1.`Unit Price`, ',', '') FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.`Unit Price`, ',', '') LIMIT 1 )"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which product has the highest net profit in 2019?",
        "question_ar": "",
        "evidence_en": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the highest net profit in 2019 refers to MAX(Net Profit) where OrderDate LIKE '%/19'; product refers to Product Name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/19' ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the average unit price of a Cookware product?",
        "question_ar": "",
        "evidence_en": "AVG(Unit Price where Product Name = 'Cookware');",
        "evidence_ar": "",
        "SQL": "SELECT AVG(REPLACE(T1.`Unit Price`, ',', '')) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Cookware'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please list all sale team names which had orders on 5/31/2018.",
        "question_ar": "",
        "evidence_en": "had orders on 5/31/2018 refer to OrderDate = '5/31/18'; sale team names refer to Sales Team;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.OrderDate = '5/31/18' THEN T2.`Sales Team` ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN `Sales Team` T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which sales team name has the least orders in 2019?",
        "question_ar": "",
        "evidence_en": "sale team names refer to Sales Team; the least orders in 2019 refer to MIN(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '19'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) ASC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "From 2018 to 2020, which year did the George Lewis group have the highest number of orders?",
        "question_ar": "",
        "evidence_en": "George Lewis refers to Sales Team; the highest number of orders refers to MAX(COUNT(OrderNumber)); which year from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2);",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.`Sales Team` = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the percentage of total orders from stores in Orange County in 2018?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(OrderNumber where County = 'Orange County' and SUBSTR(OrderDate, -2) = '18'), COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which order number has the highest unit price?",
        "question_ar": "",
        "evidence_en": "the highest unit price refers to MAX(Unit Price);",
        "evidence_ar": "",
        "SQL": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Price`, ',', '') = ( SELECT REPLACE(`Unit Price`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Price`, ',', '') DESC LIMIT 1 )"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which sales team id has the highest number of orders in 2018?",
        "question_ar": "",
        "evidence_en": "the highest number of orders in 2018 refers to MAX(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18'));",
        "evidence_ar": "",
        "SQL": "SELECT _SalesTeamID FROM `Sales Orders` WHERE OrderDate LIKE '%/%/18' GROUP BY _SalesTeamID ORDER BY COUNT(_SalesTeamID) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the unit cost of order SO - 000103?",
        "question_ar": "",
        "evidence_en": "OrderNumber = 'SO - 000103';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', `Unit Cost`, NULL) AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In 2020, what were the total orders of all stores in Maricopa County?",
        "question_ar": "",
        "evidence_en": "total orders refer to COUNT(OrderNumber); 2020 refers to SUBSTR(OrderDate, -2) = '20';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.County = 'Maricopa County' AND OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the detailed position of the store which has order SO - 000115?",
        "question_ar": "",
        "evidence_en": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; store refers to StoreID WHERE OrderNumber = 'SO - 000115';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please calculate the total number of orders by each city in 2019.",
        "question_ar": "",
        "evidence_en": "total number of orders refers to COUNT(OrderNumber); 2019 refers to OrderDate between 01-01-2019 and 31-12-2019; city refers to City Name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.`City Name` HAVING COUNT(T1.OrderNumber)"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please list the names of customers who have total orders of over 3 in 2018.",
        "question_ar": "",
        "evidence_en": "total orders of over 3 in 2018 refer to COUNT(OrderNumber) > 3 where SUBSTR(OrderDate, -2) = '18';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IIF(COUNT(T2.CustomerID) > 3, T2.`Customer Names`, NULL) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._CustomerID HAVING COUNT(T2.CustomerID)"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What were the total orders of Medsep Group from 2018 to 2020?",
        "question_ar": "",
        "evidence_en": "Medsep Group is the name of the customer; total orders refer to COUNT(OrderNumber); from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(T1.OrderDate, -2) IN ('18', '19', '20') AND T2.`Customer Names` = 'Medsep Group' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please list the customer names whose order quantity was more than 5 on 6/1/2018.",
        "question_ar": "",
        "evidence_en": "order quantity was more than 5 on 6/1/2018 refers to Order Quantity > 5 where OrderDate = 6/1/2018;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.`Order Quantity`) > 5 THEN T2.`Customer Names` END AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the percentage of total orders of Stephen Payne that had a net profit of over 1000?",
        "question_ar": "",
        "evidence_en": "Sales Team = 'Stephen Payne'; net profit can be computed as SUBTRACT(Unit Price, Unit Cost); DIVIDE(COUNT(OrderNumber where Sales Team = 'Stephen Payne' and Net Profit > 1000)), (COUNT(OrderNumber where Sales Team = 'Stephen Payne')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.`Sales Team` = 'Stephen Payne'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many sales team were from Northeast?",
        "question_ar": "",
        "evidence_en": "Northeast is the name of the region;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Region = 'Northeast' THEN 1 ELSE 0 END) FROM `Sales Team`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State the name of all city in Maricopa County along with its latitude and longitude.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT `City Name`, Latitude, Longitude FROM `Store Locations` WHERE County = 'Maricopa County'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which order have the highest unit cost?",
        "question_ar": "",
        "evidence_en": "order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);",
        "evidence_ar": "",
        "SQL": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 )"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the name of products with the ID of 30 to 40.",
        "question_ar": "",
        "evidence_en": "products with the ID of 30 to 40 refer to Product Name WHERE ProductID BETWEEN 30 AND 40;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN `Product Name` ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate ratio between the highest unit cost and the lowest unit cost?",
        "question_ar": "",
        "evidence_en": "ratio can be calculated as DIVIDE(MAX(Unit_Cost)), MIN(Unit Cost);",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 ) / ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') ASC LIMIT 1 ) ORDER BY REPLACE(`Unit Cost`, ',', '') ASC LIMIT 1 )"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which product was ordered the most in 2018?",
        "question_ar": "",
        "evidence_en": "product refers to Product Name; ordered the most in 2018 refers to MAX(COUNT(OrderNumber)) where SUBSTR(OrderDate, -2) = '18';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._ProductID ORDER BY COUNT(T1._ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many products sold by Adam Hernandez?",
        "question_ar": "",
        "evidence_en": "products sold by Adam Hernandez refer to SUM(Order Quantity where Sales Team = 'Adam Hernandez');",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.`Sales Team` = 'Adam Hernandez' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all orders where its products were shipped from Daly City.",
        "question_ar": "",
        "evidence_en": "shipped from Daly City refers to Store Locations where City Name = 'Daly City'; orders refer to OrderNumber;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`City Name` = 'Daly City' THEN T1.OrderNumber END AS T FROM `Sales Orders` T1 INNER JOIN `Store Locations` T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders made by Rochester Ltd?",
        "question_ar": "",
        "evidence_en": "Rochester Ltd is the name of the customer; orders refer to OrderNumber;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Customer Names` = 'Rochester Ltd' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State the order number where Qualitest ordered the highest product quantity.",
        "question_ar": "",
        "evidence_en": "Qualitest ordered the highest product quantity refers to Customer Names where MAX(Order Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.OrderNumber FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Qualitest ' ORDER BY T1.`Order Quantity` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the order for all in-store sales along with the products sold.",
        "question_ar": "",
        "evidence_en": "orders for all in-store sales refer to OrderNumber where Sales Channel = 'In-Store'; products refer to Product Name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OrderNumber, T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.`Sales Channel` = 'In-Store'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many online sales were made in May 2018 where products were shipped from Norman?",
        "question_ar": "",
        "evidence_en": "online sales refer to OrderNumber where Sales Channel = 'Online'; May 2018 refers to OrderDate LIKE '5/%/18'; Norman is the name of the city;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '5/%/18' AND T1.`Sales Channel` = 'Online' AND T2.`City Name` = 'Norman' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the products sold in Maricopa County, which was the least sold?",
        "question_ar": "",
        "evidence_en": "the least sold product refers to Product Name where MIN(Order Quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.`Order Quantity` ASC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "State all the order numbers for sales team of Samuel Fowler.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Sales Team` = 'Samuel Fowler' THEN T1.OrderNumber ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN `Sales Team` T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the number of baseball ordered in December 2017.",
        "question_ar": "",
        "evidence_en": "Product Name = 'Baseball'; December 2017 refers to OrderDate LIKE '12/%/17';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.OrderNumber) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T1.`Product Name` = 'Baseball' AND T2.OrderDate LIKE '12/%/18'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the average number of ornaments sold each month in 2018.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(Order Quantity where Product Name = 'Ornaments' and OrderDate LIKE '%/18'), 12);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.`Order Quantity`) AS REAL) / 12 FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T1.`Product Name` = 'Ornaments' AND T2.OrderDate LIKE '%/%/18'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the percentage of products that were shipped from Burbank in 2018?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(Order Quantity where City Name = 'Burbank' and SUBSTR(OrderDate, -2) = '18')), (SUM(Order Quantity where SUBSTR(OrderDate, -2) = '18')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.`City Name` = 'Burbank' THEN T2.`Order Quantity` ELSE 0 END) AS REAL) * 100 / SUM(T2.`Order Quantity`) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T2.OrderDate LIKE '%/%/18'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the difference in order number from \"WARE-MKL1006\" and \"WARE-NBV1002\"?",
        "question_ar": "",
        "evidence_en": "\"WARE-NBV1002\" and \"WARE-MKL1006\" are both WarehouseCode; difference in order number = Subtract(Count(OrderNumber where WarehouseCode = 'WARE-MKL1006'), Count(OrderNumber where WarehouseCode = 'WARE-NBV1002'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(WarehouseCode = 'WARE-MKL1006', 1, 0)) - SUM(IIF(WarehouseCode = 'WARE-NBV1002', 1, 0)) AS difference FROM `Sales Orders`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Describe the product names delivered in 2021 for the customer \"Sundial\".",
        "question_ar": "",
        "evidence_en": "delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.DeliveryDate LIKE '%/%/21' AND T1.`Customer Names` = 'Sundial ' THEN T3.`Product Name` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Write down the store IDs and region of the state \"Michigan\".",
        "question_ar": "",
        "evidence_en": "\"Michigan\" is the State",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.StoreID, T1.Region FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'Michigan'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".",
        "question_ar": "",
        "evidence_en": "\"Apollo Ltd\" and \"Pacific Ltd\" are both Customer Names; total number of orders refers to COUNT(OrderNumber)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.`Customer Names` = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.`Customer Names` = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the store ID with more orders between \"Aurora\" and \"Babylon\" city.",
        "question_ar": "",
        "evidence_en": "\"Aurora\" refers to City Name = 'Aurora (Township)'; \"Babylon\" refers to City Name = 'Babylong (Town)'; more order refers to Max(Count(OrderNumber))",
        "evidence_ar": "",
        "SQL": "SELECT T2.StoreID FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.`City Name` = 'Aurora (Township)' OR T2.`City Name` = 'Babylon (Town)' GROUP BY T2.StoreID ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List down the customer names and product names of the order made by \"Anthony Torres\" via distributor channel.",
        "question_ar": "",
        "evidence_en": "\"Anthony Torres\" is the name of Sales Team; distributor channel refers to Sales Channel = 'Distributor'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.`Customer Names`, T4.`Product Name` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.`Sales Team` = 'Anthony Torres' AND T2.`Sales Channel` = 'Distributor'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel.",
        "question_ar": "",
        "evidence_en": "IDs refers to CustomerID; total net profit of above 5000 USD refers to SUM(Subtract(Unit Price, Unit Cost)) > 5000",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT `Customer Names`, CustomerID FROM ( SELECT T2.`Customer Names`, T2.CustomerID , SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.`Sales Channel` = 'Online' GROUP BY T2.CustomerID ) WHERE T > 5000"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the net profit of the floral products which were delivered in 2021.",
        "question_ar": "",
        "evidence_en": "floral product refers to Product Name = 'Floral'; total net profit = SUM(Subtract(Unit Price, Unit Cost)); delivered in 2021 refers to DeliveryDate LIKE '%/21'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.DeliveryDate LIKE '%/%/21' AND T2.`Product Name` = 'Floral'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Count the number of orders made from the store in city with population of 3000000 to 4000000.",
        "question_ar": "",
        "evidence_en": "number of order refers to OrderNumber; population of 3000000 to 4000000 refers to Population BETWEEN 3000000 AND 4000000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name the products via wholesale channel of the store under Pacific/Honolulu time zone.",
        "question_ar": "",
        "evidence_en": "products refers to Product Name; via wholesale channel refers to Sales Channel = 'Wholesale'",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.`Time Zone` = 'Pacific/Honolulu' AND T2.`Sales Channel` = 'Wholesale' THEN T1.`Product Name` ELSE NULL END AS T FROM Products T1 INNER JOIN `Sales Orders` T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` T3 ON T3.StoreID = T2._StoreID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the order numbers and product names which were ordered on 6th June, 2018.",
        "question_ar": "",
        "evidence_en": "ordered on 6th June 2018 refers to OrderDate = '6/5/18'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT OrderNumber, `Product Name` FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.`Product Name`, NULL) AS \"Product Name\" FROM Products T1 INNER JOIN `Sales Orders` T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND `Product Name` IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020.",
        "question_ar": "",
        "evidence_en": "\"Weimei Corp\" is the Customer Names; in 2018, 2019 and 2020 refers to SUBSTR (OrderDate, -2) IN ('18', '19', '20') : Average order = Divide (Count (OrderNumber), 3)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber) / 3 FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE (T1.OrderDate LIKE '%/%/18' AND T2.`Customer Names` = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/19' AND T2.`Customer Names` = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/20' AND T2.`Customer Names` = 'Weimei Corp')"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Calculate the average monthly order and percentage of warehouse \"WARE-NMK1003\" in 2019. Among them, mention number of orders for floor lamps.",
        "question_ar": "",
        "evidence_en": "\"WARE-NMK1003\" is the WarehouseCode; in 2019 refers to SUBSTR(OrderDate, -2) = '19'; average = Divide (Count (OrderNumber where SUBSTR(OrderDate, -2) = '19'), 12); Percentage = Divide (Count(OrderNumber where WarehouseCode = 'WARE-NMK1003'), Count(OrderNumber)) * 100; 'Floor Lamps' is the Product Name; number of orders refers to Count(OrderNumber)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.`Product Name` = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.`Order Quantity` ELSE NULL END) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Indicate the procured dates for the customer whose ID is 11.",
        "question_ar": "",
        "evidence_en": "ID is 11 refers to _CustomerID = 11;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(_CustomerID = 11, ProcuredDate, NULL) AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders through distributor were for the minimum quantity?",
        "question_ar": "",
        "evidence_en": "\"Distributor\" is the Sales Channel; minimum quantity refers to Min(Order Quantity)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN `Order Quantity` = 1 AND `Sales Channel` = 'Distributor' THEN 1 ELSE 0 END) FROM `Sales Orders`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List by ID all sales teams that have sold products at a 10% discount in store.",
        "question_ar": "",
        "evidence_en": "ID refers to _SalesTeamID; 10% discount refers to Discount Applied = 0.1; 'In-Store' is the Sales Channel",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN `Discount Applied` = '0.1' AND `Sales Channel` = 'In-Store' THEN _SalesTeamID ELSE NULL END AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million?",
        "question_ar": "",
        "evidence_en": "\"Brooklyn\" is the CityName; population of less than 3 million refers to Population < 3000000",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Population < 3000000 AND Type = 'Borough' AND `City Name` = 'Brooklyn' THEN 1 ELSE 0 END) FROM `Store Locations`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many states are in the Midwest region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN State ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What are the top 10 products with the highest net profit?",
        "question_ar": "",
        "evidence_en": "products refers to Product Name; highest net profit = Max(Subtract(Unit Price, Unit Cost))",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) DESC LIMIT 10"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Indicate the name of the customers who have placed an order of 3 units in February 2018.",
        "question_ar": "",
        "evidence_en": "name of customer refers to Customer Names; order of 3 unit refers to Order Quantity = 3; in February 2018 refers to OrderDate LIKE '2/%/18'",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Order Quantity` = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What are the names of the sales teams that have served to customer Apotheca, Ltd?",
        "question_ar": "",
        "evidence_en": "name of sales team refers to Sales Team; 'Apotheca, Ltd' is the Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.`Sales Team` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T1.`Customer Names` = 'Apotheca, Ltd'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse?",
        "question_ar": "",
        "evidence_en": "\"WARE-UHY1004\" is the WarehouseCode",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.WarehouseCode = 'WARE-UHY1004' THEN T1.Region END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode INNER JOIN `Sales Orders` T3 ON T3._StoreID = T2.StoreID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List all the cities where Shawn Torres sells Audio products.",
        "question_ar": "",
        "evidence_en": "\"Shawn Torres\" is the name of Sales Team; Audio product refers to Product Name = 'Audio'",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T4.`Product Name` = 'Audio' AND T3.`Sales Team` = 'Shawn Torres' THEN T1.`City Name` ELSE NULL END AS T FROM `Store Locations` T1 INNER JOIN `Sales Orders` T2 ON T2._StoreID = T1.StoreID INNER JOIN `Sales Team` T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products T4 ON T4.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19.",
        "question_ar": "",
        "evidence_en": "ordered on 10/21/18 refers to OrderDate = '10/21/18'; delivered on 11/21/19 refers to DeliveryDate = '11/21/19'; name of product refers to Product Name",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Product Name`, T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.OrderDate = '10/21/18' AND T2.DeliveryDate = '11/21/19'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many stores procured products on October 27, 2018, in the city of Oregon?",
        "question_ar": "",
        "evidence_en": "October 27, 2018 refers to ProcuredDate = '10/27/18'; 'Oregon' is the State",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.`City Name` = 'Orlando' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What sales channels are used the most in the 3 places with the highest median income?",
        "question_ar": "",
        "evidence_en": "highest median income refers to Max(Median Income)",
        "evidence_ar": "",
        "SQL": "SELECT `Sales Channel` FROM ( SELECT T1.`Sales Channel` FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.`Median Income` DESC LIMIT 3 ) GROUP BY `Sales Channel` ORDER BY COUNT(`Sales Channel`) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the 5 sales teams that have made sales with the highest net profits.",
        "question_ar": "",
        "evidence_en": "highest net profit = Max(Subtract (Unit Price, Unit Cost))",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 5"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036.",
        "question_ar": "",
        "evidence_en": "highest discount applied refers to Max(Discount Applied)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.`Discount Applied`) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Colorado' AND T2.`Land Area` = 111039036"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many different time zones are there in the Northeast region?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.`Time Zone`) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What type of store is most popular in the South?",
        "question_ar": "",
        "evidence_en": "in the South refers to Region = 'South'; type of store that is most popular refers to Max(Count(Type))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN MAX(T2.Population) THEN T2.Type END FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode"
    },
    {
        "db_id": "regional_sales",
        "question_en": "To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?",
        "question_ar": "",
        "evidence_en": "\"WARE-MKL1006\" is the WarehouseCode; most shipment to region refers to Max(Count(Region))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.WarehouseCode = 'WARE-MKL1006' GROUP BY T2.Region ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In which city is the store with the highest sales order unit price located?",
        "question_ar": "",
        "evidence_en": "highest sales order unit price refers to Max(Unit Price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`City Name` FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE REPLACE(T1.`Unit Price`, ',', '') = ( SELECT REPLACE(T1.`Unit Price`, ',', '') FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many online purchases did Ole Group make in May 2019?",
        "question_ar": "",
        "evidence_en": "\"Ole Group\" is the Customer Names; online purchase refers to Sales Channel = 'Online'; made in May 2019 refers to OrderDate LIKE '5/%/19'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Sales Channel` = 'Online' AND T2.`Customer Names` = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County?",
        "question_ar": "",
        "evidence_en": "less need for products refers to Order Quantity = 1; purchased through a distributor refers to Sales Channel = 'Distributor'; 'Harri County' is the County",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Order Quantity` = 1 AND T1.`Sales Channel` = 'Distributor' AND T2.County = 'Washtenaw County' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the least purchased product by stores in the city of Santa Clarita?",
        "question_ar": "",
        "evidence_en": "least purchased product refers to Min(Count(Product Name)); 'Santa Clarita' is the City",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T3.`City Name` = 'Santa Clarita' GROUP BY T1.`Product Name` ORDER BY COUNT(T1.`Product Name`) ASC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times?",
        "question_ar": "",
        "evidence_en": "WARE-PUJ1005 is the WarehouseCode; fewest times refers to Min (Count(WarehouseCode))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.WarehouseCode = 'WARE-PUJ1005' GROUP BY T2.StoreID ORDER BY COUNT(T1.WarehouseCode) ASC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What percentage of sell orders on 04/04/2020 were for the state of New York?",
        "question_ar": "",
        "evidence_en": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is  the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the average land area of ​​the cities in which stores that purchased products for a unit price of 998.30 are located?",
        "question_ar": "",
        "evidence_en": "average land area = Divide (Sum(Land Area), Count(Land Area))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.`Land Area`) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.`Unit Price` = '998.30'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the average household income in cities in the state of New Hampshire where there are stores of the type city?",
        "question_ar": "",
        "evidence_en": "\"New Hampshire\" is the State; average household income = AVG(Household Income)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.`Household Income`) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'New Hampshire' AND T2.Type = 'City'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many sales teams are there in the Midwest?",
        "question_ar": "",
        "evidence_en": "\"Midwest\" is the Region",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM `Sales Team`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Indicate order numbers with an order date after 1/1/2018.",
        "question_ar": "",
        "evidence_en": "order date after 1/1/2018 refers to OrderDate > '1/1/2018'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM `Sales Orders` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many sales channels does the sales team have in the Midwest?",
        "question_ar": "",
        "evidence_en": "\"Midwest\" is the Region",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`Sales Channel`) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which sales team has the other with the highest unit price?",
        "question_ar": "",
        "evidence_en": "highest unit price refers to Max(Unit Price)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE REPLACE(T1.`Unit Price`, ',', '') = ( SELECT REPLACE(T1.`Unit Price`, ',', '') FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which regions have online sales channels that have the most discounts?",
        "question_ar": "",
        "evidence_en": "most discount refers to Max(Discount Applied)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.`Sales Channel` = 'Online' ORDER BY T1.`Discount Applied` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date?",
        "question_ar": "",
        "evidence_en": "\"Apollo Ltd\" is the Customer Names; most expensive unit price refers to max(Unit Price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.OrderNumber, T1.OrderDate FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Apollo Ltd' ORDER BY T1.`Unit Price` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Provide order number, warehouse code of customers Elorac, Corp.",
        "question_ar": "",
        "evidence_en": "\"Elorac, Corp\" is the Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.OrderNumber, T1.WarehouseCode FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Elorac, Corp'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name of customers who have ordered Cocktail Glasses by online sales channel.",
        "question_ar": "",
        "evidence_en": "\"Cocktail Glasses\" is the Product Name; customer refers to Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.`Product Name` = 'Cocktail Glasses' AND T2.`Sales Channel` = 'Online' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which store in Arizona has the most net profit?",
        "question_ar": "",
        "evidence_en": "\"Arizona\" is the name of State; most net profit = Max(Subtract( Unit Price, Unit Cost))",
        "evidence_ar": "",
        "SQL": "SELECT T2.StoreID FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.`Unit Price` - T1.`Unit Cost` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How much more is the Florida store's computer product unit price than the Texas store?",
        "question_ar": "",
        "evidence_en": "\"Florida\" and \"Texas\" are both the name of State; Computer product refers to Product Name = 'Computers; difference in unit price = Subtract (Unit Price where State = 'Florida', Unit Price where State = 'Texas')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.State = 'Florida' THEN T2.`Unit Price` ELSE 0 END) - SUM(CASE WHEN T3.State = 'Texas' THEN T2.`Unit Price` ELSE 0 END) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T1.`Product Name` = 'Computers'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among sales teams in Midwest region, which sales team has an order quantity greater than 5?",
        "question_ar": "",
        "evidence_en": "order quantity greater than 5 refers to Order Quantity > 5",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.`Order Quantity` > 5"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please indicate store id in the state of California that have been applied 20% discount in store.",
        "question_ar": "",
        "evidence_en": "\"California\" is the name of State; in store refers to Sales Channel = 'In-Store'; 20% discount refers to Discount Applied = '0.2'",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.`Sales Channel` = 'In-Store' AND T1.`Discount Applied` = 0.2 THEN T2.StoreID END AS T FROM `Sales Orders` T1 INNER JOIN `Store Locations` T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "List the name of the customer with the most number of order quantity from 2018 to 2020.",
        "question_ar": "",
        "evidence_en": "name of customer refers to Customer Names; from 2018 to 2020 refers to OrderDate between '1/1/2018' and '31/12/2020'; most number of order quantity refers to Order Quantity = 8",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID WHERE T2.OrderDate LIKE '%/%/18' OR T2.OrderDate LIKE '%/%/19' OR T2.OrderDate LIKE '%/%/20' ORDER BY T2.`Order Quantity` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Please indicate total order quantity of product Candles and calculate the percentage of such product among all the orders.",
        "question_ar": "",
        "evidence_en": "total order quantity refers to Sum (Order Quantity); 'Candles' is the Products Name; percentage = Divide (Sum(Order Quantity where Product Name = 'Candles'), Sum(Order Quantity)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.`Product Name` = 'Candles' THEN T2.`Order Quantity` ELSE 0 END), CAST(SUM(CASE WHEN T1.`Product Name` = 'Candles' THEN T2.`Order Quantity` ELSE 0 END) AS REAL) * 100 / SUM(T2.`Order Quantity`) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which region is Joshua Bennet located in?",
        "question_ar": "",
        "evidence_en": "\"Joshua Bennett\" is the name of Sales Team",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN `Sales Team` = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM `Sales Team` ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the store id of the store located in the most populous county?",
        "question_ar": "",
        "evidence_en": "most populous country refers to Max(Population)",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN MAX(Population) THEN StoreID END FROM `Store Locations`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many sales teams are there in the Midwest?",
        "question_ar": "",
        "evidence_en": "\"Midwest\" is the Region",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM `Sales Team`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the type of store located in the city with the highest amount of water area?",
        "question_ar": "",
        "evidence_en": "type of store in City refers to Type = 'City'; highest amount of water area refers to Max(Water Area)",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN MAX(`Water Area`) THEN Type END FROM `Store Locations`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many online orders were shipped during the month of June 2018?",
        "question_ar": "",
        "evidence_en": "online orders refers to Sales Channel = 'Online'; shipped during the month of June 2018 refers to SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-2) = '18'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND `Sales Channel` = 'Online', 1, 0)) FROM `Sales Orders`"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How much is the discount applied to the order with the highest unit price?",
        "question_ar": "",
        "evidence_en": "highest unit price refers to Max(Unit Price)",
        "evidence_ar": "",
        "SQL": "SELECT `Discount Applied` FROM `Sales Orders` WHERE REPLACE(`Unit Price`, ',', '') = ( SELECT REPLACE(`Unit Price`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Price`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(`Unit Price`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the name of the product with the highest net profit?",
        "question_ar": "",
        "evidence_en": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of product refers to Product Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In the Northeast region, what is the average household income for each city located in the state with the highest number of stores?",
        "question_ar": "",
        "evidence_en": "average household income = Divide (Sum(Household Income), Count(City Name)); highest number of store refers to Max(Count(StoreID))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.`Household Income`) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast' GROUP BY T2.State ORDER BY COUNT(T2.StoreID) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In which region can you find the stores located in the state whose median income is no more than 30,000?",
        "question_ar": "",
        "evidence_en": "median income no more than 30,000 refers to Median Income < 30,000",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Median Income` < 30000 THEN T1.Region END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In the West, how many stores are there in the city whose land area is below 20,000,000?",
        "question_ar": "",
        "evidence_en": "\"West\" is the Region; land area is below 20,000,000 refers to Land Area < 20,000,000",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.`Land Area` < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the name of the customer who purchased the product with the highest net profiit?",
        "question_ar": "",
        "evidence_en": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of customer refers to Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT `Customer Names` FROM ( SELECT T1.`Customer Names`, T2.`Unit Price` - T2.`Unit Cost` AS \"net profit\" FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY `net profit` DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team.",
        "question_ar": "",
        "evidence_en": "shipped refers to ShipDate; in 2019 refers to shipped in 2019 refers to SUBSTR(ShipDate, -2) = '19'; order in the said year refers to SUBSTR(OrderDate, -2) = '19'; highest number of order refers to Max(Count(OrderNumber))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber), T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Among the products with an order quantity of no less than 5 that was shipped in the month of May 2019, what is the name of the product with the lowest net profit?",
        "question_ar": "",
        "evidence_en": "order quantity of no less than 5 refers to Order Quantity > 5; shipped in the month of May 2019 refers to ShipDate LIKE '5/%/19'; lowest net profit = Min(Subtract(Unit Price, Unit Cost)); name of product refers to Products Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.`Order Quantity` > 5 AND ShipDate LIKE '5/%/19' ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') ASC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?",
        "question_ar": "",
        "evidence_en": "detailed coordinates refers to Latitude, Longitude; highest net profit = Max(Subtract(Unit Price, Unit Cost))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 3, 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.",
        "question_ar": "",
        "evidence_en": "shipped refers to ShipDate; in 2020 refers to SUBSTR(ShipDate, -2) = '20'; highest amount of shipped orders refers to Max(Count(OrderNumber))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.OrderNumber), T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen?",
        "question_ar": "",
        "evidence_en": "shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of Sales Team; average shipped orders per year = Divide (Count(OrderNumber), 3)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.OrderNumber) AS REAL) / 3 FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/18') OR (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/19') OR (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/20')"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the amount of discount applied to the product with the highest net profit and what is the name of the said product?",
        "question_ar": "",
        "evidence_en": "highest net profit refers to Max(Subtract(Unit Price, Unit Cost)); name of product refers to Product Name",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Unit Price` * T1.`Discount Applied`, T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?",
        "question_ar": "",
        "evidence_en": "highest price per order after discount refers to Max(Subtract(Multiply (Unit Price, Order Quantity), Discount Applied)); name of customer refers to Customer Names",
        "evidence_ar": "",
        "SQL": "SELECT `Customer Names` FROM ( SELECT T1.`Customer Names` , REPLACE(T2.`Unit Price`, ',', '') * T2.`Order Quantity` - REPLACE(T2.`Unit Price`, ',', '') * T2.`Discount Applied` AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Which sales channel was most preferred in commercializing products in January 2020 based on the number of orders placed?",
        "question_ar": "",
        "evidence_en": "order refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'; January refers to Substr(OrderDate, 1, 1) = '1';  most preferred sales channel refers to Sales Channel where Max(Count(OrderNumber))",
        "evidence_ar": "",
        "SQL": "SELECT `Sales Channel` FROM `Sales Orders` WHERE OrderDate LIKE '1/%/20' GROUP BY `Sales Channel` ORDER BY COUNT(`Sales Channel`) DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Name the product that was registered in the sales order 'SO - 0005951'.",
        "question_ar": "",
        "evidence_en": "sales order 'SO - 0005951' refers to OrderNumber = 'SO - 0005951'; product refers to Product Name",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.`Product Name` ELSE NULL END AS T FROM Products T1 INNER JOIN `Sales Orders` T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Identify the store location and sales team who processed the sales order 'SO - 0001004'.",
        "question_ar": "",
        "evidence_en": "sales order 'SO - 0001004' refers to OrderNumber = 'SO - 0001004'; store location refers to City Name",
        "evidence_ar": "",
        "SQL": "SELECT T3.`Sales Team`, T1.`City Name` FROM `Store Locations` AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._StoreID = T1.StoreID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.OrderNumber = 'SO - 0001004'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019.",
        "question_ar": "",
        "evidence_en": "\"Gilbert\" is the City Name; 'Arizona' is the name of State; customer relationship in 2019 refers to ProcuredDate LIKE '%/19'; top net profit refers to Max(Subtract(Unit Price, Unit Cost))",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T3.`City Name` = 'Gilbert' AND T2.ProcuredDate LIKE '%/%/19' ORDER BY REPLACE(T2.`Unit Price`, ',', '') - REPLACE(T2.`Unit Cost`, ',', '') DESC LIMIT 1"
    },
    {
        "db_id": "regional_sales",
        "question_en": "How many sales orders were processed by the store located in Chandler in 2020?",
        "question_ar": "",
        "evidence_en": "\"Chandler\" is the City Name; orders refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.`City Name` = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What is the average household income of Glendale?",
        "question_ar": "",
        "evidence_en": "\"Glendale\" is the City Name; Average household income refers to avg(Household Income)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(`Household Income`) FROM `Store Locations` WHERE `City Name` = 'Glendale'"
    },
    {
        "db_id": "regional_sales",
        "question_en": "What was the best discount applied to sales orders in 2020?",
        "question_ar": "",
        "evidence_en": "sales orders in 2020 refers to Substr(OrderDate, -2) = '20'; best discount applied refers to Max(Discount Applied)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(`Discount Applied`) FROM `Sales Orders` WHERE OrderDate LIKE '%/%/20'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the most consecutive games tied by Ebbsfleet as an away team in the 2008 season?",
        "question_ar": "",
        "evidence_en": "consecutive games mean happen one after the other without interruption and refer to Date; tied refers to FTR = 'D';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM matchs WHERE season = 2008 AND AwayTeam = 'Ebbsfleet' AND FTR = 'D'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Of all the divisions in the world, what percentage of them belong to England?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(division where country = 'England'), COUNT(division)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN country = 'England' THEN division ELSE NULL END) AS REAL) * 100 / COUNT(division) FROM divisions"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What percentage of games won, games lost and games drawn does Cittadella have as a home team in total?",
        "question_ar": "",
        "evidence_en": "Percentage of games won = DIVIDE(COUNT(FTR = 'H' where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage; Percentage of games lost = DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Cittadella')), COUNT(Div where HomeTeam = 'Cittadella') as percentage; percentage of games drawn = DIVIDE(SUM(FTR = 'D'where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage;\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) / COUNT(HomeTeam) AS REAL) * 100, CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam), CAST(COUNT(CASE WHEN FTR = 'D' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam) FROM matchs WHERE HomeTeam = 'Cittadella'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Of all the teams that played as a team away against Caen in the 2010 season, which one has the highest winning percentage?",
        "question_ar": "",
        "evidence_en": "Caen refers to HomeTeam; which one refers to AwayTeam; the highest winning percentage = MAX(DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Caen', season = '2010')), COUNT(Div where HomeTeam = 'Caen', season = '2010')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What percentage of matches played on 2005/07/30 belong to the F1 division?",
        "question_ar": "",
        "evidence_en": "Division refers to Div; DIVIDE(COUNT(Div = 'F1', Date = '2005/07/30'), COUNT(Div, Date = '2005/07/30')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Div = 'F1' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Div) FROM matchs WHERE Date = '2005-07-30' "
    },
    {
        "db_id": "european_football_1",
        "question_en": "What percentage of all tied games did the Sassuolo team play in?",
        "question_ar": "",
        "evidence_en": "tied games refer FTR = 'D'; DIVIDE(COUNT(Div where FTR = 'D', HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo'), COUNT(Div where HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FTR) FROM matchs WHERE FTR = 'D'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the percentage whereby the away team scored 2 goals during the 2017 seasons?",
        "question_ar": "",
        "evidence_en": "scored 2 goals refers to FTAG = 2, which is short name for Final-time Away-team Goals; DIVIDE(COUNT(Div where season = 2017, FTAG = '2'), COUNT(Div where season = 2017)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN FTAG = 2 THEN 1 ELSE 0 END) / COUNT(FTAG) AS REAL) * 100 FROM matchs WHERE season = 2017"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the name of all the teams that played in the EFL League One division?",
        "question_ar": "",
        "evidence_en": "all the teams include both HomeTeam and AwayTeam; name = 'EFL League One'; DIV = 'E2';",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam,T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'EFL League One' and T1.Div = 'E2' "
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many teams playing in divisions in Greece have ever scored 4 or more goals?",
        "question_ar": "",
        "evidence_en": "teams include both HomeTeam and AwayTeam; country = 'Greece'; scored 4 or more goals refer to FTAG≥4, which is short name for Final-time Away-team Goals;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.FTHG >= 4 THEN HomeTeam ELSE NULL end) + COUNT(DISTINCT CASE WHEN T1.FTAG >= 4 THEN AwayTeam ELSE NULL end) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' "
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?",
        "question_ar": "",
        "evidence_en": "matches refer to Div; Scottish Championship is a name of the league; equal result of 2-2 refers to FTAG = 2 AND FTHG = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?",
        "question_ar": "",
        "evidence_en": "local team refers to HomeTeam; Scottish means belong to the country = 'Scotland'; scored 10 goals refer to FTHG = 10, which is short name for Final-time Away-team Goals;",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10"
    },
    {
        "db_id": "european_football_1",
        "question_en": "From the Spanish LaLiga division in the 2017 season, which team won the most times as a local team and by what percentage?",
        "question_ar": "",
        "evidence_en": "local team refers to HomeTeam; Spanish means belong to the country = 'Spain'; LaLiga is a name of division; won as a local team refers to FTR = 'H', where H stands for home victory; DIVIDE(COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017, FRT = 'H'), COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam HWHT , CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T2.country = 'Spain' AND T1.season = 2017"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions?",
        "question_ar": "",
        "evidence_en": "matches = Div",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(T1.Div) AS total FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS num , CASE WHEN 1 THEN T.result END AS percentage FROM ( SELECT 100.0 * COUNT(T1.Div) / ( SELECT COUNT(T1.Div) FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS result FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 GROUP BY T2.division ) AS T"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the highest final-time score across all divisions in the 2021 season? Which team was the team that made up that score?",
        "question_ar": "",
        "evidence_en": "MAX(SUM where FTHG, FTAG, season = 2021);",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT MAX(MAX(FTAG), MAX(FTHG)) FROM matchs WHERE season = 2021 ) AS T1, AwayTeam FROM matchs WHERE season = 2021 AND FTHG = T1 OR FTAG = T1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the name of the home team in division P1 with the highest final time goal in all seasons?",
        "question_ar": "",
        "evidence_en": "the highest final time goal refers to MAX(FTHG); P1 = Div;",
        "evidence_ar": "",
        "SQL": "SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND season = 2021 ORDER BY FTHG DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What was the difference in home team and away team win percentages across all divisions in 2010?",
        "question_ar": "",
        "evidence_en": "2010 refers to season = 2010; SUBTRACT(DIVIDE(COUNT(Div where FTR = 'H', season = 2010), COUNT(Div where season = 2010)), COUNT(Div where FTR = 'A', season = 2010), COUNT(Div where season = 2010)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) - CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) DIFFERENCE FROM matchs WHERE season = 2010"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which division had the most draft matches in the 2008 season?",
        "question_ar": "",
        "evidence_en": "the most draft matches refer to MAX(COUNT(Div)) where FTR = 'D';",
        "evidence_ar": "",
        "SQL": "SELECT Div FROM matchs WHERE season = 2008 AND FTR = 'D' GROUP BY Div ORDER BY COUNT(FTR) DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team won the match in the EC division on January 20, 2008 at home?",
        "question_ar": "",
        "evidence_en": "won at home refers to FTR = 'H'; January 20, 2008 refers to Date = '2008-01-20'; EC division refers to Div = 'EC';",
        "evidence_ar": "",
        "SQL": "SELECT HomeTeam FROM matchs WHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?",
        "question_ar": "",
        "evidence_en": "September 13, 2009 refers to Date = '2009-09-13'; Club Brugge refers to HomeTeam; Genk refers to AwayTeam;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many matches were played in the Scottish Premiership division from 2006 to 2008?",
        "question_ar": "",
        "evidence_en": "Scottish Premiership is a name of division; from 2006 to 2008 means seasons between 2006 and 2008;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)"
    },
    {
        "db_id": "european_football_1",
        "question_en": "In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which away team in the division of Bundesliga has the highest final time goals?",
        "question_ar": "",
        "evidence_en": "Bundesliga is a name of division; the highest final time goals refers to MAX(FTAG);",
        "evidence_ar": "",
        "SQL": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'Bundesliga' ORDER BY T1.FTAG DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Please provide the names of any three away teams that competed in the Italian divisions.",
        "question_ar": "",
        "evidence_en": "Italian means belong to country = 'Italy\";",
        "evidence_ar": "",
        "SQL": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.country = 'Italy' LIMIT 3"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What is the name of the division that has had the lowest number of draft matches in the 2019 season?",
        "question_ar": "",
        "evidence_en": "the lowest number of draft matches refers to MIN(COUNT(FTR = 'D'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many times did Valencia's home team win in the LaLiga division?",
        "question_ar": "",
        "evidence_en": "LaLiga is a name of the division; Valencia's home team refers to HomeTeam = 'Valencia'; win refers to FTR = 'H';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T1.HomeTeam = 'Valencia' AND T1.FTR = 'H'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "In how many matches in the Seria A division did both teams have equal goals?",
        "question_ar": "",
        "evidence_en": "Seria A is a name of division; equal goals refers to FTR = 'D', where D stands for draft;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many football divisions does England have?",
        "question_ar": "",
        "evidence_en": "England is the name of country;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(division) FROM divisions WHERE country = 'England'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What's the name of the football division in the Netherlands?",
        "question_ar": "",
        "evidence_en": "Netherlands is the name of country;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM divisions WHERE country = 'Netherlands'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Who is the winner of the game happened on 2009/10/10, between \"East Fife\" and \"Dumbarton\"?",
        "question_ar": "",
        "evidence_en": "2009/10/10 is a date; the winner refers to FTR = 'A'; East Fife and Dumbarton are name of teams where HomeTeam = 'East Fife'; AwayTeam = 'Dumbarton';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN FTR = 'H' THEN 'East Fife' ELSE 'Dumbarton' END WINNER FROM matchs WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What was the final score for the game Bursaspor vs Denizlispor on 2009/4/26?",
        "question_ar": "",
        "evidence_en": "Bursaspor vs Denizlispor are names of teams where HomeTeam = 'Bursaspor' and AwayTeam = 'Denizlispor'; Date = '2009-04-26'; final score refers to FTHG, FTAG;",
        "evidence_ar": "",
        "SQL": "SELECT FTHG, FTAG FROM matchs WHERE Date = '2009-04-26' AND HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "When did the first match that score more than 10 goals happen?",
        "question_ar": "",
        "evidence_en": "score more than 10 goals refers to SUM(FTHG, FTAG)>10, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; the first means the earliest and refers to MIN(Date);",
        "evidence_ar": "",
        "SQL": "SELECT MIN(Date) FROM matchs WHERE FTHG + FTAG > 10"
    },
    {
        "db_id": "european_football_1",
        "question_en": "For the Ligue 2 game that made the most goals, who is the winner of that game?",
        "question_ar": "",
        "evidence_en": "Ligue 2 is the name of division; the most goals refer to MAX(SUM(FTHG, FTAG)) which are short names for Final-time Home-team Goals and Final-time Away-team Goals; winner refers to FTR = 'A';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam ELSE T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Ligue 2' ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many Away Victories happened on 2016/3/27 in the LaLiga 2 division?",
        "question_ar": "",
        "evidence_en": "Away victories refer to FTR = 'A'; LaLiga 2 is the name of division; Date = '2016-03-27';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga 2' AND T1.Date = '2016-03-27' AND T1.FTR = 'A'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many draw games happened on 2018/8/7 for National League?",
        "question_ar": "",
        "evidence_en": "National League is the name of division; Date = '2018-08-07'; draw refers to FTR = 'D'; games refer to Div;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'National League' AND T1.Date = '2018-08-07' AND T1.FTR = 'D'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which country had the game that Away team made the most goals?",
        "question_ar": "",
        "evidence_en": "the most goals refer to MAX(FTAG), which is a short name for Final-time Away-team Goals;",
        "evidence_ar": "",
        "SQL": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "For a game had a score of 1-8 in the year of 2011, what division was that game in? Give the full name of the division.",
        "question_ar": "",
        "evidence_en": "2011 refers to season; a score of 1-8 refers to FTHG = '1' and FTAG = '8';",
        "evidence_ar": "",
        "SQL": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2011 AND T1.FTHG = 1 AND T1.FTAG = 8"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which division had the most games with more than 5 total field goals on 2020/2/22? Give the full name of the division?",
        "question_ar": "",
        "evidence_en": "more than 5 total field goals refers to SUM(FTHG, FTAG)>5, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; 2020/2/22 is a date;",
        "evidence_ar": "",
        "SQL": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Give the full name of the divison that had the most 0-0 games.",
        "question_ar": "",
        "evidence_en": "the most 0-0 games means a no-score draw and refers to MAX(COUNT(Div where FTHG = '0' and FTAG = '0'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many Scottish League One games took place on the day that \"Pro Vercelli\" and \"Pescara\"had a 5-2 game?",
        "question_ar": "",
        "evidence_en": "Pro Vercelli and Pescara are names of teams; HomeTeam = 'Pro Vercelli'; AwayTeam = 'Pescara'; 5-2 is a score where FTHG = '5' and FTAG = '2'; Scottish League One is a name of division; games refer to Div;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )"
    },
    {
        "db_id": "european_football_1",
        "question_en": "List the number of games that ended up with 5-0 in Greece.",
        "question_ar": "",
        "evidence_en": "5-0 is a score where FTHG = '5' and FTAG = '0'; Greece is a name of country; games refer to Div;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which country did Bradford Team belongs to?",
        "question_ar": "",
        "evidence_en": "Bradford team refers to HomeTeam = 'Bradford' or AwayTeam = 'Bradford';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Bradford' OR T1.AwayTeam = 'Bradford'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many Eredivisie teams have played in 2008?",
        "question_ar": "",
        "evidence_en": "Eredivisie is the name of division; 2008 refers to season; teams refer to HomeTeam;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Eredivisie' AND T1.season = 2008"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What's the home win ratio of the Bundesliga division in 2021?",
        "question_ar": "",
        "evidence_en": "home win refers to FTR = 'H', where H stands for home victory; season = '2021'; Bundesliga is a name of division; DIVIDE(COUNT(Div where FTR = 'H, season = '2021' and name = 'Bundesliga'), COUNT(Div where season = '2021' and name = 'Bundesliga')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Bundesliga'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "For all the games ended up with 1-1, what percentage of them are from Liga NOS division?",
        "question_ar": "",
        "evidence_en": "1-1 is a score where FTHG = '1' and FTAG = '1'; Liga NOS is the name of division; DIVIDE(COUNT(Div where FTHG = '1', FTAG = '1', name = 'Liga NOS'), COUNT(Div where FTHG = '1' and FTAG = '1')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.name = 'Liga NOS' THEN T1.Div ELSE NULL END) AS REAL) * 100 / COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTHG = 1 AND FTAG = 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many matches were held during the 2021 season's Premier League?",
        "question_ar": "",
        "evidence_en": "Premier League is the name of division;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Premier League'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team was the home team in the match of the Bundesliga division on 2020/10/2?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; Date = '2020/10/2';",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team won the match of the Bundesliga division on 2020/10/2?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; Date = '2020/10/2'; won the match refers to FTR = 'H';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam WHEN T1.FTR = 'A' THEN T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team has the most victories as the home team in matches of the Bundesliga division?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; the most victories as the home team refers to MAX(COUNT(FTR = 'H'));",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'H' GROUP BY T1.HomeTeam ORDER BY COUNT(T1.FTR) DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many times did the team Werder Bremen win as the away team in matches of the Bundesliga division?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; win as the away team refers to FTR = 'A', where 'A' stands for away victory;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many matches of the Bundesliga division ended with an away victory in the 2021 season?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; away victory refers to FTR = 'A', where 'A' stands for away victory;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'A' AND T1.season = 2021"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Of the matches in all seasons of the Bundesliga division, how many of them ended with a tie?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; tie refers to FTR = 'D', where D stands for draft;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'D'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many home victories does the Bundesliga division have in more or less than the Premier League division in the 2021 season?",
        "question_ar": "",
        "evidence_en": "Bundesliga and the Premier League are names of division; home victories refer to FTR = 'H', where H stands for home victory; SUBTRACT(COUNT(FTR = 'H' where season = 2021, name = 'Bundesliga'), COUNT(FTR = 'H' where season = 2021, name = 'Premier League'));",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.name = 'Bundesliga' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.name = 'Premier League' THEN 1 ELSE NULL END) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Please list the home teams in the matches of the Bundesliga division that ended with a home victory in the 2021 season.",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; home victory refers to refer to FTR = 'H', where H stands for home victory;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H' AND T2.name = 'Bundesliga'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team had more home victories in the 2021 season's matches of the Bundesliga division, Augsburg or Mainz?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; more home victories refer to MAX(FTR = 'H)'; Augsburg and Mainz are names of teams and refer to HomeTeam;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN COUNT(CASE WHEN T1.HomeTeam = 'Augsburg' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.HomeTeam = ' Mainz' THEN 1 ELSE NULL END) > 0 THEN 'Augsburg' ELSE 'Mainz' END FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'"
    },
    {
        "db_id": "european_football_1",
        "question_en": "Which team had the most final-time home-team goals in the 2021 season's matches of the Bundesliga division?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; the most final-time home-team goals refers to MAX(FTHG);",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021 ORDER BY T1.FTHG DESC LIMIT 1"
    },
    {
        "db_id": "european_football_1",
        "question_en": "How many final-time home-team goals were there in total in all the matches of the Bundesliga division in the 2021 season?",
        "question_ar": "",
        "evidence_en": "Bundesliga is the name of division; final-time home-team goals refers to FTHG;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.FTHG) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021"
    },
    {
        "db_id": "european_football_1",
        "question_en": "What's the winning rate of Club Brugge in the 2021 Premier League?",
        "question_ar": "",
        "evidence_en": "Premier League is name of division; season = 2021; Club Brugge is name of team; Club Brugge wins implies HomeTeam = 'Club Brugge' and FTR = 'H' and AwayTeam = 'Club Brugge' and FTR = 'A'; DIVIDE(SUM(COUNT(FTR = 'H' where HomeTeam = 'Club Brugge', name = 'Premier League', season = 2021), COUNT(FTR = 'A'where AwayTeam = 'Club Brugge', name = 'Premier League', season = 2021)), COUNT(Div where name = 'Premier League', season = 2021));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) + COUNT(CASE WHEN T1.FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(t1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.AwayTeam = 'Club Brugge' OR T1.HomeTeam = 'Club Brugge'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the winning game from the team, what is the percentage of the winning was home game.",
        "question_ar": "",
        "evidence_en": "percentage of winning at the home = Divide(homeWon, won) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(homeWon AS REAL) * 100 / won  FROM teams"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team(s) has greater than 75% lost among all the games played.",
        "question_ar": "",
        "evidence_en": "greater than 75% lost refers to Divide(lost, games) > 0.75; team refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT name FROM teams WHERE CAST(lost AS REAL) * 100 / games > 75"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the team name and the total wins of the team in year 2005 which has greater winning from the previous year.",
        "question_ar": "",
        "evidence_en": "2005 refers to year = 2005 ; previous year refers to year = 2004; team with greater winning than previous year refers to Won where year = 2005 > Won where year = 2004; team name refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For team who has more home won than home lost more than 80%, list the team name and the offense points.",
        "question_ar": "",
        "evidence_en": "home won than home lost more than 80% refers to Divide(Subtract(homeWon, homeLost), games) > 0.8; offense point refers to o_fgm",
        "evidence_ar": "",
        "SQL": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the percentage of the teams who had post season (playoff) were ranked number 1?",
        "question_ar": "",
        "evidence_en": "had post season (play off) refers to playoff is not null; percentage = Divide (Count(Team where rank = 1, Count(Team))) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(name) FROM teams"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Who is the coach for 'BOS' team in year 1950. List the coach ID together with the number of game won and lost.",
        "question_ar": "",
        "evidence_en": "'BOS' is the tmID; 1950 refers to year = 1950; number of game won refers to won; number of game lost refers to lost",
        "evidence_ar": "",
        "SQL": "SELECT coachID, won, lost FROM coaches WHERE year = 1950 AND tmID = 'BOS'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Who is the longest serving coach from year 1970 to 1980. List the coach ID and the team(s) he served.",
        "question_ar": "",
        "evidence_en": "1970 to 1980 refers to year between 1970 and 1980; longest serving coach Max(Count(coachID)); team(s) he served refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT coachID, tmID FROM coaches WHERE year BETWEEN 1970 AND 1980 ORDER BY stint DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.",
        "question_ar": "",
        "evidence_en": "more than 50 games won refers to won > 50",
        "evidence_ar": "",
        "SQL": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.",
        "question_ar": "",
        "evidence_en": "from year 2000 to 2010 refers to year between 2000 and 2010; more game lost then won refers to lost > won",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.",
        "question_ar": "",
        "evidence_en": "year 1990-1995 refers to year between 1990 and 1995; 'adelmri01' is the coachID; offense point refers to o_fgm",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team(s) had 90% games won. List the coach ID for the team and year played.",
        "question_ar": "",
        "evidence_en": "team with 90% games won refers to Divide (won, games) > 0.9",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name, T1.year, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T2.won AS REAL) * 100 / T2.games > 90"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the percentage of player who won \"All-Defensive First Team\" from 1980 - 2000 is from 'NY'.",
        "question_ar": "",
        "evidence_en": "\"All-Defensive First Team\" is the award; ' NY' is the birthState; 1980 to 2000 refers to year between 1980 and 2000; percentage = Divide (Count(playerID where birthState = 'NY'), Count(playerID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.birthState = 'NY' AND T2.award = 'All-Defensive First Team' AND T2.year BETWEEN 1980 AND 2000"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976?",
        "question_ar": "",
        "evidence_en": "\"NBA Coach of the Year\" is the award; in 1977 refers to year = 1977; in 1976 refers to year = 1976; division refers to divisionID",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.divID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T1.year = 1977 AND T1.award = 'NBA Coach of the Year' AND T3.year = 1976"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s?",
        "question_ar": "",
        "evidence_en": "\"Chicago Bull\" is the name of team; during the year 1981 refers to year = 1981; 'NBA Coach of the Year' is the award; in the 1970s refers to year between 1970 to 1979",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.award = 'NBA Coach of the Year' AND T2.year BETWEEN 1970 AND 1979 AND T1.year = 1981 AND T3.name = 'Chicago Bulls'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?",
        "question_ar": "",
        "evidence_en": "completed in the Western conference refers to conference = 'West'; in season 2006 refers to season_id = 2006; total of two blocks refers to blocks = 2; nickname refers to nameNick",
        "evidence_ar": "",
        "SQL": "SELECT T2.nameNick FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.blocks = 2 AND T1.conference = 'West' AND T1.season_id = 2006"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In what year did the only team to beat the Houston in the final round of postseason series games earn its lowest ranking?",
        "question_ar": "",
        "evidence_en": "beat the Huston refers to tmIDLoser = 'HSM';  in final round of post season refers to round = 'DSF'",
        "evidence_ar": "",
        "SQL": "SELECT T2.year FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.round = 'DSF' AND T1.tmIDLoser = 'HSM' ORDER BY T2.rank ASC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the birth date of the player with the most assists during the 1985 All-Star season?",
        "question_ar": "",
        "evidence_en": "most assist refers to Max(assists); in 1985 All Star season refers to season_id = 1985",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthDate FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1985 ORDER BY T2.assists DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which player, born in Winter Haven, played 12 minutes per season during the 1980s in the All-Stars?",
        "question_ar": "",
        "evidence_en": "born in Winter Haven refers to birthCity = 'Winter Haven'; during the 1980s in All-Stars refers to season_id = 1980; played in 12 minutes  per season refers to minutes = 12",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Winter Haven' AND T2.season_id BETWEEN 1980 AND 1989 AND T2.minutes = 12"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Of all the All-star players who played in the Eastern Conference for no more than 5 minutes, how many went to Illinois College?",
        "question_ar": "",
        "evidence_en": "Eastern conference refers to conference = 'East'; no more than 5 minutes refers to minutes < 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East' AND T2.minutes <= 5 AND T1.college = 'Illinois'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Between the years 1990 and 2007, of the total rebounds achieved by each player, how many managed to exceed 75% of defensive rebounds?",
        "question_ar": "",
        "evidence_en": "the year 1990 and 2007 refers to year BETWEEN 1990 AND 2007; exceed 75% of defensive rebounds refers to Divide (dRebounds, rebounds) * 100 > 75",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE CAST(d_rebounds AS REAL) * 100 / rebounds > 75 AND season_id BETWEEN 1990 AND 2007"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "in which year costela01 obtained the best balance of games won as a coach?",
        "question_ar": "",
        "evidence_en": "\"costela01\" is the coachID; best balance of game won refers to Max(Divide(won, Sum(won, lost)))",
        "evidence_ar": "",
        "SQL": "SELECT year FROM coaches WHERE coachID = 'costela01' ORDER BY CAST(won AS REAL) / (won + lost) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many total minutes has the Brooklyn-born player, known by the name of Superman, played during all of his NBA All-Star seasons?",
        "question_ar": "",
        "evidence_en": "\"Brooklyn\" is the birthCity of player; known by the name of Superman refers to nameNick like '%Superman%'; total minutes refers to Sum(minutes)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.minutes) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Brooklyn' AND T1.nameNick LIKE '%Superman%'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Of all the teams coached by the winner of the 1994 NBA Coach of the Year award, which team has lost the most times playing at home?",
        "question_ar": "",
        "evidence_en": "of 1994 refers to year = 1994; 'NBA Coach of the Year' is the award; lost the most time at home refers to Max(homeLost)",
        "evidence_ar": "",
        "SQL": "SELECT T3.tmID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.year = 1994 AND T1.award = 'NBA Coach of the Year' GROUP BY T3.tmID ORDER BY SUM(T3.homeLost) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which winning team in the final round of the postseason series games against the LAL won more than 60 games in the NBA league during the year 1996?",
        "question_ar": "",
        "evidence_en": "final round of post season refers to round = 'CSF'; won against LAL refers to tmIDLoser = 'LAL'; in the NBA league refers to lgID = 'NBA'; won more than 60 games refers to won > 60",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T2.won > 60 AND T1.year = 1996 AND T1.round = 'CSF' AND T1.tmIDLoser = 'LAL'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In which league did the player who weighs 40% less than the heaviest player and whose height is 80 inches play?",
        "question_ar": "",
        "evidence_en": "weigh 40% less than the heaviest player refers to weight = Multiply(Max (weight), 0.6); league refers to lgID",
        "evidence_ar": "",
        "SQL": "SELECT T2.lgID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID GROUP BY T2.lgID, T1.weight HAVING T1.weight = MAX(T1.weight) - MAX(T1.weight) * 0.4"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the name of the coach who has served more than 2 NBA teams.",
        "question_ar": "",
        "evidence_en": "\"NBA\" is the lgID; server more than 2 teams refers to Count(tmID) = 2",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the name of the coach during whose period of coaching, a team has the most numbers of games won in the post-season games?",
        "question_ar": "",
        "evidence_en": "the most number of game won in post season refers to Max(post_wins); coach refers to coachID",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches ORDER BY post_wins DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the coaches who have served more than 2 NBA teams, during which coach's period of coaching, a team has the least numbers of games lost in the post-season games?",
        "question_ar": "",
        "evidence_en": "served more than 2 NBA teams refers to count (tmID) > = 2; least number of game lost in post season refers to Min(post_losses)",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches WHERE lgID = 'NBA' AND post_wins != 0 AND post_losses != 0 AND coachID IN ( SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(tmID) > 2 ) ORDER BY post_losses ASC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players from the ABA league, how many of them have the center position?",
        "question_ar": "",
        "evidence_en": "\"ABA\" is the lgID; center position refers to pos =   'C' or pos = 'F-C'; players refers to playerID",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'ABA' AND (T1.pos = 'C' OR T1.pos = 'F-C')"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the first name of the players from the NBA league with the forward position.",
        "question_ar": "",
        "evidence_en": "\"NBA\" is the lgID; with the forward position refers to pos = 'F' of pos = 'F-C'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE (T1.pos = 'F' OR T1.pos = 'F-C') AND T2.lgID = 'NBA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players who went to high school in Chicago, how many of them belongs to the west conference?",
        "question_ar": "",
        "evidence_en": "high school in Chicago refers to hsCity = 'Chicago'; belong to the west conference refers to divID = 'WE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.hsCity = 'Chicago' AND T2.conference = 'West'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the players who belongs to the east conference, please list the name of the college they went to.",
        "question_ar": "",
        "evidence_en": "belong to the east conference refers to divID = 'EA'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.college FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players from the NBL league, how many of them were born in Spencer?",
        "question_ar": "",
        "evidence_en": "\"NBL\" is the lgID; 'Spencer' is the birthCity",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Spencer' AND T2.lgID = 'NBL'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the birth date of the player who has won the most MVPs.",
        "question_ar": "",
        "evidence_en": "won the most MVP refers to Max(Count(award = 'Most Valuable Player'))",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthDate FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' GROUP BY T1.playerID, T1.birthDate ORDER BY COUNT(award) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players born in Whitestone, how many of them have won the MVP?",
        "question_ar": "",
        "evidence_en": "\"Whitestone\" is the birthCity of the player; won the MVP refers to award = 'Most Valuable Player'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players who have won the award of Rookie of the year, what is the height of the tallest player?",
        "question_ar": "",
        "evidence_en": "\"Rookie of the Year\" is the award; tallest player refers to Max(height)",
        "evidence_ar": "",
        "SQL": "SELECT T1.height FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the average weight of the players who have won the award of Rookie of the year?",
        "question_ar": "",
        "evidence_en": "\"Rookie of the Year\" is the award; average weight = Divide (Sum(weight), Count(playerID))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.weight) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players that went to high school in New York and have won the MVP, what is their average height?",
        "question_ar": "",
        "evidence_en": "high school in New York refers to highSchool like '%New York%'; won the MVP refers to award = 'Most Valuable Player'; average height = Divide (Sum(height), Count(playerID))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'New York'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the top ten teams with the highest scores in 2000.",
        "question_ar": "",
        "evidence_en": "in 2000 refers to year = 2000; team with highest score refers to Max(o_fgm)",
        "evidence_ar": "",
        "SQL": "SELECT tmID FROM players_teams WHERE year = 2000 GROUP BY tmID ORDER BY SUM(PostPoints) DESC LIMIT 10"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which teams have winning rate less than 50%?",
        "question_ar": "",
        "evidence_en": "team with winning rate less than 50% refers to Divide (won, Sum(won, lost)) < 0.5",
        "evidence_ar": "",
        "SQL": "SELECT name FROM teams WHERE CAST(won AS REAL) * 100 / (won + lost) < 50"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Who are the coaches for team with winning rate of 80% and above?",
        "question_ar": "",
        "evidence_en": "winning rate of 80% and above refers to Divide (won, Sum(won, lost)) > 0.8; coaches refers to coachID",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches GROUP BY tmID, coachID, won, lost HAVING CAST(won AS REAL) * 100 / (won + lost) > 80"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which coach has serviced in NBA for more than 10 years.",
        "question_ar": "",
        "evidence_en": "\"NBA\" is the lgID; coach who serviced for more than 10 years refers to coachID where Subtract (Max(year), Min(year)) > 10",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many teams have played more than 3800 points and have player with \"Most Valuable Player\" award?",
        "question_ar": "",
        "evidence_en": "played more than 3800 points refers to Sum(points) > = 3800",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T4.name) FROM ( SELECT T1.name, SUM(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_players AS T3 ON T2.playerID = T3.playerID WHERE T3.award = 'Most Valuable Player' GROUP BY T1.name HAVING SUM(T2.points) >= 3800 ) AS T4"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which player from \"AFS\" team has the tallest height?",
        "question_ar": "",
        "evidence_en": "\"AFS\" is the tmID; tallest height refers to Max(height)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'AFS' ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list down the last name of players from \"BLB\" team.",
        "question_ar": "",
        "evidence_en": "\"BLB\" is the tmID",
        "evidence_ar": "",
        "SQL": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1962 to 1975, how many coaches received the award?",
        "question_ar": "",
        "evidence_en": "from 1960 to 1975 refers to year between 1960 and 1975",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the coach IDs who received the award twice from 1970 to 1990.",
        "question_ar": "",
        "evidence_en": "from 1970 to 1990 refers to year between 1970 and 1990;  received award twice refers to coachID where Count(coachID) = 2",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1962 to 2011, how many coaches received both NBA and ABA awards?",
        "question_ar": "",
        "evidence_en": "from 1962 to 2011 refers to year between 1960 and 2011; received both NBA and ABA award refers to coachID where award LIKE 'NBA%' and 'ABA%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'ABA Coach of the Year' AND coachID IN ( SELECT coachID FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'NBA Coach of the Year' )"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In 1975, what was the average point of all-star players coming from the USA?",
        "question_ar": "",
        "evidence_en": "in 1975 refers to season_id = 1975; coming from USA refers to birthCountry = 'USA'; average point refers to Divide (Sum(points), Count(playerID))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1975"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the last names and first names of all-star players who are higher than 75 inch.",
        "question_ar": "",
        "evidence_en": "higher than 75 inch refers to height > 75",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the minimum weight of all-star players coming from UCLA college?",
        "question_ar": "",
        "evidence_en": "minimum weight refers to Min(weight)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the maximum weight of USA all-star players?",
        "question_ar": "",
        "evidence_en": "\"USA\" is the birthCountry of player;  maximum weight refers to Max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1960 to 1970, what is the total point of all-star players who are still alive?",
        "question_ar": "",
        "evidence_en": "from 1960 to 1970 refers to season_id between 1960 and 1970; still alive refers to deathDate = '0000-00-00'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id BETWEEN 1960 AND 1970 AND T1.deathDate = '0000-00-00'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among players who were born after 1950, who had offence rebounds rates more than 30%? Please list their last names and first names.",
        "question_ar": "",
        "evidence_en": "born after 1950 refers to birthDate > = '1950-01-01'; offence rebound rate more than 30% refers to Divide (oRebounds, rebounds) > 0.3",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthDate > 1950 AND CAST(T2.o_rebounds AS REAL) * 100 / T2.rebounds > 30"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players received Rookie of the Year award from 1969 to 2010?",
        "question_ar": "",
        "evidence_en": "from 1969 to 2010 refers to year BETWEEN 1969 and 2010; 'Rookie of the Year' is the award",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM awards_players WHERE year BETWEEN 1969 AND 2010 AND award = 'Rookie of the Year'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the team names which have at least 3 all-star players.",
        "question_ar": "",
        "evidence_en": "team with at least 3 all star player refers to tmID where Count(player_allstar.playerID) > = 3",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) >= 3"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1950 to 1970, what is the maximum point of players whose teams were ranked 1?",
        "question_ar": "",
        "evidence_en": "from 1950 to 1970 refers to year between 1950 and 1970; team with rank 1 refers to rank = 1; maximum point refers to Max(points)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the last names and first names of all-star players whose team were ranked 1 for consecutive 3 years from 1937 to 1940.",
        "question_ar": "",
        "evidence_en": "from 1937 to 1940 refers to year between 1937 and 1940; rank 1 for 3 years refers to tmID where Count (rank = 1) > = 3",
        "evidence_ar": "",
        "SQL": "SELECT T5.lastName, T5.firstName FROM players_teams AS T4 INNER JOIN players AS T5 ON T4.playerID = T5.playerID WHERE T4.year BETWEEN 1937 AND 1940 AND T4.tmID IN ( SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN teams AS T2 INNER JOIN teams AS T3 ON T1.tmID = T2.tmID AND T2.tmID = T3.tmID AND T3.year - T2.year = 1 AND T2.year - T1.year = 1 WHERE T1.rank = 1 AND T1.year BETWEEN 1937 AND 1940 )"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the teams that were ranked 3 from 1937 to 1940, what is the team name whose players had the highest point?",
        "question_ar": "",
        "evidence_en": "from 1937 to 1940 refers to year between 1937 and 1940; player with highest point refers to Max(points)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.rank = 3 AND T1.year BETWEEN 1937 AND 1940 ORDER BY T2.points DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In 1937, how many teams whose players got at least 500 points?",
        "question_ar": "",
        "evidence_en": "in 1937 refers to year = 1937; player got at least 500 points refers to Sum(points) > = 500",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.name, SUM(T1.points) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1937 GROUP BY T2.name HAVING SUM(points) >= 500 ) AS T3"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In 1990, how many players whose teams had the winning rate of more than 75%?",
        "question_ar": "",
        "evidence_en": "in 1990 refers to year = 1990; winning rate of more than 75% refers to Divide(won, games) > 0.75",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the top three shortest black players.",
        "question_ar": "",
        "evidence_en": "shortest player refers to Min(height); black players refers to race = 'B'",
        "evidence_ar": "",
        "SQL": "SELECT firstName, lastName FROM players WHERE race = 'B' AND height > 0 ORDER BY height ASC LIMIT 3"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players with the first name Joe were drafted in 1970?",
        "question_ar": "",
        "evidence_en": "drafted in 1970 refers to draftYear = 1970",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT playerID) FROM draft WHERE firstName = 'Joe' AND draftYear = 1970"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many field goals did George Mikan make overall between 1951 and 1953?",
        "question_ar": "",
        "evidence_en": "between 1951 and 1953 refers to season_id; field goal refers to fg_made",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(fg_made) FROM player_allstar WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What are the basketball players' BMI ranges?",
        "question_ar": "",
        "evidence_en": "BMI = Multiply(Divide(weight, Multiply(height, height)), 703)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(CAST(weight AS REAL) / (height * height)) , MAX(CAST(weight AS REAL) / (height * height)) FROM players"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the name of the team with the highest home lost rate?",
        "question_ar": "",
        "evidence_en": "highest home lost rate = Max(Divide(homelost, Sum(homeWon, homeLost)))",
        "evidence_ar": "",
        "SQL": "SELECT name FROM teams ORDER BY CAST(homeWon AS REAL) / (homeWon + homeLost) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How old was Alexis Ajinca when he was first drafted?",
        "question_ar": "",
        "evidence_en": "age when drafted refers to Subtract(draftYear, year(birthDate)); first drafted refers to draftYear",
        "evidence_ar": "",
        "SQL": "SELECT draftYear - strftime('%Y', birthDate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Alexis' AND T1.lastName = 'Ajinca' AND draftRound = 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Who is the tallest player in Denver Nuggets since 1980?",
        "question_ar": "",
        "evidence_en": "\"Denver Nuggets\" is the name of team; since 1980 refers to year > 1980; tallest player = Max(height)",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.name = 'Denver Nuggets' AND T2.year > 1980 ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the players who have passed away, who had the most award?",
        "question_ar": "",
        "evidence_en": "pass away refers to deathDate ! = 'null'; most award refers to playerID where Max(Count(award))",
        "evidence_ar": "",
        "SQL": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the full name of the team that has the most players from UCLA?",
        "question_ar": "",
        "evidence_en": "\"UCLA\" is the college; team with most players refers to tmID where Max(Count(playerID))",
        "evidence_ar": "",
        "SQL": "SELECT T3.name FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T3.name ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the average BMI of an All-star player?",
        "question_ar": "",
        "evidence_en": "average BMI refers to AVG (Multiply(Divide(weight, Multiply(height, height)), 703))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(T1.weight AS REAL) / (T1.height * T1.height)) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the full name of the team with the fastest growth in winning rate in the 'ABA' league from 1972 to 1973?",
        "question_ar": "",
        "evidence_en": "\"ABA\" is the lgID; from 1972 to 1973 refers to year = 1972 and year = 1973; team with the fastest growth in winning rate = Max(Subtract(Divide(won where year = 1973, Sum(won, lost)),Divide(won where year = 1972, Sum(won, lost))))",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE lgID = 'ABA' AND year = 1972 ) AS T2 ON T1.tmID = T2.tmID WHERE T1.lgID = 'ABA' AND T1.year = 1973 ORDER BY (CAST(T1.won AS REAL) / (T1.won + T1.lost) - (CAST(T2.won AS REAL) / (T2.won + T2.lost))) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the first names of the players with the most personal fouls in the 'NBL' league.",
        "question_ar": "",
        "evidence_en": "\"NBL\" is the lgID; most  personal foul refers to Max(Count(PF))",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NBL' GROUP BY T1.playerID, T1.firstName ORDER BY COUNT(PF) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the average height of an East conference All-star player?",
        "question_ar": "",
        "evidence_en": "average height refers to avg(height)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(DISTINCT height) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE conference = 'East'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the coaches who won the 'ABA Coach of the Year' award, which is the coach with the highest number of won games?",
        "question_ar": "",
        "evidence_en": "\"ABA Coach of the Year\" is the award; highest number of won games refers to Max(Count(won))",
        "evidence_ar": "",
        "SQL": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the full name of the team that the 'NBA Coach of the Year' 1992 winner coached?",
        "question_ar": "",
        "evidence_en": "\"NBA Coach of the Year\" is the award; in 1992 refers to year = 1992;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM teams AS T1 INNER JOIN coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_coaches AS T3 ON T2.coachID = T3.coachID AND T2.year = T3.year WHERE T3.year = 1992 AND award = 'NBA Coach of the Year'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the first and last name of the player with the highest field goal made rate in 1973?",
        "question_ar": "",
        "evidence_en": "in 1973 refers to year = 1973; player with highest field goal made refers to Max(Divide(fgMade, fgAttempted))",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE year = 1973 ORDER BY CAST(T2.fgMade AS REAL) / T2.fgAttempted DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the full name of the team that selected Mike Lynn?",
        "question_ar": "",
        "evidence_en": "full name refers to teams.name",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the Most improved Players awarded from 1985-1990, how many player whose country is USA?",
        "question_ar": "",
        "evidence_en": "the Most improved Player refers to award = 'Most Improved Player'; from 1985-1990 refers to year between 1985 and 1990; country is USA refers to birthCountry = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.playerID) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.award = 'Most Improved Player' AND T2.birthCountry = 'USA' AND T1.year BETWEEN 1985 AND 1990"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list out the first name and last name of player who attended California college and have been selected as all stars?",
        "question_ar": "",
        "evidence_en": "California college refers to college = 'California'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'California'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1950 to 1970, how many coaches who received more than 1 award?",
        "question_ar": "",
        "evidence_en": "from 1950 to 1970 refers to year between 1950 and 1970; more than 3 awards refers to count(award) > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players received Most Valuable Player award from 1969 to 1975?",
        "question_ar": "",
        "evidence_en": "Most Valuable Player award refers to award = 'Most Valuable Player'; from 1969 to 1975 refers to year between 1969 and 1975",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT playerID) FROM awards_players WHERE year BETWEEN 1969 AND 1975 AND award = 'Most Valuable Player'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the team names which have at least 5 players were born in the same state.",
        "question_ar": "",
        "evidence_en": "team name refers to teams.name; state that a player is born refers to birthState",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name FROM teams WHERE tmID IN ( SELECT tmID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T2.birthState IS NOT NULL GROUP BY T1.tmID, T2.birthState HAVING COUNT(*) > 5 )"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many teams in the NBA which has at least 3 all-star players?",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; have at least 3 all-star players refers to count(player_allstar.playerID) > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NBA' GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) > 3 ) AS T3"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which state has the most players selected as all stars?",
        "question_ar": "",
        "evidence_en": "state refers to birthState; the most players refers to max(count(playerID))",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthState FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthState ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players whose teams were ranked 6 in 1937?",
        "question_ar": "",
        "evidence_en": "ranked 6 refers to rank = 6; in 1937 refers to year = 1937",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.year = 1937 AND T3.rank = 6"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In 1950, how many players whose teams have the losing rate less than 20%?",
        "question_ar": "",
        "evidence_en": "in 1950 refers to year = 1950; losing rate less than 20% refers to divide(lost, add(won, lost)) < 0.2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE CAST(T3.lost AS REAL) * 100 / (T3.lost + T3.won) < 20"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the full name of players who are born outside USA.",
        "question_ar": "",
        "evidence_en": "full name refers to firstName, middleName, lastName; born outside USA refers to birthCountry ! = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT firstName, middleName, lastName FROM players WHERE birthCountry != 'USA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List out all the coach ID who have served more than 2 different teams.",
        "question_ar": "",
        "evidence_en": "more than 2 different teams refers to count(tmID) > 2",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which coach has the most 'won' than 'lost' in year '1988'?",
        "question_ar": "",
        "evidence_en": "in year '1988' refers to year = 1988; the most 'won' than 'lost' refers to max(subtract(won, lost))",
        "evidence_ar": "",
        "SQL": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Name the team in which the coach won the title 'NBA Coach of the Year' in 2010.",
        "question_ar": "",
        "evidence_en": "team name refers to teams.name; won the title 'NBA Coach of the Year' refers to award = 'NBA Coach of the Year'; in 2010 refers to year = 2010",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.tmID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2010 AND T2.award = 'NBA Coach of the Year'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the first name, last name, height and weight of the players who has all free throw attempted successfully made.",
        "question_ar": "",
        "evidence_en": "all free throw attempted successfully made refers to ftAttempted > 0 and ftAttempted = ftMade",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName, T1.height, T1.weight FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.ft_attempted > 0 AND ft_attempted = ft_made"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the first name, last name and team name of players who are drafted from 'Seattle' between year 1965 to 1970.",
        "question_ar": "",
        "evidence_en": "team name refers to teams.name; drafted from 'Seattle' refers to draftFrom = 'Seattle'; between year 1965 to 1970 refers to draftYear between 1965 and 1970",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T2.draftFrom = 'Seattle' AND T2.draftYear BETWEEN 1965 AND 1970"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the full name and age of the player when he won the \"Finals MVP\" in 2003.",
        "question_ar": "",
        "evidence_en": "full name refers to firstName, middleName, lastName; age = subtract(2003, year(birthDate)); won the \"Finals MVP\" refers to award = 'Finals MVP'; in 2003 refers to year = 2003",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the champion (team name) and year from year 1950 to 1960.",
        "question_ar": "",
        "evidence_en": "champion refers to round = 'F'; team name refers to teams.name; from year 1950 to 1960 refers to year between 1950 and 1960",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name, T2.year FROM teams AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner WHERE T2.round = 'F' AND T2.year BETWEEN 1950 AND 1960"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Name the teams along with the coaches that went to 'Quarter Final' round in 1946.",
        "question_ar": "",
        "evidence_en": "team name refers to teams.name; coach refers to coachID; 'Quarter Final' round refers to round = 'QF'; in 1946 refers to year = 1946",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.coachID, T3.name FROM coaches AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.round = 'QF' AND T2.year = 1946"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List out all the players fullname who won the championship in 1970.",
        "question_ar": "",
        "evidence_en": "full name refers to firstName, middleName, lastName; won the championship refers to round = 'F'; in 1970 refers to year = 1970",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.firstName, T3.middleName, T3.lastName FROM series_post AS T1 INNER JOIN players_teams AS T2 ON T1.tmIDWinner = T2.tmID INNER JOIN players AS T3 ON T3.playerID = T2.playerID WHERE T1.year = 1970 AND T1.round = 'F'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From which college was the player who won the most award in 1970.",
        "question_ar": "",
        "evidence_en": "college refers to highSchool; won the most award refers to max(count(award)); in 1970 refers to year = 1970",
        "evidence_ar": "",
        "SQL": "SELECT college FROM players WHERE playerID = ( SELECT playerID FROM awards_players WHERE year = 1970 GROUP BY playerID ORDER BY COUNT(award) DESC LIMIT 1 )"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Name the youngest player who ever won \"Rookie of the Year\".",
        "question_ar": "",
        "evidence_en": "player name refers to playerID; the youngest refers to max(birthDate); won \"Rookie of the Year\" refers to award = 'Rookie of the Year'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.birthDate DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the full name of players who are drafted from round 1 in 1973 but not born in USA.",
        "question_ar": "",
        "evidence_en": "full name refers to firstName, middleName, lastName; in 1973 refers to year = 1973; not born in USA refers to birthCountry <> 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID WHERE T2.draftRound = 1 AND T1.birthCountry != 'USA' AND T2.draftYear = 1973"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the percentage of offense rebounds from the total rebounds of the players in year 2000.",
        "question_ar": "",
        "evidence_en": "in year 2000 refers to year = 2000; percentage = divide(sum(o_rebounds), sum(rebounds)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.o_rebounds) AS REAL) * 100 / SUM(T2.rebounds) FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2000"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List the year, team and coach that with winning rate of above 75%.",
        "question_ar": "",
        "evidence_en": "team refers to teams.name; coach refers to coachID; winning rate of above 75% refers to divide(won, add(won, lost)) > 0.75",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.year, T2.name, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T1.won AS REAL) / CAST((T1.won + T1.lost) AS REAL) > 0.75"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "List all the coatches of the Oklahoma City Thunder",
        "question_ar": "",
        "evidence_en": "coach refers to coachID; Oklahoma City Thunder refers to name = 'Oklahoma City Thunder'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players, in games played in 1990, achieved 50% or less of oRebounds than dRebounds.",
        "question_ar": "",
        "evidence_en": "in 1990 refers to season_id = 1990; 50% or less of oRebounds than dRebounds refers to o_rebounds < = multiply(d_rebounds, 0.5)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(playerID) FROM players_teams WHERE CAST(oRebounds AS REAL) * 100 / dRebounds <= 50 AND year = 1990"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many players did not get more than 10 steals between the years 2000 and 2005?",
        "question_ar": "",
        "evidence_en": "did not get more than 10 steals refers to count(steals) < = 10; between the years 2000 and 2005 refers to season_id between 2000 and 2005",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 AND steals <= 10"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971?",
        "question_ar": "",
        "evidence_en": "2nd draftRound refers to draftRound = 2; won Rookie of the Year refers to award = 'Rookie of the Year'; in 1971 refers to draftYear = 1971",
        "evidence_ar": "",
        "SQL": "SELECT T1.playerID FROM draft AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' AND T1.draftYear = 1971 AND T1.draftRound = 2"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many All Star players who played in the 1973 season were black?",
        "question_ar": "",
        "evidence_en": "1973 season refers to season_id = 1973; black refers to race = 'B'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which winning team in the 1947 playoff quarterfinals managed to score 3,513 defensive points that same year?",
        "question_ar": "",
        "evidence_en": "team refers to tmID; quarterfinal refers to round = 'QF'; score 3,513 defensive points refers to d_pts > = 3513",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.year = 1947 AND T1.round = 'QF' AND T2.d_pts = 3513"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Percentage of games lost out of total games played by the Houston Mavericks",
        "question_ar": "",
        "evidence_en": "Houston Mavericks refers to name = 'Houston Mavericks'; percentage = divide(sum(lost), sum(games)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the players who received the \"Most Valuable Player\" award in the NBA league after the year of 1990, along with their IDs.",
        "question_ar": "",
        "evidence_en": "player refers to playerID; \"Most Valuable Player\" award refers to award = 'Most Valuable Player'; after the year of 1990 refers to year > 1990; ID refers to playerID",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM awards_players WHERE year > 1990 AND award = 'Most Valuable Player' AND lgID = 'NBA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many times between 1975 and 1980 did the player abdulka01 play for LAL?",
        "question_ar": "",
        "evidence_en": "between 1975 and 1980 refers to year between 1975 and 1980; player abdulka01 refers to playerID = 'abdulka01'; play for LAL refers to tmID = 'LAL'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.year) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'LAL' AND T2.year BETWEEN 1975 AND 1980 AND T1.playerID = 'abdulka01'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the percentage of coaches in 1969 who were awarded \"NBA Coach of the Year\"?",
        "question_ar": "",
        "evidence_en": "in 1969 refers to year = 1969; awarded \"NBA Coach of the Year\" refers to award = 'NBA Coach of the Year'; percentage = divide(count(coachID where year = 1969 and award = 'NBA Coach of the Year'), count(coachID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN award = 'NBA Coach of the Year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM awards_coaches WHERE year = 1969"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What were the difference of the CHS team's winning rate between 1946 and 1947 in the post-season series games? Please provide your answer in percentages.",
        "question_ar": "",
        "evidence_en": "CHS team refers to tmIDWinner = 'CHS'; difference = subtract(divide(count(series_post where year = 1947 and tmIDWinner = 'CHS'), count(series_post where year = 1947)), divide(count(series_post where year = 1946 and tmIDWinner = 'CHS'), count(series_post where year = 1946)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many awards were given out in 2010 to players who attended high school in Chicago?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to year = 2010; attended high school in Chicago refers to college = 'Chicago'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.award) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 AND T2.hsCity = 'Chicago'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the percentage of players who attended Auburn University and won an \"All-Defensive Second Team\" award?",
        "question_ar": "",
        "evidence_en": "Auburn University refers to college = 'Auburn'; won an \"All-Defensive Second Team\" award refers to award = 'All-Defensive Second Team'; percentage = divide(count(playerID where award = 'All-Defensive Second Team'), count(playerID)) where college = 'Auburn' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Please list the top five players with the most steals in the year 1997. Please give their full name.",
        "question_ar": "",
        "evidence_en": "full name refers to firstName, middleName, lastName; in the year 1997 refers to year = 1997; the most steals refers to max(steals)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1997 ORDER BY T2.steals DESC LIMIT 5"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the name of the university that was drafted from the player who won the NBA Finals MVP in 1990?",
        "question_ar": "",
        "evidence_en": "name of the university refers to highSchool; NBA refers to lgID = 'NBA'; Finals MVP refers to award = 'Finals MVP'; in 1990 refers to year = 1990",
        "evidence_ar": "",
        "SQL": "SELECT T1.college FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1990 AND T2.award = 'Finals MVP'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the NBA All-star players in 1996 season , which have more than 70% free throw rate? Please give their player id.",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; in 1996 season refers to season_id = 1996; more than 70% free throw rate refers to ft_made > = 0 AND ft_attempted > 0 AND divide(ft_made, ft_attempted) > 0.7",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "From 1980 to 1983, how many of the NBA All-Star players have more than 60% three point rate?",
        "question_ar": "",
        "evidence_en": "from 1980 to 1983 refers to year BETWEEN 1980 and 1983; NBA refers to lgID = 'NBA'; more than 60% three point rate refers to divide(threeMade, threeAttempted) > 0.6",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.playerID FROM player_allstar AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year BETWEEN 1980 AND 1983 AND T1.three_made / T1.three_attempted > 0.6"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the NBA winning coaches, which are from STL team? Please list their coach id.",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; STL team refers to tmID = 'STL'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'STL' AND T1.lgID = 'NBA'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many times have coaches who were from CHI been awarded as NBA Coach of the Year?",
        "question_ar": "",
        "evidence_en": "CHI refers to tmID = 'CHI'; awarded Coach of the Year refers to award = 'Coach of the Year'; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.coachID) FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'CHI' AND T2.award = 'NBA Coach of the Year'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Of the players drafted in NBA between 1990 and 2000, who has the most points in all-star? List the player's first name and last name.",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; between 1990 and 2000 refers to year between 1990 and 2000; the most points refers to max(points)",
        "evidence_ar": "",
        "SQL": "SELECT T3.firstname, T3.lastname FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN draft AS T3 ON T1.playerID = T3.playerID WHERE T2.year BETWEEN 1990 AND 2000 ORDER BY T1.points DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any.",
        "question_ar": "",
        "evidence_en": "Wake Forest college refers to highSchool = 'Wake Forest college'; did the most offensive rebounds than defensive rebounds refers to max(subtract(sum(oRebounds), sum(dRebounds))); full name refers to first_name, middle_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Wake Forest' AND T2.o_rebounds > T2.d_rebounds"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Find the full name of the player born in Atlanta and have the highest number of blocks. Also, in which team did this player perform the most number of blocks?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, middle_name, last_name; born in Atlanta refers to birthCity = 'Atlanta'; the highest number of blocks refers to max(blocks); team refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000?",
        "question_ar": "",
        "evidence_en": "name of team refers to teams.name; between 1980 and 2000 refers to year between 1980 and 2000; ranked first five or more times refers to count(rank = 1) > = 5; lost a league two or more times refers to lost > 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T1.rank < 5 AND T2.lgIDLoser > 2 AND T2.year BETWEEN 1980 AND 2000"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Player from which team has the highest point per minute in NBA from 1991 to 2000?",
        "question_ar": "",
        "evidence_en": "team refers to tmID; the highest point per minute refers to max(divide(points, minutes)); NBA refers to lgID = 'NBA'; from 1991 to 2000 refers to year BETWEEN 1991 AND 2000",
        "evidence_ar": "",
        "SQL": "SELECT tmID FROM players_teams WHERE year BETWEEN 1991 AND 2000 ORDER BY CAST(points AS REAL) / minutes DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970?",
        "question_ar": "",
        "evidence_en": "ABA refers to lgID = 'ABA'; NBA refers to lgID = 'NBA'; between the years 1970 and 1970 refers to draftYear between 1970 and 1970; difference = subtract(avg(subtract(1970, year(birthDate)) where lgID = 'ABA'), avg(subtract(1970, year(birthDate)) where lgID = 'NBA'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which player had the most game presentatons in 2011 NBA season.",
        "question_ar": "",
        "evidence_en": "player refers to playerID; the most game presentations refers to max(GP); in 2020 refers to year = 2020; NBA season refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT playerID FROM players_teams WHERE year = 2011 ORDER BY GP DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many first round draft player in 1996 NBA draft became an All-Star?",
        "question_ar": "",
        "evidence_en": "first round refers to round = 1; in 1996 refers to year = 1996; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team did the MVP of 1997 NBA season play in?",
        "question_ar": "",
        "evidence_en": "team refers to tmID; MVP refers to award like '%MVP'; 1997 refers to year = 1997; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many games did team of the scoring champion win in 2001 NBA season?",
        "question_ar": "",
        "evidence_en": "the scoring champion refers to max(won); 2001 refers to year = 2001; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.W FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T2.year = 2001 ORDER BY T1.o_fgm DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many turnovers per game did the assist champion had in the 2003 NBA season?",
        "question_ar": "",
        "evidence_en": "turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.turnovers) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2003 GROUP BY T1.playerID, T2.assists ORDER BY T2.assists DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What is the number of NBA titles that Ray Allen has won throughout his NBA career?",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.playerID) FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE first_name = 'Ray' AND last_name = 'Allen'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season?",
        "question_ar": "",
        "evidence_en": "No.1 draft pick refers to draftRound = 1; in the 2003 season refers to draftyear = 2003; increase = subtract(divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2004, divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2003)",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T1.year = 2004 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2004 THEN T1.won + T1.lost ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.year = 2003 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2003 THEN T1.won + T1.lost ELSE 0 END)) FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID WHERE T2.draftRound = 1 AND T2.draftYear = 2003"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Among the coaches who won the 'NBA coach of the year' award from 1971 - 1975, how many of them were in 'POR' team?",
        "question_ar": "",
        "evidence_en": "the 'NBA coach of the year' award refers to award = 'NBA coach of the year'; from 1971 - 1975 refers to year between 1971 and 1975; 'POR' team refers to tmID = 'POR'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM awards_coaches AS T1 INNER JOIN teams AS T2 ON T1.year = T2.year WHERE T1.year BETWEEN 1971 AND 1975 AND T1.award = 'NBA Coach of the Year' AND T2.tmID = 'POR'"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "How many percent of points were scored by NBA players who belonged to 'LAL' team and had performed steals movement.",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; 'LAL' team refers to tmID = 'LAL'; performed steals movement refers to steals > 0; percent = divide(count(playerID where steals > 0), count(playerID)) where lgID = 'NBA' and tmID = 'LAL' * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.steals IS NOT NULL AND T1.tmID = 'LAL', 1, 0)) AS REAL) * 100 / COUNT(T1.tmID) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What's the name of the player in 1996 who had the most steals that didn't play in the playoffs?",
        "question_ar": "",
        "evidence_en": "name of the player refers to first_name, middle_name, last_name; in 1996 refers to year = 1996; the most steals refers to max(steals); didn't play in the playoffs refers to playoff = null",
        "evidence_ar": "",
        "SQL": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Give the player id of the man who had the most turnovers whose team missed the playoffs in year 1988.",
        "question_ar": "",
        "evidence_en": "the most turnovers refers to max(turnovers); missed the playoffs refers to PostGP = 0; in year 1988 refers to year = 1988",
        "evidence_ar": "",
        "SQL": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which NBA team that didn't play in playoffs had the most winning rate in the 2000 NBA regular season?",
        "question_ar": "",
        "evidence_en": "NBA refers to lgID = 'NBA'; didn't play in the playoffs refers to PostGP = 0; 2000 refers to year = 2000; the most winning rate refers to max(divide(won, add(won, lost)))",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 2000 ORDER BY CAST(T2.won AS REAL) / (T2.won + T2.lost) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which non-playoffs team had the most points in the regular season in the year 1998?",
        "question_ar": "",
        "evidence_en": "non-playoff refers to PostGP = 0; in the year 1998 refers to year = 1998; the most points refers to max(o_pts)",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1998 AND T1.PostGP = 0 ORDER BY T1.points DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "What's the full name of the team that won the most games in 2001 but didn't make the playoffs?",
        "question_ar": "",
        "evidence_en": "full name of the team refers to teams.name; in 2001 refers to year = 2001; didn't make the playoffs refers to PostGP = 0; won the most games refers to max(won)",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 ORDER BY T2.won DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team that didn't play in playoffs had the most total rebounds in the year 1997?",
        "question_ar": "",
        "evidence_en": "didn't play in playoffs refers to PostGP = 0; in the year 1997 refers to year = 1997; the most total rebounds refers to max(o_tmRebound)",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the player who was drafted in the 1st round, 6th position in 1976, which team did he play in that year?",
        "question_ar": "",
        "evidence_en": "drafted in the 1st round refers to draftRound = 1; 6th position refers to draftSelection = 6; in 1976 refers to year = 1976; team refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In the year 1998, how many home wins did the team which had the 1st round, 12th pick have that year?",
        "question_ar": "",
        "evidence_en": "in 1998 refers to year = 1998; 1st round refers to draftRound = 1; 12th pick refers to draftSelection = 12; home win refers to homeWon",
        "evidence_ar": "",
        "SQL": "SELECT T2.homeWon FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 12 AND T1.draftYear = 1998"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the player who had the most rebounds throughout his allstar appearances, what was his weight and height?",
        "question_ar": "",
        "evidence_en": "the most rebounds refers to max(rebounds)",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Where was the high school of the player who had the most rebounds in the NBA allstar history?",
        "question_ar": "",
        "evidence_en": "the most rebounds refers to max(rebounds)",
        "evidence_ar": "",
        "SQL": "SELECT T2.highSchool FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID ORDER BY T1.rebounds DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids.",
        "question_ar": "",
        "evidence_en": "in 1997 refers to year = 1997; the most rebounds refers to max(rebounds); team id refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the latest passing player who could play all the positions in the court, how many points did he have in his career?",
        "question_ar": "",
        "evidence_en": "the latest passing refers to max(season_id); play all the positions refers to pos like '%C%' or pos like '%F%' or pos like '%G%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team did the youngest player who could be in F-G position play in the NBA?",
        "question_ar": "",
        "evidence_en": "team refers to tmID; the youngest refers to max(year); F-G position refers to pos like '%F'; NBA refers to lgID = 'NBA'",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T3.pos = 'F-G' AND T2.lgID = 'NBA' ORDER BY T3.birthDate DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the players who played the most PBLA games, who was graduated from Central Missouri State college?",
        "question_ar": "",
        "evidence_en": "the most PBLA games refers to max(games_played); Central Missouri State college refers to college = 'Central Missouri State'",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'PBLA' AND T2.GP = 10 AND T1.college = 'Central Missouri State' GROUP BY T1.firstName, T1.middleName, T1.lastName ORDER BY COUNT(T2.id) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "In 2000, which team did the player who played the least minutes without missing a single game play in? Give the full name of the team.",
        "question_ar": "",
        "evidence_en": "in 2000 refers to year = 2000; played the least minutes refers to min(minutes); without missing a single game refers to GP = 82; full name of the team refers to teams.name",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For all the full attendence players in 1995, which player had most turnovers? Give the full name of the player.",
        "question_ar": "",
        "evidence_en": "full attendance refers to GP = 82; in 1995 refers to year = 1995; the most turnovers refers to max(turnovers); full name refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.GP = 82 AND T2.year = 1995 ORDER BY T2.turnovers DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the player in 2011 who started every game he played, which team had the player who had the most steals?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = 2011; started every game refers to GP = GS; the most steals refers to max(steals); team refers to tmID",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.GP = T2.GS GROUP BY T1.tmID, T2.steals ORDER BY T2.steals DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team had the most same starting players througout the season? Give the full name of the team.",
        "question_ar": "",
        "evidence_en": "the same starting player refers to GP = GS; full name of the team refers to teams.name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = T2.GS"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "For the 2001 rebounds leader in the league, when was his birthday?",
        "question_ar": "",
        "evidence_en": "2001 refers to year = 2001; rebounds leader refers to max(rebounds); birthday refers to birthDate",
        "evidence_ar": "",
        "SQL": "SELECT birthDate FROM players WHERE playerID = ( SELECT playerID FROM players_teams WHERE year = 2001 GROUP BY playerID ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1 )"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team did the all league rebound champion play in 1997? Give the full name of the team.",
        "question_ar": "",
        "evidence_en": "rebound champion refers to max(rebounds); 1997 refers to 1997; full name refers to teams.name",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1"
    },
    {
        "db_id": "professional_basketball",
        "question_en": "Which team had more than one player who grabbed more than 600 rebounds in 2011? Give the full name of the team.",
        "question_ar": "",
        "evidence_en": "more than one player refers to count(playerID) > 1; grabbed more than 600 rebounds refers to rebounds > 600; in 2011 refers to 2011; full name refers to teams.name",
        "evidence_ar": "",
        "SQL": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.rebounds > 600"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many of Shakespeare's works were finished before the year 1602?",
        "question_ar": "",
        "evidence_en": "finished before the year 1602 refers to Date < 1602",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE Date < 1602"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there in Act 1 in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description of Act 1, Scene 2 in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which work is the character Lord Abergavenny from? Please give its short or abbreviated title.",
        "question_ar": "",
        "evidence_en": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'; short or abbreviated title refers to Title",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Lord Abergavenny'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list the character names of all the characters from the work Twelfth Night.",
        "question_ar": "",
        "evidence_en": "character names refers to CharName; Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in Act 1, Scene 1 in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'; list the paragraphs refers to PlainText",
        "evidence_ar": "",
        "SQL": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs contain the character Lord Abergavenny?",
        "question_ar": "",
        "evidence_en": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.",
        "question_ar": "",
        "evidence_en": "character \"son to Tamora\"  refers to characters.Description = 'son to Tamora'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "For how many times has the scene \"OLIVIA’S house.\" appeared in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "\"OLIVIA’S house.\"  refers to chapters.Description = 'OLIVIA’S house.'; Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA’S house.' AND T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many characters are there in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please give the title of the work of Shakespeare that has the most characters.",
        "question_ar": "",
        "evidence_en": "most characters refers to max(count(character_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.Title FROM ( SELECT T1.Title, COUNT(T3.character_id) AS num FROM works T1 INNER JOIN chapters T2 ON T1.id = T2.work_id INNER JOIN paragraphs T3 ON T2.id = T3.chapter_id INNER JOIN characters T4 ON T3.character_id = T4.id GROUP BY T3.character_id, T1.Title ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the average number of characters in all the works of Shakespeare?",
        "question_ar": "",
        "evidence_en": "average number = divide(sum(character_id), count(work_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there on average in one act in Twelfth Night?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'; average scene = divide(sum(Scene), count(Act))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many comedies did Shakespeare create?",
        "question_ar": "",
        "evidence_en": "comedies refers to GenreType = 'Comedy'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "When did Shakespeare write the first poem?",
        "question_ar": "",
        "evidence_en": "first poem refers to GenreType = 'Poem' and Date = 'min'",
        "evidence_ar": "",
        "SQL": "SELECT MIN(Date) FROM works WHERE GenreType = 'Poem'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Give the abbreviation name for the character \"Earl of Westmoreland\".",
        "question_ar": "",
        "evidence_en": "abbreviation name refers to Abbrev; character \"Earl of Westmoreland\" refers to CharName = 'Earl of Westmoreland'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which chapter has the most paragraphs? Give the description of the chapter.",
        "question_ar": "",
        "evidence_en": "most paragraphs refers to max(count(chapter_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id ORDER BY T2.ParagraphNum DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which character was mentioned in the paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"? Give the character name.",
        "question_ar": "",
        "evidence_en": "paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"  refers to PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many characters are there in Titus Andronicus?",
        "question_ar": "",
        "evidence_en": "Titus Andronicus refers to Title = 'Titus Andronicus'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the number of acts in Two Gentlemen of Verona.",
        "question_ar": "",
        "evidence_en": "Two Gentlemen of Verona refers to LongTitle = 'Two Gentlemen of Verona'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.id = T1.work_id WHERE T2.LongTitle = 'Two Gentlemen of Verona'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description for the character mentioned in paragraph No.640171?",
        "question_ar": "",
        "evidence_en": "paragraph No.640171 refers to paragraphs.id = '640171'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Give the title of the work that contains the character \"Shylock\".",
        "question_ar": "",
        "evidence_en": "character \"Shylock\" refers to CharName = 'Shylock'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there in King John?",
        "question_ar": "",
        "evidence_en": "King John refers to Title = 'King John'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many chapters does the character Demetrius show in the story?",
        "question_ar": "",
        "evidence_en": "character Demetrius refers to CharName = 'Demetrius'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream.",
        "question_ar": "",
        "evidence_en": "Act No.2 refers to Act = '2'; Scene No.2  refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which Shakespeare tragedy has the most scenes? Give the long title.",
        "question_ar": "",
        "evidence_en": "tragedy refers to GenreType = 'Tragedy'; most scenes refers to max(count(Scene))",
        "evidence_ar": "",
        "SQL": "SELECT T.LongTitle FROM ( SELECT T1.LongTitle, COUNT(T2.Scene) AS num FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Tragedy' GROUP BY T1.LongTitle, T2.Scene ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in the scene whose description is \"A Sea-port in Cyprus. An open place near the quay.\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.ParagraphNum) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T1.Description = 'A Sea-port in Cyprus. An open place near the quay.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What percentage of all scenes are tragic scenes in Shakespeare's work in 1594?",
        "question_ar": "",
        "evidence_en": "tragic scenes refers to GenreType = 'Tragedy'; work in 1594 refers to Date = '1594'; percentage = divide((sum(Scene) when GenreType = 'Tragedy'), count(Scene))as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.GenreType = 'Tragedy', 1, 0)) AS REAL) * 100 / COUNT(T1.Scene) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1594'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Gives the average number of chapters in Shakespeare's 1599 work.",
        "question_ar": "",
        "evidence_en": "1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many \"servant to Timon\" characters are there?",
        "question_ar": "",
        "evidence_en": "servant to Timon refers to characters.Description = 'servant to Timon'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM characters WHERE Description = 'servant to Timon'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the title of the first ever work of William Shakespeare?",
        "question_ar": "",
        "evidence_en": "first ever work refers to min(Date)",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM works WHERE Date = ( SELECT MIN(Date) FROM works )"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many poems did Shakespeare write?",
        "question_ar": "",
        "evidence_en": "poems refers to GenreType = 'Poem'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE GenreType = 'Poem'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there in work id 7, act 1?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In the year 1500s, how many tragedies did Shakespeare write?",
        "question_ar": "",
        "evidence_en": "year 1500s refers to Date between 1500 and 1599; tragedies refers to GenreType = 'Tragedy'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy' AND Date BETWEEN 1500 AND 1599"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Who is the daughter of Capulet?",
        "question_ar": "",
        "evidence_en": "daughter of Capulet refers to characters.Description = 'Daughter to Capulet'",
        "evidence_ar": "",
        "SQL": "SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in \"Ay, surely, mere the truth: I know his lady.\"?",
        "question_ar": "",
        "evidence_en": "\"Ay, surely, mere the truth: I know his lady.\" refers to PlainText = 'Ay, surely, mere the truth: I know his lady.'",
        "evidence_ar": "",
        "SQL": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the long title of the work with the highest number of scenes in act 1?",
        "question_ar": "",
        "evidence_en": "highest number of scenes refers to max(count(Scene))",
        "evidence_ar": "",
        "SQL": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description of the chapter with the longest number of paragraphs?",
        "question_ar": "",
        "evidence_en": "chapter with the longest number of paragraphs refers to max(ParagraphNum)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id ORDER BY T1.ParagraphNum DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In \"Twelfth Night, Or What You Will\", what is the description of the chapter in 2nd scene, Act 2?",
        "question_ar": "",
        "evidence_en": "\"Twelfth Night, Or What You Will\"  refers to LongTitle = 'Twelfth Night, Or What You Will'; 2nd scene refers to Scene = 2",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Twelfth Night, Or What You Will' AND T2.Scene = 2 AND T2.Act = 2"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the descriptions of the short chapters?",
        "question_ar": "",
        "evidence_en": "short chapters refers to ParagraphNum < 150",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Which of Shakespeare's work has chapter description of \"A field near Windsor\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in the chapter with the highest amount of scenes in act 1?",
        "question_ar": "",
        "evidence_en": "How many paragraphs refers to ParagraphNum; highest amount of scenes refers to max(count(Scene))",
        "evidence_ar": "",
        "SQL": "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Other than \"stage directions\", what is the name of the character that appeared 5 times in \"the sea-coast\"?",
        "question_ar": "",
        "evidence_en": "Other than \"stage directions\" refers to CharName ! = '(stage directions)'; name of the character refers to CharName; appeared 5 times in \"the sea-coast\" refers to chapters.Description = 'The sea-coast.' and count(character_id) = 5",
        "evidence_ar": "",
        "SQL": "SELECT T.CharName FROM ( SELECT T3.CharName, COUNT(T3.id) AS num FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T2.Description = 'The sea-coast.' AND T3.CharName != '(stage directions)' AND T1.chapter_id = 18709 GROUP BY T3.id, T3.CharName ) AS T WHERE T.num = 5"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Among the chapters in \"As You Like It\", how many chapters have a paragraph number of no more than 50?",
        "question_ar": "",
        "evidence_en": "\"As You Like It\" refers to Title = 'As You Like It' ;paragraph number of no more than 50 refers to ParagraphNum < 50",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.chapter_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'As You Like It' AND T3.ParagraphNum < 50"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In \"Florence. Without the walls. A tucket afar off\", what is the id of the character that was mentioned in \"His name, I pray you.\"?",
        "question_ar": "",
        "evidence_en": "\"Florence. Without the walls. A tucket afar off\" refers to chapters.Description = 'Florence. Without the walls. A tucket afar off.'; \"His name, I pray you.\" refers to PlainText = 'His name, I pray you.'",
        "evidence_ar": "",
        "SQL": "SELECT T1.character_id FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.PlainText = 'His name, I pray you.' AND T2.Description = 'Florence. Without the walls. A tucket afar off.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many characters are there in Hamlet?",
        "question_ar": "",
        "evidence_en": "Hamlet refers to Title = 'Hamlet'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there in the 5th act of \"History of Henry VIII\"?",
        "question_ar": "",
        "evidence_en": "5th act refers to Act = 5; \"History of Henry VIII\" refers to LongTitle = 'History of Henry VIII'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes?",
        "question_ar": "",
        "evidence_en": "history refers to GenreType = 'History' ; 1st acts  refers to Act = 1; no more than 2 scenes refers to count(Scene) < 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene < 2 AND T1.GenreType = 'History'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many acts are there in Sonnets?",
        "question_ar": "",
        "evidence_en": "Sonnets refers to Title = 'Sonnets'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description of the chapter where the character whose abrreviated name is 1Play appeared first?",
        "question_ar": "",
        "evidence_en": "abbreviated name is 1Play; appeared first refers to Abbrev = '1Play' and min(chapter_id)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T3.Abbrev = '1Play' ORDER BY T1.chapter_id LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the titles and genres of the one-act works of Shakespeare?",
        "question_ar": "",
        "evidence_en": "one-act works refers to count(Act) = 1; genre refers to GenreType\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?",
        "question_ar": "",
        "evidence_en": "longest chapter refers to max(ParagraphNum); Sir Richard Ratcliff  refers to CharName = 'Sir Richard Ratcliff'",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In \"A Lover's Complaint\", what is the description of Act 1, Scene 1?",
        "question_ar": "",
        "evidence_en": "\"A Lover's Complaint\" refers to Title = 'A Lover''s Complaint'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'A Lover''s Complaint'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "When did Shakespeare create his work that has 154 scenes?",
        "question_ar": "",
        "evidence_en": "When refers to Date; has 154 scenes refers to count(Scene) = 154",
        "evidence_ar": "",
        "SQL": "SELECT T1.Date, T1.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Scene = 154"
    },
    {
        "db_id": "shakespeare",
        "question_en": "On average, how many scenes are there in each of the comedy works written by Shakespeare?",
        "question_ar": "",
        "evidence_en": "comedy refers to GenreType = 'Comedy'; average = divide(sum(count(Scene)), count(work.id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.",
        "question_ar": "",
        "evidence_en": "Rome and Juliet refers to CharName = 'Romeo' and CharName = 'Juliet'; The Tragedy of Romeo and Juliet refers to LongTitle = 'The Tragedy of Romeo and Juliet'; percentage = divide(sum(charater.id) when CharName = 'Romeo', sum(charater.id)) as percentage and percentage = divide(sum(charater.id) when CharName = 'Juliet', count(charater.id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T4.CharName = 'Romeo', 1, 0)), SUM(IIF(T4.CharName = 'Juliet', 1, 0)), CAST(SUM(IIF(T4.CharName = 'Romeo', 1, 0)) + SUM(IIF(T4.CharName = 'Juliet', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the paragraph number with plain text \"This is Illyria, lady\"?",
        "question_ar": "",
        "evidence_en": "paragraph number refers to ParagraphNum",
        "evidence_ar": "",
        "SQL": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many number of paragraphs are there in chapter ID 18881?",
        "question_ar": "",
        "evidence_en": "number of paragraphs refers to ParagraphNum",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List down any 5 titles in the history genre.",
        "question_ar": "",
        "evidence_en": "in the history genre refers to GenreType = 'History'",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes are there in Act 5 of work ID 9?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the character names and descriptions of chapter ID 18710.",
        "question_ar": "",
        "evidence_en": "character names refers to CharName",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many chapters are there in \"Midsummer Night's Dream\"?",
        "question_ar": "",
        "evidence_en": "in \"Midsummer Night's Dream\" refers to Title = 'Midsummer Night's Dream'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Midsummer Night''s Dream'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many paragraphs are there in Act 5 Scene 1 of \"Comedy of Errors\"?",
        "question_ar": "",
        "evidence_en": "\"Comedy of Errors\" refers to Title = 'Comedy of Errors'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the character names and descriptions of characters in \"Venus and Adonis\"?",
        "question_ar": "",
        "evidence_en": "character names refers to CharName; \"Venus and Adonis\" refers to Title = 'Venus and Adonis'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.CharName, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Venus and Adonis'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the title which has character named \"Froth\"?",
        "question_ar": "",
        "evidence_en": "character named \"Froth\" refers to CharName = 'Froth'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many chapters include the character name \"First Witch\"?",
        "question_ar": "",
        "evidence_en": "character name \"First Witch\" refers to CharName = 'First Witch'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'First Witch'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the scenes and descriptions in Act 1 of \" Pericles, Prince of Tyre\".",
        "question_ar": "",
        "evidence_en": "\" Pericles, Prince of Tyre\" refers to LongTitle = 'Pericles, Prince of Tyre'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Scene, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Pericles, Prince of Tyre' AND T2.Act = 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Describe the full title which had the character named Servant to Montague.",
        "question_ar": "",
        "evidence_en": "full title refers to LongTitle; character named Servant to Montague refers to characters.Description = 'Servant to Montague'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.LongTitle FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.Description = 'Servant to Montague'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Describe the scene number, act, and title of work which had the description of \"The house of ANTIPHOLUS of Ephesus\" in chapter.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Act, T2.Scene, T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'The house of ANTIPHOLUS of Ephesus.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Provide the character name, paragraph number, and plain text of \"cousin to the king\" description.",
        "question_ar": "",
        "evidence_en": "character name refers to CharName; paragraph number refers to ParagraphNum",
        "evidence_ar": "",
        "SQL": "SELECT T1.CharName, T2.ParagraphNum, T2.PlainText FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.Description = 'cousin to the king'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Calculate average scene per act in Antony and Cleopatra.",
        "question_ar": "",
        "evidence_en": "Antony and Cleopatra refers to Title = 'Antony and Cleopatra'; average scene per act = divide(sum(Scene), count(act))\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Antony and Cleopatra'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Calculate the percentage of paragraphs in all chapters of \"All's Well That Ends Well\".",
        "question_ar": "",
        "evidence_en": "\"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'; percentage = divide(sum(paragraphs.id) when Title = 'All's Well That Ends Well', count(paragraphs.id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.Title = 'All''s Well That Ends Well', 1, 0)) AS REAL) * 100 / COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many \"all\" character names have the \"all\" abbreviation?",
        "question_ar": "",
        "evidence_en": "character names refers to CharName；\"all\" abbreviation refers to Abbrev = 'all'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM characters WHERE Abbrev = 'All'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please name any three comedic works.",
        "question_ar": "",
        "evidence_en": "comedic works refers to GenreType = 'comedy'",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3"
    },
    {
        "db_id": "shakespeare",
        "question_en": "From 1593 onwards, what is the difference between the number of comedy works and history works?",
        "question_ar": "",
        "evidence_en": "From 1593 onwards refers to Date > 1593; comedy works and history works refers to GenreType = 'comedy' and GenreType = 'History'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(GenreType = 'Comedy', 1, 0)) - SUM(IIF(GenreType = 'History', 1, 0)) FROM works WHERE Date > 1593"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please name the latest historical work.",
        "question_ar": "",
        "evidence_en": "name refers to LongTitle; latest historical work refers to GenreType = 'History' and max(Date)",
        "evidence_ar": "",
        "SQL": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the work numbers that are related to King Henry?",
        "question_ar": "",
        "evidence_en": "work numbers refers to works.id; related to King Henry refers to Title = '%Henry%'",
        "evidence_ar": "",
        "SQL": "SELECT id FROM works WHERE Title LIKE '%Henry%'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the character names for a senator of Venice?",
        "question_ar": "",
        "evidence_en": "character names refers to CharName; a senator of Venice refers to characters.Description = 'a senator of Venice'",
        "evidence_ar": "",
        "SQL": "SELECT CharName FROM characters WHERE Description = 'a senator of Venice'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the name of the character that can be found in paragraph 8 of chapter 18820?",
        "question_ar": "",
        "evidence_en": "name of the character refers to CharName; paragraph 8 refers to ParagraphNum = 8; chapter 18820 refers to chapter_id = 18820",
        "evidence_ar": "",
        "SQL": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 8 AND T2.chapter_id = 18820"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description of chapter 18704, where there is a character called Orsino?",
        "question_ar": "",
        "evidence_en": "chapter 18704 refers to chapters.id = 18704; character called Orsino refers to CharName = 'Orsino'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE T1.CharName = 'Orsino' AND T3.ID = 18704"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many scenes can be found in \"Twelfth Night, Or What You Will\"?",
        "question_ar": "",
        "evidence_en": "\"Twelfth Night, Or What You Will\" refers to LongTitle",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Scene) AS cnt FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Cymbeline, King of Britain'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list all of the character descriptions in paragraph 20.",
        "question_ar": "",
        "evidence_en": "paragraph 20 refers to ParagraphNum = 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many chapters have the name Gratiano as a character for \"friend to Antonio and Bassiano\"?",
        "question_ar": "",
        "evidence_en": "name Gratiano as a character refers to CharName = 'Gratiano'; \"friend to Antonio and Bassiano\" refers to characters.Description = 'friend to Antonio and Bassiano'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the description of chapter 18706 in \"All's Well That Ends Well\"?",
        "question_ar": "",
        "evidence_en": "chapter 18706 refers to chapters.id; \"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.id = 18706 AND T1.Title = 'All''s Well That Ends Well'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What are the character names in paragraph 3?",
        "question_ar": "",
        "evidence_en": "character names refers to CharName; paragraph 3 refers to ParagraphNum = 3",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 3"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list all of the paragraphs that have the character name Aedile.",
        "question_ar": "",
        "evidence_en": "paragraphs  refers to ParagraphNum; character name Aedile refers to CharName = 'Aedile'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ParagraphNum FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Aedile'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Please list any two character names in chapter 18708.",
        "question_ar": "",
        "evidence_en": "character names refers to CharName; chapter 18708 refers to chapter_id = 18708",
        "evidence_ar": "",
        "SQL": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many acts can be found in the comedy \"Two Gentlemen of Verona\"?",
        "question_ar": "",
        "evidence_en": "comedy refers to GenreType = 'comedy'; \"Two Gentlemen of Verona\" refers to Title = 'Two Gentlemen of Verona'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ACT) FROM chapters AS T1 LEFT JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.GenreType = 'Comedy' AND T2.Title = 'Two Gentlemen of Verona'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?",
        "question_ar": "",
        "evidence_en": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the percentage of act number 5 in Titus Andronicus?",
        "question_ar": "",
        "evidence_en": "act number 5 refers to Act = 5; Titus Andronicus refers to Title = 'Titus Andronicus'; percentage = divide(sum(Act = 5), count(Act)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.act = 5, 1, 0)) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "How many of the works of Shakespeare are Tragedy?",
        "question_ar": "",
        "evidence_en": "Tragedy refers to GenreType = 'Tragedy'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Among the works of Shakespeare, how many of them have the word \"Henry\" on its title?",
        "question_ar": "",
        "evidence_en": "works refers to Title; have the word \"Henry\" on its title refers to Title = '%Henry%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM works WHERE Title LIKE '%Henry%'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Give the character's ID of the character that said the paragraph \"O my poor brother! and so perchance may he be.\"",
        "question_ar": "",
        "evidence_en": "\"O my poor brother! and so perchance may he be.\" refers to  PlainText = 'O my poor brother! and so perchance may he be.'",
        "evidence_ar": "",
        "SQL": "SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the paragraph number and paragraphs said by the character named \"Sir Andrew Aguecheek\".",
        "question_ar": "",
        "evidence_en": "paragraph number refers to ParagraphNum; character named \"Sir Andrew Aguecheek\" refers to CharName = 'Sir Andrew Aguecheek'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ParagraphNum, T2.id FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Andrew Aguecheek'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Give the title and the characters name of the most recent work of Shakespeare.",
        "question_ar": "",
        "evidence_en": "characters name refers to CharName; most recent work refers to max(Date)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id ORDER BY T1.Date DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Among paragraphs with paragraph number between 1900 to 1950, list the texts said by a character described as a sea captain, friend to Sebatian.",
        "question_ar": "",
        "evidence_en": "paragraph number between 1900 to 1950 refers to ParagraphNum > = 1500 AND ParagraphNum < = 1950; texts refers to PlainText; a character described as a sea captain, friend to Sebatian refers to characters.Description = 'a sea captain, friend to Sebastian'",
        "evidence_ar": "",
        "SQL": "SELECT T1.description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'a sea captain, friend to Sebastian' AND T2.ParagraphNum BETWEEN 1500 AND 1950"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the long title of the Shakespeare's work with Act 4 Scene 5 described as \"Mytilene. A street before the brothel.\"?",
        "question_ar": "",
        "evidence_en": "described as \"Mytilene. A street before the brothel.\" refers to chapters.Description = 'Mytilene. A street before the brothel.'",
        "evidence_ar": "",
        "SQL": "SELECT T1.LongTitle FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'Mytilene. A street before the brothel.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Who is the character that said \"This is Illyria, lady.\"?",
        "question_ar": "",
        "evidence_en": "character refers to CharName; \"This is Illyria, lady.\" refers to PlainText = 'This is Illyria, lady.'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'This is Illyria, lady.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In Shakespeare's works between 1600 to 1610, how many of these have a character as a \"Third Servingman\"?",
        "question_ar": "",
        "evidence_en": "between 1600 to 1610 refers to DATE > = 1600 AND DATE < = 1610; \"Third Servingman\" refers to CharName = 'Third Servingman'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In the Venus and Adonis, what is the description of the last scene listed?",
        "question_ar": "",
        "evidence_en": "Venus and Adonis refers to Title = 'Venus and Adonis'; last scene refers to max(Scene)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Venus and Adonis' ORDER BY T2.Scene DESC LIMIT 1"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola?",
        "question_ar": "",
        "evidence_en": "Twelfth Night refers to Title = 'Twelfth Night'; total number of lines said by Viola refers to count(character_id) where CharName = 'Viola'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the character and work ID of the text \"Fear not thou, man, thou shalt lose nothing here.\"?",
        "question_ar": "",
        "evidence_en": "character refers to chapter_id; text \"Fear not thou, man, thou shalt lose nothing here.\"  refers to PlainText = 'Fear not thou, man, thou shalt lose nothing here.'",
        "evidence_ar": "",
        "SQL": "SELECT T2.character_id, T1.work_id FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "What is the chapter description where the paragraph \"What, wilt thou hear some music, my sweet love?\" belongs?",
        "question_ar": "",
        "evidence_en": "paragraph \"What, wilt thou hear some music, my sweet love?\" refers to  PlainText = 'What, wilt thou hear some music, my sweet love?'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'What, wilt thou hear some music, my sweet love?'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the scene numbers involving the character named Sir Toby Belch in the Twelfth Night.",
        "question_ar": "",
        "evidence_en": "scene numbers refers to Scene; character named Sir Toby Belch refers to CharName = 'Sir Toby Belch'; in the Twelfth Night refers to Title = 'Twelfth Night'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Scene FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night' AND T4.CharName = 'Sir Toby Belch'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named \"Tybalt\".",
        "question_ar": "",
        "evidence_en": "works before 1600 refers to DATE < 1600; tragic story refers to GenreType = 'Tragedy'; character named \"Tybalt\" refers to CharName = 'Tybalt'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE < 1600 AND T1.GenreType = 'Tragedy' AND T4.CharName = 'Tybalt'"
    },
    {
        "db_id": "shakespeare",
        "question_en": "List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare.",
        "question_ar": "",
        "evidence_en": "a year greater than the 89% of average year refers to DATE > multiply(divide(SUM(DATE) , COUNT(DATE)), 0.89)",
        "evidence_ar": "",
        "SQL": "SELECT T2.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.DATE > ( SELECT AVG(DATE) FROM works ) * 0.89"
    },
    {
        "db_id": "shakespeare",
        "question_en": "Among the comedy works of Shakespeare, what is the percentage of his works with a character named \"antonio\"?",
        "question_ar": "",
        "evidence_en": "comedy works refers to GenreType = 'Comedy'; a character named \"antonio\" refers to CharName = 'antonio'; percentage = divide(sum(CharName = 'Antonio'), count(CharName)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T4.CharName = 'antonio', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.GenreType = 'Comedy'"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars with 8 cylinders, what is the name of the one that's the most expensive?",
        "question_ar": "",
        "evidence_en": "with 8 cylinders refers to cylinders = 8; name of the car refers to car_name; the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8 ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars over 3000lbs, how many of them cost less than $30000?",
        "question_ar": "",
        "evidence_en": "over 3000lbs refers to weight > 3000; cost less than $30000 refers to price < 30000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.car_name) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.weight > 3000 AND T2.price < 30000"
    },
    {
        "db_id": "cars",
        "question_en": "What is the acceleration of the most expensive car?",
        "question_ar": "",
        "evidence_en": "the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How much US dollars does a Ford Torino cost?",
        "question_ar": "",
        "evidence_en": "cost refers to price; Ford Torino refers to car_name = 'ford torino'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford torino'"
    },
    {
        "db_id": "cars",
        "question_en": "What was the origin country of the car model ford torino produced in 1970?",
        "question_ar": "",
        "evidence_en": "origin country refers to country; Ford Torino refers to car_name = 'ford torino'; produced in 1970 refers to model_year = 1970",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970"
    },
    {
        "db_id": "cars",
        "question_en": "Among the car models introduced in the market in 1970, how many of them have the USA as their origin country?",
        "question_ar": "",
        "evidence_en": "introduced in the market in 1970 refers to model_year = 1970; have the USA as origin country refers to country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.model_year = 1970 AND T2.country = 'USA'"
    },
    {
        "db_id": "cars",
        "question_en": "Please list the names of all the car models whose origin country is the USA.",
        "question_ar": "",
        "evidence_en": "name of car model refers to car_name; origin country is the USA refers to country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T2.country = T3.origin WHERE T3.country = 'USA'"
    },
    {
        "db_id": "cars",
        "question_en": "Please list the names of the top 3 most expensive cars.",
        "question_ar": "",
        "evidence_en": "name of the car refers to car_name; the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 3"
    },
    {
        "db_id": "cars",
        "question_en": "Please list all the years in which the car model Chevrolet Impala was introduced in the market.",
        "question_ar": "",
        "evidence_en": "year refers to model_year; Chevrolet Impala refers to car_name = 'chevrolet impala'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.model_year FROM production AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?",
        "question_ar": "",
        "evidence_en": "an acceleration of over 10 miles per squared hour refers to acceleration > 10; cost more than $20000 and less than $30000 refers to price < 30000 AND price > 20000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.acceleration > 10 AND T2.price BETWEEN 20000 AND 30000"
    },
    {
        "db_id": "cars",
        "question_en": "Please list the weights of all the cars with the price over $40000.",
        "question_ar": "",
        "evidence_en": "price over $40000 refers to price > 40000",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000"
    },
    {
        "db_id": "cars",
        "question_en": "What is the maximum acceleration of a car with price over $40000?",
        "question_ar": "",
        "evidence_en": "the maximum acceleration refers to max(acceleration); price over $40000 refers to price > 40000",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.acceleration) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000"
    },
    {
        "db_id": "cars",
        "question_en": "What is the average price of cars with 8 cylinders?",
        "question_ar": "",
        "evidence_en": "with 8 cylinders refers to cylinders = 8; average price = avg(price) where cylinders = 8",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8"
    },
    {
        "db_id": "cars",
        "question_en": "What is the maximum sweep volume of a car that costs less than $30000?",
        "question_ar": "",
        "evidence_en": "cost less than $30000 refers to price < 30000; the maximum sweep volume = max(divide(displacement, cylinders)) where price < 30000",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.displacement / T1.cylinders) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price < 30000"
    },
    {
        "db_id": "cars",
        "question_en": "How many cars in the database are originated from Europe?",
        "question_ar": "",
        "evidence_en": "originated from Europe refers to country = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe'"
    },
    {
        "db_id": "cars",
        "question_en": "Show the origin country of Chevrolet Malibu.",
        "question_ar": "",
        "evidence_en": "origin country refers to country; Chevrolet Malibu refers to car_name = 'chevrolet malibu'",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevrolet malibu'"
    },
    {
        "db_id": "cars",
        "question_en": "What are the miles per gallon of the most expensive car?",
        "question_ar": "",
        "evidence_en": "miles per gallon refers to mpg; the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.mpg FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Tell the origin country of car no.382.",
        "question_ar": "",
        "evidence_en": "origin country refers to country; car no.382 refers to ID = 382",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.country FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.ID = 382"
    },
    {
        "db_id": "cars",
        "question_en": "Which is the origin country of the $44274.40748 car?",
        "question_ar": "",
        "evidence_en": "origin country refers to country; the $44274.40748 car refers to price = 44274.40748",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = 44274.40748"
    },
    {
        "db_id": "cars",
        "question_en": "How much is the Volkswagen Dasher with 14.1 mph acceleration?",
        "question_ar": "",
        "evidence_en": "cost refers to price; Volkswagen Dasher refers to car_name = 'volkswagen dasher'; 14.1 mph acceleration refers to acceleration = 14.1",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'volkswagen dasher' AND T1.acceleration = '14.1'"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the engine displacement status of the $37443.85589 car.",
        "question_ar": "",
        "evidence_en": "engine displacement status refers to displacement; the $37443.85589 car refers to price = 37443.85589",
        "evidence_ar": "",
        "SQL": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'"
    },
    {
        "db_id": "cars",
        "question_en": "When was the $32650.65157 car introduced to the market? State the year.",
        "question_ar": "",
        "evidence_en": "the $32650.65157 car refers to price = 32650.65157; year refers to model",
        "evidence_ar": "",
        "SQL": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the price of the only Toyota Corona hardtop in the database.",
        "question_ar": "",
        "evidence_en": "Toyota Corona hardtop refers to car_name = 'toyota corona hardtop'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'toyota corona hardtop'"
    },
    {
        "db_id": "cars",
        "question_en": "How many cylinders does the cheapest car have?",
        "question_ar": "",
        "evidence_en": "the cheapest car refers to min(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY price ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Which car in the database provides the best crash protection based on its weight? How much is it?",
        "question_ar": "",
        "evidence_en": "the best crash protection refers to max(weight); cost refers to price",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID, T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "State the origin country of the fastest car in the database.",
        "question_ar": "",
        "evidence_en": "origin country refers to country; the fastest refers to max(horsepower)",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.horsepower DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the percentage of Japanese cars in the database?",
        "question_ar": "",
        "evidence_en": "Japanese car refers to country = 'Japan'; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the swept volume of the $34538.97449 car.",
        "question_ar": "",
        "evidence_en": "sweep volume = divide(displacement, cylinders); the $34538.97449 car refers to price = 34538.97449",
        "evidence_ar": "",
        "SQL": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449"
    },
    {
        "db_id": "cars",
        "question_en": "What is the name of the most expensive car?",
        "question_ar": "",
        "evidence_en": "name of the car refers to car_name; the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How many cars were released in the USA in 1981?",
        "question_ar": "",
        "evidence_en": "in the USA refers to country = 'USA'; in 1981 refers to model_year = 1981",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981"
    },
    {
        "db_id": "cars",
        "question_en": "How much is the car with the highest sweep volume?",
        "question_ar": "",
        "evidence_en": "cost refers to price; the highest sweep volume refers to max(divide(displacement, cylinders))",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.displacement / T1.cylinders DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the fastest car made by Japan?",
        "question_ar": "",
        "evidence_en": "the fastest refers to max(horsepower); made by Japan refers to country = 'Japan'; name of the car refers to car_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' ORDER BY T1.horsepower DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How many times was Ford Maverick introduced to the market?",
        "question_ar": "",
        "evidence_en": "Ford Maverick refers to car_name = 'ford maverick';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'"
    },
    {
        "db_id": "cars",
        "question_en": "Which country produced the most fuel-efficient car?",
        "question_ar": "",
        "evidence_en": "the most fuel-efficient refers to max(mpg)",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Which Dodge car is the cheapest?",
        "question_ar": "",
        "evidence_en": "Dodge car refers to car_name LIKE 'dodge%'; the cheapest refers to min(price); name of the car refers to car_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the name of the most expensive car that was produced by the USA?",
        "question_ar": "",
        "evidence_en": "name of the car refers to car_name; the most expensive refers to max(price); produced by the USA refers to country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars with an engine displacement of no less than 400 cubic millimeter, how many cars cost at least 30,000?",
        "question_ar": "",
        "evidence_en": "engine displacement of no less than 400 cubic millimeter refers to displacement > 400; cost at least 30,000 refers to price > 30000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.displacement > 400 AND T2.price > 30000"
    },
    {
        "db_id": "cars",
        "question_en": "Which year did Europe produce the most cars?",
        "question_ar": "",
        "evidence_en": "year refers to model_year; Europe refers to country = 'Europe'; the most cars refers to max(model_year)",
        "evidence_ar": "",
        "SQL": "SELECT T1.model_year FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe' GROUP BY T1.model_year ORDER BY COUNT(T1.model_year) DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How much is the Peugeot 505s Turbo Diesel?",
        "question_ar": "",
        "evidence_en": "cost refers to price; Peugeot 505s Turbo Diesel refers to car_name = 'peugeot 505s turbo diesel'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'peugeot 505s turbo diesel'"
    },
    {
        "db_id": "cars",
        "question_en": "What is the miles per square hour of the cheapest car produced by the USA?",
        "question_ar": "",
        "evidence_en": "miles per square hour refers to acceleration; the cheapest refers to min(price); produced by the USA refers to country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T4.acceleration FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Which country produced the highest number of cars? Calculate the annual average number of cars that the said country produced from the very start to the present.",
        "question_ar": "",
        "evidence_en": "the highest number of cars refers to max(country); annual average number = divide(count(ID), count(model_year))",
        "evidence_ar": "",
        "SQL": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the percentage of cars that was produced by Japan among those that have a sweep volume of no less than 30?",
        "question_ar": "",
        "evidence_en": "produced by Japan refers to country = 'Japan'; a sweep volume of no less than 30 refers to divide(displacement, cylinders) > 30; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100% where divide(displacement, cylinders) > 30",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.displacement / T1.cylinders > 30"
    },
    {
        "db_id": "cars",
        "question_en": "List the name of the cars with model year 1975.",
        "question_ar": "",
        "evidence_en": "name of the car refers to car_name; model year 1975 refers to model_year = 1975",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1975"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the average price of cars from Europe.",
        "question_ar": "",
        "evidence_en": "from Europe refers to country = 'Europe'; average price = avg(price) where country = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Europe'"
    },
    {
        "db_id": "cars",
        "question_en": "What is the price of the car ID 15?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.ID = 15"
    },
    {
        "db_id": "cars",
        "question_en": "How many of the cars from Japan weighed less than 3000?",
        "question_ar": "",
        "evidence_en": "from Japan refers to country = 'Japan'; weighed less than 3000 refers to weight < 3000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T4.weight < 3000"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars produced in year 1973, how many of the cars have horsepower less than 100?",
        "question_ar": "",
        "evidence_en": "produced in year 1973 refers to model_year = 1973; have horsepower less than 100 refers to horsepower < 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the ID of cars from Japan worth greater than 35000 and have an acceleration of 14.",
        "question_ar": "",
        "evidence_en": "from Japan refers to country = 'Japan'; worth greater than 35000 refers to price > 35000; have an acceleration of 14 refers to acceleration = 14",
        "evidence_ar": "",
        "SQL": "SELECT T4.ID FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T1.price > 3500 AND T4.acceleration = 14"
    },
    {
        "db_id": "cars",
        "question_en": "Give the model year of the heaviest car.",
        "question_ar": "",
        "evidence_en": "the heaviest refers to max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the horsepower and model year of the car named Subaru Dl?",
        "question_ar": "",
        "evidence_en": "the car named Subaru Dl refers to car_name = 'subaru dl'",
        "evidence_ar": "",
        "SQL": "SELECT T1.horsepower, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'subaru dl'"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars originated from Japan, what is the name of the car with the highest price?",
        "question_ar": "",
        "evidence_en": "from Japan refers to country = 'Japan'; name of the car refers to car_name; the highest price refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What are the names of the cars worth 20000?",
        "question_ar": "",
        "evidence_en": "name of the car refers to car_name; worth 20000 refers to price = 20000",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000"
    },
    {
        "db_id": "cars",
        "question_en": "How many cars worth greater than 40000 were from the USA?",
        "question_ar": "",
        "evidence_en": "worth greater than 40000 refers to price > 40000; from the USA refers to country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.price > 40000"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the price and country origin of the car named Ford Maverick.",
        "question_ar": "",
        "evidence_en": "country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'"
    },
    {
        "db_id": "cars",
        "question_en": "List the car's name with a price worth greater than 85% of the average price of all cars.",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; a price worth greater than 85% of the average price of all cars refers to price > multiply(avg(price), 0.85)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price * 100 > ( SELECT AVG(price) * 85 FROM price )"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the difference between the number of cars that has a horsepower of 130 with the model year 1970 and model year 1976",
        "question_ar": "",
        "evidence_en": "a horsepower of 130 refers to horsepower = 130; difference = subtract(count(ID where model_year = 1970), count(ID where model_year = 1976)) where horsepower = 130",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.model_year = 1970 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.model_year = 1976 THEN 1 ELSE 0 END) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower = 130"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars from Asia, list the IDs of cars that were introduced in 1979.",
        "question_ar": "",
        "evidence_en": "from Asia refers to country = 'Japan'; introduced in 1979 refers to model_year = 1979",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979"
    },
    {
        "db_id": "cars",
        "question_en": "Which country produced the car with the lowest mileage per gallon?",
        "question_ar": "",
        "evidence_en": "the lowest mileage per gallon refers to min(mpg)",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the name, model, sweep volume, and introduced year of the car with the best crash protection.",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; sweep volume = divide(displacement, cylinders); introduced year refers to model_year; the best crash protection refers to max(weight)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name, T1.model, T1.displacement / T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe.",
        "question_ar": "",
        "evidence_en": "introduced in 1977 refers to model_year = 1977; car's name refers to car_name; from Europe refers to country = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name, T1.horsepower FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1977 AND T3.country = 'Europe'"
    },
    {
        "db_id": "cars",
        "question_en": "Provide the name and model of the car with the highest price.",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; the highest price refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name, T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What is the price of a Chevrolet Bel Air?",
        "question_ar": "",
        "evidence_en": "Chevrolet Bel Air refers to car_name = 'chevrolet bel air'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'"
    },
    {
        "db_id": "cars",
        "question_en": "What is the average price per car produced in Japan?",
        "question_ar": "",
        "evidence_en": "produced in Japan refers to country = 'Japan'; average price per car = avg(price) where country = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan'"
    },
    {
        "db_id": "cars",
        "question_en": "Which country produced the car with the lowest price?",
        "question_ar": "",
        "evidence_en": "the lowest price refers to min(price)",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.price ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Among the cars produced in 1975, provide IDs, names, and producing countries of the cars with the maximum number of cylinders.",
        "question_ar": "",
        "evidence_en": "produced in 1975 refers to model_year = 1975; names refers to car_name; producing countries refers to country; the maximum number of cylinders refers to max(cylinders)",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID, T1.car_name, T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1975 ORDER BY T1.cylinders DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year.",
        "question_ar": "",
        "evidence_en": "the cheapest refers to min(price); number of cylinders refers to cylinders; producing year refers to model_year",
        "evidence_ar": "",
        "SQL": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "List the names and prices of the cars with model 82 and mileage per gallon of greater than 30.",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; model 82 refers to model = 82; mileage per gallon of greater than 30 refers to mpg > 30",
        "evidence_ar": "",
        "SQL": "SELECT T2.car_name, T1.price FROM price AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.model = 82 AND T2.mpg > 30"
    },
    {
        "db_id": "cars",
        "question_en": "How many models of Ford Maverick were produced?",
        "question_ar": "",
        "evidence_en": "Ford Maverick refers to car_name = 'ford maverick'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the percentage of cars that belong to the USA.",
        "question_ar": "",
        "evidence_en": "belong to the USA refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the average production rate per year from 1971 to 1980. Among them, name the cars with a weight of fewer than 1800 lbs.",
        "question_ar": "",
        "evidence_en": "from 1971 to 1980 refers to model_year between 1971 and 1980; average production rate per year = divide(count(ID where model_year between 1971 and 1980), 9); car's name refers to car_name; a weight of fewer than 1800 lbs refers to weight < 1800",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.ID) AS REAL) / 9 FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 UNION ALL SELECT DISTINCT T2.car_name FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 AND T2.weight < 1800"
    },
    {
        "db_id": "cars",
        "question_en": "What is the average price of model 70 cars?",
        "question_ar": "",
        "evidence_en": "model 70 refers to model = 70; average price = avg(price) where model = 70",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.model = 70"
    },
    {
        "db_id": "cars",
        "question_en": "What is the price of Chevrolet Vega 2300?",
        "question_ar": "",
        "evidence_en": "Chevrolet Vega 2300 refers to car_name = 'chevrolet vega 2300'",
        "evidence_ar": "",
        "SQL": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet vega 2300'"
    },
    {
        "db_id": "cars",
        "question_en": "Which country does Chevy C20 come from?",
        "question_ar": "",
        "evidence_en": "Chevy C20 refers to car_name = 'chevy c20'",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'"
    },
    {
        "db_id": "cars",
        "question_en": "List the price of Ford cars from model 1970 to 1980.",
        "question_ar": "",
        "evidence_en": "Ford cars refers to car_name LIKE 'ford%'; from model 1970 to 1980 refers to model_year BETWEEN 1970 AND 1980",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.price FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID WHERE T1.car_name LIKE 'ford%' AND T2.model_year BETWEEN 1970 AND 1980"
    },
    {
        "db_id": "cars",
        "question_en": "Which is the most fuel efficient car in 1975?",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; the most fuel efficient refers to max(mpg); in 1975 refers to model_year = 1975",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = '1975' ORDER BY T1.mpg DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "Which car consumes fuel the most and has the highest price?",
        "question_ar": "",
        "evidence_en": "consumes fuel the most refers to min(mpg); has the highest price refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How many American cars have an acceleration time of less than 12 seconds?",
        "question_ar": "",
        "evidence_en": "American car refers to country = 'USA'; an acceleration time of less than 12 seconds refers to acceleration < 12",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.acceleration < 12"
    },
    {
        "db_id": "cars",
        "question_en": "How many Japanese cars weigh more than 2000 lbs?",
        "question_ar": "",
        "evidence_en": "Japanese car refers to country = 'Japan'; weigh more than 2000 lbs refers to weight > 2000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' AND T1.weight > 2000"
    },
    {
        "db_id": "cars",
        "question_en": "List the name of the most expensive car.",
        "question_ar": "",
        "evidence_en": "car's name refers to car_name; the most expensive refers to max(price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "What years did the Buick Skylark 320 get in production?",
        "question_ar": "",
        "evidence_en": "year refers to model_year; Buick Skylark 320 refers to car_name = 'buick skylark 320'",
        "evidence_ar": "",
        "SQL": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'buick skylark 320'"
    },
    {
        "db_id": "cars",
        "question_en": "Which country produced the most expensive car in 1970?",
        "question_ar": "",
        "evidence_en": "the most expensive refers to max(price); in 1970 refers to model_year = 1970",
        "evidence_ar": "",
        "SQL": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN price AS T4 ON T4.ID = T1.ID WHERE T2.model_year = 1970 ORDER BY T4.price DESC LIMIT 1"
    },
    {
        "db_id": "cars",
        "question_en": "How many cars with horsepower greater than 200 were produced in 1975?",
        "question_ar": "",
        "evidence_en": "horsepower greater than 200 refers to horsepower > 200; in 1975 refers to model_year = 1975",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower > 200 AND T2.model_year = 1975"
    },
    {
        "db_id": "cars",
        "question_en": "Calculate the percentage of American cars among all cars.",
        "question_ar": "",
        "evidence_en": "American car refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country"
    },
    {
        "db_id": "cars",
        "question_en": "What is the average weight of Japanese cars with 4 cylinders that were produced from 1975 to 1980?",
        "question_ar": "",
        "evidence_en": "Japanese car refers to country = 'Japan'; with 4 cylinders refers to cylinders = 4; produced from 1975 to 1980 refers to model_year BETWEEN 1975 AND 1980; average weight = avg(weight)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.weight) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year BETWEEN 1975 AND 1980 AND T1.cylinders = 4 AND T3.country = 'Japan'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total amount of donations in 2012.",
        "question_ar": "",
        "evidence_en": "total amount of donations refers to sum(donation_total); 2012 refers to donation_timestamp LIKE'2012%'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2012%'"
    },
    {
        "db_id": "donor",
        "question_en": "When was the highest amount of donated? How much was the amount?",
        "question_ar": "",
        "evidence_en": "when refers donation_timestamp; the highest amount refers to max(donation_total)",
        "evidence_ar": "",
        "SQL": "SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )"
    },
    {
        "db_id": "donor",
        "question_en": "Calculate the total amount of donations made in 2011 for an honoree with payment via campaign page.",
        "question_ar": "",
        "evidence_en": "total amount refers to sum(donation_total); 2011 refers to donation_timestamp LIKE'2011%'; honoree refers to for_honoree = 't'; via campaign page refers to via_giving_page = 't'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2011%' AND via_giving_page = 't' AND for_honoree = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.",
        "question_ar": "",
        "evidence_en": "not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%",
        "evidence_ar": "",
        "SQL": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'"
    },
    {
        "db_id": "donor",
        "question_en": "Name all the project titles whereby project materials are intended mainly for literary.",
        "question_ar": "",
        "evidence_en": "intended mainly for literary refers to primary_focus_subject = 'Literacy'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'"
    },
    {
        "db_id": "donor",
        "question_en": "Name the project titles meant for school whereby 65% of the students are on reduced lunch.",
        "question_ar": "",
        "evidence_en": "65% of the students are on reduced lunch refers to poverty_level = 'highest poverty'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level LIKE 'highest%'"
    },
    {
        "db_id": "donor",
        "question_en": "For project titled 'Toot Your Flute!', what is the main subject of the project materials intended for? Name the other projects with the similar focus.",
        "question_ar": "",
        "evidence_en": "main subject refers to primary_focus_subject",
        "evidence_ar": "",
        "SQL": "SELECT T2.primary_focus_subject FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Toot Your Flute!'"
    },
    {
        "db_id": "donor",
        "question_en": "Name the project titles created by teacher who acquired a doctor degree.",
        "question_ar": "",
        "evidence_en": "teacher who acquired a doctor degree refers to teacher_prefix = 'Dr.'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.",
        "question_ar": "",
        "evidence_en": "320 students will be impacted refers to students_reached = 320; name the project refers to title; project cost refers tp total_price_excluding_optional_support",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320"
    },
    {
        "db_id": "donor",
        "question_en": "For all donors from Texas City, list their donation message and name of the project they donated to.",
        "question_ar": "",
        "evidence_en": "from Texas City refers to donor_city = 'Texas City'; name of the project refers title",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_message, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donor_city = 'Texas City'"
    },
    {
        "db_id": "donor",
        "question_en": "Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each.",
        "question_ar": "",
        "evidence_en": "project 'Lights, Camera, Action!' refers to title = 'Lights, Camera, Action!'",
        "evidence_ar": "",
        "SQL": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'"
    },
    {
        "db_id": "donor",
        "question_en": "How much donations have been collected for project 'Whistle While We Work!'?",
        "question_ar": "",
        "evidence_en": "donations collected refers to sum(donation_to_project); project 'Whistle While We Work!' refers to title = 'Whistle While We Work!'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'"
    },
    {
        "db_id": "donor",
        "question_en": "Name and describe all projects created by New York teachers.",
        "question_ar": "",
        "evidence_en": "project name refers to title; describe refers to short_description; New York teachers refers to teacher_ny_teaching_fellow = 't'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.short_description FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_ny_teaching_fellow = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "If funded, which are the projects that could impact at least 600 students for a school with moderate level of poverty? Name the projects and state the project cost.",
        "question_ar": "",
        "evidence_en": "impact at least 600 students refers to students_reached > = 600; moderate level of poverty refers to poverty_level = 'moderate poverty'; project name refers to title; project cost refers to total_price_excluding_optional_support",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title, T1.total_price_excluding_optional_support FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached >= 600 AND T1.poverty_level LIKE 'moderate poverty'"
    },
    {
        "db_id": "donor",
        "question_en": "From the total amount of donation to projects, what is the percentage of the amount is for school projects located in the rural area?",
        "question_ar": "",
        "evidence_en": "located in the rural area refers to school_metro = 'rural'; percentage = divide(sum(donation_to_project), sum(donation_to_project where school_metro = 'rural'))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.school_metro = 'rural' THEN T1.donation_to_project ELSE 0 END) AS REAL) * 100 / SUM(donation_to_project) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid"
    },
    {
        "db_id": "donor",
        "question_en": "Name the project that costs the most. How much has been collected from donation and what is the percentage amount still lacking?",
        "question_ar": "",
        "evidence_en": "project name refers to title; costs the most refers to max(total_price_excluding_optional_support); amount collected from donation refers to sum(donation_to_project); percentage amount refers to divide(subtract(total_price_excluding_optional_support, sum(donation_to_project)), sum(donation_to_project))*100%",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, SUM(T3.donation_to_project), CAST((T2.total_price_excluding_optional_support - SUM(T3.donation_to_project)) AS REAL) * 100 / SUM(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T2.total_price_excluding_optional_support DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools in the West New York School District have the highest poverty level?",
        "question_ar": "",
        "evidence_en": "the highest poverty level refers to poverty_level = 'highest poverty'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(poverty_level) FROM projects WHERE school_district = 'West New York School District' AND poverty_level = 'highest poverty'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donations from teachers were done in the state of Colorado?",
        "question_ar": "",
        "evidence_en": "from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'"
    },
    {
        "db_id": "donor",
        "question_en": "Which project have the highest total price including optional support? Indicate the project id.",
        "question_ar": "",
        "evidence_en": "highest total price including optional support refers to max(total_price_including_optional_support)",
        "evidence_ar": "",
        "SQL": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Which state have the highest number of PayPal donations for an honoree whose portion of a donation included corporate sponsored giftcard?",
        "question_ar": "",
        "evidence_en": "which state refers to donor_state; highest number refers to max(count(donor_state)); PayPal donations refers to payment_method = 'paypal'; for an honoree refers to for_honoree = 't'; included corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT donor_state FROM donations WHERE for_honoree = 't' AND payment_included_campaign_gift_card = 't' AND payment_method = 'paypal' AND donor_state = ( SELECT donor_state FROM donations GROUP BY donor_state ORDER BY SUM(donation_total) DESC LIMIT 1 )"
    },
    {
        "db_id": "donor",
        "question_en": "Who is the largest donor by amount? Give the donation id and the total amount of the donation.",
        "question_ar": "",
        "evidence_en": "largest donor by amount refers to max(donation_total); total amount of the donation refers to donation_total",
        "evidence_ar": "",
        "SQL": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the id of the project that has the highest optional tip? Indicate the names of the resources that were requested.",
        "question_ar": "",
        "evidence_en": "highest optional tip refers to subtract(total_price_including_optional_support, total_price_excluding_optional_support); names of the resources refers to item_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_excluding_optional_support DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What were the resources that were requested by the teacher for project \"d6ef27c07c30c81f0c16c32b6acfa2ff\"? Indicate the quantities as well and whether or not the teacher acquired P.h.D or doctor degree.",
        "question_ar": "",
        "evidence_en": "resources that were requested refers to item_name; project \"d6ef27c07c30c81f0c16c32b6acfa2ff\" refers to projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'; quantities refers to item_quantity; teacher_prefix = 'Dr. ' refers to teacher acquired P.h.D or doctor degree",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.item_name, T1.item_quantity, T2.teacher_prefix FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total price including optional support received by the teacher who posted the essay titled \"Recording Rockin' Readers\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.total_price_including_optional_support) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Recording Rockin'' Readers'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the latitude and longitude of the school where the teacher who wrote \"Smile for the Camera!!!\" teaches?",
        "question_ar": "",
        "evidence_en": "wrote \"Smile for the Camera!!!\" refers to title = 'Smile for the Camera!!!'; latitude refers to school_latitude; longitude refers to school_longitude",
        "evidence_ar": "",
        "SQL": "SELECT T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Smile for the Camera!!!'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total amount of all the donations made by the donor who made the highest donation in a single amount? Indicate the essay title to where he/she made his/her biggest donation.",
        "question_ar": "",
        "evidence_en": "total amount of all the donations refers to sum(donation_total); highest donation refers to max(donation_total)",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_total, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )"
    },
    {
        "db_id": "donor",
        "question_en": "What are the favorite project types of each of the top 10 donors?",
        "question_ar": "",
        "evidence_en": "favorite project type refers to project_resource_type; top donors refers to max(donation_total)",
        "evidence_ar": "",
        "SQL": "SELECT project_resource_type FROM ( SELECT T1.donor_acctid, T3.project_resource_type FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid ORDER BY T1.donation_total DESC LIMIT 10 ) GROUP BY project_resource_type ORDER BY COUNT(project_resource_type) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "When was the first ever project went live on the site and what were the names of the resources being requested? If there are multiple projects that have the same date, indicate each of them and their items.",
        "question_ar": "",
        "evidence_en": "first ever project refers to min(date_posted); names of the resources refers to item_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.date_posted, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.date_posted = ( SELECT date_posted FROM projects ORDER BY date_posted ASC LIMIT 1 )"
    },
    {
        "db_id": "donor",
        "question_en": "What is the name of the vendor that supplies resources to the project \"iMath\"?",
        "question_ar": "",
        "evidence_en": "project \"iMath\" refers to title = 'iMath'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN essays AS T3 ON T1.projectid = T3.projectid WHERE T3.title = 'iMath'"
    },
    {
        "db_id": "donor",
        "question_en": "When was the project with the highest quantity went live on the site? Indicate the grade level for which the project materials are intended.",
        "question_ar": "",
        "evidence_en": "project with the highest quantity refers to max(item_quantity)",
        "evidence_ar": "",
        "SQL": "SELECT T2.date_posted, T2.grade_level FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T1.item_quantity DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the average amount of donations by people who donated in the project \"Recording Rockin' Readers\"",
        "question_ar": "",
        "evidence_en": "average amount of donations = divide(sum(donation_to_project), count(donor_acctid)); project \"Recording Rockin' Readers\" refers to title = 'Recording Rockin' Readers'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Recording Rockin'' Readers'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the essay title of the project that have the highest total price excluding optional support and who is the biggest donor? Identify the donor and calculate how many percent did he/she donated in the project.",
        "question_ar": "",
        "evidence_en": "highest total price excluding optional support refers to max(total_price_excluding_optional_support); who refers to donor_acctid; percent = divide(donation_to_project, total_price_excluding_optional_support)*100%",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T3.donor_acctid, CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T3.donation_to_project DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "From which state do the 5 biggest donor, who gave the highest cost of optional support, come from? List their donor_acctid and calculate for their average cost of optional support for every donations they make and identtify the project's type of resource to which they gave the hightest optional support.",
        "question_ar": "",
        "evidence_en": "which state refers to school_state; highest cost of optional support refers to max(donation_optional_support); average cost of optional support = avg(donation_optional_support)",
        "evidence_ar": "",
        "SQL": "SELECT T1.school_state, T2.donor_acctid, AVG(T2.donation_optional_support), T1.resource_type FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid ORDER BY T2.donation_optional_support DESC LIMIT 5"
    },
    {
        "db_id": "donor",
        "question_en": "Which project in Brooklyn that have the highest request of resources? State the the project ID including all of the name of item requested.",
        "question_ar": "",
        "evidence_en": "in Brooklyn refers to school_city = 'Brooklyn'; highest request of resources refers to max(count(T1.item_name))",
        "evidence_ar": "",
        "SQL": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_city LIKE 'Brooklyn' GROUP BY T1.item_name ORDER BY COUNT(T1.item_name) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools in urban area requested for books resources?",
        "question_ar": "",
        "evidence_en": "urban area refers to school_metro = 'urban'; books resources refers to project_resource_type = 'Books'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.resource_type = 'Books' AND T2.school_metro = 'urban'"
    },
    {
        "db_id": "donor",
        "question_en": "Which school requested the highest amount of resources from Amazon? State the school's ID.",
        "question_ar": "",
        "evidence_en": "highest amount of resources refers to max(count(schoolid)); Amazon refers to vendor_name = 'Amazon'",
        "evidence_ar": "",
        "SQL": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name LIKE 'Amazon' GROUP BY T2.schoolid ORDER BY COUNT(T1.vendor_name) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "How many donors in Los Angeles donated to school in another city?",
        "question_ar": "",
        "evidence_en": "in Los Angeles refers to donor_city = 'Los Angeles'; school in another city refers to school_city ! = 'Los Angeles'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.schoolid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_city = 'Los Angeles' AND T2.school_city NOT LIKE 'Los Angeles'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the prefix for the teacher who handled the 'Reading About Other Cultures' project?",
        "question_ar": "",
        "evidence_en": "Reading About Other Cultures' project refers to title = 'Reading About Other Cultures'; prefix for the teacher refers to teacher_prefix",
        "evidence_ar": "",
        "SQL": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Reading About Other Cultures'"
    },
    {
        "db_id": "donor",
        "question_en": "How many students will be impacted for the Fit Firsties! Project?",
        "question_ar": "",
        "evidence_en": "how many students refers to students_reached; Fit Firsties! project refers to title = 'Fit Firsties!'",
        "evidence_ar": "",
        "SQL": "SELECT T2.students_reached FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Fit Firsties!'"
    },
    {
        "db_id": "donor",
        "question_en": "List the title of all projects located in Chicago along with the ID of the donor.",
        "question_ar": "",
        "evidence_en": "in Chicago refers to school_city = 'Chicago'; ID of the donor refers to donor_acctid",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T3.donor_acctid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city LIKE 'Chicago'"
    },
    {
        "db_id": "donor",
        "question_en": "Which projects created by teachers with Doctor Degree where the project have more than 300 students involved. List down the title of the project.",
        "question_ar": "",
        "evidence_en": "eachers with Doctor Degree refers to teacher_prefix = 'Dr.'; more than 300 students involved refers to students_reached > 300",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_prefix LIKE 'Dr.' AND T2.students_reached > 300"
    },
    {
        "db_id": "donor",
        "question_en": "State the name of vendor that supplies book resources to all school with literacy subject as their primary focus.",
        "question_ar": "",
        "evidence_en": "literacy subject as primary focus refers to primary_focus_subject = 'Literacy'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject LIKE 'Literacy'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the title of project that have the most expensive funds?",
        "question_ar": "",
        "evidence_en": "the most expensive funds refers to max(multiply(item_unit_price, item_quantity))",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.projectid = ( SELECT projectid FROM resources ORDER BY item_unit_price * item_quantity DESC LIMIT 1 )"
    },
    {
        "db_id": "donor",
        "question_en": "Among all the donors from New York, how many of them are teachers?",
        "question_ar": "",
        "evidence_en": "from New York refers to donor_city = 'New York'; donor is a teacher refers to is_teacher_acct = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_city = 'New York'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donors from New Jersey have made a donation for an honoree?",
        "question_ar": "",
        "evidence_en": "from New Jersey refers to donor_state = 'NJ'; for an honoree refers to for_honoree = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5'"
    },
    {
        "db_id": "donor",
        "question_en": "Please list the types of resources that the vendor Lakeshore Learning Materials has provided for the projects.",
        "question_ar": "",
        "evidence_en": "Lakeshore Learning Materials is vendor_name; type of resources refers to project_resource_type;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the name of the item that is provided in the biggest amount by the vendor Lakeshore Learning Materials?",
        "question_ar": "",
        "evidence_en": "lakeshore Learning Materials is vendor_name; biggest amount refers to Max(item_quantity);",
        "evidence_ar": "",
        "SQL": "SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Among the projects created by a teacher from New York, how many of them have a donor from the same city?",
        "question_ar": "",
        "evidence_en": "New York is the donor city; donor from the same city refers to donor from New York in which teacher_ny_teaching_fellow = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_ny_teaching_fellow = 't' AND T2.donor_city = 'New York'"
    },
    {
        "db_id": "donor",
        "question_en": "How many projects have their resources provided by the vendor Lakeshore Learning Materials and are created by a teacher with a doctor degree?",
        "question_ar": "",
        "evidence_en": "Lakeshore Learning Materials is vendor_name;  teacher with a doctor degree refers to teacher_prefix = 'Dr.';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' AND T2.teacher_prefix = 'Dr.'"
    },
    {
        "db_id": "donor",
        "question_en": "Please list the vendor providing resources for the projects of a school with the highest poverty level.",
        "question_ar": "",
        "evidence_en": "highest poverty level refers to poverty_level = 'highest poverty';",
        "evidence_ar": "",
        "SQL": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level = 'highest poverty'"
    },
    {
        "db_id": "donor",
        "question_en": "Of the projects whose resources are provided by the vendor Lakeshore Learning Materials, the school of which project has the highest cost of labor fulfillment? Please give its school ID.",
        "question_ar": "",
        "evidence_en": "Lakeshore Learning Materials is vendor_name; highest cost of labor fulfillment refers to Max(fulfillment_labor_materials);",
        "evidence_ar": "",
        "SQL": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' ORDER BY T2.fulfillment_labor_materials DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Who is the vendor of the resources needed by the project that had the highest cost of optional tip?",
        "question_ar": "",
        "evidence_en": "Highest cost of the optional tip refers to Max(total_price_including_optional_support - total_price_excluding_optional_support);",
        "evidence_ar": "",
        "SQL": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_including_optional_support DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total donated amount for projects created by a teacher working in a school in Brooklyn?",
        "question_ar": "",
        "evidence_en": "school in Brooklyn refers to school_city = 'Brooklyn'; total donated amount refers to donation_total;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_total) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'"
    },
    {
        "db_id": "donor",
        "question_en": "Please list the donation messages of the donations for the projects created by a teacher working in a public magnet school in Brooklyn.",
        "question_ar": "",
        "evidence_en": "school in Brooklyn refers to school_city = 'Brooklyn'; public magnet refers to school_magnet = 't';",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_message FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn' AND T1.school_magnet = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "Among the donations with a portion using account credits redemption, how many of them are for projects created by teachers working in a public year-round school?",
        "question_ar": "",
        "evidence_en": "portion using account credits redemption refers to payment_included_acct_credit = 't'; year-round school refers to school_year_round = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_acct_credit = 't' AND T1.school_year_round = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total donation amount made for projects whose main subject area are Literacy & Language?",
        "question_ar": "",
        "evidence_en": "main subject area refers to primary_focus_area = 'Literacy & Language'; total donation amount refers to Sum(dollar_amount);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language'"
    },
    {
        "db_id": "donor",
        "question_en": "Which donor has donated the most for a project whose main subject area is Literacy & Language? Please give his or her ID.",
        "question_ar": "",
        "evidence_en": "main subject area refers to primary_focus_area = 'Literacy & Language'; donated the most refers to Max(donation_total);",
        "evidence_ar": "",
        "SQL": "SELECT T2.donor_acctid FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language' ORDER BY T2.donation_total DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the most requested item under the resource type \"Supplies\" for projects whose main subject area is Literacy & Language?",
        "question_ar": "",
        "evidence_en": "main subject area refers to primary_focus_area = 'Literacy & Language'; resource type supplies refers to project_resource_type = 'Supplies'; most requested item refers to Max(item_quantity);",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' AND T1.project_resource_type = 'Supplies' ORDER BY T1.item_quantity DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Which item provided to a project whose main subject area is Literacy & Language has the highest unit price?",
        "question_ar": "",
        "evidence_en": "main subject area refers to primary_focus_area = 'Literacy & Language'; highest unit price refers to Max(item_unit_price);",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' ORDER BY T1.item_unit_price DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the average donation amount to a project created by a teacher working in a school in Brooklyn?",
        "question_ar": "",
        "evidence_en": "school in Brooklyn refers to school_city = 'Brooklyn'; Average = AVG(donation_total);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_total) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'"
    },
    {
        "db_id": "donor",
        "question_en": "To which city did donor “22cbc920c9b5fa08dfb331422f5926b5” donate?",
        "question_ar": "",
        "evidence_en": "donor “22cbc920c9b5fa08dfb331422f5926b5” refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; city refers to donor_city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'"
    },
    {
        "db_id": "donor",
        "question_en": "Is donor “22cbc920c9b5fa08dfb331422f5926b5” a teacher?",
        "question_ar": "",
        "evidence_en": "donor “22cbc920c9b5fa08dfb331422f5926b5” refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; is a teacher refers to is_teacher_acct;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'"
    },
    {
        "db_id": "donor",
        "question_en": "Have the teacher \"42d43fa6f37314365d08692e08680973\" acquired P.h.D or doctor degree?",
        "question_ar": "",
        "evidence_en": "teacher \"42d43fa6f37314365d08692e08680973\" refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'NO' END FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'"
    },
    {
        "db_id": "donor",
        "question_en": "Is teacher \"42d43fa6f37314365d08692e08680973\" a New York teacher?",
        "question_ar": "",
        "evidence_en": "teacher \"42d43fa6f37314365d08692e08680973\"refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';",
        "evidence_ar": "",
        "SQL": "SELECT teacher_ny_teaching_fellow end FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'"
    },
    {
        "db_id": "donor",
        "question_en": "Please list the titles of projects by which schools in Abington was donated.",
        "question_ar": "",
        "evidence_en": "Abington is school_city;",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city LIKE 'Abington'"
    },
    {
        "db_id": "donor",
        "question_en": "Please list the resource names of project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created.",
        "question_ar": "",
        "evidence_en": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'"
    },
    {
        "db_id": "donor",
        "question_en": "Among the schools' projects whose donation didn't use account credits redemption,how many schools are public magnet schools?",
        "question_ar": "",
        "evidence_en": "donation didn't use account credits redemption refers to payment_included_acct_credit = 'f'; magnet school refers to school_magnet = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_magnet = 't' AND T2.payment_included_acct_credit = 'f'"
    },
    {
        "db_id": "donor",
        "question_en": "Please provide the type of resource that donation \"b39547f29dfc25fb13c6e9e8d940dc43\" contain.",
        "question_ar": "",
        "evidence_en": "donation \"b39547f29dfc25fb13c6e9e8d940dc43\" refers to donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'; type of resource refers to project_resource_type;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T3.donationid LIKE 'b39547f29dfc25fb13c6e9e8d940dc43'"
    },
    {
        "db_id": "donor",
        "question_en": "Among public magnet schools,what percentage of schools that receive the donated resources as books?",
        "question_ar": "",
        "evidence_en": "magnet school refers to school_magnet = 't'; donated resources as books refers to project_resource_type = 'Books'; percentage = Divide(Count(projectid) where project_resource_type = 'Books', Count(projectid))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.project_resource_type = 'Books' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "In the schools donated by the project of the resources provided by ABC School Supply, how many schools are public magnet schools?",
        "question_ar": "",
        "evidence_en": "ABC School Supply is vendor_name;  public magnet school refers to school_magnet = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't' AND T1.vendor_name = 'ABC School Supply'"
    },
    {
        "db_id": "donor",
        "question_en": "Among the schools donated by donor \"000eebf28658900e63b538cf8a73afbd\",how many schools whose poverty level are highest?",
        "question_ar": "",
        "evidence_en": "donor \"000eebf28658900e63b538cf8a73afbd\" refers to donor_acctid = '000eebf28658900e63b538cf8a73afbd'; highest poverty level refers to poverty_level = 'highest poverty';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.poverty_level = 'highest poverty' AND T2.donor_acctid = '000eebf28658900e63b538cf8a73afbd'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the short description of the project that gives donation to school “301c9bf0a45d159d162b65a93fddd74e”?",
        "question_ar": "",
        "evidence_en": "school “301c9bf0a45d159d162b65a93fddd74e\" refers to schoolid = '301c9bf0a45d159d162b65a93fddd74e';",
        "evidence_ar": "",
        "SQL": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'"
    },
    {
        "db_id": "donor",
        "question_en": "Which city does the school that project \"iMath\" donated to in?",
        "question_ar": "",
        "evidence_en": "iMath is the title; city refers to school_city;",
        "evidence_ar": "",
        "SQL": "SELECT T1.school_city FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'iMath'"
    },
    {
        "db_id": "donor",
        "question_en": "How to pay the donation of the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created?",
        "question_ar": "",
        "evidence_en": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; how to pay the donation refers to payment_method;",
        "evidence_ar": "",
        "SQL": "SELECT T2.payment_method FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'"
    },
    {
        "db_id": "donor",
        "question_en": "How much did the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created donate?",
        "question_ar": "",
        "evidence_en": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; donated refers to donation_total;",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_total FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'"
    },
    {
        "db_id": "donor",
        "question_en": "Is the donor who donated to school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" a teacher?",
        "question_ar": "",
        "evidence_en": "school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" refers to schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'; donor is a teacher refers to is_teacher_acct = 't';",
        "evidence_ar": "",
        "SQL": "SELECT T2.is_teacher_acct FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'"
    },
    {
        "db_id": "donor",
        "question_en": "Among the schools whose donators are teachers, what is the percentage of schools that are in Brooklyn?",
        "question_ar": "",
        "evidence_en": "donors are teachers refers to is_teacher_acct = 't'; Brooklyn is school_city; percentage = Divide(Count(school_city-'Brooklyn'),Count(school_city))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.school_city LIKE 'Brooklyn' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "Among the projects whose donators are teachers, what is the percentage of projects that affected more than 30 students?",
        "question_ar": "",
        "evidence_en": "donors are teachers refers to is_teacher_acct = 't'; affect more than 30 students refers to students_reached>30; Percentage = Divide(Count(students_reached>30), Count(students_reached))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.students_reached > 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools which have suburban metro are there in Bethlehem?",
        "question_ar": "",
        "evidence_en": "Bethlehem is school_city; suburban metro refers to school_metro = 'suburban';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(schoolid) FROM projects WHERE school_city = 'Bethlehem' AND school_metro = 'suburban'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the number of the year round school in Los Angeles?",
        "question_ar": "",
        "evidence_en": "Los Angeles is school_city; year-round school refers to school_year_round = 't';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(school_year_round) FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "State the number of public magnet schools in New York Manhattan.",
        "question_ar": "",
        "evidence_en": "public magnet school refers to school_magnet = 't'; in New York Manhattan refers to school_country = 'New York(Manhattan)';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(schoolid) FROM projects WHERE school_county = 'New York (Manhattan)' AND school_magnet = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "How many teachers in Twin Falls have Math & Science as their primary focus area?",
        "question_ar": "",
        "evidence_en": "Twin Falls is school_country; 'Math & Science' is primary_focus_area;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(teacher_acctid) FROM projects WHERE school_county = 'Twin Falls' AND primary_focus_area = 'Math & Science'"
    },
    {
        "db_id": "donor",
        "question_en": "How many teachers that have Literature & Writing as their primary focus subject use 'Mr' as their teacher prefix?",
        "question_ar": "",
        "evidence_en": "Literature & Writing' is primary_focus_subject; use 'Mr' as their teacher prefix refers to teacher_prefix = 'Mr';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(teacher_acctid) FROM projects WHERE teacher_prefix = 'Mr.' AND primary_focus_subject = 'Literature & Writing'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total number of projects that was created by the teachers that teach 3-5 grades in Boston Public School District?",
        "question_ar": "",
        "evidence_en": "teach 3-5 grades refers to grade_level = 'Grades 3-5'; 'Boston Public School District' is school_district;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5'"
    },
    {
        "db_id": "donor",
        "question_en": "For the teacher who wrote the project 'ABC Read', which city was he/she in?",
        "question_ar": "",
        "evidence_en": "ABC Read' is the title; city refers to school_city",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_city FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'ABC Read'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?",
        "question_ar": "",
        "evidence_en": "Creating Memories and Inspiring Dreams is title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Creating Memories and Inspiring Dreams%'"
    },
    {
        "db_id": "donor",
        "question_en": "Is the donor of the project 'Calculate, Financial Security For Tomorrow Starts Today! ' a teacher?",
        "question_ar": "",
        "evidence_en": "Calculate, Financial Security For Tomorrow Starts Today! ' is title; donor is a teacher refers to is_teacher_acct = 't'",
        "evidence_ar": "",
        "SQL": "SELECT T2.is_teacher_acct FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Calculate, Financial Security For Tomorrow Starts Today! '"
    },
    {
        "db_id": "donor",
        "question_en": "What is the title for the project that got the donation message as \"Donation on behalf of Matt Carpenter because I'm a strong believer in education\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'"
    },
    {
        "db_id": "donor",
        "question_en": "How many number of donations did the project 'A Rug For Reaching Readers' get?",
        "question_ar": "",
        "evidence_en": "A Rug For Reaching Readers'is the title;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'A Rug For Reaching Readers'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total donation amount for the project 'Engaging Young Readers with a Leveled Classroom Library'?",
        "question_ar": "",
        "evidence_en": "Engaging Young Readers with a Leveled Classroom Library' is the title; total donation amount = Add(donation_to_project, donation_optional_support)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_to_project) + SUM(T2.donation_optional_support) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Engaging Young Readers with a Leveled Classroom Library '"
    },
    {
        "db_id": "donor",
        "question_en": "What was the donation optional support amount for the project 'Armenian Genocide'?",
        "question_ar": "",
        "evidence_en": "Armenian Genocide' is the title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Armenian Genocide'"
    },
    {
        "db_id": "donor",
        "question_en": "State the short description for the project which got the donation at 14:44:29 on 2012/9/6.",
        "question_ar": "",
        "evidence_en": "donation at 14:44:29 on 2012/9/6 refers to donation_timestamp = '2012/9/6 14:44:29';",
        "evidence_ar": "",
        "SQL": "SELECT T1.short_description FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2012-09-06 14:44:29'"
    },
    {
        "db_id": "donor",
        "question_en": "Did the project 'I Can't See It...Can You Help Me???' get the tip for the donation?",
        "question_ar": "",
        "evidence_en": "I Can't See It...Can You Help Me???' is the title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.donation_included_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'I Can''t See It...Can You Help Me???'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ?",
        "question_ar": "",
        "evidence_en": "donation at 11:38:43 on 2008/7/29 refers to donation_timestamp = '2008/7/29 11:38:43'; teacher's account ID refers to teacher_acctid;",
        "evidence_ar": "",
        "SQL": "SELECT T1.teacher_acctid FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2008-07-29 11:38:43.361'"
    },
    {
        "db_id": "donor",
        "question_en": "Show the school id for the project 'Virtual Aquarium Needs Help!'.",
        "question_ar": "",
        "evidence_en": "Virtual Aquarium Needs Help!' is the title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.schoolid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Virtual Aquarium Needs Help!'"
    },
    {
        "db_id": "donor",
        "question_en": "What was the title for the project which got the biggest donation?",
        "question_ar": "",
        "evidence_en": "biggest donation refers to donation_total = 'max';",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )"
    },
    {
        "db_id": "donor",
        "question_en": "For the donation of the project 'Awesome Audiobooks Make Avid Readers', what was the percentage of the tip in the total amount?",
        "question_ar": "",
        "evidence_en": "Awesome Audiobooks Make Avid Readers' is the title; percentage = Divie(donation_optional_support, donation_total)*100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.donation_optional_support) AS REAL) * 100 / SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Awesome Audiobooks Make Avid Readers'"
    },
    {
        "db_id": "donor",
        "question_en": "For the all donations to the project 'Bringing Drama to Life', what is the percentage of the donation is paid by credit card?",
        "question_ar": "",
        "evidence_en": "Bringing Drama to Life' is the title; Percentage = Divide(Count(payment_method = 'creditcard'), Count(projectid))*100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.payment_method LIKE 'creditcard' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Bringing Drama to Life'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the short description for the title Future Einsteins Of America?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America'"
    },
    {
        "db_id": "donor",
        "question_en": "Write down the need statement of Family History Project.",
        "question_ar": "",
        "evidence_en": "Family History Project refer to title, need statement refer to need_statement",
        "evidence_ar": "",
        "SQL": "SELECT need_statement FROM essays WHERE title = 'Family History Project'"
    },
    {
        "db_id": "donor",
        "question_en": "How many suburban metros are there in Livingston Parish School District?",
        "question_ar": "",
        "evidence_en": "suburban metros refer to metro = 'suburban'; Livingston Parish School District refer to school_district",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Livingston Parish School Dist' AND school_metro = 'suburban'"
    },
    {
        "db_id": "donor",
        "question_en": "Name the vendors that sell the item Classroom Keepers Management Center.",
        "question_ar": "",
        "evidence_en": "vendor refer to vendor_name; Classroom Keepers Management Center refer to item_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT vendor_name FROM resources WHERE item_name = 'Classroom Keepers Management Center'"
    },
    {
        "db_id": "donor",
        "question_en": "List the resource types available at Sax Arts & Crafts.",
        "question_ar": "",
        "evidence_en": "Sax Arts & Crafts refer to vendor_name; resource type available refer to project_resource_type\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Sax Arts & Crafts'"
    },
    {
        "db_id": "donor",
        "question_en": "Which school county in the state of New York has a high number of low poverty levels?",
        "question_ar": "",
        "evidence_en": "New York refer to school_state = NY; highest number of low poverty level refer to MAX(poverty level = ’low poverty’)",
        "evidence_ar": "",
        "SQL": "SELECT school_county FROM projects WHERE poverty_level = 'low poverty' AND school_state = 'NY' GROUP BY school_state ORDER BY COUNT(poverty_level) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Which school district was Future Einsteins Of America project located at?",
        "question_ar": "",
        "evidence_en": "Future Einsteins of America refer to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.school_district FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Future Einsteins Of America'"
    },
    {
        "db_id": "donor",
        "question_en": "What payment method was used for Needed Resource Materials For My Students?",
        "question_ar": "",
        "evidence_en": "Needed Resource Materials For My Students refer to title",
        "evidence_ar": "",
        "SQL": "SELECT T3.payment_method FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Needed Resource Materials For My Students'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donations were paid via credit card to Memphis City School District?",
        "question_ar": "",
        "evidence_en": "paid via credit card refer to payment method = creditcard; Memphis City School District refer to school_district",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.projectid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_method = 'creditcard' AND T2.school_district = 'Memphis City School District'"
    },
    {
        "db_id": "donor",
        "question_en": "List the school districts that have bought resources from Barnes and Noble.",
        "question_ar": "",
        "evidence_en": "Barnes and Noble refer to vendor_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_district FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Barnes and Noble'"
    },
    {
        "db_id": "donor",
        "question_en": "Give the coordinates of the buyer of R & A Plant Genetics from Benchmark Education.",
        "question_ar": "",
        "evidence_en": "coordinates refer to (school_latitude, school_longitude); R & A Plant Genetics refer to item_name; Benchmark Education refer to vendor_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'R & A Plant Genetics' AND T1.vendor_name = 'Benchmark Education'"
    },
    {
        "db_id": "donor",
        "question_en": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?",
        "question_ar": "",
        "evidence_en": "Georgia refer to school_state = 'GA'\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What are the coordinates of the school where project 'Look, Look, We Need a Nook!' Was donated to and what resource type is it?",
        "question_ar": "",
        "evidence_en": "Coordinates of the school refer to school_latitude, school_longitude); Look, Look, We Need a Nook! Refer to title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_latitude, T2.school_longitude, T2.resource_type FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Look, Look, We Need a Nook!'"
    },
    {
        "db_id": "donor",
        "question_en": "Write the messages of those who donated to the Newark School District in the coordinates of 40.735332, -74.196014.",
        "question_ar": "",
        "evidence_en": "message refer to donation_message; Newark School District refer to school_district; 40.735332, -74.196014 refer to (school latitude, school_longitude)",
        "evidence_ar": "",
        "SQL": "SELECT T1.donation_message FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 40.735332 AND T2.school_longitude = -74.196014 AND T2.school_district = 'Newark School District'"
    },
    {
        "db_id": "donor",
        "question_en": "What date did the project with he 'Lets Share Ideas essay' went live?",
        "question_ar": "",
        "evidence_en": "date refer to date_posted; Lets Share Ideas refer to title",
        "evidence_ar": "",
        "SQL": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Lets Share Ideas'"
    },
    {
        "db_id": "donor",
        "question_en": "Write the message of the donor of the project with the title of Lets Share Ideas who paid with a credit card.",
        "question_ar": "",
        "evidence_en": "message of the donor refer to donation_message; Lets Share Ideas refer to title; paid with a credit card refer to payment_method",
        "evidence_ar": "",
        "SQL": "SELECT T3.donation_message FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'creditcard'"
    },
    {
        "db_id": "donor",
        "question_en": "Which resource type is commonly bought by the Los Angeles Unified School District?",
        "question_ar": "",
        "evidence_en": "resource type refer to project_resource_type; most commonly bought refer to COUNT(project_resource_type where school_district = ’Los Angeles Unif Sch Dist’); Los Angeles Unified School District refer to school_district = ’Los Angeles Unif Sch Dist’",
        "evidence_ar": "",
        "SQL": "SELECT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T2.school_district ORDER BY COUNT(T1.project_resource_type) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Which cities in the Los Angeles Unified School District has bought supplies from Quill.com?",
        "question_ar": "",
        "evidence_en": "cities refer to school_city; Los Angeles Unified School District refer to school_district = 'Los Angeles Unified School District'; supplies refer to project_resource_type; Quill.com refer to vendor_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_city FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' AND T1.vendor_name = 'Quill.com'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total price of items brought from ABC School Supply with a listed type of Other? Also include the list of the buyers' coordinates and school districts they belong to.",
        "question_ar": "",
        "evidence_en": "ABC School Supply refer to vendor_name; listed type as Other refer to project_resource_type = 'Other'; coordinates refer to coordinates(school_latitude, school_longitude); total price of items refer to SUM(MULTIPLY(item_unit_price, item_quantity where vendor_name = ’ABC School Supply’))\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.item_unit_price * T2.item_quantity price, T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'ABC School Supply' AND T2.project_resource_type = 'Other' AND T1.school_district = 'Hillsborough Co Pub Sch Dist'"
    },
    {
        "db_id": "donor",
        "question_en": "Calculate the sum of all the total amount donated to the essay project titled 'Lets Share Ideas' which were paid through paypal and indicate the city and poverty level.",
        "question_ar": "",
        "evidence_en": "paypal refer to payment method; Lets Share Ideas refer to title; city refer to school_city; total amount donated refer to SUM(donation_total of paypal where payment_method = ’paypal’)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.donation_total), school_city, poverty_level FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'paypal'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donors who donated to the city of Pocatello are not teachers?",
        "question_ar": "",
        "evidence_en": "city of Pocatello refers to donor_city = 'Pocatello'; not teachers refers to is_teacher_acct = 'f'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools in Suffolk County have Ph.D. teachers?",
        "question_ar": "",
        "evidence_en": "Suffolk County refers to School_county = 'Suffolk'; Ph.D. teachers refers to Teacher_prefix = 'Dr.'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(schoolid) FROM projects WHERE teacher_prefix = 'Dr.' AND school_county = 'Suffolk'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the sum of the total donated amounts paid through Amazon?",
        "question_ar": "",
        "evidence_en": "paid through Amazon refers to payment_method = 'Amazon'; sum of the total donated amounts refers to SUM(donation_to_project,donation_optional_support)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donations of more than $100 were made for an honoree?",
        "question_ar": "",
        "evidence_en": "an honoree refers to for_honoree = 't'; more than $100 refers to dollar_amount = '100_and_up'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE dollar_amount = '100_and_up' AND for_honoree = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "How many resources with a unit price less than 15 are not technology type? List them by vendor id",
        "question_ar": "",
        "evidence_en": "unit price less than 15 refers to item_unit_price< = 15; are not technology type refers to project_resource_type = 'technology'",
        "evidence_ar": "",
        "SQL": "SELECT vendorid FROM resources WHERE project_resource_type = 'Technology' AND item_unit_price <= 15"
    },
    {
        "db_id": "donor",
        "question_en": "On how many projects where the teacher has ordered between 5 to 10 items are from are from Quill.com?",
        "question_ar": "",
        "evidence_en": "ordered between 5 to 10 items refers to item_quantity between 5 and 10; are from Quill.com refers to vendor_name = 'Quill.com'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(projectid) FROM resources WHERE vendor_name = 'Quill.com' AND item_quantity BETWEEN 5 AND 10"
    },
    {
        "db_id": "donor",
        "question_en": "List by school id projects from schools located in the Union Pub School District I-9 that have a New York teaching fellow",
        "question_ar": "",
        "evidence_en": "located in the Union Pub School District I-9 refers to school_district = 'Union Pub School District I-9'; New York teaching fellow refers to teacher_ny_teaching_fellow = 't'",
        "evidence_ar": "",
        "SQL": "SELECT schoolid FROM projects WHERE school_district = 'Union Pub School District I-9' AND teacher_ny_teaching_fellow = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "In which cities are Los Angeles County Suburban Metro Schools located?",
        "question_ar": "",
        "evidence_en": "Los Angeles County refers to school_county = 'Los Angeles'",
        "evidence_ar": "",
        "SQL": "SELECT school_city FROM projects WHERE school_metro = 'suburban' AND school_county = 'Los Angeles'"
    },
    {
        "db_id": "donor",
        "question_en": "What are the vendors of the book-type projects? List them with the project ID.",
        "question_ar": "",
        "evidence_en": "book-type projects refers to project_resource_type = 'Books'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT vendorid, projectid FROM resources WHERE project_resource_type = 'Books'"
    },
    {
        "db_id": "donor",
        "question_en": "What percentage of projects that have not received a cash donation have received a portion of a donation included corporate sponsored giftcard?",
        "question_ar": "",
        "evidence_en": "have not received a cash donation refers to payment_method = 'no_cash_received'; received a portion of a donation included corporate sponsored giftcard payment_included_campaign_gift_card = 't'; percentage refers to DIVIDE(payment_included_campaign_gift_card = 't',payment_included_campaign_gift_card)*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN payment_included_campaign_gift_card = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM donations WHERE payment_method = 'no_cash_received'"
    },
    {
        "db_id": "donor",
        "question_en": "What percentage of projects in the City of Santa Barbara are in suburban metro?",
        "question_ar": "",
        "evidence_en": "City of Santa Barbara refers to school_city = 'Santa Barbara'; percentage refers to DIVIDE(school_metro = 'suburban'; school_metro)*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(projectid) FROM projects WHERE school_city = 'Santa Barbara'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the percentage of payment methods of donations made in March 2013?",
        "question_ar": "",
        "evidence_en": "made in March 2013 refers to substr(donation_timestamp,1,7) = '2013-03'; percentage refers to DIVIDE(SUM(payment_method made in March 2013), SUM(payment_method))*100",
        "evidence_ar": "",
        "SQL": "SELECT payment_method , CAST(COUNT(donationid) AS REAL) * 100 / 51090 FROM donations WHERE donation_timestamp LIKE '2013-03%' GROUP BY payment_method"
    },
    {
        "db_id": "donor",
        "question_en": "What is the average unit price of AKJ Books items?",
        "question_ar": "",
        "evidence_en": "AKJ Books items refers to vendor_name = 'AKJ Books'; average unit price refers to DIVIDE(sum(item_unit_price),count(resourceid))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(item_unit_price) / SUM(item_quantity) FROM resources WHERE vendor_name = 'AKJ Books'"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource?",
        "question_ar": "",
        "evidence_en": "in Brooklyn refers to school_city = 'Brooklyn'; urban metro refers to school_metro = 'urban'; donations for an honoree refers to for_honoree = 't'; requested TT992 - Refill Pack for Safety Name Tags refers to item_name = 'TT992 - Refill Pack for Safety Name Tags'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' AND T2.school_metro = 'urban' AND T3.for_honoree = 't' AND T1.item_name = 'TT992 - Refill Pack for Safety Name Tags'"
    },
    {
        "db_id": "donor",
        "question_en": "How many schools with the highest level of poverty have received a portion of a donation included corporate sponsored gift card?",
        "question_ar": "",
        "evidence_en": "highest level of poverty refers to poverty_level = 'highest'; received a portion of a donation included corporate sponsored gift card refers to payment_included_campaign_gift_card = 't'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_campaign_gift_card = 't' AND T1.poverty_level = 'highest poverty'"
    },
    {
        "db_id": "donor",
        "question_en": "In which city is there a greater number of schools that have received donations of less than 10 dollars?",
        "question_ar": "",
        "evidence_en": "received donations of less than 10 dollars refers to dollar_amount = 'under_10'; city refers to school_city\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_city FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY COUNT(T2.schoolid) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the project title of the school located at latitude 42003718 and longitude -87668289?",
        "question_ar": "",
        "evidence_en": "latitude 42003718 refers to school_latitude = 42003718; longitude -87668289 refers to school_longitude = -87668289",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 42003718 AND T2.school_longitude = -87668289"
    },
    {
        "db_id": "donor",
        "question_en": "Find out if the project with the title Team More Books! has a New York teaching fellow.",
        "question_ar": "",
        "evidence_en": "title Team More Books! Refers to title = 'Team More Books!'; as a New York teaching fellow refers to teacher_ny_teaching_fellow = 't'",
        "evidence_ar": "",
        "SQL": "SELECT T2.teacher_ny_teaching_fellow FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Team More Books!'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the name of the vendors that serve resources to schools whose primary focus area is Literature?",
        "question_ar": "",
        "evidence_en": "primary focus area is Literature refers to primary_focus_area = 'Literature'",
        "evidence_ar": "",
        "SQL": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area LIKE 'Literacy%' GROUP BY T1.vendor_name ORDER BY COUNT(T2.primary_focus_area) DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "What is the name of the vendors serving material for projects for grades 9-12?",
        "question_ar": "",
        "evidence_en": "for grades 9-12 refers to grade_level = 'Grades 9-12'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.grade_level = 'Grades 9-12'"
    },
    {
        "db_id": "donor",
        "question_en": "How many teachers have made some type of donation for projects in Chicago?",
        "question_ar": "",
        "evidence_en": "in Chicago refers to school_city = 'Chicago'; teachers refers to is_teacher_acct = 't'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.teacher_acctid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.is_teacher_acct = 't' AND T2.school_city = 'Chicago'"
    },
    {
        "db_id": "donor",
        "question_en": "How many Rock Hill City School projects have teacher donors?",
        "question_ar": "",
        "evidence_en": "Rock Hill City School refers to school_city = 'Rock Hill'; teacher donors refers to is_teacher_acct = 't'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Rock Hill' AND is_teacher_acct = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total sum of the donations paid with an optional support in projects that reach more than 300 students?",
        "question_ar": "",
        "evidence_en": "with an optional support refers to donation_included_optional_support = 't'; reach more than 300 students refers to students_reached>300",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached > 300 AND t2.donation_included_optional_support = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "How many total items were requested for the Onslow Co School District urban metro school projects?",
        "question_ar": "",
        "evidence_en": "Onslow Co School District refers to school_district = 'Onslow Co School District';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.item_quantity) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_metro = 'urban' AND T2.school_district = 'Onslow Co School District'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the average total donations received by Fresno County colleges?",
        "question_ar": "",
        "evidence_en": "Fresno County colleges refers to school_county = 'Fresno'; average refers to DIVIDE(sum(donation_optional_support,donation_to_project),sum(donation_total))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.donation_optional_support + T2.donation_to_project) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_county = 'Fresno'"
    },
    {
        "db_id": "donor",
        "question_en": "In what percentage of counties has the ABC Read project been launched?",
        "question_ar": "",
        "evidence_en": "ABC Read project been launched refers to title = 'ABC Read'; percentage refers to DIVIDE(count(case when title = 'ABC Read' then school_county else null end),count(school_county))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.title LIKE 'ABC Read' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.school_county) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid"
    },
    {
        "db_id": "donor",
        "question_en": "What is the average amount of resources from projects that have received donations per honoree?",
        "question_ar": "",
        "evidence_en": "donations per honoree refers to for_honoree = 't'; average refers to DIVIDE(sum(item_quantity), count(donationid))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.item_quantity) FROM resources AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.for_honoree = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "When did the project \"Photojournalists Want to Exhibit Their Best Works\" go live?",
        "question_ar": "",
        "evidence_en": "project \"Photojournalists Want to Exhibit Their Best Works\" refers to title = 'Photojournalists Want to Exhibit Their Best Works'; when project go live refers to datePosted",
        "evidence_ar": "",
        "SQL": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Photojournalists Want to Exhibit Their Best Works'"
    },
    {
        "db_id": "donor",
        "question_en": "Which item provided for projects with Mathematics as a primary subject is the most expensive?",
        "question_ar": "",
        "evidence_en": "Mathematics as a primary subject refers to primary_focus_subject = 'Mathematics'; most expensive refers to max(item_unit_price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Mathematics' ORDER BY T1.item_unit_price DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.",
        "question_ar": "",
        "evidence_en": "needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'"
    },
    {
        "db_id": "donor",
        "question_en": "How many donations does the project \"Look, Look, We Need a Nook!\" have?",
        "question_ar": "",
        "evidence_en": "project \"Look, Look, We Need a Nook!\" refers to title = 'Look, Look, We Need a Nook!'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.donation_total) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Look, Look, We Need a Nook!'"
    },
    {
        "db_id": "donor",
        "question_en": "List the poverty level of all the schools that received donations with the zip code \"7079\".",
        "question_ar": "",
        "evidence_en": "zip code \"7079\" refers to donor_zip = '7079'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.poverty_level FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 7079"
    },
    {
        "db_id": "donor",
        "question_en": "What is the name of the vendor that the project \"Bloody Times\" uses for their resources?",
        "question_ar": "",
        "evidence_en": "project \"Bloody Times\" refers to title = 'Bloody Times'",
        "evidence_ar": "",
        "SQL": "SELECT T3.vendor_name FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Bloody Times'"
    },
    {
        "db_id": "donor",
        "question_en": "List all the items from \"Sax Arts & Crafts\" and the zip code of the schools that received them.",
        "question_ar": "",
        "evidence_en": "from \"Sax Arts & Crafts\" refers to vendor_name = 'Sax Arts & Crafts'; zip code of the schools refers school_zip",
        "evidence_ar": "",
        "SQL": "SELECT T2.school_zip, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Sax Arts & Crafts'"
    },
    {
        "db_id": "donor",
        "question_en": "What are the coordinates of the school with the project \"Wiping Away Bad Grades\"?",
        "question_ar": "",
        "evidence_en": "project \"Wiping Away Bad Grades\" title = 'Wiping Away Bad Grades'; coordinates refers to school_longitude, school_latitude",
        "evidence_ar": "",
        "SQL": "SELECT T1.school_longitude, T1.school_latitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Wiping Away Bad Grades'"
    },
    {
        "db_id": "donor",
        "question_en": "List the primary subject of all the donations with a corporate sponsored giftcard.",
        "question_ar": "",
        "evidence_en": "corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'; primary subject refers to primary_focus_subject",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.primary_focus_subject FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_included_campaign_gift_card = 't'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the most expensive book item? Please provide a short description of projects related to those.",
        "question_ar": "",
        "evidence_en": "book item refers to project_resource_type = 'Books'; most expensive refers to MAX(item_unit_price)",
        "evidence_ar": "",
        "SQL": "SELECT T1.item_name, T2.short_description FROM resources AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Books' ORDER BY T1.item_unit_price DESC LIMIT 1"
    },
    {
        "db_id": "donor",
        "question_en": "For what grade was the project \"Too Close for Comfort\" for?",
        "question_ar": "",
        "evidence_en": "project \"Too Close for Comfort\" refers to title = 'Too Close for Comfort'; grade refers to grade_level",
        "evidence_ar": "",
        "SQL": "SELECT T1.grade_level FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Too Close for Comfort'"
    },
    {
        "db_id": "donor",
        "question_en": "What is the total number of students impacted by the projects with a donation from a donor with zip code \"22205\"?",
        "question_ar": "",
        "evidence_en": "zip code \"22205\" refers to donor_zip = '22205'; students impacted refers to students_reached",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.students_reached) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 22205"
    },
    {
        "db_id": "donor",
        "question_en": "What percentage of donations are given via a giving or campaign page? List the primary area of those donations.",
        "question_ar": "",
        "evidence_en": "given via a giving or campaign page refers to via_giving_page = 't'; percentage refers to DIVIDE(count(case when via_giving_page = 't' then donationid else null end),count(donationid))*100; primary area of donation refers to primary_focus_area",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donation_total), ( SELECT T2.primary_focus_area FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.via_giving_page = 't' GROUP BY T2.primary_focus_area ORDER BY SUM(T1.donation_total) DESC LIMIT 1 ) result FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid"
    },
    {
        "db_id": "donor",
        "question_en": "Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items.",
        "question_ar": "",
        "evidence_en": "technology items refers to project_resource_type = 'Technology'; from Best Buy for Business refers to vendor_name = 'Best Buy for Business'; percentage refers to DIVIDE(count(case when vendor_name = 'Best Buy for Business'),count(projectid))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.vendor_name = 'Best Buy for Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Technology' UNION ALL SELECT DISTINCT T1.date_posted FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'Best Buy for Business' AND T2.project_resource_type = 'Technology'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1?",
        "question_ar": "",
        "evidence_en": "result = subtract(sum(num_sales where game_platform_id = 50), sum(num_sales where game_platform_id = 51))",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(CASE WHEN T.game_platform_id = 50 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.game_platform_id = 51 THEN T.num_sales ELSE 0 END)) * 100000 AS nums FROM region_sales AS T WHERE T.region_id = 1"
    },
    {
        "db_id": "video_games",
        "question_en": "Please list all the games that have the same game genre as 3D Lemmings.",
        "question_ar": "",
        "evidence_en": "game refers to game_name; 3D Lemmings refers to game_name = '3D Lemmings'",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )"
    },
    {
        "db_id": "video_games",
        "question_en": "How many action games are there in total?",
        "question_ar": "",
        "evidence_en": "action game refers to genre_name = 'Action'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of 3D Lemmings?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; 3D Lemmings refers to game_name = '3D Lemmings'",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '3D Lemmings'"
    },
    {
        "db_id": "video_games",
        "question_en": "Who is the publisher of 3D Lemmings?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; 3D Lemmings refers to game_name = '3D Lemmings'",
        "evidence_ar": "",
        "SQL": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = '3D Lemmings'"
    },
    {
        "db_id": "video_games",
        "question_en": "Please list the names of all the games published by 10TACLE Studios.",
        "question_ar": "",
        "evidence_en": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '10TACLE Studios'"
    },
    {
        "db_id": "video_games",
        "question_en": "Among the games published by 10TACLE Studios, how many of them are puzzles?",
        "question_ar": "",
        "evidence_en": "published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' AND T3.publisher_name = '10TACLE Studios'"
    },
    {
        "db_id": "video_games",
        "question_en": "Please list the names of all the games published by 10TACLE Studios and are puzzles.",
        "question_ar": "",
        "evidence_en": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = '10TACLE Studios' AND T4.genre_name = 'Puzzle'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher has published the most games?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; the most games refers to max(count(game_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "On which platform was Panzer Tactics released in 2007?",
        "question_ar": "",
        "evidence_en": "platform refers to platform_name; Panzer Tactics refers to game_name = 'Panzer Tactics'; released in 2007 refers to release_year = 2007",
        "evidence_ar": "",
        "SQL": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007"
    },
    {
        "db_id": "video_games",
        "question_en": "In which year was Panzer Tactics released on DS?",
        "question_ar": "",
        "evidence_en": "year refers to release_year; Panzer Tactics refers to game_name = 'Panzer Tactics'; on DS refers to platform_name = 'DS'",
        "evidence_ar": "",
        "SQL": "SELECT T4.release_year FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T5.platform_name = 'DS'"
    },
    {
        "db_id": "video_games",
        "question_en": "Please list the names of the publishers of all the puzzle games.",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the name of the publisher that has published the most puzzle games?",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'; the most puzzle games refers to max(count(game_id where genre_name = 'Puzzle'))",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many publishers have published more than 3 puzzle games?",
        "question_ar": "",
        "evidence_en": "puzzle refers to genre_name = 'Puzzle'; more than 3 puzzle games refers to count(game_id where genre_name = 'Puzzle') > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.publisher_name) FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 3 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Among the games published by Nintendo, what is the percentage of those in the genre of sports?",
        "question_ar": "",
        "evidence_en": "published by Nintendo refers to publisher_name = 'Nintendo'; in the genre of sports refers to genre_name = 'Sports'; percentage = divide(count(game_id where genre_name = 'Sports'), count(game_id)) * 100% where publisher_name = 'Nintendo'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Sports' THEN T1.id ELSE NULL END) AS REAL) * 100/ COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Nintendo'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were sold on the DS platform on average in the 4 different regions?",
        "question_ar": "",
        "evidence_en": "on the DS platform refers to platform_name = 'DS'; number of games sold on average = divide(sum(multiply(num_sales, 100000)), 4) where platform_name = 'DS'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_sales) * 100000 / 4 FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T3.platform_name = 'DS'"
    },
    {
        "db_id": "video_games",
        "question_en": "Tell the number of games whose publisher id is 352.",
        "question_ar": "",
        "evidence_en": "number of games refers to count(game_id)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.game_id FROM game_publisher AS T WHERE T.publisher_id = 352"
    },
    {
        "db_id": "video_games",
        "question_en": "List the genre id of the game Pro Evolution Soccer 2012.",
        "question_ar": "",
        "evidence_en": "Pro Evolution Soccer 2012 refers to game_name = 'Pro Evolution Soccer 2012'",
        "evidence_ar": "",
        "SQL": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012'"
    },
    {
        "db_id": "video_games",
        "question_en": "State the region id of Japan.",
        "question_ar": "",
        "evidence_en": "region id refers to region.id; Japan refers to region_name = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT T.id FROM region AS T WHERE T.region_name = 'Japan'"
    },
    {
        "db_id": "video_games",
        "question_en": "Show the id of the game platform with the most sales in region 2.",
        "question_ar": "",
        "evidence_en": "id of the game platform refers to game_platform_id; the most sales refers to max(num_sales); region 2 refers to region_id = '2'",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_platform_id FROM ( SELECT T.game_platform_id, SUM(T.num_sales) FROM region_sales AS T WHERE T.region_id = 2 GROUP BY T.game_platform_id ORDER BY SUM(T.num_sales) DESC LIMIT 1 ) T1"
    },
    {
        "db_id": "video_games",
        "question_en": "Which genre has the most games? Show its id.",
        "question_ar": "",
        "evidence_en": "the most games refers to max(game_id); genre id refers to genre_id",
        "evidence_ar": "",
        "SQL": "SELECT genre_id FROM ( SELECT T.genre_id, COUNT(T.id) FROM game AS T GROUP BY T.genre_id ORDER BY COUNT(T.id) DESC LIMIT 1 )"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the id of the game \"Resident Evil Archives: Resident Evil\"?",
        "question_ar": "",
        "evidence_en": "id of game refers to game.id; \"Resident Evil Archives: Resident Evil\" refers to game_name = 'Resident Evil Archives: Resident Evil'",
        "evidence_ar": "",
        "SQL": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Resident Evil Archives: Resident Evil'"
    },
    {
        "db_id": "video_games",
        "question_en": "Show the number of games which were released on X360 in 2010.",
        "question_ar": "",
        "evidence_en": "on X360 refers to platform_name = 'X360'; in 2010 refers to release_year = '2010'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'X360' AND T2.release_year = 2010"
    },
    {
        "db_id": "video_games",
        "question_en": "State the publisher name of the game \"ModNation Racers\".",
        "question_ar": "",
        "evidence_en": "game \"ModNation Racers\" refers to game_name = 'ModNation Racers'",
        "evidence_ar": "",
        "SQL": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'ModNation Racers'"
    },
    {
        "db_id": "video_games",
        "question_en": "Show the id of game platform which makes the most sales in Japan.",
        "question_ar": "",
        "evidence_en": "id of game platform refers to game_platform_id; the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT T.game_platform_id FROM ( SELECT T2.game_platform_id, MAX(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many platforms are available for the game Pro Evolution Soccer 2016?",
        "question_ar": "",
        "evidence_en": "game Pro Evolution Soccer 2016 refers to game_name = 'Pro Evolution Soccer 2016'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Pro Evolution Soccer 2016'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games in the database belong to the genre of sports?",
        "question_ar": "",
        "evidence_en": "the genre of sports refers to genre_name = 'Sports'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Sports'"
    },
    {
        "db_id": "video_games",
        "question_en": "Name of the publisher of the game id 10031.",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; the game id 10031 refers to game_id = '10031'",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031"
    },
    {
        "db_id": "video_games",
        "question_en": "State the name of the publisher with the most games.",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; the most games refers to max(game_id)",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many more sports games than simulation games?",
        "question_ar": "",
        "evidence_en": "sports game refers to genre_name = 'Sports'; simulation game refers to genre_name = 'Simulation'; how many more = subtract(sum(game_id where genre_name = 'Sports'), sum(game_id where genre_name = 'Simulation'))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) - COUNT(CASE WHEN T1.genre_name = 'Simulation' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "db_id": "video_games",
        "question_en": "Tell the genre of the game \"Resident Evil: Revelations\".",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; game \"Resident Evil: Revelations\" refers to game_name = 'Resident Evil: Revelations'",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Resident Evil: Revelations'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many sales does game platform id 3871 make in Europe?",
        "question_ar": "",
        "evidence_en": "number of sales = multiply(num_sales, 100000); in Europe refers to region_name = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT T2.num_sales * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' AND T2.game_platform_id = 3871"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the number of games which were published by Ascaron Entertainment GmbH.",
        "question_ar": "",
        "evidence_en": "published by Ascaron Entertainment GmbH refers to publisher_name = 'Ascaron Entertainment GmbH'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Ascaron Entertainment GmbH'"
    },
    {
        "db_id": "video_games",
        "question_en": "Show the name of the earliest platform in the database.",
        "question_ar": "",
        "evidence_en": "the earliest refers to min(release_year); name of platform refers to platform_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id ORDER BY T1.release_year ASC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "For all the games which were published by Namco Bandai Games, what percentage of them were adventure games?",
        "question_ar": "",
        "evidence_en": "published by Namco Bandai Games refers to publisher_name = 'Namco Bandai Games'; adventure game refers to genre_name = 'Adventure'; percentage = divide(sum(game_id where genre_name = 'Adventure'), count(game_id)) * 100% where publisher_name = 'Namco Bandai Games'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Adventure' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Namco Bandai Games'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many times more is the number of games which were published by Atari than Athena?",
        "question_ar": "",
        "evidence_en": "published by Atari refers to publisher_name = 'Atari'; published by  Athena refers to publisher_name = 'Athena'; times = divide(sum(publisher_id where publisher_name = 'Atari'), sum(publisher_id where publisher_name = 'Athena'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Atari' THEN T2.game_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.publisher_name = 'Athena' THEN T2.game_id ELSE NULL END) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games did Electronic Arts publish?",
        "question_ar": "",
        "evidence_en": "Electronic Arts refers to publisher_name = 'Electronic Arts'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Electronic Arts'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the Advent Rising game?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; Advent Rising game refers to game_name = 'Advent Rising'",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Advent Rising'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many role-playing games did Microsoft Game Studios publish?",
        "question_ar": "",
        "evidence_en": "role-playing game refers to genre_name = 'Role-Playing'; Microsoft Game Studios refers to publisher_name = 'Microsoft Game Studios'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher published the most games?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; the most games refers to max(count(publisher_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "In 2004, what are the names of the platforms where Codemasters publish its games?",
        "question_ar": "",
        "evidence_en": "name of platform refers to platform_name; Codemasters refers to publisher_name = 'Codemasters'; in 2004 refers to release_year = 2004",
        "evidence_ar": "",
        "SQL": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were released on PS4 in 2014?",
        "question_ar": "",
        "evidence_en": "on PS4 refers to platform_name = 'PS4'; in 2014 refers to release_year = 2014",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS4' AND T2.release_year = 2014"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the names of the publishers who published the oldest games?",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; the oldest game refers to min(release_year)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id ORDER BY T1.release_year LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "How many publishers in Japan released a game on X360 in 2011?",
        "question_ar": "",
        "evidence_en": "in Japan refers to region_name = 'Japan'; on X360 refers to platform_name = 'X360'; in 2011 refers to release_year = 2011",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.game_publisher_id) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'X360' AND T3.release_year = 2011 AND T1.region_name = 'Japan'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which game platform is the most popular in Europe?",
        "question_ar": "",
        "evidence_en": "game platform refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT T.platform_name FROM ( SELECT T4.platform_name, SUM(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Which year has the most number of PC games releases?",
        "question_ar": "",
        "evidence_en": "year refers to release_year; the most number of releases refers to max(count(game_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.release_year FROM ( SELECT T2.release_year, COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PC' GROUP BY T2.release_year ORDER BY COUNT(DISTINCT T3.game_id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "List the names of all the publishers who published one game only.",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; published one game only refers to count(publisher_id) = 1",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name HAVING COUNT(DISTINCT T1.game_id) = 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the names of the games that were published by 505 Games?",
        "question_ar": "",
        "evidence_en": "name of game refers to game_name; published by 505 Games refers to publisher_name = '505 Games'",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = '505 Games'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre ID of the game named 25 to Life?",
        "question_ar": "",
        "evidence_en": "the game named 25 to Life refers to game_name = '25 to Life'",
        "evidence_ar": "",
        "SQL": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '25 to Life'"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the game ID of games with genre ID 2.",
        "question_ar": "",
        "evidence_en": "game ID refers to game.id; genre ID 2 refers to genre_id = 2",
        "evidence_ar": "",
        "SQL": "SELECT T.id FROM game AS T WHERE T.genre_id = 2"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the release year of record ID 1 to 10.",
        "question_ar": "",
        "evidence_en": "record ID 1 to 10 refers to game.id BETWEEN 1 AND 10",
        "evidence_ar": "",
        "SQL": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the game publisher ID of records with platform ID 15.",
        "question_ar": "",
        "evidence_en": "platform ID 15 refers to platform_id = 15",
        "evidence_ar": "",
        "SQL": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 15"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the record ID of records released between 2000 to 2003.",
        "question_ar": "",
        "evidence_en": "record ID refers to game.id; released between 2000 to 2003 refers to release_year BETWEEN 2000 AND 2003",
        "evidence_ar": "",
        "SQL": "SELECT T.id FROM game_platform AS T WHERE T.release_year BETWEEN 2000 AND 2003"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the number of sales in region ID 2 with game platform ID 9615?",
        "question_ar": "",
        "evidence_en": "number of sales refers to multiply(num_sales, 100000)",
        "evidence_ar": "",
        "SQL": "SELECT T.num_sales * 100000 FROM region_sales AS T WHERE T.region_id = 2 AND T.game_platform_id = 9615"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the names of platform where the games released in 2016 can be played on.",
        "question_ar": "",
        "evidence_en": "name of platform refers to platform_name; released in 2016 refers to release_year = 2016",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = 2016"
    },
    {
        "db_id": "video_games",
        "question_en": "When was the game titled 3DS Classic Collection released?",
        "question_ar": "",
        "evidence_en": "when refers to release_year; the game titled 3DS Classic Collection refers to game_name = '3DS Classic Collection'",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = '3DS Classic Collection'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the average number of sales in Japan?",
        "question_ar": "",
        "evidence_en": "in Japan refers to region_name = 'Japan'; average number of sales = multiply(avg(num_sales), 100000) where region_name = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.num_sales) * 100000 AS avg_japan FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan'"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the genre of the games released from 2000 to 2002.",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; released from 2000 to 2002 refers to release_year BETWEEN 2000 AND 2002",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.genre_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.release_year BETWEEN 2000 AND 2002"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the name of games published by 3DO.",
        "question_ar": "",
        "evidence_en": "name of game refers to game_name; published by 3DO refers to publisher_name = '3DO'",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '3DO'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many role-playing games are there?",
        "question_ar": "",
        "evidence_en": "role-playing game refers to genre_name = 'Role-Playing'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Role-Playing'"
    },
    {
        "db_id": "video_games",
        "question_en": "List the region name where games reached 300000 sales and above.",
        "question_ar": "",
        "evidence_en": "reached 300000 sales and above refers to num_sales > 3",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 > 300000"
    },
    {
        "db_id": "video_games",
        "question_en": "Which company published the game with the most sales in North America?",
        "question_ar": "",
        "evidence_en": "company refers to publisher_name; the most sales refers to max(num_sales); in North America refers to region_name = 'North America'",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T5.publisher_name, SUM(T2.num_sales) * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' GROUP BY T5.publisher_name ORDER BY SUM(T2.num_sales) * 100000 DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the release year of the game that gained 350000 sales in North America?",
        "question_ar": "",
        "evidence_en": "gained 350000 sales refers to num_sales = 3.5; in North America refers to region_name = 'North America'",
        "evidence_ar": "",
        "SQL": "SELECT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 = 350000 AND T1.region_name = 'North America'"
    },
    {
        "db_id": "video_games",
        "question_en": "In which platform does the game titled 15 Days available?",
        "question_ar": "",
        "evidence_en": "platform refers to platform_name; the game titled 15 Days refers to game_name = '15 Days'",
        "evidence_ar": "",
        "SQL": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Counter Force'"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the name of the publisher of the game ID 75.",
        "question_ar": "",
        "evidence_en": "name of publisher refers to publisher_name; the game ID 75 refers to game_id = 75",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 75"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the title of the game that gained the most sales in Japan?",
        "question_ar": "",
        "evidence_en": "title of the game refers to game_name; gained the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT T.game_name FROM ( SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the game publisher's name of the game with sales greater than 90% of the average sales in Japan.",
        "question_ar": "",
        "evidence_en": "game publisher's name refers to publisher_name; sales greater than 90% of the average sales refers to num_sales > multiply(0.9, avg(num_sales)); in Japan refers to region_name = 'Japan'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T2.num_sales * 10000000 > ( SELECT AVG(T2.num_sales) * 100000 * 90 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' )"
    },
    {
        "db_id": "video_games",
        "question_en": "Among the games released in 2004, what is the percentage of games on PSP?",
        "question_ar": "",
        "evidence_en": "in 2004 refers to release_year = 2004; on PSP refers to platform_name = 'PSP'; percentage = divide(sum(platform_id where platform_name = 'PSP'), count(platform_id)) * 100% where release_year = 2004",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were released in 1981?",
        "question_ar": "",
        "evidence_en": "released in 1981 refers to release_year = 1981",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 1981"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre ID of the '2Xtreme' game?",
        "question_ar": "",
        "evidence_en": "the '2Xtreme' game refers to game_name = '2Xtreme'",
        "evidence_ar": "",
        "SQL": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '2Xtreme'"
    },
    {
        "db_id": "video_games",
        "question_en": "Sum the total game sales in every region for platform ID 9658.",
        "question_ar": "",
        "evidence_en": "total game sales refers to multiply(sum(num_sales), 100000); platform ID 9658 refers to game_platform_id = 9658",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 9658"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the ID of 1C Company.",
        "question_ar": "",
        "evidence_en": "ID refers to publisher.id; 1C Company refers to publisher_name = '1C Company'",
        "evidence_ar": "",
        "SQL": "SELECT T.id FROM publisher AS T WHERE T.publisher_name = '1C Company'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the genre name of the genre ID 3.",
        "question_ar": "",
        "evidence_en": "genre ID 3 refers to genre.id = 3",
        "evidence_ar": "",
        "SQL": "SELECT T.genre_name FROM genre AS T WHERE T.id = 3"
    },
    {
        "db_id": "video_games",
        "question_en": "List the game IDs that were released in 2017.",
        "question_ar": "",
        "evidence_en": "game ID refers to game.id; released in 2017 refers to release_year = 2017",
        "evidence_ar": "",
        "SQL": "SELECT T.id FROM game_platform AS T WHERE T.release_year = 2017"
    },
    {
        "db_id": "video_games",
        "question_en": "When was the \"Adventure Island\" game released?",
        "question_ar": "",
        "evidence_en": "when refers to release_year; the \"Adventure Island\" game refers to game_name = 'Adventure Island'",
        "evidence_ar": "",
        "SQL": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games are puzzle genre?",
        "question_ar": "",
        "evidence_en": "puzzle genre refers to genre_name = 'Puzzle'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the games that can be played on the SCD platform.",
        "question_ar": "",
        "evidence_en": "game refers to game_name; on the SCD platform refers to platform_name = 'SCD'",
        "evidence_ar": "",
        "SQL": "SELECT T4.game_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T2.platform_name = 'SCD'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were published by Acclaim Entertainment?",
        "question_ar": "",
        "evidence_en": "published by Acclaim Entertainment refers to publisher_name = 'Acclaim Entertainment'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Acclaim Entertainment'"
    },
    {
        "db_id": "video_games",
        "question_en": "Name the publisher of the Chronicles of the Sword game.",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; the Chronicles of the Sword game refers to game_name = 'Chronicles of the Sword'",
        "evidence_ar": "",
        "SQL": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the number of games sold in North America on the PS4 platform.",
        "question_ar": "",
        "evidence_en": "number of games sold refers to sum(multiply(num_sales, 100000)); in North America refers to region_name = 'North America'; on the PS4 platform refers to platform_name = 'PS4'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'North America' AND T4.platform_name = 'PS4'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the ID of the most popular platform in Europe.",
        "question_ar": "",
        "evidence_en": "ID refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT T.game_platform_id FROM ( SELECT T1.game_platform_id, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' GROUP BY T1.game_platform_id ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Name the game released in 2011.",
        "question_ar": "",
        "evidence_en": "game refers to game_name; released in 2011 refers to release_year = 2011",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games can be played on the Wii platform?",
        "question_ar": "",
        "evidence_en": "on the Wii platform refers to platform_name = 'Wii'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'Wii'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide any five games and release year under the sports genre.",
        "question_ar": "",
        "evidence_en": "game refers to game_name; under the sports genre refers to genre_name = 'Sports'",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5"
    },
    {
        "db_id": "video_games",
        "question_en": "Mention the genre of the 2Xtreme.",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; the 2Xtreme game refers to game_name = '2Xtreme'",
        "evidence_ar": "",
        "SQL": "SELECT T2.id FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2Xtreme'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the platform where the Panzer Tactics can be played.",
        "question_ar": "",
        "evidence_en": "platform refers to platform_name; the Panzer Tactics is a game name.",
        "evidence_ar": "",
        "SQL": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Panzer Tactics'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate how many percent of sales in North America is higher than the average sale per region for platform ID 9577.",
        "question_ar": "",
        "evidence_en": "in North America refers to region_name = 'North America'; platform ID 9577 refers to game_platform_id = 9577; percent = divide(subtract(num_sales where region_name = 'North America' and game_platform_id = 9577, avg(num_sales)), avg(num_sales)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577"
    },
    {
        "db_id": "video_games",
        "question_en": "Which game has the longest name?",
        "question_ar": "",
        "evidence_en": "game refers to game_name; the longest name refers to max(length(game_name))",
        "evidence_ar": "",
        "SQL": "SELECT T.game_name FROM game AS T ORDER BY LENGTH(T.game_name) DESC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were released in 2001?",
        "question_ar": "",
        "evidence_en": "released in 2001 refers to release_year = 2001",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 2001"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the total number of sales across all regions?",
        "question_ar": "",
        "evidence_en": "total number of sales = sum(num_sales)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T.num_sales) * 100000 FROM region_sales t"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the average number of games published by a publisher?",
        "question_ar": "",
        "evidence_en": "average number = divide(count(game_id), count(publisher_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T.game_id) AS REAL) / COUNT(DISTINCT T.publisher_id) FROM game_publisher AS T"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the first year a game is released?",
        "question_ar": "",
        "evidence_en": "the first year refers to min(release_year)",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T.release_year) FROM game_platform t"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the least common game genre?",
        "question_ar": "",
        "evidence_en": "the least common game genre refers to min(count(genre_id)); genre refers to genre_name",
        "evidence_ar": "",
        "SQL": "SELECT T.game_name FROM ( SELECT T2.game_name, COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T2.game_name ORDER BY COUNT(T2.id) ASC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Which is the publisher for the game \"Prism: Light the Way\"?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; game \"Prism: Light the Way\" refers to game_name = 'Prism: Light the Way'",
        "evidence_ar": "",
        "SQL": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Prism: Light the Way'"
    },
    {
        "db_id": "video_games",
        "question_en": "List the platforms that release the most games each year.",
        "question_ar": "",
        "evidence_en": "platform refers to platform_id; the most games refers to max(count(game_publisher_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id GROUP BY T2.release_year, T1.platform_name ORDER BY COUNT(DISTINCT T3.game_id) DESC"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games do not have any sales in Europe?",
        "question_ar": "",
        "evidence_en": "do not have any sales refers to num_sales = 0; in Europe refers to region_name = 'Europe'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' AND T1.num_sales = 0"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the games that were released in 2006?",
        "question_ar": "",
        "evidence_en": "game refers to game_name; released in 2006 refers to release_year = 2006",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2006"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the game \"Mario vs. Donkey Kong\"?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; game \"Mario vs. Donkey Kong\" refers to game_name = 'Mario vs. Donkey Kong'",
        "evidence_ar": "",
        "SQL": "SELECT T1.genre_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T2.game_name = 'Mario vs. Donkey Kong'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher published the most games?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; the most games refers to max(count(game_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id GROUP BY T1.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "List all the platform games.",
        "question_ar": "",
        "evidence_en": "platform game refers to genre_name = 'Platform'; game refers to game_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Platform'"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the years that \"WiiU\" got a new game?",
        "question_ar": "",
        "evidence_en": "year refers to release_year; \"WiiU\" refers to platform_name = 'WiiU'",
        "evidence_ar": "",
        "SQL": "SELECT T2.release_year FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T1.platform_name = 'WiiU' ORDER BY T2.release_year DESC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "Which game has the most sales in Japan?",
        "question_ar": "",
        "evidence_en": "\nwhich game refers to game_name; most sales refers to MAX(num_sales); Japan refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "List the games from the publisher \"Activision\".",
        "question_ar": "",
        "evidence_en": "games refers to game_name; \"Activision\" refers to publisher_name = 'Activision';",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Activision'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many different publishers have published a game that starts with \"Marvel\"?",
        "question_ar": "",
        "evidence_en": "game that starts with \"Marvel\" refers to game_name LIKE 'Marvel%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.publisher_id) FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.game_name LIKE 'Marvel%'"
    },
    {
        "db_id": "video_games",
        "question_en": "What percentage of games are sports?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(genre_name = 'sport'), COUNT(game_name)), 100.0); sports refers to genre_name = 'sport';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the ratio of game sales between North America and Japan?",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(num_sales WHERE region_name = 'North America'), SUM(num_sales WHERE region_name = 'Japan')); North America refers to region_name = 'North America'; Japan refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) / SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id"
    },
    {
        "db_id": "video_games",
        "question_en": "Which year has the most number of video game releases?",
        "question_ar": "",
        "evidence_en": "year that has the most number of video game releases refers to MAX(COUNT(release_year));",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_year FROM ( SELECT T.release_year, COUNT(id) FROM game_platform AS T GROUP BY T.release_year ORDER BY COUNT(T.id) DESC LIMIT 1 ) T1"
    },
    {
        "db_id": "video_games",
        "question_en": "How many video game publishers have Interactive in their names?",
        "question_ar": "",
        "evidence_en": "publishers that have Interactive in their names refers to publisher_name LIKE '%Interactive%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.id) FROM publisher AS T WHERE T.publisher_name LIKE '%Interactive%'"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the top 2 platforms with the most sales in North America?",
        "question_ar": "",
        "evidence_en": "platforms refers to platform_name; most sales refers to MAX(num_sales); North America refers to region_name = 'North America';",
        "evidence_ar": "",
        "SQL": "SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'North America' ORDER BY T2.num_sales DESC LIMIT 2"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games did BMG Interactive Entertainment release in 2012?",
        "question_ar": "",
        "evidence_en": "BMG Interactive Entertainment refers to publisher_name = 'BMG Interactive Entertainment'; release in 2012 refers to release_year = 2012;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = 2012"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the name of the publisher that released the most video games in 2007?",
        "question_ar": "",
        "evidence_en": "name of the publisher refers to publisher_name; publisher that released the most video games in 2007 refers to MAX(COUNT(publisher_name)) WHERE release_year = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.release_year = 2007 GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "How many publishers published the Minecraft game?",
        "question_ar": "",
        "evidence_en": "Minecraft refers to game_name = 'Minecraft';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.publisher_id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id WHERE T1.game_name = 'Minecraft'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher has published the most number of Action games?",
        "question_ar": "",
        "evidence_en": "which publisher refers to publisher_name; publisher that has published the most number of Action games refers to MAX(COUNT(publisher_name)) WHERE genre_name = 'Action'; Action games refers to game_name WHERE genre_name = 'Action';",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many Sports games did Nintendo publish?",
        "question_ar": "",
        "evidence_en": "Sports games refers to game_name WHERE genre_name = 'Sports'; Nintendo refers to publisher_name = 'Nintendo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' AND T1.publisher_name = 'Nintendo'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the game '2 Games in 1: Sonic Advance & ChuChu Rocket!'?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; '2 Games in 1: Sonic Advance & ChuChu Rocket!' is a game name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many times did other regions make positive sales in DS platform?",
        "question_ar": "",
        "evidence_en": "other regions refers to region_name = 'Other'; positive sales refers to num_sales > 0; DS platform refers to platform_name = 'DS';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id WHERE T1.platform_name = 'DS' AND T4.region_name = 'Other' AND T3.num_sales > 0"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the names of the games published by American Softworks?",
        "question_ar": "",
        "evidence_en": "names of the games refers to game_name; American Softworks refers to publisher_name = 'American Softworks';",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many strategy games are there?",
        "question_ar": "",
        "evidence_en": "strategy games refers game_name WHERE genre_name = 'Strategy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher published Overwatch?",
        "question_ar": "",
        "evidence_en": "which publisher refers to publisher_name; Overwatch refers to game_name = 'Overwatch';",
        "evidence_ar": "",
        "SQL": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Overwatch'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the name of the genre with the most number of video games?",
        "question_ar": "",
        "evidence_en": "name of the genre refers to genre_name; genre with the most number of video games refers to MAX(COUNT(genre_name));",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T2.id = T1.genre_id GROUP BY T2.genre_name ORDER BY COUNT(T1.genre_id) DESC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the number of games sold in Europe for game platform ID 26?",
        "question_ar": "",
        "evidence_en": "total number of games sold = MULTIPLY(num_sales, 100000); Europe refers to region_name = 'Europe';",
        "evidence_ar": "",
        "SQL": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were released in the year 2001?",
        "question_ar": "",
        "evidence_en": "released in the year 2001 refers to release_year = 2001;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games include the word 'Box' in their name?",
        "question_ar": "",
        "evidence_en": "games include the word 'Box' in their name refers to game_name = '%Box%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%Box%' )"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the three largest numbers of games sold?",
        "question_ar": "",
        "evidence_en": "3 largest numbers of games sold refers to game_name where MAX(num_sales) LIMIT 3;",
        "evidence_ar": "",
        "SQL": "SELECT T.game_platform_id, SUM(T.num_sales) * 100000 FROM region_sales AS T GROUP BY game_platform_id ORDER BY SUM(T.num_sales) * 100000 DESC LIMIT 3"
    },
    {
        "db_id": "video_games",
        "question_en": "What year were the first game released?",
        "question_ar": "",
        "evidence_en": "year the first game was released refers to MIN(release_year);",
        "evidence_ar": "",
        "SQL": "SELECT T.release_year FROM game_platform AS T ORDER BY T.release_year ASC LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "What publishers have the word 'Entertainment' in their name?",
        "question_ar": "",
        "evidence_en": "publishers that have the word 'Entertainment' in their name refers to publisher_name LIKE '%Entertainment%';",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM publisher AS T WHERE T.publisher_name LIKE '%Entertainment%'"
    },
    {
        "db_id": "video_games",
        "question_en": "Indicate the name of all adventure games.",
        "question_ar": "",
        "evidence_en": "name of games refers to game_name; adventure games refers to game_name WHERE genre_name = 'Adventure';",
        "evidence_ar": "",
        "SQL": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'"
    },
    {
        "db_id": "video_games",
        "question_en": "List the name of all games published by 'Pioneer LDC'.",
        "question_ar": "",
        "evidence_en": "name of games refers to game_name; 'Pioneer LDC' refers to publisher_name = 'Pioneer LDC';",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Pioneer LDC'"
    },
    {
        "db_id": "video_games",
        "question_en": "Indicate the name of all the games published for the 'SCD' platform.",
        "question_ar": "",
        "evidence_en": "name of games refers to game_name;  'SCD' platform refers to platform_name = 'SCD';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'SCD'"
    },
    {
        "db_id": "video_games",
        "question_en": "List the name of all games published in Japan.",
        "question_ar": "",
        "evidence_en": "name of games refers to game_name; Japan refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Japan'"
    },
    {
        "db_id": "video_games",
        "question_en": "What genres are the games published by 'Agatsuma Entertainment'?",
        "question_ar": "",
        "evidence_en": "genres refers to genre_name; 'Agatsuma Entertainment' refers to publisher_name = 'Agatsuma Entertainment';",
        "evidence_ar": "",
        "SQL": "SELECT T4.genre_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Agatsuma Entertainment'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games are not of the genres 'Role-Playing', 'Shooter' and 'Simulation'?",
        "question_ar": "",
        "evidence_en": "not of the genres 'Role-Playing', 'Shooter' and 'Simulation' refers to genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation');",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation')"
    },
    {
        "db_id": "video_games",
        "question_en": "Indicate, by region, which platform has sold the most games.",
        "question_ar": "",
        "evidence_en": "region refers to region_name; platform refers to game_platform; sold the most games refers to MAX(SUM(num_sales));",
        "evidence_ar": "",
        "SQL": "SELECT T.region_name FROM ( SELECT T1.platform_name, T4.region_name, SUM(T3.num_sales) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id GROUP BY T1.platform_name, T4.region_name ORDER BY SUM(T3.num_sales) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher has published the most games in the 'Puzzle' genre?",
        "question_ar": "",
        "evidence_en": "which publisher refers to publisher_name; publisher that has published the most games refers to MAX(COUNT(publisher_name)); puzzle genre refers to genre_name = 'Puzzle';",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T1.publisher_name ORDER BY COUNT(T3.id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Which game has sold the fewest units?",
        "question_ar": "",
        "evidence_en": "which game refers to game_name; sold the fewest units refers to MIN(num_sales);",
        "evidence_ar": "",
        "SQL": "SELECT T.game_name FROM ( SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id ORDER BY T4.num_sales LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Which publisher has published the game 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'?",
        "question_ar": "",
        "evidence_en": "which publisher refers to publisher_name; 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' refers to game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3';",
        "evidence_ar": "",
        "SQL": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'"
    },
    {
        "db_id": "video_games",
        "question_en": "In which regions has the game 'Pengo' been sold?",
        "question_ar": "",
        "evidence_en": "which regions refers to region_name; 'Pengo' refers to game_name = 'Pengo';",
        "evidence_ar": "",
        "SQL": "SELECT T5.region_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T1.game_name = 'Pengo'"
    },
    {
        "db_id": "video_games",
        "question_en": "List by name all the games released in the year 2010.",
        "question_ar": "",
        "evidence_en": "name of the games refers to game_name; released in the year 2010 refers to release_year = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = '2010'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the average game sales for the PS2 platform.",
        "question_ar": "",
        "evidence_en": "average = AVG(MULTIPLY(num_sales), 100000); PS2 refers to platform_name = 'PS2';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.num_sales * 100000) / COUNT(T1.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T2.id = T3.game_platform_id WHERE T1.platform_name = 'PS2'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the percentage of games published by 'Brash Entertainment'?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(publisher_name = 'Brash Entertainment'), COUNT(game_id)), 100.0); 'Brash Entertainment' refers to publisher_name = 'Brash Entertainment';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Brash Entertainment' THEN T2.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the total number of games sold in region ID 1?",
        "question_ar": "",
        "evidence_en": "total number of games sold = MULTIPLY(SUM(num_sales), 100000);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 1"
    },
    {
        "db_id": "video_games",
        "question_en": "How many FIFA games are there across all platforms?",
        "question_ar": "",
        "evidence_en": "FIFA games refers to game_name LIKE '%FIFA%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )"
    },
    {
        "db_id": "video_games",
        "question_en": "Which platform is the most popular in Europe?",
        "question_ar": "",
        "evidence_en": "platform that is the most popular refers to platform_name WHERE MAX(num_sales); in Europe refers to region_name = 'Europe' ;",
        "evidence_ar": "",
        "SQL": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "Who is the publisher of the game 2002 FIFA World Cup?",
        "question_ar": "",
        "evidence_en": "who is the publisher refers to publisher_name; 2002 FIFA World Cup refers to game_name = '2002 FIFA World Cup';",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T3.game_name = '2002 FIFA World Cup'"
    },
    {
        "db_id": "video_games",
        "question_en": "What platform is the game 3Xtreme available on?",
        "question_ar": "",
        "evidence_en": "what platform refers to platform_name; 3Xtreme refers to game_name = '3Xtreme';",
        "evidence_ar": "",
        "SQL": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = '3Xtreme'"
    },
    {
        "db_id": "video_games",
        "question_en": "What genre is the game 2010 FIFA World Cup South Africa?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; 2010 FIFA World Cup South Africa refers to game_name = '2010 FIFA World Cup South Africa';",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'"
    },
    {
        "db_id": "video_games",
        "question_en": "Which region has the highest number of games sold on all platforms?",
        "question_ar": "",
        "evidence_en": "which region refers to region_name; highest number of games sold on all platforms refers to MAX(SUM(num_sales));",
        "evidence_ar": "",
        "SQL": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were sold on PS3 platform in Japan?",
        "question_ar": "",
        "evidence_en": "how many games = MULTIPLY(SUM(num_sales), 100000); PS3 refers to platform_name = 'PS3'; Japan refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'Japan' AND T4.platform_name = 'PS3'"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the names of games that were released in 2007?",
        "question_ar": "",
        "evidence_en": "names of games refers to game_name; released in 2007 refers to release_year = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2007"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games were published by Activision?",
        "question_ar": "",
        "evidence_en": "Activision refers to publisher_name = 'Activision';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'"
    },
    {
        "db_id": "video_games",
        "question_en": "Indicate the release year of the game with more than 200000 sales in Japan.",
        "question_ar": "",
        "evidence_en": "more than 200000 sales refers to SUM(num_sales) > 2; Japan refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 > 200000 AND T1.region_name = 'Japan'"
    },
    {
        "db_id": "video_games",
        "question_en": "In 2010, how many PS3 games were released?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to release_year = 2010; PS3 refers to platform_name = 'PS3';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS3' AND T2.release_year = 2010"
    },
    {
        "db_id": "video_games",
        "question_en": "Indicate the publisher who has published the most games of all time.",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; publisher who has published the most games of all time refers to MAX(COUNT(publisher_name));",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "How many shooter games are there?",
        "question_ar": "",
        "evidence_en": "shooter games refers to game_name WHERE genre_name = 'shooter';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Shooter'"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the percentage of games that were released on PS4 in 2014 among all platforms?",
        "question_ar": "",
        "evidence_en": "percentage - MULTIPLY(DIVIDE(SUM(platform_name = 'PS4'), COUNT(game_id)), 100); in 2014 refers to release_year = 2014;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014"
    },
    {
        "db_id": "video_games",
        "question_en": "How much are the sales of the games in region ID 4?",
        "question_ar": "",
        "evidence_en": "how much are the sales = SUM(num_sales);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the game platform IDs of games with a region ID of 1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T.game_platform_id FROM region_sales AS T WHERE T.region_id = 1"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the difference between sales of games from region ID 2 and region ID 3.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(num_sales WHERE region_id = 2), SUM(num_sales WHERE region_id = 3));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the platform IDs of the games released in 2007.",
        "question_ar": "",
        "evidence_en": "released in 2007 refers to release_year = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2007"
    },
    {
        "db_id": "video_games",
        "question_en": "State the game publisher IDs of the games with a platform ID of 16.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 16"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the number of game publisher IDs for games released in 1984.",
        "question_ar": "",
        "evidence_en": "released in 1984 refers to release_year = 1984;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the platform IDs of the games with a region ID of 3.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.id FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T1.region_id = 3"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the sales made by the games in Japan region?",
        "question_ar": "",
        "evidence_en": "sales = SUM(num_sales); Japan region refers to region_name = 'Japan';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) AS nums FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id"
    },
    {
        "db_id": "video_games",
        "question_en": "How many game publisher IDs have published games on the X360 platform?",
        "question_ar": "",
        "evidence_en": "X360 refers to platform_name = 'X360';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'"
    },
    {
        "db_id": "video_games",
        "question_en": "State the name of the platforms for games released in 2000.",
        "question_ar": "",
        "evidence_en": "name of the platforms refers to platform_name; released in 2000 refers to release_year = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T1.release_year = 2000"
    },
    {
        "db_id": "video_games",
        "question_en": "Find out the difference between the number of publishers who released the games on the PS3 and X360.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(platform_name = 'PS3'), SUM(platform_name = 'X360')); PS3 refers to platform_name = 'PS3'; X360 refers to platform_name = 'X360';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.platform_name = 'PS3' THEN T1.game_publisher_id ELSE NULL END) - COUNT(CASE WHEN T2.platform_name = 'X360' THEN T1.game_publisher_id ELSE NULL END) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the game IDs of the games published by Bethesda Softworks?",
        "question_ar": "",
        "evidence_en": "Bethesda Softworks refers to publisher_name = 'Bethesda Softworks';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the total number of IDs for the game published by Capcom and Sony Computer Entertainment.",
        "question_ar": "",
        "evidence_en": "Capcom refers to publisher_name = 'Capcom';  Sony Computer Entertainment refers to publisher_name = 'Sony Computer Entertainment';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the game \"Grand Theft Auto V\"?",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; \"Grand Theft Auto V\" refers to game_name = 'Grand Theft Auto V';",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Grand Theft Auto V'"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the names of the games in the racing genre.",
        "question_ar": "",
        "evidence_en": "name of games refers to game_name; racing genre refers to genre_name = 'Racing';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Racing'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the number of games in the fighting genre.",
        "question_ar": "",
        "evidence_en": "fighting genre refers to genre_name = 'Fighting';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Fighting'"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the genres of games published by the publisher with an ID of 464?",
        "question_ar": "",
        "evidence_en": "genres of games refers to genre_name; publisher with an ID of 464 refers to publisher_id = 464;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id INNER JOIN game_publisher AS T3 ON T1.id = T3.game_id WHERE T3.publisher_id = 464"
    },
    {
        "db_id": "video_games",
        "question_en": "Find out the platform of the game \"Final Fantasy XIII-2\".",
        "question_ar": "",
        "evidence_en": "platform of the game refers to platform_name; \"Final Fantasy XIII-2\" refers to game_name = 'Final Fantasy XIII-2';",
        "evidence_ar": "",
        "SQL": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Final Fantasy XIII-2'"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the total sales made by the games released in 2000.",
        "question_ar": "",
        "evidence_en": "total sales = SUM(num_sales); released in 2000 refers to release_year = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the difference in sales between the games released in 1990 and 2000.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(num_sales WHERE release_year = 2000), SUM(num_sales WHERE release_year = 1990));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id"
    },
    {
        "db_id": "video_games",
        "question_en": "What are the platform IDs of records released in 2006?",
        "question_ar": "",
        "evidence_en": "released in 1990 refers to release_year = 1990; 2000 refers to release_year = 2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2006"
    },
    {
        "db_id": "video_games",
        "question_en": "Compute the average number of sales in region ID 3.",
        "question_ar": "",
        "evidence_en": "average = AVG(MULTIPLY(num_sales, 100000));",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3"
    },
    {
        "db_id": "video_games",
        "question_en": "In which year did the record ID 19 with game publisher ID 6657 released?",
        "question_ar": "",
        "evidence_en": "which year refers to release_year; record ID 19 refers to game platform.id; id = 19",
        "evidence_ar": "",
        "SQL": "SELECT T.release_year FROM game_platform AS T WHERE T.game_publisher_id = 6657 AND T.id = 19"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the total sales in all regions with game platform ID 66.",
        "question_ar": "",
        "evidence_en": "total sales in all regions = MULTIPLY(SUM(num_sales), 100000);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 66"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the game name of the game ID 44.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T.game_name FROM game AS T WHERE T.id = 44"
    },
    {
        "db_id": "video_games",
        "question_en": "List the games available on Wii.",
        "question_ar": "",
        "evidence_en": "games available refers to game_name; Wii refers to platform_name = 'Wii';",
        "evidence_ar": "",
        "SQL": "SELECT T4.game_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T1.platform_name = 'Wii'"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the name of games released in 2015.",
        "question_ar": "",
        "evidence_en": "names of games refers to game_name; released in 2015 refers to release_year = 2015;",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2015"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the total number of adventure games released in 2005?",
        "question_ar": "",
        "evidence_en": "adventure games refers to game_name WHERE genre_name = 'Adventure'; released in 2005 refers to release_year = 2005;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T3.id) FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Adventure' AND T1.release_year = 2005"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the name of the company that produced the game titled Adventure Time: Explore the Dungeon Because I Don't Know!?",
        "question_ar": "",
        "evidence_en": "name of the company that produced the game refers to publisher_name; Adventure Time: Explore the Dungeon Because I Don't Know! Refers to game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';",
        "evidence_ar": "",
        "SQL": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the game platform ID and region name where the games achieved 20000 sales and below.",
        "question_ar": "",
        "evidence_en": "20000 sales and below refers to num_sales < 0.2;",
        "evidence_ar": "",
        "SQL": "SELECT T2.game_platform_id, T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 <= 20000"
    },
    {
        "db_id": "video_games",
        "question_en": "Provide the name of game produced by 505 Games in 2006.",
        "question_ar": "",
        "evidence_en": "name of game refers to game_name; 505 Games refers to publisher_name = '505 Games'; in 2006 refers to release_year = 2006;",
        "evidence_ar": "",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T4.publisher_name = '505 Games' AND T1.release_year = 2006"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the game ID 119?",
        "question_ar": "",
        "evidence_en": "genre of the game refers to genre_name; game ID 119 refers to game.id = 119;",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.id = 119"
    },
    {
        "db_id": "video_games",
        "question_en": "List the game IDs of the games produced by Abylight.",
        "question_ar": "",
        "evidence_en": "Abylight refers to publisher_name = 'Abylight';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Abylight'"
    },
    {
        "db_id": "video_games",
        "question_en": "In which region where a game had the lowest number of sales?",
        "question_ar": "",
        "evidence_en": "which region refers to region_name; lowest number of sales refers to MIN(num_sales);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id ORDER BY T2.num_sales LIMIT 1"
    },
    {
        "db_id": "video_games",
        "question_en": "List down the name of strategy games.",
        "question_ar": "",
        "evidence_en": "strategy games refers to game_name WHERE genre_name = 'Strategy';",
        "evidence_ar": "",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Strategy'"
    },
    {
        "db_id": "video_games",
        "question_en": "In what platform does the game ID 178 available?",
        "question_ar": "",
        "evidence_en": "platform refers to platform_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.platform_name FROM game_publisher AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_id = 178"
    },
    {
        "db_id": "video_games",
        "question_en": "Give the genre of the following game titled 'Airlock' , 'Airline Tycoon' , and 'Airblade', respectively.",
        "question_ar": "",
        "evidence_en": "genre refers to genre_name; 'Airlock', 'Airline Tycoon' , and 'Airblade' refers to game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade')"
    },
    {
        "db_id": "video_games",
        "question_en": "Calculate the total number of sales in North America.",
        "question_ar": "",
        "evidence_en": "total number of sales = MULTIPLY(SUM(num_sales), 100000); North America refers to region_name = 'North America';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.num_sales) * 100000 AS nums FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'North America'"
    },
    {
        "db_id": "video_games",
        "question_en": "List down at least five publishers of the games with number of sales less than 10000.",
        "question_ar": "",
        "evidence_en": "publishers refers to publisher_name; number of sales less than 10000 refers to num_sales < 0.1;",
        "evidence_ar": "",
        "SQL": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t"
    },
    {
        "db_id": "video_games",
        "question_en": "List the platform ID of the game titled Airborne Troops: Countdown to D-Day.",
        "question_ar": "",
        "evidence_en": "Airborne Troops: Countdown to D-Day refers to game_name = 'Airborne Troops: Countdown to D-Day';",
        "evidence_ar": "",
        "SQL": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'"
    },
    {
        "db_id": "video_games",
        "question_en": "How many games available on PSP were released in 2004?",
        "question_ar": "",
        "evidence_en": "PSP refers to platform_name = 'PSP'; released in 2004 refers to release_year = 2004;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PSP' AND T2.release_year = 2004"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the genre of the game titled '999: Nine Hours, Nine Persons, Nine Doors' ?",
        "question_ar": "",
        "evidence_en": "genre of the game refers to genre_name; '999: Nine Hours, Nine Persons, Nine Doors' refers to game_name = '999: Nine Hours, Nine Persons, Nine Doors';",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'"
    },
    {
        "db_id": "video_games",
        "question_en": "When was the game ID 156 released?",
        "question_ar": "",
        "evidence_en": "when the game was released refers to release_year;",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156"
    },
    {
        "db_id": "video_games",
        "question_en": "What is the diffrence between the number of games produced by Culture Brain that can be played on SNES and DS?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(platform_name = 'SNES'), SUM(platform_name = 'DS')); SNES refers to platform_name = SNES ; DS refers to platform_name = 'DS' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T1.platform_name = 'SNES' THEN T3.game_id ELSE NULL END) - COUNT(CASE WHEN T1.platform_name = 'DS' THEN T3.game_id ELSE NULL END) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'Culture Brain'"
    },
    {
        "db_id": "video_games",
        "question_en": "In games that can be played on Wii, what is the percentage of games released in 2007?",
        "question_ar": "",
        "evidence_en": "Wii refers to platform_name = 'Wii'; percentage = MULTIPLY(DIVIDE(SUM(release_year = 2007), COUNT(release_year)), 100.0); released in 2007 refers to release_year = 2007;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.release_year = 2007 THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'Wii'"
    },
    {
        "db_id": "video_games",
        "question_en": "Among games sold in Europe, list the platform ID of games with sales lesser than 30% of the average number of sales.",
        "question_ar": "",
        "evidence_en": "Europe refers to region_name = 'Europe'; sales lesser than 30% of the average number of sales refers to SUM(num_sales) < MULTIPLY(AVG(num_sales), 0.3);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors are affiliated with University of California Berkeley?",
        "question_ar": "",
        "evidence_en": "affiliated refers to Affiliation; 'University of California Berkeley' is the Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM Author WHERE Affiliation = 'University of California Berkeley'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the paper \"Stitching videos streamed by mobile phones in real-time\" about?",
        "question_ar": "",
        "evidence_en": "\"Stitching videos streamed by mobile phones in real-time\" is the Title of paper; what the paper is about refers to Keywords",
        "evidence_ar": "",
        "SQL": "SELECT Keyword FROM Paper WHERE Title = 'Stitching videos streamed by mobile phones in real-time'"
    },
    {
        "db_id": "authors",
        "question_en": "Please list the titles of the papers published in the journal \"Concepts in Magnetic Resonance Part A\" in 2008.",
        "question_ar": "",
        "evidence_en": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'; in 2018 refers to Year = 2018",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A' AND T2.Year = 2008"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were published in the journal \"Concepts in Magnetic Resonance Part A\"?",
        "question_ar": "",
        "evidence_en": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?",
        "question_ar": "",
        "evidence_en": "url refers to HomePage; 'Area Effects in Cepaea' is the Title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'"
    },
    {
        "db_id": "authors",
        "question_en": "Among the papers published in the journal \"Molecular Brain\", how many of them were published in the year 2011?",
        "question_ar": "",
        "evidence_en": "\"Molecular Brain\" is the FullName of journal",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.FullName = 'Molecular Brain'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were published in 2011 in the journal whose short name is \"Mol Brain\"?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to Year = 2011; 'Mol Brain' is the ShortName of journal",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.ShortName = 'Mol Brain'"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors does the paper \"Equation Solving in Geometrical Theories\" have?",
        "question_ar": "",
        "evidence_en": "\"Equation Solving in Geometrical Theories\" is the title of paper",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'"
    },
    {
        "db_id": "authors",
        "question_en": "Please list the names of the authors of the paper \"Area Effects in Cepaea\".",
        "question_ar": "",
        "evidence_en": "\"Area Effects in Cepaea\" is the title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Area Effects in Cepaea'"
    },
    {
        "db_id": "authors",
        "question_en": "Among the authors of the paper \"Stitching videos streamed by mobile phones in real-time\", how many of them are affiliated with Cairo Microsoft Innovation Lab?",
        "question_ar": "",
        "evidence_en": "\"FIBER: A Generalized Framework for Auto-tuning Software\" is the Title of paper; affiliated refers to Affiliation;  University of Tokyo is the affiliation organization",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'"
    },
    {
        "db_id": "authors",
        "question_en": "Please list the titles of the paper whose authors include Klaus Zimmermann.",
        "question_ar": "",
        "evidence_en": "\"Klaus Zimmermann\" is the name of author",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'"
    },
    {
        "db_id": "authors",
        "question_en": "Which author of the paper \"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan?",
        "question_ar": "",
        "evidence_en": "\"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is the title of paper; affiliated with refers to Affiliation; \"National Taiwan University Department of Computer Science and Information Engineering Taiwan\" is the Affiliation organization",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND T1.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title of the paper published in 1995 and whose author included Thomas Wiegand?",
        "question_ar": "",
        "evidence_en": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers whose authors include Thomas Wiegand were published in 1995?",
        "question_ar": "",
        "evidence_en": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Title) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995"
    },
    {
        "db_id": "authors",
        "question_en": "What is the average number of papers published in the journal \"Molecular Brain\" every year from 2008 to 2011?",
        "question_ar": "",
        "evidence_en": "\"Molecular Brain\" is the FullName of journal; year from 2008 to 2011 refers to Year BETWEEN 2008 AND 2011; average = Divide (Count(Id),4)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Molecular Brain' AND T2.Year BETWEEN 2008 AND 2011"
    },
    {
        "db_id": "authors",
        "question_en": "How many more papers in total were published in the journal \"Cases Journal\" than in the journal \"Molecular Brain\" in percentage?",
        "question_ar": "",
        "evidence_en": "\"Cases Journal\" and \"Molecular Brain\" are FullName of journal; more paper in percentage = Subtract(Count(Id(FullName = 'Cases Journal')), Count(Id(FullName = 'Molecular Brain')))/ Count(Id(FullNmae = 'Molecular Brain')) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.FullName = 'Cases Journal' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.FullName = 'Molecular Brain' THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId"
    },
    {
        "db_id": "authors",
        "question_en": "How many journals have a word \"computing\" in its full name?",
        "question_ar": "",
        "evidence_en": "word computing refers to FullName LIKE '%computing%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM Journal WHERE FullName LIKE '%computing%'"
    },
    {
        "db_id": "authors",
        "question_en": "Enumerate the paper and author ID of authors with affiliation with Cairo Microsoft Innovation Lab.",
        "question_ar": "",
        "evidence_en": "\"Cairo Microsoft Innovation Lab\" is the Affiliation organization",
        "evidence_ar": "",
        "SQL": "SELECT PaperId, AuthorId FROM PaperAuthor WHERE Affiliation LIKE 'Cairo Microsoft Innovation Lab%'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the short name and full name of conference uses the homepage \"http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT ShortName, FullName FROM Conference WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html'"
    },
    {
        "db_id": "authors",
        "question_en": "List down the author ID of authors with a name of \"Peter\".",
        "question_ar": "",
        "evidence_en": "\"Peter\" is the name of author",
        "evidence_ar": "",
        "SQL": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'"
    },
    {
        "db_id": "authors",
        "question_en": "List the title of papers with a conference ID from 160 to 170, include their conference short name.",
        "question_ar": "",
        "evidence_en": "conference ID from 160 to 170 refers to ConferenceId BETWEEN 160 AND 170",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title, T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId BETWEEN 160 AND 170"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title and journal homepage of the latest published paper?",
        "question_ar": "",
        "evidence_en": "latest published paper refers to Max(Year)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "In year 1999, list the titles and conference's short name of paper authored by someone named \"Philip\".",
        "question_ar": "",
        "evidence_en": "in year 1999 refers to Year = 1999;  someone named \"Philip\" refers to Name LIKE 'Philip%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Year = 1999 AND T2.Name LIKE 'Philip%'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the total number and conference's homepage of papers held in a conference with an ID of 187 during 1990 to 2000?",
        "question_ar": "",
        "evidence_en": "Id of 187 refers to ConferenceId = 187; during 1990 to 2000 refers to Year BETWEEN 1990 and 2000; total number of conference refers to Count(ConferenceId = 187)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ConferenceId), T1.HomePage FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Year BETWEEN 1990 AND 2000 AND T2.ConferenceId = 187"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title of the paper published in 2003 by an author with affiliation with Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications?",
        "question_ar": "",
        "evidence_en": "published in 2003 refers to Year = 2003; 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' is the Affiliation organization",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' AND T2.Year = 2003"
    },
    {
        "db_id": "authors",
        "question_en": "List the authors and journal short name of the papers with \"chemiluminescence\" in its title and has a journal ID from 245 to 250.",
        "question_ar": "",
        "evidence_en": "with \"chemiluminescence\" in its title refers to Title LIKE 'chemiluminescence%'; journal ID from 245 to 250 refers to JournalId BETWEEN 245 AND 250",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.JournalId BETWEEN 245 AND 250 AND T1.Title LIKE '%chemiluminescence%'"
    },
    {
        "db_id": "authors",
        "question_en": "Among the papers with conference ID of 0, list down the authors of papers with a journal ID less than 100.",
        "question_ar": "",
        "evidence_en": "Conference ID of 0 refers to ConferenceId = 0; journal ID of less than 100 refers to JournalId < 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId < 100"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title and author ID of paper with conference ID less than 100 in year 2006?",
        "question_ar": "",
        "evidence_en": "conference ID less than 100 refers to ConferenceId < 100; in year 2006 refers to Year = 2006",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2006 AND T1.ConferenceId < 100"
    },
    {
        "db_id": "authors",
        "question_en": "What are the paper IDs of papers presented in conferences has a homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\"?",
        "question_ar": "",
        "evidence_en": "homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\" refers to HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Id FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'"
    },
    {
        "db_id": "authors",
        "question_en": "What are the journal homepages and author ID of the papers published in 2000 to 2005 with a word \"social\" in its title?",
        "question_ar": "",
        "evidence_en": "in 2000 to 2005 refers to Year BETWEEN 2000 AND 2005; a word \"social\" in its title refers to Title = '%SOCIAL%'",
        "evidence_ar": "",
        "SQL": "SELECT T3.HomePage, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Year BETWEEN 2000 AND 2005 AND T1.Title LIKE '%SOCIAL%'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the author ID and their affiliations of authors of the papers with a journal ID of 0 and published in 2009.",
        "question_ar": "",
        "evidence_en": "published in 2009 refers to Year = 2009; journal ID of 0 refers to JournalId = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.AuthorId, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.JournalId = 0 AND T1.Year = 2009 AND T2.Affiliation IS NOT NULL"
    },
    {
        "db_id": "authors",
        "question_en": "In papers with journal IDs from 200 to 300 and with its short name starts with A, what is the percentage of papers with conference ID of 0?",
        "question_ar": "",
        "evidence_en": "journal ID of 200 to 300 refers to JournalId BETWEEN 200 AND 300; short name starts with A refers to ShortName LIKE 'A%'; Percentage = Divide (Count(ConferenceId = 0), Count(ConferenceId)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ConferenceId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.JournalId BETWEEN 200 AND 300 AND T2.ShortName LIKE 'A%'"
    },
    {
        "db_id": "authors",
        "question_en": "Within the year of 2001 to 2010, find the paper published rate of 2001.",
        "question_ar": "",
        "evidence_en": "year of 2001 to 2010 refers to Year BETWEEN 2001 AND 2010; Percentage = Divide(Count (PaperId(Year = 2001)), Count (PaperID(Year BETWEEN 2001 AND 2010))) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Year = 2001 THEN 1 ELSE 0 END) AS REAL) / COUNT(Id) FROM Paper WHERE Year >= 2001 AND Year < 2011"
    },
    {
        "db_id": "authors",
        "question_en": "Write down the conference full name of \"ICWE\" and it's homepage address.",
        "question_ar": "",
        "evidence_en": "\"ICWE\" is the ShortName of conference",
        "evidence_ar": "",
        "SQL": "SELECT FullName, Homepage FROM Conference WHERE ShortName = 'ICWE'"
    },
    {
        "db_id": "authors",
        "question_en": "Between \"Standford University\" and \"Massachusetts Institute of Technolgy\", which organization had affiliated with more author.?",
        "question_ar": "",
        "evidence_en": "\"Standford University\" and \"Massachusetts Institute of Technolgy\" are affiliation organization; affiliated with more author refers to Max(Count(Id))",
        "evidence_ar": "",
        "SQL": "SELECT Affiliation FROM Author WHERE Affiliation IN ('Stanford University', 'Massachusetts Institute of Technology') GROUP BY Affiliation ORDER BY COUNT(Id) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "What is the ratio of author with affiliation and without affiliation?",
        "question_ar": "",
        "evidence_en": "with affiliation refers to Affiliation is not Null; without affiliation refers to Affiliation IS NULL; Ration = Count(Id(Affiliation is NOT NULL)) : Count (Id (Affiliation IS NULL))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Author"
    },
    {
        "db_id": "authors",
        "question_en": "Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.",
        "question_ar": "",
        "evidence_en": "\"University of Oulu\" is the Affiliation Organization",
        "evidence_ar": "",
        "SQL": "SELECT Name, id FROM Author WHERE Affiliation = 'University of Oulu'"
    },
    {
        "db_id": "authors",
        "question_en": "Write down the title and affiliation of the preprinted paper written by \"Roger J.Marshal\".",
        "question_ar": "",
        "evidence_en": "\"Roger J. Marshall\" is the name of author; preprinted paper refers to ConferenceId = 0 AND JournalId = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0"
    },
    {
        "db_id": "authors",
        "question_en": "Find the paper ID, title, published year and journal's full name of the paper which included the most number in author.",
        "question_ar": "",
        "evidence_en": "most number in author refers to Max (Count(PaperId))",
        "evidence_ar": "",
        "SQL": "SELECT T1.Id, T1.Title, T1.Year, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id GROUP BY T2.AuthorId ORDER BY COUNT(T2.AuthorId) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "Describe the paper title, published year, conference's short name and included author names in the paper ID of 15.",
        "question_ar": "",
        "evidence_en": "paper ID of 15 refers to PaperId = 15",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title, T1.Year, T3.ShortName, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Id = 15"
    },
    {
        "db_id": "authors",
        "question_en": "Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any.",
        "question_ar": "",
        "evidence_en": "author ID of under 100 refers to AuthorId < 100; 'Zurich, ETH' is the Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId < 1000 AND T1.Affiliation = 'Zurich, ETH'"
    },
    {
        "db_id": "authors",
        "question_en": "Among the author included in the paper of \"Inspection resistant memory: Architectural support for security from physical examination\", write down the author name and ID who were affiliated with Microsoft Research, USA.",
        "question_ar": "",
        "evidence_en": "\"Inspection resistant memory: Architectural support for security from physical examination\" is the title of paper;  'Microsoft Research, USA' is the Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T1.Id FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Inspection resistant memory: Architectural support for security FROM physical examination' AND T2.Affiliation = 'Microsoft Research, USA'"
    },
    {
        "db_id": "authors",
        "question_en": "Write down the author name, affiliation, jounal short name and full name of the paper \"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\".",
        "question_ar": "",
        "evidence_en": "\"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\" is the Title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T2.Affiliation, T3.ShortName, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats'"
    },
    {
        "db_id": "authors",
        "question_en": "List the paper title and journal ID which were published under the conference name of \"International Symposium of Robotics Research\".",
        "question_ar": "",
        "evidence_en": "\"International Symposium of Robotics Research\" is the FullName of conference;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Title, T2.JournalId FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'International Symposium of Robotics Research' AND T2.Year = 2003"
    },
    {
        "db_id": "authors",
        "question_en": "Name the title, year and keyword of the paper which were written by the author ID of 661002 with the affiliation of \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" organization.",
        "question_ar": "",
        "evidence_en": "\"661002\" is the AuthorId;  \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" is the Affiliation organization",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId = 661002 AND T1.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA'"
    },
    {
        "db_id": "authors",
        "question_en": "Calculate the differences of the paper number with the journal name of IWC in 2000 and 2010.",
        "question_ar": "",
        "evidence_en": "\"IWC\" is the ShortName of journal;  '2000' and '2010' are Year;  Difference = Subtract(Count(Paper.Id(Year = 2000)), Count(Paper.Id(Year = 2010)))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.Year = 2000 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Year = 2010 THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'IWC'"
    },
    {
        "db_id": "authors",
        "question_en": "Provide any four valid Journal ID along with short name and full name of the papers which were made in 2013.",
        "question_ar": "",
        "evidence_en": "valid journal ID refers to JournalId! = 0 and JournalId! = -1; made in 2013 refers to Year = 2013",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.JournalId, T1.ShortName, T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2013 AND T2.JournalId != 0 AND T2.JournalId != -1 LIMIT 4"
    },
    {
        "db_id": "authors",
        "question_en": "Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO.",
        "question_ar": "",
        "evidence_en": "\"MICRO\" is the ShortName of conference; in 1971 to 1980 refers to Year BETWEEN '1971' AND '1980'; in 1991 to 2000 refers to Year BETWEEN '1991' AND '2000': Average needed paper = Subtract (Count(PaperId(Year BETWEEN '1991' AND '2000')), Count(PaperId(Year BETWEEN '1971' AND '1980')))/10",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T3.name, T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T1.id = T3.PaperId WHERE T1.ShortName = 'MICRO' AND T2.Year BETWEEN '1971' AND '1980'"
    },
    {
        "db_id": "authors",
        "question_en": "How many of the papers are preprinted or not published?",
        "question_ar": "",
        "evidence_en": "preprinted or not published refers to Year = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM Paper WHERE Year = 0"
    },
    {
        "db_id": "authors",
        "question_en": "State the full name of conference for paper \"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\".",
        "question_ar": "",
        "evidence_en": "\"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\" is the Title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the homepage address for paper \"Energy-efficiency bounds for noise-tolerant dynamic circuits\"?",
        "question_ar": "",
        "evidence_en": "\"Energy-efficiency bounds for noise-tolerant dynamic circuits\" is the Title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'"
    },
    {
        "db_id": "authors",
        "question_en": "Write down the name of authors for paper with id from 101 to 105.",
        "question_ar": "",
        "evidence_en": "paper with ID from 101 to 105 refers to Id BETWEEN 100 AND 106",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Id > 100 AND T1.Id < 106"
    },
    {
        "db_id": "authors",
        "question_en": "Among the papers published in 2009, pick 10 and list down the conference's short name of these papers.",
        "question_ar": "",
        "evidence_en": "published in 2009 refers to Year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T2.PaperId, T4.ShortName FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id INNER JOIN Conference AS T4 ON T3.ConferenceId = T4.Id WHERE T3.Year = 2009 LIMIT 10"
    },
    {
        "db_id": "authors",
        "question_en": "Write down homepage URL of journal for paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\".",
        "question_ar": "",
        "evidence_en": "paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\" refers to Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'",
        "evidence_ar": "",
        "SQL": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'"
    },
    {
        "db_id": "authors",
        "question_en": "List down all paper name that were published in conference \"International Conference on Internet Computing\".",
        "question_ar": "",
        "evidence_en": "conference \"International Conference on Internet Computing\" refers to FullName = 'International Conference on Internet Computing'; paper name refers to Title",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Conference on Internet Computing' AND T1.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "Among papers that were published in 2005, provide the author name of paper with key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\".",
        "question_ar": "",
        "evidence_en": "in 2005 refers to Year = '2005'; key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\" refers to Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2005 AND T1.Keyword = 'KEY WORDS: LOAD IDE SNP haplotype asso- ciation studies'"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors have written paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \"?",
        "question_ar": "",
        "evidence_en": "paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \" refers to Title like'%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = '145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: '"
    },
    {
        "db_id": "authors",
        "question_en": "Who are the co-authors for Jei Keon Chae and what is the title of paper written by them?",
        "question_ar": "",
        "evidence_en": "'Jei Keon Chee' is the name of author;",
        "evidence_ar": "",
        "SQL": "SELECT T2.AuthorId, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jei Keon Chae'"
    },
    {
        "db_id": "authors",
        "question_en": "What are the conference name and journal name of paper written by Shueh-Lin Yau? List down the name of co-authors and provide the title of that paper.",
        "question_ar": "",
        "evidence_en": "Shueh-Lin Yau is the name of author;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ConferenceId, T1.JournalId, T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id INNER JOIN Journal AS T4 ON T1.JournalId = T4.Id WHERE T2.Name = 'Shueh-Lin Yau'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were preprinted between the years 1990 and 2000?",
        "question_ar": "",
        "evidence_en": "years 1990 and 2000 refers to Year BETWEEN '1990' AND '2000'; papers refers to COUNT(id)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM Paper WHERE Year BETWEEN '1990' AND '2000' AND ConferenceId = 0 AND JournalId = 0"
    },
    {
        "db_id": "authors",
        "question_en": "List the names of all authors affiliated with Birkbeck University of London.",
        "question_ar": "",
        "evidence_en": "affiliated with Birkbeck University of London refers to Affiliation = 'Birkbeck University of London'",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'"
    },
    {
        "db_id": "authors",
        "question_en": "List the short name of all conferences whose full name begins with International Symposium.",
        "question_ar": "",
        "evidence_en": "full name refers to FullName LIKE 'International Symposium%'",
        "evidence_ar": "",
        "SQL": "SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%'"
    },
    {
        "db_id": "authors",
        "question_en": "How many journals do not have a website?",
        "question_ar": "",
        "evidence_en": "do not have a website refers to HomePage = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(HomePage) FROM Journal WHERE HomePage = ''"
    },
    {
        "db_id": "authors",
        "question_en": "List author name for articles that are preprinted but not published.",
        "question_ar": "",
        "evidence_en": "articles that are preprinted but not published refers to Year = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 0"
    },
    {
        "db_id": "authors",
        "question_en": "List author affiliation for papers whose topic is Quantum Physics.",
        "question_ar": "",
        "evidence_en": "topic is Quantum Physics refers to Keyword = 'Quantum Physics'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword = 'Quantum Physics'"
    },
    {
        "db_id": "authors",
        "question_en": "Identify by conference full name all papers in which a journal was not published but a conference.",
        "question_ar": "",
        "evidence_en": "journal was not published but a conference refers to ConferenceId ! = 0 And JournalId = 0 Year ! = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId != 0 AND T1.JournalId = 0 AND T1.Year != 0"
    },
    {
        "db_id": "authors",
        "question_en": "Identify by papers title those in which conferences have been published that do not have a website..",
        "question_ar": "",
        "evidence_en": "do not have a website refers to HomePage IS NULL OR HomePage = ''",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.HomePage = '' AND T2.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "Identify by publication year in the paper database all journals that don't have short name.",
        "question_ar": "",
        "evidence_en": "don't have short name refers to ShortName is NULL OR ShortName = ''",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Year, FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = ''"
    },
    {
        "db_id": "authors",
        "question_en": "What is the affiliation of the author writing in the journal 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'?",
        "question_ar": "",
        "evidence_en": "journal 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV' refers to Title = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'"
    },
    {
        "db_id": "authors",
        "question_en": "Indicate the name of all the journals published in the paper database in the year 2001.",
        "question_ar": "",
        "evidence_en": "name of all the journals refers to FullName",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year = 2001 AND T1.ConferenceId > 0 AND T1.JournalId > 0"
    },
    {
        "db_id": "authors",
        "question_en": "What is the name of the co-authors of the paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'?",
        "question_ar": "",
        "evidence_en": "paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' refers to Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'"
    },
    {
        "db_id": "authors",
        "question_en": "In how many papers and in what years was the International Conference on Database Theory published?",
        "question_ar": "",
        "evidence_en": "the International Conference on Database Theory refers to FullName = 'International Conference on Database Theory'; published refers to year ! = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) AS PAPER, COUNT(DISTINCT T1.Year) AS YEARS FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE year != 0 AND T2.FullName = 'International Conference on Database Theory'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the full name of the journals that are published in the database papers whose topic is Sustainability?",
        "question_ar": "",
        "evidence_en": "topic is Sustainability refers to Keyword = 'Sustainability'",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword = 'Sustainability'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the name of the authors of papers in which conferences have been published whose full name includes the word Workshop?",
        "question_ar": "",
        "evidence_en": "full name includes the word Workshop refers to FullName LIKE '%Workshop%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T3.FullName LIKE '%Workshop%'"
    },
    {
        "db_id": "authors",
        "question_en": "What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?",
        "question_ar": "",
        "evidence_en": "about Charged particle multiplicity refers to Title which contains 'Charged particle multiplicity'; affiliated with INFN refers to Affiliation LIKE '%INFN%' ; percentage refers to DIVIDE(COUNT(Affiliation LIKE '%INFN%' ), COUNT(AuthorId)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'"
    },
    {
        "db_id": "authors",
        "question_en": "What percentage of journals whose short name begins with ANN were published in the paper database in 1989?",
        "question_ar": "",
        "evidence_en": "short name begins with ANN refers to ShortName like 'ANN%' ; percentage refers to DIVIDE(COUNT(ShortName like 'ANN%' ), COUNT(id)) * 100%;  in 1989 refers to Year = 1989",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.ShortName LIKE 'ANN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.ShortName) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 1989"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors were associated with the Microsoft Research when paper number 1 was written?",
        "question_ar": "",
        "evidence_en": "associated with the Microsoft Research refers to Affiliation contains 'Microsoft Research'; paper number 1 refers to PaperId = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Affiliation LIKE '%Microsoft Research%'"
    },
    {
        "db_id": "authors",
        "question_en": "What was the topic of the article \"A Formal Approach to Service Component Architecture\" and when was it published?",
        "question_ar": "",
        "evidence_en": "article \"A Formal Approach to Service Component Architecture\" refers to Title = 'A Formal Approach to Service Component Architecture'; topic of the article refers to Keyword",
        "evidence_ar": "",
        "SQL": "SELECT Keyword, Year FROM Paper WHERE Title = 'A Formal Approach to Service Component Architecture'"
    },
    {
        "db_id": "authors",
        "question_en": "What percentage of papers were preprinted after the year 2000?",
        "question_ar": "",
        "evidence_en": "after the year 2000 refers to Year > 2000; preprinted refers to ConferenceId = 0 AND JournalId = 0; percentage refers to DIVIDE(COUNT(ConferenceId = 0 AND JournalId = 0 AND Year > 2000), COUNT(Id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) FROM Paper"
    },
    {
        "db_id": "authors",
        "question_en": "Please list the names of the authors of the paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\".",
        "question_ar": "",
        "evidence_en": "paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\" refers to Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the full name of the journal that published the paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\"?",
        "question_ar": "",
        "evidence_en": "paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\" refers to Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were in the journal \"Iet Software/iee Proceedings - Software\"?",
        "question_ar": "",
        "evidence_en": "journal \"Iet Software/iee Proceedings - Software\" refers to FullName = 'Iet Software/iee Proceedings - Software'; papers refers to COUNT(JournalId)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.JournalId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the full name of the conference where paper number 5 was published?",
        "question_ar": "",
        "evidence_en": "paper number 5 refers to Id = 5",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Id = 5"
    },
    {
        "db_id": "authors",
        "question_en": "Please list the titles of any two papers that Jundu has written.",
        "question_ar": "",
        "evidence_en": "papers that Jundu has written refers to Name LIKE '%Jun du%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name LIKE 'Jun du%' LIMIT 2"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title of the paper that was written by Cheng Huang and affiliated with Microsoft?",
        "question_ar": "",
        "evidence_en": "paper that was written by Cheng Huang refers to Name = 'Cheng Huang'; affiliated with Microsoft refers to Affiliation LIKE 'Microsoft %'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Cheng Huang' AND T2.Affiliation = 'Microsoft'"
    },
    {
        "db_id": "authors",
        "question_en": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.",
        "question_ar": "",
        "evidence_en": "papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "What are the three journals that the papers written by Andrew Cain were published in? Please provide your answer with the full name of each journal.",
        "question_ar": "",
        "evidence_en": "written by Andrew Cain refers to Name = 'Andrew Cain'",
        "evidence_ar": "",
        "SQL": "SELECT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Andrew Cain'"
    },
    {
        "db_id": "authors",
        "question_en": "Please list all of the associations that the authors of the paper \"FIBER: A Generalized Framework for Auto-tuning Software\" are affiliated with.",
        "question_ar": "",
        "evidence_en": "paper \"FIBER: A Generalized Framework for Auto-tuning Software\" refers to Title = 'FIBER: A Generalized Framework for Auto-tuning Software'; are affiliated with refers to Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'"
    },
    {
        "db_id": "authors",
        "question_en": "Please provide the titles of any two papers that are either preprinted or unpublished along with the full name of the journal to which those papers belong.",
        "question_ar": "",
        "evidence_en": "papers that are either preprinted or unpublished along refers to Year = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year < 1 LIMIT 2"
    },
    {
        "db_id": "authors",
        "question_en": "What is the journal's short and full names that feature papers on the \"Materials\" topic?",
        "question_ar": "",
        "evidence_en": "papers on the \"Materials\" topic refers to Keyword = 'Materials'",
        "evidence_ar": "",
        "SQL": "SELECT T2.ShortName, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword LIKE '%Materials%'"
    },
    {
        "db_id": "authors",
        "question_en": "List the names of authors affiliated with the University of Oxford in alphabetical order.",
        "question_ar": "",
        "evidence_en": "affiliated with the University of Oxford refers to Affiliation = 'University of Oxford'",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC"
    },
    {
        "db_id": "authors",
        "question_en": "List the short name and home page URL of all the international conferences on artificial intelligence.",
        "question_ar": "",
        "evidence_en": "all the international conferences on artificial intelligence refers to FullName LIKE 'International Conference on Artificial Intelligence%'",
        "evidence_ar": "",
        "SQL": "SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%'"
    },
    {
        "db_id": "authors",
        "question_en": "Find the names of papers which are published in the year 1996.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Paper WHERE year = 1996"
    },
    {
        "db_id": "authors",
        "question_en": "List the title and author's name of papers published in the 2007 Neoplasia journal.",
        "question_ar": "",
        "evidence_en": "published in the 2007 refers to Year = 2007; Neoplasia journal refers to FullName = 'Neoplasia'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'Neoplasia' AND T1.Year = 2007"
    },
    {
        "db_id": "authors",
        "question_en": "Among the authors affiliated with Soongsil University, list the authors' names and papers published during the year 2000.",
        "question_ar": "",
        "evidence_en": "authors affiliated with Soongsil University refers to Affiliation = 'Soongsil University'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title, T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Soongsil University' AND T2.Year = 2000"
    },
    {
        "db_id": "authors",
        "question_en": "Give the title and author's name of the papers published between 2000 and 2005 that include the topic optical properties.",
        "question_ar": "",
        "evidence_en": "published between 2000 and 2005 refers to Year BETWEEN 2000 AND 2005; include the topic optical properties refers to Keyword LIKE '%optical properties%'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword LIKE '%optical properties%' AND T1.Year BETWEEN 2000 AND 2005 AND T1.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "What is the average number of papers published in the World Computer Congress each year?",
        "question_ar": "",
        "evidence_en": "published in the World Computer Congress refers to FullName = 'World Computer Congress'; average refers to DIVIDE(COUNT(FullName = 'World Computer Congress'), COUNT(Id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Congress Series' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) AS Div1, T1.Year FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.YEAR HAVING Div1 != 0"
    },
    {
        "db_id": "authors",
        "question_en": "Give the Title and author's name of the books that were preprint in 1997.",
        "question_ar": "",
        "evidence_en": "in 1997 refers to Year = 1997; books that were preprint refers to ConferenceId = 0 AND JournalId = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId = 0 AND T1.Year = 1997 AND T1.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "Write the titles of papers published by Adam Jones and the journal name in which it was published from 2005 to 2010.",
        "question_ar": "",
        "evidence_en": "published from 2005 to 2010 refers to Year BETWEEN 2005 AND 2010; published by Adam Jones refers to Name = 'Adam Jones'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Adam Jones' AND T1.Year BETWEEN 2005 AND 2010"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors is affiliated to the organization \"Otterbein University\"?",
        "question_ar": "",
        "evidence_en": "Otterbein University is an Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Otterbein University'"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors drafted the paper \"Subcellular localization of nuclease in barley aleurone\"?",
        "question_ar": "",
        "evidence_en": "'Subcellular localization of nuclease in barley aleurone' is the title of paper",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the full name of the conference in which the paper titled \"Extended Fuzzy Regression Models\" was published?",
        "question_ar": "",
        "evidence_en": "'Extended Fuzzy Regression Models' is the title of paper; full name of the conference refers to FullName",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Extended Fuzzy Regression Models'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers are published under the conference \"Mathematics of Program Construction\n\"?",
        "question_ar": "",
        "evidence_en": "'Mathematics of Program Construction' is the FullName of conference",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Mathematics of Program Construction'"
    },
    {
        "db_id": "authors",
        "question_en": "Who is the author of the paper titled \"Open Sourcing Social Solutions (Building Communities of Change)\"?",
        "question_ar": "",
        "evidence_en": "'Open Sourcing Social Solutions (Building Communities of Change)' is a title of the paper; author refers to PaperAuthor.Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)'"
    },
    {
        "db_id": "authors",
        "question_en": "List all the title of the paper that Jianli Hua published.",
        "question_ar": "",
        "evidence_en": "Jianli Hua is the author of a paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jianli Hua'"
    },
    {
        "db_id": "authors",
        "question_en": "Who authored the paper titled \"Testing timed automata\n\"?",
        "question_ar": "",
        "evidence_en": "'Testing timed automata' is a title of a paper; Who authored refers to PaperAuthor.Name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Testing timed automata'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers are published in year 2000 under the conference \"SSPR\"?",
        "question_ar": "",
        "evidence_en": "SSPR is a ShortName; papers refers to Paper.Id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2000 AND T2.ShortName = 'SSPR'"
    },
    {
        "db_id": "authors",
        "question_en": "List all the paper that the journal \"Theoretical Computer Science\n\" published in 2003.",
        "question_ar": "",
        "evidence_en": "'Theoretical Computer Science' is the FullName; paper refers to Title; published in 2003 refers to Year = 2003",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Title FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Theoretical Computer Science' AND T1.Year = 2003 AND T1.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "What is the conference homepage URL of the paper titled \"Quality evaluation of long duration audiovisual content\"?",
        "question_ar": "",
        "evidence_en": "homepage URL refers to HomePage; 'Quality evaluation of long duration audiovisual content' is the Title",
        "evidence_ar": "",
        "SQL": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Quality evaluation of long duration audiovisual content'"
    },
    {
        "db_id": "authors",
        "question_en": "Among the author who drafted the paper \"A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus\", which of them is/are affiliated with the Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea\n?",
        "question_ar": "",
        "evidence_en": "author refers to PaperAuthor.Name; 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' is the title; 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' is an Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' AND T1.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers are published under the journal \"Software - Practice and Experience\"?",
        "question_ar": "",
        "evidence_en": "papers refers to Paper.Id; 'Software - Practice and Experience' is the FullName of a journal;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Software - Practice and Experience'"
    },
    {
        "db_id": "authors",
        "question_en": "List all the paper that were under the conference homepage URL \"http://www.irma-international.org/\".",
        "question_ar": "",
        "evidence_en": "paper refers to Paper.Title; http://www.irma-international.org/ is the HomePage",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage = 'http://www.irma-international.org/'"
    },
    {
        "db_id": "authors",
        "question_en": "Calculate the total average number of papers published from 2002 to 2010 under the conference \"Information and Knowledge Engineering\".",
        "question_ar": "",
        "evidence_en": "average number of papers refers to DIVIDE(count(id), 9); published from 2002 to 2010 refers to Year BETWEEN 2002 AND 2010; 'Information and Knowledge Engineering' is the FullName of conference;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.Year) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Information and Knowledge Engineering' AND T1.Year >= 2002 AND T1.Year <= 2010"
    },
    {
        "db_id": "authors",
        "question_en": "From year 1991 to 2000, calculate the difference betweeen the total number of papers published under the conference \"International Conference on Supercomputing \" and \"Informatik & Schule\"?",
        "question_ar": "",
        "evidence_en": "From year 1991 to 2000 refers to Year BETWEEN 1991 AND 2000; papers refers to Paper.Id; 'International Conference on Supercomputing' AND 'Informatik & Schule' are the FullName of conference; calculate the difference between the total number of papers of these two conferences refers to SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Supercomputing'), SUM(Paper.Id where FullName = 'Informatik & Schule'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END) AS DIFF FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year > 1990 AND T1.Year < 2001"
    },
    {
        "db_id": "authors",
        "question_en": "What is the short name for \"Software - Concepts and Tools / Structured Programming\"?",
        "question_ar": "",
        "evidence_en": "'Software - Concepts and Tools / Structured Programming' is the FullName;",
        "evidence_ar": "",
        "SQL": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'"
    },
    {
        "db_id": "authors",
        "question_en": "Which journal was the paper \"Education, democracy and growth\" published on? Give the full name of the journal.",
        "question_ar": "",
        "evidence_en": "'Education, democracy and growth' is the title of a paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Education, democracy and growth'"
    },
    {
        "db_id": "authors",
        "question_en": "Give the number of papers that were published on \"IEEE Transactions on Nuclear Science\" in 1999.",
        "question_ar": "",
        "evidence_en": "'IEEE Transactions on Nuclear Science' is the FullName of journal; 1999 refers to Year = '1999'; papers refers to Paper.Id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Nuclear Science' AND T2.Year = 1999"
    },
    {
        "db_id": "authors",
        "question_en": "What was the name of the paper that was published on \"IEEE Transactions on Pattern Analysis and Machine Intelligence\" in 2011?",
        "question_ar": "",
        "evidence_en": "'IEEE Transactions on Pattern Analysis and Machine Intelligence' is the FullName of journal; 2011 refers to Year = '2011'; name of the paper refers to Title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND T2.Year = 2011 AND T2.Title <> ''"
    },
    {
        "db_id": "authors",
        "question_en": "What are the keywords for the paper which was published on \"Modeling Identification and Control\" in 1994?",
        "question_ar": "",
        "evidence_en": "'Modeling Identification and Control' is the FullName of the journal; 1994 refers to Year = '1994'; if the year is \"0\", it means this paper is preprint, or not published",
        "evidence_ar": "",
        "SQL": "SELECT T2.Keyword FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = 1994"
    },
    {
        "db_id": "authors",
        "question_en": "For the paper which was presented by \"Zvezdan Protić\", was it preprinted?",
        "question_ar": "",
        "evidence_en": "Year = 0 means this paper is preprint, or not published",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T1.Year = 0 THEN 'TRUE' ELSE 'FALSE' END FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Zvezdan Protić' AND T1.ConferenceId = 0 AND T1.JournalId = 0"
    },
    {
        "db_id": "authors",
        "question_en": "At which conference was the paper \"Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes\" presented?",
        "question_ar": "",
        "evidence_en": "'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes' is the Title of the paper; conference refers to Conference.FullName",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'"
    },
    {
        "db_id": "authors",
        "question_en": "Tell the number of papers that were presented at \"International Symposium on Software Testing and Analysis\" conference.",
        "question_ar": "",
        "evidence_en": "'International Symposium on Software Testing and Analysis' is the FullName of the conference; papers refers to Paper.Id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Symposium on Software Testing and Analysis'"
    },
    {
        "db_id": "authors",
        "question_en": "Gives the home page of the conference where the paper \"Increasing the Concurrency in Estelle\" is presented.",
        "question_ar": "",
        "evidence_en": "'Increasing the Concurrency in Estelle' is the Title of the paper; home page of the conference refers to HomePage;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Increasing the Concurrency in Estelle'"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors finished the paper \"An Improved Active Suspension Model for Attitude Control of Electric Vehicles\" together?",
        "question_ar": "",
        "evidence_en": "authors refers to AuthorId; 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles' is the Title of a paper; A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles'"
    },
    {
        "db_id": "authors",
        "question_en": "In the year 2012, which conference had the most papers presented? Give the short name of the conference.",
        "question_ar": "",
        "evidence_en": "Papers refers to Paper.Id; short name of the conference refers to Conference.ShortName",
        "evidence_ar": "",
        "SQL": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = '2012' GROUP BY T1.ConferenceId ORDER BY COUNT(T1.Id) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were presented at 'ECSQARU' in 2003?",
        "question_ar": "",
        "evidence_en": "Papers refers to Paper.Id; ECSQARU is the ShortName of the conference; 2003 refers to Year = '2003'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.ShortName = 'ECSQARU' AND T1.Year = '2003'"
    },
    {
        "db_id": "authors",
        "question_en": "Show the keywords of the paper that was presented at \"International Radar Symposium\" in 2012.",
        "question_ar": "",
        "evidence_en": "'International Radar Symposium' is the FullName of the conference; 2012 refers to Year = '2012'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Keyword FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = 2012"
    },
    {
        "db_id": "authors",
        "question_en": "How many times more for the papers that were presented at the \"International Conference on Thermoelectrics\" conference than \"International Conference on Wireless Networks, Communications and Mobile Computing“ conference?",
        "question_ar": "",
        "evidence_en": "'International Conference on Thermoelectrics' AND 'International Conference on Wireless Networks, Communications and Mobile Computing' are the FullName of the conference; Papers refers to Paper.Id; Calculation = SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Thermoelectrics'), SUM(Paper.Id where FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id"
    },
    {
        "db_id": "authors",
        "question_en": "What is the percentage of preprints of John Van Reenen's papers?",
        "question_ar": "",
        "evidence_en": "year = 0 means this paper is preprint; John Van Reenen is the author's name; papers refers to paper.Id; calculation = DIVIDE(SUM(paper.Id where Name = 'John Van Reenen' AND ConferenceID = 0 AND  JournalId = 0), SUM(paper.Id where Name = 'John Van Reenen'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 AND T1.JournalId = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'John Van Reenen'"
    },
    {
        "db_id": "authors",
        "question_en": "What is the oldest published book?",
        "question_ar": "",
        "evidence_en": "published book refers to Title; the oldest book refers to MIN(Year)",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM Paper WHERE Year > 0 ORDER BY Year ASC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "Which conference has the longest name?",
        "question_ar": "",
        "evidence_en": "the longest name refers to MAX(length(FullName))",
        "evidence_ar": "",
        "SQL": "SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "How many authors are affiliated with NASA Langley Research Center?",
        "question_ar": "",
        "evidence_en": "NASA Langley Research Center is the Affiliation",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'NASA Langley Research Center'"
    },
    {
        "db_id": "authors",
        "question_en": "How many journals don’t have a short name?",
        "question_ar": "",
        "evidence_en": "don’t have a short name means ShortName is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ShortName) FROM Journal WHERE ShortName = ''"
    },
    {
        "db_id": "authors",
        "question_en": "How many of the papers are preprinted?",
        "question_ar": "",
        "evidence_en": "year = 0 means this paper is preprint; papers refers to Paper.Id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM Paper WHERE ConferenceId = 0 AND JournalId = 0"
    },
    {
        "db_id": "authors",
        "question_en": "What is the title of the paper with the most authors?",
        "question_ar": "",
        "evidence_en": "paper refers to paper.Id; paper with the most authors refers to MAX(PaperAuthor.PaperId)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id GROUP BY T1.PaperId ORDER BY COUNT(T1.PaperId) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "Which paper published by the \"TUBERCLE LUNG DIS\" journal is the oldest?",
        "question_ar": "",
        "evidence_en": "paper refers to Title; TUBERCLE LUNG DIS is the ShortName of journal; the oldest refers to MIN(Year)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'TUBERCLE LUNG DIS' ORDER BY T2.Year ASC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "List all of the papers written by the author \"Karin Rengefors.\"",
        "question_ar": "",
        "evidence_en": "all the papers refers to Title; Karin Rengefors is the Name of the author",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Karin Rengefors'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were published by the \"Virtual Reality, IEEE Annual International Symposium\" conference in 2012?",
        "question_ar": "",
        "evidence_en": "'Virtual Reality, IEEE Annual International Symposium' is the FullName of conference; in 2012 refers to Year = 2012;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND T2.Year = 2012"
    },
    {
        "db_id": "authors",
        "question_en": "What is the short name for the journal that published the paper \"A Case of Unilateral Ashy Dermatosis\"?",
        "question_ar": "",
        "evidence_en": "A Case of Unilateral Ashy Dermatosis refer to Title",
        "evidence_ar": "",
        "SQL": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'A Case of Unilateral Ashy Dermatosis'"
    },
    {
        "db_id": "authors",
        "question_en": "What are the affiliations of the author \"Mark A. Musen\" written on and off paper?",
        "question_ar": "",
        "evidence_en": "Mark A. Musen refer to Author.Name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Mark A. Musen'"
    },
    {
        "db_id": "authors",
        "question_en": "Who are the authors of the paper \"Determination of Planetary Meteorology from Aerobot Flight Sensors\"?",
        "question_ar": "",
        "evidence_en": "'Determination of Planetary Meteorology from Aerobot Flight Sensors' refer to title of the paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Determination of Planetary Meteorology FROM Aerobot Flight Sensors'"
    },
    {
        "db_id": "authors",
        "question_en": "List all the titles and their publishing journals from the 60's.",
        "question_ar": "",
        "evidence_en": "from the 60’s refer to Year 1960 BETWEEN 1970\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T1.JournalId FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year >= 1960 AND T1.Year <= 1970"
    },
    {
        "db_id": "authors",
        "question_en": "Which year did the \"Internet, Multimedia Systems and Applications\" conference publish the most papers?",
        "question_ar": "",
        "evidence_en": "'Internet, Multimedia Systems and Applications' is the FullName of paper; published the most papers refers to MAX(COUNT(year))",
        "evidence_ar": "",
        "SQL": "SELECT T2.Year FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Internet, Multimedia Systems and Applications' GROUP BY T2.Year ORDER BY COUNT(T2.Id) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "What are the different ways the name of the author, Randall Davis, is written on their papers?",
        "question_ar": "",
        "evidence_en": "Randall Davis refer to Author.Name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Name FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Randall Davis' AND T1.Name != 'Randall Davis'"
    },
    {
        "db_id": "authors",
        "question_en": "List all of the conferences where a paper was published in 2008.",
        "question_ar": "",
        "evidence_en": "Published in 2008 refer to Year = 2008\n\n",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2008"
    },
    {
        "db_id": "authors",
        "question_en": "What is the homepage URL for the journal that published the most papers?",
        "question_ar": "",
        "evidence_en": "published the most papers refer to MAX(JournalId); homepage URL refers to HomePage",
        "evidence_ar": "",
        "SQL": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.JournalId ORDER BY COUNT(T1.JournalId) DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "What is the proportion of the papers that have the keyword \"cancer\"? Please provide a list of authors and their affiliations.",
        "question_ar": "",
        "evidence_en": "Proportion refer to DIVIDE(COUNT(Keyword = ’cancer’), COUNT(PaperID))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'cancer' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id), T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId"
    },
    {
        "db_id": "authors",
        "question_en": "What is the name of author with the ID of 1722?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Author WHERE Id = 1722"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers are preprint or not published?",
        "question_ar": "",
        "evidence_en": "preprint or not published refer to Year = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM Paper WHERE Year = 0 OR (ConferenceId = 0 AND JournalId = 0)"
    },
    {
        "db_id": "authors",
        "question_en": "List the name of the author that affiliated with University of Illinois Chicago?",
        "question_ar": "",
        "evidence_en": "'University of Illinois Chicago' is an affiliation",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were published in 2005. Calculate the difference between the number of paper published in 2005 and the number of paper published in the previous year.",
        "question_ar": "",
        "evidence_en": "published in 2005 refer to Year = 2005; Difference refer to SUBTRACT(SUM(Year = 2005). SUM(Year = 2004))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) , SUM(CASE WHEN year = 2005 THEN 1 ELSE 0 END) - SUM(CASE WHEN year = 2004 THEN 1 ELSE 0 END) AS diff FROM Paper"
    },
    {
        "db_id": "authors",
        "question_en": "State the title of papers published in the Ibm Journal of Research and Development.",
        "question_ar": "",
        "evidence_en": "Ibm Journal of Research and Development refer to FullName\n\n'Ibm Journal of Research and Development' is the full name of paper",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Ibm Journal of Research and Development'"
    },
    {
        "db_id": "authors",
        "question_en": "State the name and affiliation of author for the 'Education, democracy and growth' paper?",
        "question_ar": "",
        "evidence_en": "Education, democracy and growth' refer to title of paper\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Education, democracy and growth'"
    },
    {
        "db_id": "authors",
        "question_en": "How many author published papers in the 'IEEE Computer' journal?",
        "question_ar": "",
        "evidence_en": "IEEE Computer refer to FullName; How many author published papers refer to COUNT(PaperAuthor.Name) where FullName = ’IEEE Computer’",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'IEEE Computer'"
    },
    {
        "db_id": "authors",
        "question_en": "Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference.",
        "question_ar": "",
        "evidence_en": "A context-based navigation paradigm for accessing Web data' is the title of paper; name of conference refer to FullName\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'A context-based navigation paradigm for accessing Web data'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were published in International Workshop on Inductive Logic Programming from 2001 to 2009?",
        "question_ar": "",
        "evidence_en": "From 2001 to 2009 refer to Year 2001 BETWEEN 2009; 'International Workshop on Inductive Logic Programming' refer to Conference.FullName\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Workshop on Inductive Logic Programming' AND T1.Year BETWEEN 2001 AND 2009"
    },
    {
        "db_id": "authors",
        "question_en": "Calculate the average of authors for each paper from the year of 1990 to 2000.",
        "question_ar": "",
        "evidence_en": "Average refer to DIVIDE(COUNT(AuthorID where Year = 1990 BETWEEN 2000), COUNT(Title where Year = 1990 BETWEEN 2000))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT T2.AuthorId) AS REAL) / COUNT(DISTINCT T1.Title) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year BETWEEN 1990 AND 2000"
    },
    {
        "db_id": "authors",
        "question_en": "Indicate the year and a full name of the journal in which the publication named 'Area Effects in Cepaea' was published.",
        "question_ar": "",
        "evidence_en": "'Area Effects in Cepaea' is the title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.Year, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Area Effects in Cepaea'"
    },
    {
        "db_id": "authors",
        "question_en": "Who is the author of the publication named 'Real-Time Automata'?",
        "question_ar": "",
        "evidence_en": "'Real-Time Automata' is the title of paper; publication refers to title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Real-Time Automata'"
    },
    {
        "db_id": "authors",
        "question_en": "Provide the name of the author who is affiliated with the organization named 'ABB Electrical Machines'.",
        "question_ar": "",
        "evidence_en": "'ABB Electrical Machines' is an affiliation",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'"
    },
    {
        "db_id": "authors",
        "question_en": "Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010.",
        "question_ar": "",
        "evidence_en": "'Academic Medicine' is the FullName of journal; between 2005 and 2010 refer to Year 2005 BETWEEN 2010",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.JournalId) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Academic Medicine' AND T2.Year BETWEEN 2005 AND 2010"
    },
    {
        "db_id": "authors",
        "question_en": "Provide the title of the latest publication published by it's author 'Zuliang Du'.",
        "question_ar": "",
        "evidence_en": "'Zuliang Du' is the name of paper author; latest publication refers to MAX(Year)",
        "evidence_ar": "",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Zuliang Du' ORDER BY T2.Year DESC LIMIT 1"
    },
    {
        "db_id": "authors",
        "question_en": "How many publications were published in relation to the conference 'Adaptive Multimedia Retrieval' in 2007?",
        "question_ar": "",
        "evidence_en": "'Adaptive Multimedia Retrieval is the FullName of paper; in 2007 refer to Year = 2007",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.ConferenceId) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Adaptive Multimedia Retrieval' AND T2.Year = 2007"
    },
    {
        "db_id": "authors",
        "question_en": "Provide the average number of papers that are published in the journal named 'Information Sciences' annually.",
        "question_ar": "",
        "evidence_en": "'Information Sciences' is the FullName of journal; average = DIVIDE(COUNT(JournalId = 48), COUNT(Years))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.JournalId) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Information Sciences'"
    },
    {
        "db_id": "authors",
        "question_en": "How many publications were published by author named 'Howard F. Lipson'?",
        "question_ar": "",
        "evidence_en": "'Howard F. Lipson' is the name of author",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Name = 'Howard F. Lipson'"
    },
    {
        "db_id": "authors",
        "question_en": "Among all publications containing keywords 'Turbulent Fluids', what percentage of them was published in the journal named 'Physics of Fluids'?",
        "question_ar": "",
        "evidence_en": "'Physics of Fluids' is the FullName of journal; percentage = DIVIDE(SUM(Keyword = 'Turbulent Fluids'), SUM(FullName = 'Physics of Fluids')) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id"
    },
    {
        "db_id": "authors",
        "question_en": "Indicate the number of authors affiliated with the organization named 'Arizona State University'.",
        "question_ar": "",
        "evidence_en": "'Arizona State University' is an affiliation",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Arizona State University'"
    },
    {
        "db_id": "authors",
        "question_en": "List out the full name and URL link of ICCI?",
        "question_ar": "",
        "evidence_en": "'ICCI' is the ShortName of conference; URL refer to HomePage",
        "evidence_ar": "",
        "SQL": "SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI'"
    },
    {
        "db_id": "authors",
        "question_en": "Mention the titile of paper writen by Joe Lograsso.",
        "question_ar": "",
        "evidence_en": "'Joe Lograsso' is name of paper author",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Joe Lograsso'"
    },
    {
        "db_id": "authors",
        "question_en": "How many papers were written by authors who cooperated with University of Hong Kong?",
        "question_ar": "",
        "evidence_en": "University of Hong Kong' is an affiliation",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.PaperId) FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId WHERE T1.Affiliation = 'University of Hong Kong'"
    },
    {
        "db_id": "authors",
        "question_en": "State the year and title of papers written by Barrasa.",
        "question_ar": "",
        "evidence_en": "'Barassa' is name of paper author",
        "evidence_ar": "",
        "SQL": "SELECT T1.Year, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Barrasa'"
    },
    {
        "db_id": "authors",
        "question_en": "Sate the author name and published year for paper id 2?",
        "question_ar": "",
        "evidence_en": "published year refers to year",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.Year FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 2"
    },
    {
        "db_id": "authors",
        "question_en": "Mention the name of author for paper id 5 and state the keyword of this page.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name, T3.Keyword FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 5"
    },
    {
        "db_id": "authors",
        "question_en": "What is the full name of the conference in which the paper \"2004 YD5\" was published?",
        "question_ar": "",
        "evidence_en": "'2004 YD5' is the title of paper",
        "evidence_ar": "",
        "SQL": "SELECT T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Title = '2004 YD5'"
    },
    {
        "db_id": "college_completion",
        "question_en": "List the all the institutes from the state with the most number of American Indian in 2007.",
        "question_ar": "",
        "evidence_en": "institutes refers to chronname; American Indian refers to race = 'Ai'; most number of American Indian refers to MAX(COUNT(race = 'Ai')); in 2007 refers to year = '2007';",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2007 AND T2.race = 'Ai' GROUP BY T1.chronname ORDER BY COUNT(T1.chronname) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "State the name and website of the institutes from the state with 209 graduate cohort in 2011.",
        "question_ar": "",
        "evidence_en": "name of the institutes refers to chronname; website refers to site; graduate cohort refers to grad_cohort; in 2011 refers to year = '2011';",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname, T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2011 AND T2.grad_cohort = 209"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; graduates refers to grad_cohort; between 2011 to 2013 refers to year BETWEEN 2011 AND 2013; Gateway Community College refers to chronname = 'Gateway Community College';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the total male graduates in 2012 in the state whereby the institute with the highest average amount of student aid going to undergraduate recipients is located?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; graduates refers to grad_cohort; in 2012 refers to year = 2012; highest average amount of student aid going to undergraduate recipients refers to MAX(aid_value);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "State the average median SAT value for institutes in the state with the most male graduate cohort in 2013.",
        "question_ar": "",
        "evidence_en": "median SAT value refers to med_sat_value; average = AVG(med_sat_value); male refers to gender = 'M'; graduate cohort refers to grad_cohort; most male graduate cohort refers to MAX(COUNT(grad_cohort WHERE gender = 'M')); in 2013 refers to year = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T2.gender = 'M' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state.",
        "question_ar": "",
        "evidence_en": "most number of graduate cohort refers to MAX(SUM(grad_cohort)); in 2012 refers to year = 2012; private institute for profit refers to control = 'Private for-profit'; institutes refers to chronname;",
        "evidence_ar": "",
        "SQL": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "List all the public institutes from the state with the least number of graduate cohort in 2013.",
        "question_ar": "",
        "evidence_en": "public refers to control = 'Public'; institutes refers to chronname; least number of graduate cohort refers to MIN(grad_cohort); in 2013 refers to year = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T1.control = 'Public' ORDER BY T2.grad_cohort LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute.",
        "question_ar": "",
        "evidence_en": "institute name refers to chronname; less than 200 graduate cohort refers to grad_cohort < 200; all races refers to race = 'X'; all genders refers to gender = 'B'; in 2013 refers to year = 2013; total number of full-time equivalent undergraduates refers to fte_value;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the number of female graduate for all students cohort from Oakwood University in 2013?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; graduates refers to grad_cohort; Oakwood University refers to chronname = 'Oakwood University'; in 2013 refers to year = 2013; all sutdents refer to rae = 'X';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'"
    },
    {
        "db_id": "college_completion",
        "question_en": "In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage?",
        "question_ar": "",
        "evidence_en": "In 2012 refers to year = 2012; Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other'; University of Alaska at Anchorage refers to chronname = 'University of Alaska at Anchorage';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'F' AND T2.race = 'A' AND T1.chronname = 'University of Alaska at Anchorage' AND T2.cohort = '4y other'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Compare the graduate cohort for Auburn University from 2011 to 2013?",
        "question_ar": "",
        "evidence_en": "graduate cohort for Auburn University refers to grad_cohort is not null WHERE chronname = 'Auburn University', gender = 'B', race = 'X' and cohort = '4y other', '4y bach'; from 2011 to 2013 refers to year in (2011, 2012, 2013);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2013 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'B' AND T2.race = 'X' AND T1.chronname = 'Auburn University'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Calculate the percentage of Black students in all private for profit institutions.",
        "question_ar": "",
        "evidence_en": "Black students refers to race = 'B'; private for profit refers to control = 'Private for-profit'; percentage = MULTIPLY(DIVIDE(SUM(race = 'B'), SUM(grad_cohort)), 100.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time.",
        "question_ar": "",
        "evidence_en": "Asian refers to race = 'A'; Alabama refers to state = 'Alabama'; graduated within 100 percent of normal/expected time refers to grad_100; percentage = MULTIPLY(DIVIDE(SUM(race = 'A'), SUM(grad_cohort)), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.race = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T1.state = 'Alabama'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013?",
        "question_ar": "",
        "evidence_en": "ratio = MULTIPLY(DIVIDE(SUM(grad_cohort WHERE Gender = 'M'), SUM( grad_cohort WHERE Gender = 'F')), 1.0); Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; male refers to gender = 'M'; Harvard University refers to chronname = 'Harvard University'; in 2013 refers to year = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN T2.grad_cohort ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Gender = 'F' THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Harvard University' AND T2.year = 2013 AND T2.race = 'A'"
    },
    {
        "db_id": "college_completion",
        "question_en": "From which institute is harder to graduate for a bachelor, Amridge University or Auburn University?",
        "question_ar": "",
        "evidence_en": "institute refers to chronname; harder to graduate for a bachelor refers to MIN(grad_100_value); Amridge University refers to chronname = 'Amridge University'; Auburn University refers to chronname = 'Auburn University';",
        "evidence_ar": "",
        "SQL": "SELECT chronname FROM institution_details WHERE chronname IN ('Amridge University', 'Auburn University') ORDER BY grad_100_value LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many institutes are private and not-for profit?",
        "question_ar": "",
        "evidence_en": "private and not for profit refers to control = 'Private not-for-profit';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM institution_details WHERE control = 'Private not-for-profit'"
    },
    {
        "db_id": "college_completion",
        "question_en": "In total, how many Hispanic male students graduated from Amridge University?",
        "question_ar": "",
        "evidence_en": "Hispanic refers to race = 'H'; male refers to gender = 'M'; Amridge University refers to chronname = 'Amridge University';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many students that graduated from Lincoln College in 2011 belong to the cohort type of Bachelor's/equivalent seeking cohort at 4-year institutions?",
        "question_ar": "",
        "evidence_en": "Lincoln College refers to chronname = 'Lincoln College'; in 2011 refers to year = 2011; Bachelor's/equivalent seeking cohort at 4-year institutions refers to cohort = '4y bach';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What's the number of male Hispanic students who graduated from Central Alabama Community College in 2011 within 100 percent of normal/expected time?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; Hispanic students refers to race = 'H'; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; number of students who graduated within 100 percent of normal/expected time refers to grad_100;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'H'"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many students graduated from Central Alabama Community College in 2011 in total?",
        "question_ar": "",
        "evidence_en": "Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011"
    },
    {
        "db_id": "college_completion",
        "question_en": "Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students?",
        "question_ar": "",
        "evidence_en": "amount of percentage = SUM(grad_150 WHERE gender = 'F') as female; percentage = SUM(grad_150 WHERE gender = 'M') as male; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; graduated within 150 percent of normal/expected time refers to grad_150; female refers to gender = 'F'; White refers to race = 'w'; male refers to gender = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(CASE WHEN T2.gender = 'F' THEN T2.grad_150 ELSE 0 END) > SUM(CASE WHEN T2.gender = 'M' THEN T2.grad_150 ELSE 0 END), 'female White students', 'male White students') FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.race = 'W'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Which institute has the highest percentage of male White students graduating in 2011 within 150 percent of normal/expected time?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; graduating within 150 percent of normal/expected time refers to grad_150;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )"
    },
    {
        "db_id": "college_completion",
        "question_en": "Please list the names of the institutes with the percentage of male White students graduating in 2011 within 150 percent of normal/expected time over 20.",
        "question_ar": "",
        "evidence_en": "names of the institutes refers to chronname; male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; percentage of students graduating within 150 percent of normal/expected time over 20 refers to grad_150>20;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T2.grad_150 > 20 THEN T1.chronname ELSE NULL END AS T FROM institution_details T1 INNER JOIN institution_grads T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many students for both genders graduated from a 2-year institute in Alabama in 2011?",
        "question_ar": "",
        "evidence_en": "2-year institute refers to cohort = '2y all'; Alabama refers to state = 'Alabama'; in 2011 refers to year = 2011; T2.gender = 'B' means both genders;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE  T2.cohort = '2y all' AND T2.year = 2011 AND T1.state = 'Alabama'"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many more students in total graduated from Central Alabama Community College in 2012 than in 2011?",
        "question_ar": "",
        "evidence_en": "how many more = SUBTRACT(SUM(grad_cohort WHERE year = 2012)), (sum(grad_cohort WHERE year = 2011)); Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2012 refers to year = 2012; in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END) - SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the institutes in the state of Alabama whose percent rank for median SAT value within sector is 77, how many of them have over 500 graduates in total in 2011?",
        "question_ar": "",
        "evidence_en": "percent rank for median SAT value within sector refers to med_sat_percentile; over 500 graduates refers to grad_cohort > 500; in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011?",
        "question_ar": "",
        "evidence_en": "public refers to control = 'Public'; over 30 students who graduated within 100 percent of normal/expected time refers to grad_100 > 30; in 2011 refers to year = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.control = 'Public' AND T2.year = 2011 AND T2.grad_100 > 30"
    },
    {
        "db_id": "college_completion",
        "question_en": "Please list the names of the institutes in the state of Alabama whose all graduates in total exceeded 500 in 2011?",
        "question_ar": "",
        "evidence_en": "names of the institutes refers to chronname; graduates refers to grad_cohort; grad_cohort > 500; in 2011 refers to year = 2011; all students refer to race = 'X'.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T2.race = 'X' AND T2.grad_cohort > 500"
    },
    {
        "db_id": "college_completion",
        "question_en": "What's the average number of graduates for Central Alabama Community College in the 3 consecutive years from 2011 to 2013?",
        "question_ar": "",
        "evidence_en": "graduates refers to grad_cohort; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; average number of graduates for 3 consecutive years = DIVIDE(SUM(SUM(grad_cohort WHERE year = 2011), SUM(grad_cohort WHERE year = 2012), SUM(grad_cohort WHERE year = 2013)), 3);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year IN (2011, 2012, 2013) AND T2.gender = 'B' AND T2.race = 'X'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the average percentage of students graduating within 100 percent of normal/expected time for Central Alabama Community College?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(grad_100_rate), (SUM(grad_100), SUM(grad_150))); percentage of students graduating within 100 percent of normal/expected time refers to grade_100_rate; Central Alabama Community College refers to chronname = 'Central Alabama Community College';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the web site address for \"Swarthmore College\".",
        "question_ar": "",
        "evidence_en": "website address refers to site; Swarthmore College refers to chronname = 'Swarthmore College';",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "Which state is \"Mercer University\" located in?",
        "question_ar": "",
        "evidence_en": "Mercer University refers to chronname = 'Mercer University';",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "Which city is \"Rensselaer Polytechnic Institute\" located in?",
        "question_ar": "",
        "evidence_en": "Rensselaer Polytechnic Institute refers to chronname = 'Rensselaer Polytechnic Institute';",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Rensselaer Polytechnic Institute' THEN city ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "Tell the abbreviation for \"Delaware\" state.",
        "question_ar": "",
        "evidence_en": "abbreviation for state refers to state_abbr;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many 2-year public schools are there in \"California\"?",
        "question_ar": "",
        "evidence_en": "2-year refers to level = '2-year'; public refers to control = 'public'; California refers to state = 'California';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(stateid) FROM state_sector_details WHERE state = 'California' AND level = '2-year' AND control = 'Public'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the post name of \"Idaho\" state.",
        "question_ar": "",
        "evidence_en": "post name refers to state_post;",
        "evidence_ar": "",
        "SQL": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Idaho' THEN state_post ELSE NULL END AS T FROM state_sector_details ) WHERE T IS NOT NULL"
    },
    {
        "db_id": "college_completion",
        "question_en": "Tell the name of school in \"NJ\" that could get the bachelor's degree with highest students number.",
        "question_ar": "",
        "evidence_en": "name of school refers to chronname; NJ refers to state_abbr = 'NJ'; bachelor's degree refers to level = '4-year'; highest students number refers to MAX(student_count);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' )"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the web site address for the school in \"PA\" state with the highest latitude.",
        "question_ar": "",
        "evidence_en": "web site address refers to site; PA refers to state_abbr = 'PA'; highest latitude refers to MAX(lat_y);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )"
    },
    {
        "db_id": "college_completion",
        "question_en": "Tell the number of 4-year public schools in UT whose graduation rate exceeds the average for the state.",
        "question_ar": "",
        "evidence_en": "4-year refers to level = '4-year'; public refers to control = 'Public'; UT refers to state_abbr = 'UT'; graduation rate exceeds the average for the state refers to awards_per_value > awards_per_state_value;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'UT' AND T1.level = '4-year' AND T1.control = 'Public' AND T1.awards_per_value > T1.awards_per_state_value"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many 2-year private nonprofit schools in \"CT\" whose graduation rate falls below the average for the state?",
        "question_ar": "",
        "evidence_en": "2-year refers to level = '2-year'; private nonprofit refers to control = 'Private not-for-profit'; CT refers to state_abbr = 'CT'; graduation rate falls below the average for the state refers to awards_per_value < awards_per_natl_value;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'CT' AND T2.level = '2-year' AND T1.control = 'Private not-for-profit' AND T1.awards_per_value < T1.awards_per_natl_value"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the name of the 4-year public school in \"ID\" with the lowest graduation 100 value.",
        "question_ar": "",
        "evidence_en": "name of the school refers to chronname; 4-year refers to level = '4-year'; public refers to control = 'Public'; ID refers to state_abbr = 'ID'; lowest graduation 100 value refers to MIN(grad_100_value);",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "Which 4-year private for-profit school in \"KY\" has the highest graudation 150 value? Give the ID for the school.",
        "question_ar": "",
        "evidence_en": "4-year refers to level = '4-year'; private for profit refers to control = 'Private for-profit'; KY refers to state_abbr = 'KY'; highest graduation 150 value refers to MAX(grad_150_value); ID of the school refers to unitid;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname, T1.unitid FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'KY' AND T1.level = '4-year' AND T1.control = 'Private for-profit' GROUP BY T1.chronname ORDER BY SUM(T1.grad_150_value) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "What was the number of female Hispanic students who graduated within 100 percent of expected time for \"Pennsylvania State University-Altoona\"?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; Hispanic refers to race = 'H'; graduated within 100 percent of expected time refers to grad_100; Pennsylvania State University-Altoona refers to chronname = 'Pennsylvania State University-Altoona';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the cohort name for the school with biggest cohort size.",
        "question_ar": "",
        "evidence_en": "biggest cohort size refers to MAX(cohort_size); cohort = '4y bach' means bachelor's or equivalent-seeking cohort at 4-year institutions; cohort = '4y other' means students seeking another type of degree or certificate at a 4-year institution; cohort = '2y all' means degree-seeking students at 2-year institutions;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.cohort_size = ( SELECT MAX(T1.cohort_size) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )"
    },
    {
        "db_id": "college_completion",
        "question_en": "Tell the number of 4-year private not-for-profit schools in the home state of \"Brevard Community College\".",
        "question_ar": "",
        "evidence_en": "4-year refers to level = '4-year'; private not-for-profit refers to control = 'Private not-for-profit'; Brevard Community College refers to chronname = 'Brevard Community College';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T2.level = '4-year' AND T2.control = 'Private not-for-profit' AND T1.chronname = 'Brevard Community College'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the total number of all graduated students from a 2-year public schools in Alabama in 2011.",
        "question_ar": "",
        "evidence_en": "number of graduated students refers to grad_cohort; 2-year refers to level = '2-year'; public refers to control = 'Public'; Alabama refers to state = 'Alabama'; in 2011 refers to year = '2011'; reace = 'X' means all students.",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T1.level = '2-year' AND T1.control = 'Public' AND T2.race = 'X'"
    },
    {
        "db_id": "college_completion",
        "question_en": "For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013.",
        "question_ar": "",
        "evidence_en": "schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.gender = 'B' AND T2.race = 'A' AND T2.cohort = '2y all' AND T1.schools_count = 113"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the percentage of the number of 4-year public schools from Madison Area Technical College's home state in the Alabama?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(chronname = 'Madison Area Technical College'), SUM(state = 'Alabama')), 100); 4-year refers to level = '4-year'; public refers to control = 'Public'; Madison Area Technical College refers to chronname = 'Madison Area Technical College'; home state in the United States refers to state;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.state = ( SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname = 'Madison Area Technical College' ) AND T1.level = '4-year' AND T1.control = 'Public' THEN T1.chronname ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT CASE WHEN T2.state = 'Alabama' THEN T1.chronname ELSE NULL END) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state"
    },
    {
        "db_id": "college_completion",
        "question_en": "Give the state and name of institutions in year of data release from 2010 to 2012 with black students.",
        "question_ar": "",
        "evidence_en": "name of institutions refers to chronname; year of data release refers to year; from '2010' to '2012' refers to year BETWEEN 2010 AND 2012; Black refers to race = 'B';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012"
    },
    {
        "db_id": "college_completion",
        "question_en": "List down the states in 2011 with a national sector average of 20 and below.",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year = '2011'; national sector average of 20 and below refers to awards_per_natl_value < 20;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.year = 2011 AND T1.awards_per_natl_value <= 20"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the race of all students, what is the control of institution and level of institution with highest number of students?",
        "question_ar": "",
        "evidence_en": "highest number of students refers to student_count; all students refer to race = 'X'.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.control, T1.level FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' )"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the states with a public school count of 20 and below, list their race.",
        "question_ar": "",
        "evidence_en": "public refers to control = 'Public'; school_count < 20;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.race FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count <= 20 AND T1.control = 'Public'"
    },
    {
        "db_id": "college_completion",
        "question_en": "List the basic of the institution in 2012 with race of all male students.",
        "question_ar": "",
        "evidence_en": "in 2012 refers to year = '2012'; male refers to gender = 'M'; all students refer to race = 'X'.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.basic, T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2012 AND T2.gender = 'M' AND t2.race = 'X'"
    },
    {
        "db_id": "college_completion",
        "question_en": "In Alaska with school count of 1 from year 2011 to 2013, how many of the students are white?",
        "question_ar": "",
        "evidence_en": "Alaska refers to state = 'Alaska'; from year 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; white refers to race = 'W';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count = 1 AND T2.year BETWEEN 2011 AND 2013 AND T2.race = 'W' AND T1.state = 'Alaska'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the institution's name of american students within the number of degree-seeking students in the cohort that ranges from 1 to 3?",
        "question_ar": "",
        "evidence_en": "institution's name refers to chronname; american refers to race = 'Ai'; number of degree-seeking students in the cohort refers to grad_cohort; grad_cohort < = 3;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.grad_cohort BETWEEN 1 AND 3 AND T2.race = 'Ai'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the states that start with letter A and attained a national sector average of 16.5, give the number of degree-seeking students in the cohort of those students in 2012 .",
        "question_ar": "",
        "evidence_en": "state that starts with letter A refers to state LIKE 'A%'; national sector average of 16.5 refers to awards_per_natl_value = 16.5; number of degree-seeking students in the cohort refers to grad_cohort; in 2012 refers to year = '2012';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state LIKE 'A%' AND T1.awards_per_natl_value = 16.5 AND T2.year = 2012"
    },
    {
        "db_id": "college_completion",
        "question_en": "List the site of institution within the student count of 500 to 1000 that has the recent year of data release.",
        "question_ar": "",
        "evidence_en": "recent year of data release refers to newest year;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the state name of male graduate in 2011 from a private for profit institution with black students?",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'M'; in 2011 refers to year = '2011'; private for profit refers to control = 'Private for-profit'; black refers to race = 'B';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'M' AND T2.race = 'B' AND T1.control = 'Private for-profit' AND T2.year = 2011"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the black students in 2011, list the institution site and name of those who has 20 t0 30 degree-seeking students in the cohort.",
        "question_ar": "",
        "evidence_en": "black refers to race = 'B'; in 2011 refers to year = '2011'; institution name refers to chronname; 20 to 30 degree-seeking students in the cohort refers to grad_cohort BWEEN 20 AND 30;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30"
    },
    {
        "db_id": "college_completion",
        "question_en": "In female students in year 2012, how many of them from a state with number of schools ranges from 10 to 20?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'F'; number of schools refers to schools_count; schools_count BETWEEN 10 AND 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'F' AND schools_count BETWEEN 10 AND 20 AND T2.year = 2012"
    },
    {
        "db_id": "college_completion",
        "question_en": "List the race of institutions in Alabama with number of students greater than the 90% of average number of students of all institutions?",
        "question_ar": "",
        "evidence_en": "Alabama refers to state = 'Alabama'; number of students greater than the 90% of average = MULTIPLY(AVG(student_count), 90%) < student_count;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count > ( SELECT AVG(T1.student_count) * 0.9 FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' ) AND T1.state = 'Alabama'"
    },
    {
        "db_id": "college_completion",
        "question_en": "In year 2010 at schools located in Hawaii, what is the percentage of schools offers an associate's degree?",
        "question_ar": "",
        "evidence_en": "Hawaii refers to state = 'Hawaii'; associate's degree refers to level = '2-year'; percentage = MULTIPLY(DIVIDE(SUM(level = '2-year' ), count(level)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.level = '2-year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.level) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state = 'Hawaii' AND T2.year = 2010"
    },
    {
        "db_id": "college_completion",
        "question_en": "In the state of Connecticut, what is the name of the instution with the highest percent rank for freshman retention percentage within the sector?",
        "question_ar": "",
        "evidence_en": "name of the institution refers to chronname;  highest percent rank for freshman retention percentage within the sector refers to MAX(retain_percentile);",
        "evidence_ar": "",
        "SQL": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the website address of the institution with the highest number of White degree-seeking students at 2-year institutions in 2008?",
        "question_ar": "",
        "evidence_en": "website address refers to site; White refers to race = 'W'; degree-seeking students at 2-year institutions refers to cohort = '2y all'; in 2008 refers to year = '2008';",
        "evidence_ar": "",
        "SQL": "SELECT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'W' AND T2.cohort = '2y all' AND T2.year = 2008 ORDER BY T2.grad_cohort DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions?",
        "question_ar": "",
        "evidence_en": "Harvard University refers to chronname = 'Harvard University'; highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort);",
        "evidence_ar": "",
        "SQL": "SELECT T2.year FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Harvard University' GROUP BY T2.year ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "In the state with the highest state appropriations to higher education in fiscal year 2011 per resident, which institution has the lowest number of undergraduates in 2010?",
        "question_ar": "",
        "evidence_en": "highest state appropriations to higher education in fiscal year 2011 per resident refers to MAX(state_appr_value); lowest number of undergraduates refers to MIN(student_count); in 2010 refers to year = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T1.student_count = ( SELECT MIN(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T3.year = 2010 ) AND T3.year = 2010 GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005?",
        "question_ar": "",
        "evidence_en": "Yale University refers to chronname = 'Yale University'; average = DIVIDE(COUNT(race = 'B' WHERE cohort = '4y bach AND year BETWEEN 2002 AND 2005), 3); Black refers to race = 'B'; bachelor's/equivalent-seeking cohort at 4-year institutions refers to cohort = '4y bach'; between 2002 to 2005 refers to year BETWEEN '2002' AND '2005';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Yale University' AND T2.year BETWEEN 2002 AND 2005 AND T2.race = 'B' AND T2.cohort = '4y bach'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the Ivy League Schools, which school have the highest number of Hispanic graduates of all time?",
        "question_ar": "",
        "evidence_en": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; highest number of hispanic graduates refers to MAX(grad_cohort WHERE race = 'H');",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.race = 'H' GROUP BY T1.chronname ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "How many 4-year public institutions are there in the state of Florida? Give all of their names.",
        "question_ar": "",
        "evidence_en": "4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 WHERE T2.level = '4-year' AND T2.control = 'Public' AND T2.state = 'Florida'"
    },
    {
        "db_id": "college_completion",
        "question_en": "Between the Ivy League Schools, which school's state have the lowest sate appropriations to higher education in fiscal year 2011 per resident?",
        "question_ar": "",
        "evidence_en": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);",
        "evidence_ar": "",
        "SQL": "SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) ASC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.",
        "question_ar": "",
        "evidence_en": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the average SAT value for incoming students in all of the schools located in the state with the lowest state appropriations to higher education in fiscal year 2011 per resident?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(med_sat_value), SUM(chronname)); SAT value for incoming students refers to med_sat_value; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(t1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state ORDER BY t2.state_appr_value LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the name of the school with the highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions who were seeking another type of degree or certificate at a 4-year institution?",
        "question_ar": "",
        "evidence_en": "name of the school refers to chronname; highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort WHERE gender = 'F'); seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other';",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.gender = 'F' AND T2.cohort = '4y other' ORDER BY T2.grad_cohort DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "Among the Ivy League Schools in 2013, which schools have the highest number of Black students who graduated within 150 percent of normal/expected time who were seeking a bachelor's/equivalent cohort at 4-year institutions?",
        "question_ar": "",
        "evidence_en": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; in 2013 refers to year = '2013'; highest number of Black students who graduated within 150 percent of normal/expected time refers to MAX(grad_150 WHERE race = 'B'); seeking a bachelor's/equivalent cohort at 4-year institutions refers to cohort = '4y bach';",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.year = 2013 AND T2.race = 'B' AND T2.cohort = '4y bach' ORDER BY T2.grad_cohort DESC LIMIT 1"
    },
    {
        "db_id": "college_completion",
        "question_en": "Between 2011 to 2013, what is the average number of male Hispanic degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time in United Education Institute-Huntington Park Campus?",
        "question_ar": "",
        "evidence_en": "between 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; male refers to gender = 'M'; Hispanic refers to race = 'H'; number of degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time refers to grad_150; United Education Institute-Huntington Park Campus refers to chronname = 'United Education Institute-Huntington Park Campus';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'United Education Institute-Huntington Park Campus' AND T2.year BETWEEN 2011 AND 2013 AND T2.gender = 'M' AND T2.race = 'H'"
    },
    {
        "db_id": "college_completion",
        "question_en": "What is the name of the school with the highest difference in the average completion rate for the national in which it belongs? Indicate the state appropriations to higher education in fiscal year 2011 per resident to which the school belongs.",
        "question_ar": "",
        "evidence_en": "name of the school refers to chronname; highest difference in the average completion rate for the national in which it belongs = MAX(SUBTRACT(awards_per_value, awards_per_natl_value)); state appropriations to higher education in fiscal year 2011 per resident to which the school belongs refers to state_appr_value;",
        "evidence_ar": "",
        "SQL": "SELECT T1.chronname, T2.state_appr_value FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state ORDER BY T1.awards_per_value - T2.awards_per_natl_value DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp businesses are there in 'AZ' with less than \"3\" stars?",
        "question_ar": "",
        "evidence_en": "AZ refers to state = 'AZ'; stars < 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars < 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the quantity of the closed or not running Yelp Businesses in 'AZ'?",
        "question_ar": "",
        "evidence_en": "closed or not running refers to active = 'False'; AZ refers to state = 'AZ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'False'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many long reviews does user No. 36139 give for the Yelp businesses?",
        "question_ar": "",
        "evidence_en": "long reviews refers to review_length = 'long'; user No. refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users have \"uber\" number of fans?",
        "question_ar": "",
        "evidence_en": "uber number of fans refers to user_fans = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_fans LIKE 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp businesses are opened 24 hours?",
        "question_ar": "",
        "evidence_en": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What kind of \"wi-fi\" does Yelp business No.\"10172\" have?",
        "question_ar": "",
        "evidence_en": "kind of wi-fi refers to attribute_value where attribute_name = 'Wi-Fi'; business No. refers to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 10172 AND T1.attribute_name LIKE 'wi-fi'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"bars\" are there in the Yelp business?",
        "question_ar": "",
        "evidence_en": "bars refers to category_name = 'Bars';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Bars'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many more \"buffets\" than \"gyms\" in Yelp business?",
        "question_ar": "",
        "evidence_en": "buffets refers to category_name = 'Buffets'; gyms refers to category_name = 'Gyms'; difference = SUBTRACT(SUM(category_name = 'Buffets'), SUM(category_name = 'Gyms'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What business category is the Yelp business which got the most 5 star reviews in?",
        "question_ar": "",
        "evidence_en": "business category refers to category_name; most 5 star reviews refers to MAX(COUNT(category_name WHERE star_reviews = 5));",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T4.review_stars = 5 GROUP BY T1.category_name ORDER BY COUNT(T1.category_name) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In which year did the user who gave the most number of \"5\" star reviews join the Yelp?",
        "question_ar": "",
        "evidence_en": "year the user join the Yelp refers to user_yelping_since_year; star reviews refers to review_stars;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_stars = 5 GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.review_stars) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the user who gave the most number of long reviews, what is his/her averge ratings of all review?",
        "question_ar": "",
        "evidence_en": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); average ratings = AVG(review_stars);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the Yelp business which had the most number of \"long\" reviews, which category does it belong to?",
        "question_ar": "",
        "evidence_en": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); category refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?",
        "question_ar": "",
        "evidence_en": "short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In which year did the user who has given the most number of \"short\" tips join the Yelp?",
        "question_ar": "",
        "evidence_en": "year the user join the Yelp refers to user_yelping_since_year; most number of short tips refers to MAX(COUNT(tip_length = 'Short'));",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.tip_length LIKE 'short' GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.tip_length) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "User No. 70271 only has given one tip to the Yelp business, which category was that business belonged to?",
        "question_ar": "",
        "evidence_en": "user No. refers to user_id; short tip refers to tip_length = 'short'; category refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.user_id = 70271"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business?",
        "question_ar": "",
        "evidence_en": "short tip refers to tip_lenghth = 'short'; user No. refers to user_id; ratings refers to stars; stars = 5 means great experience; stars = 4 means good experience; stars = 3 means average experience; stars = 2 means bad experience; stars = 1 means terrible experience;\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Give the percentage of \"Automotive\" businesses among all the Yelp businesses.",
        "question_ar": "",
        "evidence_en": "automotive businesses refers to category_name = 'Automotive'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Automotive'), COUNT(business_id)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What percentage more for the \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?",
        "question_ar": "",
        "evidence_en": "Women's clothing refers to category_name = 'Women''s Clothing'; Men's clothing refers to category_name = 'Men''s Clothing'; percentage more = MULTIPLY(DIVIDE(SUBTRACT(SUM(category_name = 'Women''s Clothing'), SUM(category_name = 'Men''s Clothing')), COUNT(business_id)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) - CAST(SUM(CASE WHEN T2.category_name LIKE 'Men''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"more percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Give the number of users who joined Yelp since \"2004\".",
        "question_ar": "",
        "evidence_en": "joined yelp since 2004 refers to user_yelping_since_year = 2004;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users who have joined Yelp since \"2005\" but have no fans?",
        "question_ar": "",
        "evidence_en": "joined Yelp since 2005 refers to user_yelping_since_year = 2005; no fans refers to user_fans = 'None';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2005 AND user_fans LIKE 'None'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "State the number of actively running Yelp businesses in \"Tolleson\".",
        "question_ar": "",
        "evidence_en": "actively running refers to active = 'TRUE'; Tolleson refers to city = 'Tolleson';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the number of reviews from user No. \"21679\"?",
        "question_ar": "",
        "evidence_en": "user No. refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 21679"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"5\" star reviews does the Yelp business No. \"10682\" get?",
        "question_ar": "",
        "evidence_en": "5 star reviews refers to review_stars = 5; business No. refers to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE business_id = 10682 AND review_stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which closed/not running Yelp business in \"Sun City\" has got the most reviews? Give the business id.",
        "question_ar": "",
        "evidence_en": "closed/not running refers to active = 'False'; most reviews refers to MAX(COUNT(user_id));",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the only Yelp business in \"Yuma\" city, how many \"medium\" reviews did it get?",
        "question_ar": "",
        "evidence_en": "medium reviews refers to review_length = 'Medium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Yuma' AND T2.review_length LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Does Yelp business No.\"4960\" have TV?",
        "question_ar": "",
        "evidence_en": "business No. refers to business_id; have TV refers to attribute_name = 'Has TV';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 4960"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Give the number of \"dogs allowed\" Yelp businesses.",
        "question_ar": "",
        "evidence_en": "number of Yelp businesses refers to business_id; dogs allowed refers to attribute_name = 'Dogs Allowed' AND attribute_value = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Dogs Allowed' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many hours does the Yelp business No. \"5734\" open on Saturday?",
        "question_ar": "",
        "evidence_en": "how many hours = SUBTRACT(closing_time, opening_time); business No. refers to business_id; open on Saturday refers to day_of_week = 'Saturday';",
        "evidence_ar": "",
        "SQL": "SELECT T1.closing_time - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Tell the number of \"hair removal\" Yelp businesses.",
        "question_ar": "",
        "evidence_en": "hair removal refers to category_name = 'Hair Removal';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many more \"Chinese\" than \"Filipino\" Yelp businesses?",
        "question_ar": "",
        "evidence_en": "Chinese refers to category_name = 'Chinese'; Filipino refers to category_name = 'Filipino'; how many more = SUBTRACT(SUM(category_name = 'Chinese'), SUM(category_name = 'Filipino'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Chinese' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Filipino' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "User No.\"63469\" has got \"1\" like for a tip to the Yelp business, which city is that business located in?",
        "question_ar": "",
        "evidence_en": "user No. refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many types of music does Yelp business No.\"1141\" have?",
        "question_ar": "",
        "evidence_en": "types of music refers to attribute_name LIKE '%music%' WHERE attribute_value = 'true'; business No. refers to business_id;\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 1141"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"cute\" type of compliments does user No. 57400 get?",
        "question_ar": "",
        "evidence_en": "type of compliments refers to compliment_type; user No. refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.compliment_type) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type LIKE 'cute' AND T2.user_id = 57400"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Who has got the most number of \"funny\" type of compliments? Give the user ID.",
        "question_ar": "",
        "evidence_en": "type of compliments refers to compliment_type; most number of funny type of compliments refers to MAX(COUNT(number of compliments = 'high' WHERE compliment_type = 'funny'));",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Users_Compliments WHERE compliment_id IN ( SELECT compliment_id FROM Compliments WHERE compliment_type LIKE 'funny' )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Give the number of \"drive-thru\" businesses in \"Scottsdale\" with business ID number less than \"1000\".",
        "question_ar": "",
        "evidence_en": "drive-thru refers to attribute_name = 'Drive-Thru' AND attribute_value = 'true'; Scottsdale refers to city = 'Scottsdale'; business_id < 1000;",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.business_id < 1000 AND T3.city LIKE 'Scottsdale' AND T1.attribute_name LIKE 'Drive-Thru' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average rating for the all Yelp businesses that open 24 hours?",
        "question_ar": "",
        "evidence_en": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'; rating refers to stars; average rating = AVG(stars);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.business_id) AS \"avg\" FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For all the Yelp businesses that allow customers bring their own beer, what percentage of them are in \"Phoenix\"?",
        "question_ar": "",
        "evidence_en": "bring their own beer refers to attribute_name = 'BYOB' AND attribute_value = 'TRUE'; Phoenix refers to city = 'Phoenix'; percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix'), COUNT(business_id)), 1.0)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) AS \"percentage\" FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'BYOB' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the names of business in AZ with a rating of 5.",
        "question_ar": "",
        "evidence_en": "AZ refers to state = 'AZ'; rating refers to stars;",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE state LIKE 'AZ' AND stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many active businesses of city are underrated?",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; underrated refers to review_count = 'Low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'Low' AND active LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many user ids from 1 to 20 have no fan users and have low ratings?",
        "question_ar": "",
        "evidence_en": "user_id BETWEEN 1 AND 20; no fan users refers to user_fans = 'None'; low ratings refers to user_review_count = 'Low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_id BETWEEN 1 AND 20 AND user_fans LIKE 'None' AND user_review_count LIKE 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Indicate the opening hours of businesses are with category in fashion.",
        "question_ar": "",
        "evidence_en": "opening hours refers to opening_time; category refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses operating in the shopping business have opening times before 8AM?",
        "question_ar": "",
        "evidence_en": "shopping business refers to category_name = 'Shopping'; opening time before 8AM refers to opening_time < '8AM';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.opening_time < '8AM' AND T1.category_name LIKE 'Shopping'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Provide name of businesses whose category is pets and are still opened after 9PM.",
        "question_ar": "",
        "evidence_en": "category refers to category_name; open after 9pm refers to closing_time > '9PM';",
        "evidence_ar": "",
        "SQL": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.closing_time > '9PM' AND T1.category_name LIKE 'Pets'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses with the category are open from Monday to Thursday?",
        "question_ar": "",
        "evidence_en": "open from Monday to Thursday refers to day_of_week BETWEEN Monday AND Thursday and day_id BETWEEN 2 AND 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please indicate the review count of the \"active life\" businesses in Phoenix.",
        "question_ar": "",
        "evidence_en": "active life refers to category_name = 'Active Life'; Phoenix refers to city = 'Phoenix';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Active Life' AND T3.city = 'Phoenix'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the businesses name with a rating less than 5 whose category name is men's clothing.",
        "question_ar": "",
        "evidence_en": "businesses name refers to business_id; rating refers to stars; stars < 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which businesses are no longer in business but have a low number of votes useful?",
        "question_ar": "",
        "evidence_en": "no longer in business refers to active = 'False'; low number of votes useful refers to review_votes_useful = 'Low';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active LIKE 'FALSE' AND T1.review_votes_useful LIKE 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the businesses names whose length of user review is long with business id from 1 to 20.",
        "question_ar": "",
        "evidence_en": "businesses names refers to business_id; length of user review is long refers to review_length = 'Long'; business_id BETWEEN 1 AND 20;",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' AND T3.category_id BETWEEN 1 AND 20 GROUP BY T4.category_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please provide the attribute values ​​of the bussinesses with fashion in Scottsdale.",
        "question_ar": "",
        "evidence_en": "fashion refers to category_name = 'Fashion'; Scottsdale refers to city = 'Scottsdale';",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many compliments received from medium users that Phoenix city achieved?",
        "question_ar": "",
        "evidence_en": "medium refers to number_of_compliments = 'Medium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.number_of_compliments) FROM Users_Compliments AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Phoenix' AND T1.number_of_compliments LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Provide the businesses name in Tempe city whose opening hours are earlier than 8AM.",
        "question_ar": "",
        "evidence_en": "opening hours refers to opening_time; earlier than 8AM refers to opening_time < '8AM';",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Tempe' AND T4.opening_time < '8AM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Glendale city that are still running is opened from 8AM to 6PM?",
        "question_ar": "",
        "evidence_en": "still running refers to active = 'true'; opened from 8AM to 6PM refers to opening_time = '8AM' AND closing_time = '6PM';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.category_name) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Glendale' AND T4.opening_time LIKE '8AM' AND T4.closing_time LIKE '6PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are there in Phoenix city? Find the percentage of businesses in Phoenix city in the total city.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix' END), COUNT(category_id)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.",
        "question_ar": "",
        "evidence_en": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many active businesses are there in Phoenix?",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; Phoenix refers to city = 'Phoenix';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Scottsdale are rated as \"wonderful experience\"?",
        "question_ar": "",
        "evidence_en": "Scottsdale refers to city = 'Scottsdale'; rated refers to stars; rated as wonderful experience refers to stars > 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average rating of inactive businesses?",
        "question_ar": "",
        "evidence_en": "rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) AS \"average\" FROM Business WHERE active LIKE 'FALSE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in AZ state have the beer_and_wine attribute?",
        "question_ar": "",
        "evidence_en": "beer_and_wine refers to attribute_value = 'beer_and_wine';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'beer_and_wine' AND T1.state LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which city has the most businesses whose attribute is full_bar?",
        "question_ar": "",
        "evidence_en": "most business refers to MAX(business_id); full_bar refers to attribute_value = 'full_bar';",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'full_bar' GROUP BY T1.city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in the fashion industry are rated 5 stars?",
        "question_ar": "",
        "evidence_en": "fashion industry refers to category_name = 'Fashion';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 5 AND T3.category_name LIKE 'Fashion'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which city has the highest number of businesses in the food industry whose number of reviews is high?",
        "question_ar": "",
        "evidence_en": "highest number of businesses refers to MAX(business_id); food industry refers to category_name = 'Food'; number of reviews is high refers to review_count = 'High';",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.review_count LIKE 'High' AND T3.category_name LIKE 'Food' GROUP BY T1.city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list all business IDs in Mesa city that review stars of over 3.",
        "question_ar": "",
        "evidence_en": "stars > 3;",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Mesa' AND T2.review_stars > 3 GROUP BY T1.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which city has the least number of businesses whose amount of funny votes is low?",
        "question_ar": "",
        "evidence_en": "least number of businesses refers to MIN(business_id); funny votes is low refers to review_votes_funny = 'Low';",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny LIKE 'low' GROUP BY T1.city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What percentage of businesses are in the Real Estate sector and have the rating of 5 out of all businesses in Chandler?",
        "question_ar": "",
        "evidence_en": "Real Estate sector refers to category_name = 'Real Estate'; rating of 5 refers to stars = 5; Chandler refers to city = 'Chandler'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Real Estate' and stars = 5), COUNT(business_id)), 100);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.city LIKE 'Chandler' AND T3.category_name LIKE 'Real Estate'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users who started yelping since 2012 have sent a high number of funny votes?",
        "question_ar": "",
        "evidence_en": "users who started yelping in 2012 refers to user_yelping_since_year = '2012'; high number of funny votes refers to user_votes_funny = 'High';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the number of useful votes that the user 52592 received when reviewed for business number 2?",
        "question_ar": "",
        "evidence_en": "number of useful votes refers to review_votes_useful; business number refers to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT review_votes_useful FROM Reviews WHERE user_id = 52592 AND business_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the attribute numbers that are related to payment?",
        "question_ar": "",
        "evidence_en": "attribute numbers refers to attribute_id; related to payment refers to attribute_name like '%payment%';",
        "evidence_ar": "",
        "SQL": "SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How long was the review for business number 2 that user number 612 wrote?",
        "question_ar": "",
        "evidence_en": "how long was the review refers to review_length; business number refers to business_id; user number refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 612 AND review_stars = 5 AND business_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are actively running in Gilbert City?",
        "question_ar": "",
        "evidence_en": "actively running refers to active = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Gilbert' AND active LIKE 'True'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in the AZ state got low quality of reviews?",
        "question_ar": "",
        "evidence_en": "low quality of reviews refers to review_count = 'low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please state any three business numbers in AZ state that have received the \"Great experience\" review stars.",
        "question_ar": "",
        "evidence_en": "business numbers refers to business_id; great experience review stars refers to review_stars = 5;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.review_stars = 5 LIMIT 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please name one attribute that business number 2 does not have.",
        "question_ar": "",
        "evidence_en": "business number refers to business_id; business_id = 2; does not have refers to attribute_value = 'none';",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'none' LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"cool\" compliments did user number 33 receive?",
        "question_ar": "",
        "evidence_en": "cool compliments refers to compliment_type = 'cool'; user number refers to user_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.compliment_type) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.user_id = 33 AND T2.compliment_type LIKE 'cool'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the opening hours of business number 53 on Friday?",
        "question_ar": "",
        "evidence_en": "opening hours refers to opening_time; business number refers to business_id; Friday refers to day_of_week = 'Friday';",
        "evidence_ar": "",
        "SQL": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the attributes that business number 56 have?",
        "question_ar": "",
        "evidence_en": "business number refers to business_id; attributes that business have refers to attribute_value = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 56"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the categories that business number 15 belongs to?",
        "question_ar": "",
        "evidence_en": "business number refers to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 15"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are there in Scottsdale city under the category of \"Beauty & Spas\"?",
        "question_ar": "",
        "evidence_en": "category refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Scottsdale' AND T1.category_name LIKE 'Beauty & Spas'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list any two user numbers that have an \"Uber\" number of cute compliments.",
        "question_ar": "",
        "evidence_en": "user numbers refers to user_id; Uber number refers to number_of_compliments = 'Uber'; cute compliments refers to compliment_type = 'cute';",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'Uber' AND T2.compliment_type LIKE 'cute' LIMIT 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses operating in the \"Accessories\" category have received a \"wonderful experience\" review from users?",
        "question_ar": "",
        "evidence_en": "Accessories category refers to category_name = 'Accessories'; wonderful experience review refers to stars > 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.stars > 3 AND T1.category_name LIKE 'Accessories'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How long does business number 12 in Scottsdale stay open on day number 3?",
        "question_ar": "",
        "evidence_en": "business number refers to business_id; Scottsdale refers to city = 'Scottsdale'; day number refers to day_id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time - T2.opening_time AS \"hour\" FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.business_id = 12 AND T1.city LIKE 'Scottsdale' AND T2.day_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in AZ state do not open on Thursday?",
        "question_ar": "",
        "evidence_en": "do not open on Thursday refers to day_of_week = 'Thursday' AND label_time_4 = 'None';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Checkins AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.label_time_4 LIKE 'None' AND T1.state LIKE 'AZ' AND T3.day_of_week LIKE 'Thursday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses of Yelp are in Scottsdale?",
        "question_ar": "",
        "evidence_en": "Scottsdale refers to city = 'Scottsdale';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the Yelp_Businesses in Arizona, how many of them are still running?",
        "question_ar": "",
        "evidence_en": "Arizona refers to state = 'AZ'; still running refers to active = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Businesses in Scottsdale have received positive comments in the Elitestar rating?",
        "question_ar": "",
        "evidence_en": "Scottsdale refers to city = 'Scottsdale'; positive comments refers to stars > 3; Elitestar rating refers to stars;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which city has more Yelp_Business that's more appealing to users, Scottsdale or Anthem?",
        "question_ar": "",
        "evidence_en": "more appealing to users refers to MAX(review_count);",
        "evidence_ar": "",
        "SQL": "SELECT city FROM Business ORDER BY review_count DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Businesses in Arizona have a Elitestar rating of over 4?",
        "question_ar": "",
        "evidence_en": "Arizona refers to state = 'AZ'; Elitestar rating of over 4 refers to stars > 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars > 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Businesses are there in Arizona in total?",
        "question_ar": "",
        "evidence_en": "Arizona refers to state = 'AZ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the cities of the Yelp_Businesses that have gotten a 5 in the Elitestar rating.",
        "question_ar": "",
        "evidence_en": "5 in the Elitestar rating refers to stars = 5;",
        "evidence_ar": "",
        "SQL": "SELECT city FROM Business WHERE stars = 5 GROUP BY city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many reviews have the user whose ID is 3 posted?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many reviews made by user whose ID is 3 are long?",
        "question_ar": "",
        "evidence_en": "long refers to review_length = 'Long';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the long reviews made by user ID 3, how many of them have received a medium number of useful votes?",
        "question_ar": "",
        "evidence_en": "long reviews refers to review_length = 'Long'; medium number of useful votes refers to review_votes_useful = 'medium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long' AND review_votes_useful LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users have joined Yelp since the year 2012?",
        "question_ar": "",
        "evidence_en": "since year 2012 refers to user_yelping_since_year = '2012'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the IDs of the users who have a high number of followers.",
        "question_ar": "",
        "evidence_en": "high number of followers refers to user_fans = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Users WHERE user_fans LIKE 'High' GROUP BY user_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Businesses do not provide alcohol?",
        "question_ar": "",
        "evidence_en": "do not provide alcohol refers to attribute_name = 'Alcohol'and attribute_value = 'none'\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.attribute_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol?",
        "question_ar": "",
        "evidence_en": "Arizona refers to state = 'AZ'; do not provide alcohol refers to attribute_name = 'Alcohol' and attribute_value = 'none'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none' AND T3.state LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the business IDs of all the Yelp_Businesses that are good for kids.",
        "question_ar": "",
        "evidence_en": "good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Business falls under the category of \"Shopping\"?",
        "question_ar": "",
        "evidence_en": "category of \"Shopping\" refers to category_name = 'Shopping'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Shopping'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Under which categories is Yelp_Business no. 1?",
        "question_ar": "",
        "evidence_en": "categories refers to category_name; Yelp_Business no.1 refers to business_id = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the Yelp_Businesses which are still running, how many of them fall under the category of \"Food\"?",
        "question_ar": "",
        "evidence_en": "are still running refers to active = 'true'; the category of \"Food\" refers to category_name = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Food' AND T3.active LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Business in Anthem are under the category of \"Food\"?",
        "question_ar": "",
        "evidence_en": "in Anthem refers to city = 'Anthem'; the category of \"Food\" refers to category_name = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the business ID of the Yelp_Business with the highest Elitestar rating under the category \"Food\".",
        "question_ar": "",
        "evidence_en": "under the category \"Food\" refers to category_name = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Business under the category of \"Food\" are good for kids?",
        "question_ar": "",
        "evidence_en": "under the category of \"Food\" refers to category_name = 'Food'; are good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Business in Arizona has user no. 3 reviewed?",
        "question_ar": "",
        "evidence_en": "in Arizona refers to state = 'AZ'; user no. 3 refers to user_id = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.user_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list all the categories of the Yelp_Business in Arizona.",
        "question_ar": "",
        "evidence_en": "categories refers to category_name; in Arizona refers to state = 'AZ'",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.state LIKE 'AZ' GROUP BY T1.category_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How long does Yelp_Business no.1 open on Tuesdays?",
        "question_ar": "",
        "evidence_en": "\"How long\" and \"how much time\" are synonyms; how much time does this business open refers to subtract(closing_time, opening_time); Yelp_Business no.1 refers to business_id = 1; Tuesdays refers to day_of_week = 'Tuesday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "When does Yelp_Business no.1 open on Tuesdays?",
        "question_ar": "",
        "evidence_en": "Yelp_Business no.1 refers to business_id = 1; open on refers to opening_time; Tuesdays refers to day_of_week = 'Tuesday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many Yelp_Business close after 8PM on Mondays?",
        "question_ar": "",
        "evidence_en": "close after 8PM refers to closing_time = '9PM' or closing_time = '10PM' closing_time = '11PM' closing_time = '12PM'; Mondays refers to day_of_week = 'Monday'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Monday' AND T1.closing_time > '8PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the opening time on Mondays of all the Yelp_Businesses in Anthem that are still running.",
        "question_ar": "",
        "evidence_en": "Mondays refers to day_of_week = 'Monday'; in Anthem refers to city = 'Anthem'; are still running refers to active = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Monday' AND T3.city LIKE 'Anthem' AND T3.active LIKE 'True' GROUP BY T1.opening_time"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the Yelp_Business in Arizona, how many of them closes at 12PM on Sundays?",
        "question_ar": "",
        "evidence_en": "in Arizona refers to state = 'AZ'; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the categories of the Yelp_Business that closes at 12PM on Sundays.",
        "question_ar": "",
        "evidence_en": "categories refers to category_name; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T4.category_id = T4.category_id WHERE T1.closing_time = '12PM' AND T2.day_of_week = 'Sunday' GROUP BY T4.category_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"Good for Kids\" Yelp_Businesses are open everyday of the week?",
        "question_ar": "",
        "evidence_en": "Good for Kids refers to attribute_name = 'Good for Kids'and attribute_value = 'true'; open everyday refers to day_id between 1 and 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users became an elite user the same year they joined Yelp?",
        "question_ar": "",
        "evidence_en": "became an elite user the same year they joined Yelp refers to user_yelping_since_year = year_id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = T2.year_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the longest business time on Mondays for a Yelp_Business under the category \"Shopping\"?",
        "question_ar": "",
        "evidence_en": "longest business time refers to max(subtract(closing_time, opening_time)); on Mondays refers to day_of_week = 'Monday';  category \"Shopping\" refers to category_name = 'Shopping'",
        "evidence_ar": "",
        "SQL": "SELECT T1.closing_time + 12 - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Categories AS T4 ON T3.business_id = T4.business_id INNER JOIN Categories AS T5 ON T4.category_id = T5.category_id WHERE T2.day_of_week LIKE 'Monday' AND T5.category_name LIKE 'Shopping' ORDER BY T1.closing_time + 12 - T1.opening_time DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please list the business IDs of the Yelp_Business that have a business time of longer than 12 hours on Sundays.",
        "question_ar": "",
        "evidence_en": "business time of longer than 12 hours refers to subtract(closing_time, opening_time) > 12; on Sundays refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T1.closing_time + 12 - T1.opening_time > 12 AND T2.day_of_week LIKE 'Sunday' GROUP BY T1.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many elite users have reviewed Yelp_Business no.1?",
        "question_ar": "",
        "evidence_en": "Yelp_Business no.1 refers to business_id = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.business_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the users who have posted more than 10 reviews, how many users are elite users?",
        "question_ar": "",
        "evidence_en": "posted more than 10 reviews refers to count(Reviews.user_id) > 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T4.user_id) FROM ( SELECT T1.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.user_id IS NOT NULL GROUP BY T3.user_id HAVING COUNT(T3.user_id) > 10 ) T4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which Yelp_Business in Arizona gets the most number of reviews?",
        "question_ar": "",
        "evidence_en": "Arizona refers to state = 'AZ'; gets the most number of reviews refers to max(count(Reviews.business_id))",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' GROUP BY T1.user_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many stars on average does a Yelp_Business in Anthem get from a user review?",
        "question_ar": "",
        "evidence_en": "in Anthem refers to city = 'Anthem'; stars on average = avg(review_stars)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many stars on average does user no.3 give to Yelp_Business in Arizona?",
        "question_ar": "",
        "evidence_en": "user no.3 refers to user_id = 3; in Arizona refers to state = 'AZ'; stars on average = avg(review_stars(user_id = 3))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average business time for Yelp_Business no.1 on weekends?",
        "question_ar": "",
        "evidence_en": "Yelp_Business no.1 refers to business_id = 1; on weekends refers to day_of_week = 'Saturday' or day_of_week = 'Sunday'; average business time refers to DIVIDE(SUBTRACT(closing_time, opening_time), 2)",
        "evidence_ar": "",
        "SQL": "SELECT T1.closing_time + 12 - T1.opening_time AS \"avg opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 1 AND (T2.day_of_week = 'Sunday' OR T2.day_of_week = 'Sunday')"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average Elitestar rating for a Yelp_Business that closes at 12PM on Sundays?",
        "question_ar": "",
        "evidence_en": "average Elitestar rating refers to DIVIDE(SUM(stars), COUNT(business_id)); closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T1.business_id) AS \"average stars\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many of the busineses are in Casa Grande?",
        "question_ar": "",
        "evidence_en": "in Casa Grande refers to city = 'Casa Grande'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(city) FROM Business WHERE city LIKE 'Casa Grande'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the total number of active businesses in AZ with a low review count?",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; in AZ refers to state = 'AZ'\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True' AND review_count LIKE 'low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID with a star range from 2 to 3, located at Mesa.",
        "question_ar": "",
        "evidence_en": "star range from 2 to 3 refers to stars > = 2 AND stars < 4;  located at Mesa refers to city = 'Mesa'",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE city LIKE 'Mesa' AND stars BETWEEN 2 AND 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In users yelping since 2011 to 2013, how many of them have high count of fans?",
        "question_ar": "",
        "evidence_en": "In users yelping since 2011 to 2013 refers to user_yelping_since_year > = 2011 AND user_yelping_since_year < 2014",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2011 AND 2013 AND user_fans LIKE 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the review length of user 35026 to business with business ID 2?",
        "question_ar": "",
        "evidence_en": "user 35026 refers to user_id = 35026",
        "evidence_ar": "",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses in Chandler, list the attribute of the business with a low review count.",
        "question_ar": "",
        "evidence_en": "in Chandler refers to city = 'Chandler'; attribute refers to attribute_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.attribute_id, T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.attribute_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count = 'Low' AND T1.city = 'Chandler'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In businesses with a category of mexican, how many of them has a star rating below 4?",
        "question_ar": "",
        "evidence_en": "category of mexican refers to category_name = 'Mexican'; star rating below 4 refers to stars < 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars < 4 AND T3.category_name LIKE 'Mexican'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the active business ID and its stars of the businesses fall under the category of Fashion.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; category of Fashion refers to category = 'Fashion'",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Fashion'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the category of businesses with highest star rating?",
        "question_ar": "",
        "evidence_en": "category refers to category_name; highest star rating refers to max(stars)",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id ORDER BY T1.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the category of the business with medium review length and highest review stars within business ID from 6 t0 9?",
        "question_ar": "",
        "evidence_en": "category refers to category_name; highest review stars refers to max(review_stars); business ID from 6 to 9 refers to business_id between 6 and 9",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Medium' AND T2.business_id BETWEEN 6 AND 9 ORDER BY T1.review_stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Count the active businesses that has an attribute of caters with low review count.",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; attribute of caters refers to attribute_name = 'Caters'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Caters' AND T1.review_count LIKE 'Low' AND T1.active LIKE 'TRUE'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the closing and opening time of businesses located at Tempe with highest star rating?",
        "question_ar": "",
        "evidence_en": "located at Tempe refers to city = 'Tempe'; highest star rating refers to max(stars)",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Tempe' ORDER BY T1.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count.",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; located at Chandler, AZ refers to city = 'Chandler', state = 'AZ'; category refers to category_name; atrributes refers to attribute_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Chandler' AND T1.review_count LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the categories of active businesses in Surprise, AZ.",
        "question_ar": "",
        "evidence_en": "categories refers to category_name; active businesses refers to active = 'true'; in Surprise, AZ refers to city = 'Surprise' and state = 'AZ'",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Surprise' GROUP BY T3.category_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the location of businesses that have business hours from 8 am to 9 pm every Friday.",
        "question_ar": "",
        "evidence_en": "location of businesses refers to city and state; business hours from 8 am to 9 pm refers to opening_time = '8AM', closing_time = '9PM'; every Friday refers to day_of_week = 'Friday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '8AM' AND T3.day_of_week LIKE 'Friday' GROUP BY T1.city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; located at Mesa, AZ refers to city = 'Mesa', state = 'AZ'",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the opening time of the active businesses in Chandler that has a medium review count.",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; in Chandler refers to city = 'Chandler'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses with a category of Accessories, what is the percentage of the business with less than 4 stars?",
        "question_ar": "",
        "evidence_en": "category of Accessories refers to category_name = 'Accessories'; percentage of the business with less than 4 stars = divide(count(Business.business_id(stars < 4)), count(Business.business_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.stars < 4 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Accessories'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the closing time and day of week of active businesses in Tempe with stars greater than the 70% of average age of star rating.",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; in Tempe refers to city = 'Tempe'; with stars greater than the 70% of average age of star rating refers to stars > DIVIDE(sum(stars), COUNT(business_id)) * 70%",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' AND T1.stars > 0.7 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many active businesses are located at Phoenix, Arizona?",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'Phoenix' is the city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'True'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are with high review count?",
        "question_ar": "",
        "evidence_en": "high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses ID sell beer and wine?",
        "question_ar": "",
        "evidence_en": "attribute_value = 'beer_and_wine'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_id = 1 AND attribute_value = 'beer_and_wine'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many attributes ID owned by business ID 2?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(attribute_id) FROM Business_Attributes WHERE business_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users received high compliment type in photo?",
        "question_ar": "",
        "evidence_en": "high compliments refers to number_of_compliments = 'High'; type in photo refers to compliment_ID = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'High' AND T2.compliment_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Phoenix, Arizona is attributed to waiter service?",
        "question_ar": "",
        "evidence_en": "'Phoenix' is the city; waiter service refers to attribute_name = 'waiter_services'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find out which business is opened for 24/7 and list out what is the business attribute.",
        "question_ar": "",
        "evidence_en": "opened for 24/7 refers to Business_Hours WHERE opening_time = closing_time and business_id COUNT(day_id) = 7; business attribute refers to attribute_name",
        "evidence_ar": "",
        "SQL": "SELECT T5.attribute_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T2.day_id LIKE '1' AND '2' AND '3' AND '4' AND '5' AND '6' AND '7' AND T1.opening_time = T1.closing_time GROUP BY T5.attribute_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which business in fashion category has the most review?",
        "question_ar": "",
        "evidence_en": "'Fashion' is the category_name; most review refers to Max(Count(user_id))",
        "evidence_ar": "",
        "SQL": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion' AND T1.category_id = 7 GROUP BY T3.business_id ORDER BY COUNT(T4.user_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out which business category that are most likely to have average good review in Arizona?",
        "question_ar": "",
        "evidence_en": "average good review refers to review_count > = 3; Arizona refers to state = 'AZ'; business category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the ratio of having the best to worse elite user in 2013?",
        "question_ar": "",
        "evidence_en": "best elite refers to user_average_stars = 5; worse eliter refers to user_average_stars = 1: in 2013 refers to year_id = 2013; ratio = Divide(Count(user_id(user_average_stars = 5)),  Count(user_id(user_average_stars = 1)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.user_average_stars = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.user_id) , SUM(CASE WHEN T1.user_average_stars = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T2.year_id = 2013"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the increment percentage of elite user for each year since year 2005.",
        "question_ar": "",
        "evidence_en": "since year 2005 refers to year_id Between 2005 and 2014; increment percentage = Divide(Count(user_id(year_id < 2014)), Count (user_id(year_id = 2015))) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN year_id < 2014 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN year_id = 2005 THEN 1.0 ELSE NULL END) AS increment FROM Elite"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many business have been reviewed by user ID 3 and how long have this user been with Yelp?",
        "question_ar": "",
        "evidence_en": "year with yelp = Subtract ('%Y'(CURRENT TIME), user_yelping_since_year)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) , strftime('%Y', 'now') - T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the yearly average review done by user ID 3?",
        "question_ar": "",
        "evidence_en": "yearly average review = Divide( Count(business_id), Subtract('%Y'(CURRENT_TIME), user_yelping_since_year))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average number of review received by each business given that the user is an elite?",
        "question_ar": "",
        "evidence_en": "average review = Divide(Count(user_id), Count(business_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.user_id) AS REAL) / COUNT(DISTINCT T1.business_id) FROM Reviews AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out the user who is an elite user for consecutively 5 years or more and what is the user average star? How many likes does this user gets?",
        "question_ar": "",
        "evidence_en": "elite user for consecutively 5 years or more refers to user_id COUNT(year_id) > 5; Average star = AVG(likes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_average_stars, COUNT(T3.likes) FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Tips AS T3 ON T3.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.user_id) > 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find out which hotel and travel business having the most review? Calculate the standard deviation of the review star for this business.",
        "question_ar": "",
        "evidence_en": "\"Hotel & Travel\" is the category_name; most review refers to Max(Count(category_id)); Average star per user = Divide (Sum (review_stars), Count(user_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the correlation between the review starts and business stars?",
        "question_ar": "",
        "evidence_en": "highest review count refers to review_count = 'Uber'; average business review stars = Divide (Sum(review_stars), Count(user_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.review_stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many of the businesses are active?",
        "question_ar": "",
        "evidence_en": "active refers to active = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE active LIKE 'True'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID with a low review count in Phoenix.",
        "question_ar": "",
        "evidence_en": "\"Phoenix\" is the city; low review count refers to review_count = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE city LIKE 'Phoenix' AND review_count LIKE 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the total number of active business in AZ with a high review count?",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'AZ' is the state; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'High' AND active LIKE 'True'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID with a star range from 3 to 4, located at Tempe.",
        "question_ar": "",
        "evidence_en": "star range from 3 to 4 refers to stars > = 3 AND stars < 5; 'Tempe' is the name of city",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE city LIKE 'Tempe' AND stars BETWEEN 3 AND 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In users yelping since 2010 to 2012, how many of them has an low fans?",
        "question_ar": "",
        "evidence_en": "user yelping since 2010 to 2012 refers to user_yelping_since_year > = '2010' AND user_yelping_since_year < '2013'; low fans refers to user_fans = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the review length of user 60776 to business with business ID 1?",
        "question_ar": "",
        "evidence_en": "\"60776\" is the user_id",
        "evidence_ar": "",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses in Scottsdale, list the attribute of the business with a high review count.",
        "question_ar": "",
        "evidence_en": "\"Scottsdale\" is the name of city; high review count refers to review_count = 'High'; attribute of the business refers to attribute_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count LIKE 'High' AND T1.city LIKE 'Scottsdale' GROUP BY T3.attribute_name"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In businesses with a category of automotive, how many of them has an star rating below 3?",
        "question_ar": "",
        "evidence_en": "\"Automotive\" is the category of business; star rating below 3 refers to stars < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the active business ID and its stars of the businesses fall under the category of Pets.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'Pets' is the category_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the attribute of the business with highest star rating?",
        "question_ar": "",
        "evidence_en": "highest star rating Max(stars); attribute of business refers to attribute_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id ORDER BY T1.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the category of the business with short review length and highest review stars within business ID from 5 t0 10?",
        "question_ar": "",
        "evidence_en": "short review length refers to review_length = 'Short'; highest review stars refers to Max(review_stars); business ID from 5 to 10 refers to business_id BETWEEN 5 AND 10; category of business refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Short' AND T2.business_id BETWEEN 5 AND 10 ORDER BY T1.review_stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Count the active businesses that has an attribute of Wi-Fi with medium review count.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'Wi-Fi' is the attribute_name; medium review count refers to review_count = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Wi-Fi' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the closing and opening time of businesses located at Gilbert with highest star rating?",
        "question_ar": "",
        "evidence_en": "\"Gilbert\" is the name of city; highest star rating refers to Max(stars)",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Gilbert' ORDER BY T1.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the active businesses located at Mesa, AZ, list the category and attributes of business with a low review count.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true': 'Mesa' is the name of city; 'AZ' is the state; low review count refers to review_count = 'Low'; category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the categories of inactive businesses in AZ.",
        "question_ar": "",
        "evidence_en": "inactive business refers to active = 'FALSE'; 'AZ' is the state; category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'FALSE' AND T1.state LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the location of businesses that has business hours from 9 am to 9 pm every Saturday.",
        "question_ar": "",
        "evidence_en": "9 am refers to opening_time = '9AM'; 9 pm refers to closing_time = '9PM'; every Saturday refers to day_of_week = 'Saturday'; location refers to city",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the attribute value of an inactive business with a medium review count and 3.5 stars which is located at Phoenix, AZ?",
        "question_ar": "",
        "evidence_en": "inactive business refers to active = 'FALSE'; 'AZ' is the state; 'Phoenix' is the name of city; medium review count refers to review_count = 'Medium'; 3.5 stars refers to stars = 3.5",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'Medium' AND T1.active LIKE 'FALSE' AND T1.city LIKE 'Phoenix' AND T1.stars = 3.5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the opening time of the active businesses in Surprise that has a low review count.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'Surprise' is the name of city;  low review count refers to review_count = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Surprise' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Low' GROUP BY T2.opening_time"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars?",
        "question_ar": "",
        "evidence_en": "\"Local Services\" is the category_name; less than 3 stars refers to stars < 3; percentage = Divide(Count(business_id(stars < 3)), Count(business_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.stars < 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Local Services'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the closing time and day of week of active businesses in Scottsdale with stars greater than the 60% of average age of star rating.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true';  'Scottsdale' is the name of city; stars greater than the 60% of average age of star rating refers to stars  > avg(stars) * 60%",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' AND T1.stars > 0.6 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users have no followers in 2014?",
        "question_ar": "",
        "evidence_en": "in 2004 refers to user_yelping_since_year = 2004; no follower refers to user_fans = 'None'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004 AND user_fans LIKE 'None'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List at least 5 users that has received less than 5 low compliments from\nother users.",
        "question_ar": "",
        "evidence_en": "less than 5 low compliment refers to number_of_compliments < 5",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Users_Compliments WHERE number_of_compliments LIKE 'Low' GROUP BY user_id ORDER BY COUNT(number_of_compliments) > 5 LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List at least 10 users ID that has 4 as an average ratings of all reviews sent.",
        "question_ar": "",
        "evidence_en": "4 as an average rating refers to user_average_stars = 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 4 LIMIT 10"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What city does the business have a business hour from 10 am to 12 pm on Sunday?",
        "question_ar": "",
        "evidence_en": "10 am refers to opening_time = '10AM'; 12 pm refers to closing_time = '12PM'; on Sunday refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time LIKE '10AM' AND T2.closing_time LIKE '12PM' AND T3.day_of_week LIKE 'Sunday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are opened for 24 hours?",
        "question_ar": "",
        "evidence_en": "opened for 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List at least 5 active business ID that are good for groups and dancing.",
        "question_ar": "",
        "evidence_en": "\"Good for Groups\" and \"Good for Dancing\" are attribute_name; active business refers to active = true'",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Good for Dancing' AND T1.attribute_name LIKE 'Good for Groups' LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the active businesses in Ahwatukee, which of them are still open in Sunday?",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; 'Ahwatukee' is the name of city; open in Sunday refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Ahwatukee' AND T1.active LIKE 'TRUE' AND T3.day_of_week LIKE 'Sunday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the categories of all active businesses that were not in Arizona.",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; not in Arizona refers to state ! = 'AZ'; category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state NOT LIKE 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the category of the business with high review count but received 2 stars.",
        "question_ar": "",
        "evidence_en": "high review count refers to review_count = 'High'; received 2 stars refers to stars = 2; category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 2 AND T1.review_count LIKE 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses have a romantic ambiance?",
        "question_ar": "",
        "evidence_en": "romantic ambiance refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true' AND T1.attribute_name = 'ambience_romantic'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the city of the business where they open from 1 pm to 6 pm on Saturday.",
        "question_ar": "",
        "evidence_en": "1 pm refers to opening_time = '1PM'; 6 pm refers to closing_time = '6PM'; on Saturday refers to day_of_week = 'Saturday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the total number of fans or followers who received most likes of their comments in the business?",
        "question_ar": "",
        "evidence_en": "fans and followers refers to user_fans; most likes of their comments refer to Max(likes)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday.",
        "question_ar": "",
        "evidence_en": "12 am refers to opening_time = '12AM'; 1 am refers to closing_time = '1AM'; on Saturday refers to day_of_week = 'Saturday'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '1AM' AND T2.opening_time = '12AM' AND T3.day_of_week = 'Saturday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses have shopping centers and received high review count?",
        "question_ar": "",
        "evidence_en": "\"Shopping Centers\" is the category_name; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Shopping Centers' AND T3.review_count = 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses accept insurance?",
        "question_ar": "",
        "evidence_en": "business that accept insurance refers to attribute_name = 'Accepts Insurance' AND attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'Accepts Insurance' AND T1.attribute_value = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the average review star from users in businesses located in South Carolina and California state.",
        "question_ar": "",
        "evidence_en": "\"South Carolina\" and \"California\" are both state; average review stars from users = Divide((Sum(review_stars(state = 'SC')) + Sum(review_stars(state = 'CA'))), Sum(stars))",
        "evidence_ar": "",
        "SQL": "SELECT 1.0 * (( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'SC' ) + ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'CA' )) / ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ) AS reslut"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Compare and get the difference of the number of businesses that are open in Monday and Tuesday from 10 am to 9 pm.",
        "question_ar": "",
        "evidence_en": "10 am refers to opening_time = '10AM'; 9 pm refers to closing_time = '9PM'; 'Monday' and 'Tuesday' are both day_of_week; difference number of business = Subtract(Count(business_id(day_of_week = 'Monday')), Count(business_id(day_of_week = 'Tuesday')))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T3.day_of_week = 'Monday' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.day_of_week = 'Tuesday' THEN 1 ELSE 0 END) AS DIFF FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '10AM' AND T2.closing_time = '9PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "State the ID number for the attribute named \"Accepts Insurance\"?",
        "question_ar": "",
        "evidence_en": "ID number refers to attribute_id",
        "evidence_ar": "",
        "SQL": "SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many actively running Yelp businesses are there located in \"Phoenix\" city?",
        "question_ar": "",
        "evidence_en": "actively running business refers to active = 'true'; 'Phoenix' is the name of city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Phoenix'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Give the number of \"4\" stars Yelp businesses in \"Mesa\" city.",
        "question_ar": "",
        "evidence_en": "\"4\" stars refers to stars = '4'; 'Mesa' is the name of city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE stars = 4 AND city = 'Mesa'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Provide the number of Yelp businesses in \"Gilbert\" which got a\" high\" review count.",
        "question_ar": "",
        "evidence_en": "\"Gilbert\" is the name of city; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'High' AND city = 'Gilbert'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which actively running Yelp business in \"Gilbert\" has got the most reviews? Give the business id.",
        "question_ar": "",
        "evidence_en": "actively running business refers to active = 'true'; 'Gilbert' is the name of city; most review refers to review_count = 'Uber'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'true' AND T1.city = 'Gilbert' AND T1.review_count = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the Yelp business in \"Tempe\" city which got \"3.5\" stars and review count as \"Uber\", how many \"long\" reviews did it get?",
        "question_ar": "",
        "evidence_en": "\"Tempe\" is the name of city; long review refers to review_length = 'Long'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Tempe' AND T1.stars = '3.5' AND T1.review_count = 'Uber' AND T2.review_length = 'Long'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How is the \"noise level\" for the only Yelp business in “Mesa” which got a \"Uber\" review count?",
        "question_ar": "",
        "evidence_en": "\"Noise Level\" is the attribute_name; 'Mesa' is the name of city",
        "evidence_ar": "",
        "SQL": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T1.review_count = 'Uber' AND T3.attribute_name = 'Noise Level'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Is the Yelp business No. 14033 good for supper?",
        "question_ar": "",
        "evidence_en": "business no. 14033 refers to business_id = 14033; good for supper refers to attribute_name = 'good_for_dinner'",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'good_for_dinner' AND T1.business_id = 14033"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How long is the Yelp business No. 15098 opened on Monday?",
        "question_ar": "",
        "evidence_en": "Yelp business No. 15098 refers to business_id = '15098'; Monday refers to day_of_week = 'Monday'",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(T1.closing_time, 1, 2) + 12 - SUBSTR(T1.opening_time, 1, 2) AS YYSJ FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week = 'Monday' AND T1.business_id = 15098"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the Yelp businesses which received a \"5\" star review with \"uber\" number of votes for funny, which one is located in \"Phoenix\"? Give the business ID.",
        "question_ar": "",
        "evidence_en": "located in \"Phoenix\" refers to city = 'Phoenix'; received a \"5\" star review refers to review_stars = '5'; \"uber\" number of votes for funny refers to review_votes_funny = 'Uber'",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_stars = 5 AND T2.review_votes_funny = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which city is the business that got a \"medium\" length tip with \"3\" likes located in?",
        "question_ar": "",
        "evidence_en": "medium length tip refers to tip_length = 'Medium';",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the user who joined Yelp in \"2010\", with an average of \"4.5\" stars review and has got uber number of fans, how many \"funny\" compliments has he/she received from other users?",
        "question_ar": "",
        "evidence_en": "in \"2010\" refers to user_yelping_since_year = '2010'; average of \"4.5\" stars review refers to user_average_stars = '4.5'; uber number of fans refers to user_average_stars = '4.5'; \"funny\" compliments refers to compliment_type = 'funny'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_yelping_since_year = 2010 AND T1.user_average_stars = 4.5 AND T1.user_fans = 'Uber' AND T3.compliment_type = 'funny'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many \"cool\" type compliments does user No. 41717 get?",
        "question_ar": "",
        "evidence_en": "\"cool\" type compliments refers to compliment_type = 'cool'; user No. 41717 refers to user_id = 41717",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.number_of_compliments) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'cool' AND T2.user_id = 41717"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Does Yelp business No.\"11825\" have a \"parking lot\"?",
        "question_ar": "",
        "evidence_en": "business No.\"11825\" refers to business_id = '12476'; have a \"parking lot\" refers to attribute_value = 'parking_lot'",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 11825 AND T2.attribute_name = 'parking_lot'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Is the payment in mastercard possible for the Yelp business No.\"12476\"?",
        "question_ar": "",
        "evidence_en": "Yelp business No.\"12476\" refers to business_id = '12476'; payment in mastercard refers to attribute_value = 'payment_types_mastercard'",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 12476 AND T2.attribute_name = 'payment_types_mastercard'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the percentage for the Yelp businesses in \"Pets\" category of all businesses?",
        "question_ar": "",
        "evidence_en": "businesses in \"Pets\" category refers to category_name = 'Pets'; percentage refers to DIVIDE(COUNT(category_name = 'Pets'), COUNT(business_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many times is the number of \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?",
        "question_ar": "",
        "evidence_en": "\"Women's Clothing\" Yelp businesses refers to  category_name = 'Women''s Clothing'; \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; times refers to DIVIDE(COUNT(category_name = 'Women''s Clothing'), COUNT(category_name = 'Men''s Clothing'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) AS TIMES FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Write down the ID, active status and city of the business which are in CA state.",
        "question_ar": "",
        "evidence_en": "the ID refers to business_id; active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is closed or not running now",
        "evidence_ar": "",
        "SQL": "SELECT business_id, active, city FROM Business WHERE state = 'CA' AND active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of running business among all business.",
        "question_ar": "",
        "evidence_en": "running business refers to active = 'true'; percentage refers to DIVIDE(COUNT(active = 'true'), COUNT(business_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(business_id) FROM Business"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among all attribute names, list down the ID and attribute name which start with \"music\".",
        "question_ar": "",
        "evidence_en": "attribute name which start with \"music\" refers to attribute_name LIKE 'music%'",
        "evidence_ar": "",
        "SQL": "SELECT attribute_id, attribute_name FROM Attributes WHERE attribute_name LIKE 'music%'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Between 2006 and 2007, which year ID had the greater number in elite user?",
        "question_ar": "",
        "evidence_en": "2006 and 2007 refers to BETWEEN 2006 AND 2007; greater number in elite user refers to count(user_id)",
        "evidence_ar": "",
        "SQL": "SELECT year_id FROM Elite WHERE year_id IN (2006, 2007) GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Based on all user compliments, find the percentage of low number of compliments on all compliments ID.",
        "question_ar": "",
        "evidence_en": "low number of compliments refers to number_of_compliments = 'Low'; percentage refers to DIVIDE(COUNT(number_of_compliments = 'Low'), COUNT(user_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID and user ID who got uber for cool votes.",
        "question_ar": "",
        "evidence_en": "got uber for cool votes refers to review_votes_cool = 'Uber'",
        "evidence_ar": "",
        "SQL": "SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Write the user ID, business ID and tips length of who started using Yelp since 2004 and had high followers.",
        "question_ar": "",
        "evidence_en": "started using Yelp since 2004 refers to user_yelping_since_year = '2004'; had high followers refers to user_fans = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id, T2.business_id, T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_fans = 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the review votes of funny and cool hit uber with long review length, describe the business ID, active status, user ID and user year of joining Yelp.",
        "question_ar": "",
        "evidence_en": "review votes of funny refers to review_votes_funny = 'Uber'; cool hit uber refers to review_votes_cool = 'Uber'; user year of joining Yelp refers to user_yelping_since_year",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id, T1.active, T3.user_id, T3.user_yelping_since_year FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.review_votes_cool = 'Uber' AND T2.review_votes_funny = 'Uber' AND T2.review_length = 'Long'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Under the attribute name of \"music_playlist\", describe the attribute ID, business ID, city and inactive status.",
        "question_ar": "",
        "evidence_en": "active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is inactive or not running now",
        "evidence_ar": "",
        "SQL": "SELECT T1.attribute_id, T2.business_id, T3.city FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_playlist' AND T3.active = 'false'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of business with attribute name of \"Accepts Credit Cards\".",
        "question_ar": "",
        "evidence_en": "percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the stopped businesses in San Tan Valley city, list down the user ID and review length of who had great experience.",
        "question_ar": "",
        "evidence_en": "stop businesses refers to active = 'false'; great experience refers to review_stars = 5\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id, T2.review_length FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Tan Valley' AND T1.active = 'false' AND T2.review_stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber.",
        "question_ar": "",
        "evidence_en": "number of compliments reach uber refers to number_of_compliments = 'Uber'; elite year refers to year_id; user average star refers to user_average_stars",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_average_stars, T1.year_id, T4.compliment_type, T3.number_of_compliments FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Users_Compliments AS T3 ON T2.user_id = T3.user_id INNER JOIN Compliments AS T4 ON T3.compliment_id = T4.compliment_id INNER JOIN Years AS T5 ON T1.year_id = T5.year_id WHERE T3.number_of_compliments = 'Uber' AND T3.user_id = 6027"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Under the category name of \"Coffee & Tea\", mention any 5 business ID , their state and city.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id, T3.state, T3.city FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Coffee & Tea' LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Describe category name which had above 10% in comparing with all business and categories.",
        "question_ar": "",
        "evidence_en": "above 10% refers to DIVIDE(COUNT(Business_Categories.business_id = category_id), COUNT(category_id)) * 100% > 10%",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id GROUP BY T2.category_id HAVING COUNT(T2.business_id) > ( SELECT COUNT(T3.business_id) FROM Business_Categories AS T3 ) * 0.1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For the business with great experience existed in Sun Lakes city, provide the user ID who gave review on it and user followers.",
        "question_ar": "",
        "evidence_en": "with great experience refers to stars = 5",
        "evidence_ar": "",
        "SQL": "SELECT T3.user_id, T3.user_fans FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'Sun Lakes' AND T1.stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Compare the number of business between the category of \"Men's Clothing\" and \"Women's Clothing\".",
        "question_ar": "",
        "evidence_en": "category of \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; \"Women's Clothing\" refers to category_name = 'Women''s Clothing'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers.",
        "question_ar": "",
        "evidence_en": "highest quality user refers to number_of_compliments = 'Uber'; user of under ID 100 refers to user_id < 100 ;",
        "evidence_ar": "",
        "SQL": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List all the businesses that closed at 8PM.",
        "question_ar": "",
        "evidence_en": "closed at 8PM refers to closing_time = '8PM';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many 2 stars rated business located in Phoenix, Arizona?",
        "question_ar": "",
        "evidence_en": "located in Phoenix refers to city = 'Phoenix'; Arizona refers to state = 'AZ'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Tempe are rated as 'Wonderful experience?",
        "question_ar": "",
        "evidence_en": "in Tempe refers to city = 'Tempe'; rated as 'Wonderful experience refers to stars > 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND stars > 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List all the users with average star less than 3 stars in 2012",
        "question_ar": "",
        "evidence_en": "average star less than 3 stars refers to user_average_stars < 3; in 2012 refers to user_yelping_since_year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Users WHERE user_yelping_since_year = 2012 AND user_average_stars < 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the percentage of 5 stars rated business.",
        "question_ar": "",
        "evidence_en": "percentage refers to DIVIDE(COUNT(stars = 5), COUNT(business_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate difference between business that have the highest number of reviews and business that have the lowest number of reviews.",
        "question_ar": "",
        "evidence_en": "highest number of reviews refers to SUBTRACT(MAX(COUNT(business_id), MIN(COUNT(business_id))))",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1 ) - ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) ASC LIMIT 1 ) AS DIFF"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List all the tires businesses that are opened everyday.",
        "question_ar": "",
        "evidence_en": "tires businesses refers to category_name = 'Tires'; opened everyday refers to COUNT(distinct opening_time) = 7;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which users become an elite in 2012?",
        "question_ar": "",
        "evidence_en": "in 2012 refers to actual_year = 2012;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the business ID of shopping business that have 4 stars ratings.",
        "question_ar": "",
        "evidence_en": "shopping business refers to category_name = 'Shopping'; 4 stars ratings refers to stars = 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many business have low check-in on Sunday at 10AM?",
        "question_ar": "",
        "evidence_en": "on Sunday refers to day_of_week = 'Sunday'; low check-in at 10AM refers to label_time_10 = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Days AS T1 INNER JOIN Checkins AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.label_time_10 = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Glendale are reviewed by user with the ID of 20241?",
        "question_ar": "",
        "evidence_en": "in Glendale refers to city = 'Glendale'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' AND T2.user_id = 20241"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "State the locations of all Pet Services business.",
        "question_ar": "",
        "evidence_en": "location refers to city; Pet Services business refers to category_name = 'Pet Services'",
        "evidence_ar": "",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Pet Services'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many photos type compliment given from users with high cool votes?",
        "question_ar": "",
        "evidence_en": "photos type compliment refers to compliment_type = 'photos'; high cool votes refers to review_votes_cool = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id INNER JOIN Reviews AS T4 ON T1.user_id = T4.user_id WHERE T3.compliment_type = 'photos' AND T4.review_votes_cool = 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many closed businesses that have more than 10 attributes?",
        "question_ar": "",
        "evidence_en": "closed refers to active = 'false'; more than 10 attributes refers to count(attribute_id) > 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Business WHERE business_id IN ( SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'false' GROUP BY T1.business_id HAVING COUNT(DISTINCT T2.attribute_id) > 10 )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the business located in Mesa that have alcohol attribute.",
        "question_ar": "",
        "evidence_en": "in Mesa refers to city = 'Mesa'; alcohol attribute refers to attribute_name = 'Alcohol'",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T3.attribute_name = 'Alcohol'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Based on business in Phoenix, calculate the percentage of business with low funny votes.",
        "question_ar": "",
        "evidence_en": "in Chandelier refers to city = 'Chandelier'; percentage = divide(count(business_id where review_votes_funny = 'Low'), count(business_id)); business with low funny votes refers to review_votes_funny = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.review_votes_funny = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the ratio between business in shopping category and business in pets category?",
        "question_ar": "",
        "evidence_en": "ratio = divide(count(business_id where category_name = 'Shopping'), count(business_id where category_name = 'Pets'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Shopping' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS radio FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are registered in the database under 'Banks & Credit Unions' category?",
        "question_ar": "",
        "evidence_en": "category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name = 'Banks & Credit Unions'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many active businesses from Casa Grande are registered in the database?",
        "question_ar": "",
        "evidence_en": "active business refers to active = 'true'; Casa Grande refers to city = 'Casa Grande'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Casa Grande'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What time does the business with ID no.12 open on Monday?",
        "question_ar": "",
        "evidence_en": "open time refers to opening_time; on Monday refers to day_of_week = 'Monday'; business with ID no. refers to business_id \n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 12 AND T2.day_of_week = 'Monday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses that are registered in the database can be attributed to 'Good for Kids'?",
        "question_ar": "",
        "evidence_en": "can be attributed to 'Good for Kids' refers to attribute_name = 'Good for Kids' and attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'Good for Kids' AND T2.attribute_value = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Identify the most popular and appealing active business in Gilbert based on users' reviews.",
        "question_ar": "",
        "evidence_en": "most popular and appealing refers to review_count = 'High' and max(stars); active business refers to active = 'true'; in Gilbert refers to city = 'Gilbert'",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = 'High' ORDER BY stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the 5-star business in Ahwatukee, AZ and identify it's business category.",
        "question_ar": "",
        "evidence_en": "5-star refers to stars = 5; in Ahwatukee refers to city = 'Ahwatukee'; business category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id, T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.city = 'Ahwatukee' AND T1.stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among all closed businesses in Avondale, AZ what percent have obtained a 'wonderful experience' rating of the business.",
        "question_ar": "",
        "evidence_en": "closed business refers to active = 'false'; in Avondale refers to city = 'Avondale'; 'wonderful experience' rating refers to stars > 3; percentage = divide(count(business_id where stars > 3), count(business_id))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member?",
        "question_ar": "",
        "evidence_en": "has been yelping since 2004 refers to user_yelping_since_year = 2004",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users.",
        "question_ar": "",
        "evidence_en": "percentage = divide(count(business_id where review_length = 'Long' and review_stars = 5), count(business_id)) * 100%; long reviews refers to review_length = 'Long'; 5-star review refers to review_stars = 5",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN review_length = 'Long' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(review_length) FROM Reviews WHERE review_stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.",
        "question_ar": "",
        "evidence_en": "average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many short tips were left for the business with ID no.2?",
        "question_ar": "",
        "evidence_en": "short tip refers to tip_length = 'Short'; business category refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the Yelp user with the average 5-star rating of all reviews who has been yelping the longest.",
        "question_ar": "",
        "evidence_en": "Yelp user refers to user_id; average 5-star rating refers to user_average_stars = 5; yelping the longest refers to min(user_yelping_since_year)",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Identify the operating hours of businesses in Black Canyon City with review count greater than average.",
        "question_ar": "",
        "evidence_en": "operating hours refers to opening_time closing_time on day_id; in Black Canyon City refers to city = 'Black Canyon City'; greater than average refers to review_count > AVG(T1.review_count)",
        "evidence_ar": "",
        "SQL": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among all the users who received the high number of compliments, what percent received the 'cute' type of compliment.",
        "question_ar": "",
        "evidence_en": "high number of compliments refers to number_of_compliments = 'High'; percentage = divide(count(user_id where compliment_type = 'cute'), count(user_id))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.compliment_type = 'cute' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T2.number_of_compliments = 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Mention the number of businesses that have no any attribute.",
        "question_ar": "",
        "evidence_en": "have no attribute refers to attribute_value in( 'none', 'no', 'false')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false')"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the opening and closing time of business id 1 for day id 2?",
        "question_ar": "",
        "evidence_en": "false",
        "evidence_ar": "",
        "SQL": "SELECT opening_time, closing_time FROM Business_Hours WHERE business_id = 1 AND day_id = 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out city name of businesses which have medium length of review.",
        "question_ar": "",
        "evidence_en": "medium length of review refers to review_length = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_length = 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the closing time of business id 4 on Sunday?",
        "question_ar": "",
        "evidence_en": "on Sunday refers to day_of_week = 'Sunday'",
        "evidence_ar": "",
        "SQL": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses which have short length of review, which one located in Phoenix?",
        "question_ar": "",
        "evidence_en": "short length of review refers to review_length = 'Short'; in Phoenix refers to city = 'Phoenix'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the users whose fan is medium, how many users received high compliments from other users.",
        "question_ar": "",
        "evidence_en": "is medium refers to user_fans = 'Medium'; high compliments refers to number_of_compliments = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_fans = 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the users who received low compliments from other users, which users joined Yelp in 2012?",
        "question_ar": "",
        "evidence_en": "low compliments refers to number_of_compliments = 'Low'; joined Yelp in 2012 refers to user_yelping_since_year = 2012",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2012 AND T2.number_of_compliments = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses without attribute, how many businesses located in Gilbert?",
        "question_ar": "",
        "evidence_en": "without attribute refers to attribute_value = 'None'; in Gilbert refers to city = 'Gilbert'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Gilbert' AND T1.attribute_value IN ('None', 'no', 'false')"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses with average rating, how many business has attribute of full_bar.",
        "question_ar": "",
        "evidence_en": "average rating refers to avg(stars); attribute of full_bar refers to attribute_value = 'full_bar'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out the state of businesses which have opening time at 1AM.",
        "question_ar": "",
        "evidence_en": "state refers to city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.opening_time = '1AM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out the category name of business id 5.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out the user id that has compliment type of photos.",
        "question_ar": "",
        "evidence_en": "compliment type of photos refers to compliment_type = 'photos'",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of medium tip length in the list. List out the time when users of medium tip length join Yelp.",
        "question_ar": "",
        "evidence_en": "medium tip length refers to tip_length = 'Medium'; percentage = divide(count(tips where tip_length = 'Medium'), count(tips))*100%; the time when users join Yelp refers to user_yelping_since_year",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses.",
        "question_ar": "",
        "evidence_en": "percentage = divide(count(business where city = 'Mesa'), count(business)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "State the state of businesses which have closing time at 12AM.",
        "question_ar": "",
        "evidence_en": "state refers to city",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses which have attribute of beer_and_wine, how many business located in Peoria?",
        "question_ar": "",
        "evidence_en": "attribute of beer_and_wine refers to attribute_value = 'beer_and_wine'; in Peoria refers to city = 'Peoria'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Peoria' AND T1.attribute_value = 'beer_and_wine'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the users who received high compliments from other users, which users joined Yelp earliest?",
        "question_ar": "",
        "evidence_en": "high compliments refers to number_of_compliments = ' High'; joined Yelp earliest refers to min(user_yelping_since_year)",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which business ID has the most reviews?",
        "question_ar": "",
        "evidence_en": "the most reviews refer to MAX(user_id);",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(user_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which year has the most elite users?",
        "question_ar": "",
        "evidence_en": "year has the most elite users refers to year_id with MAX(user_id);",
        "evidence_ar": "",
        "SQL": "SELECT year_id FROM Elite GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many 5 star businesses have uber review votes for funny?",
        "question_ar": "",
        "evidence_en": "businesses refer to business_id; review_stars = 5.0; review_votes_funny = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users have uber review votes for funny from the fans?",
        "question_ar": "",
        "evidence_en": "users refer to user_id; review_votes_funny = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which business ID have the shortest business operating hours?",
        "question_ar": "",
        "evidence_en": "the shortest business operating hours refer to MIN(SUBTRACT(closing_time, opening_time));",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business_Hours ORDER BY closing_time - opening_time LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find out which business ID are opened all the time.",
        "question_ar": "",
        "evidence_en": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id >= 1 AND day_id < 8 AND opening_time = closing_time"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Does the length of the tip influence the number of likes for hotel and travel business category?",
        "question_ar": "",
        "evidence_en": "the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';",
        "evidence_ar": "",
        "SQL": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users manage to get uber votes for all of the review category? Find out what are the user average star.",
        "question_ar": "",
        "evidence_en": "users refer to user_id; uber votes for all of the review category refer to review_votes_funny = 'uber' AND review_votes_useful = 'uber' AND review_votes_cool = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) AS USER_IDS, T2.user_average_stars FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_votes_funny = 'Uber' AND T1.review_votes_useful = 'Uber' AND T1.review_votes_cool = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the ratio of good to bad business star for a businesses that are opened all the time?",
        "question_ar": "",
        "evidence_en": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time; ratio can be computed as DIVIDE(COUNT(stars BETWEEN 3.5 and 5), COUNT(stars BETWEEN 1 and 2.5));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.stars BETWEEN 3.5 AND 5 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.stars BETWEEN 1 AND 2.5 THEN 1 ELSE 0 END) AS ratio FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories.",
        "question_ar": "",
        "evidence_en": "being reviewed the most refers to MAX(user_id); business categories refer to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id, T3.category_name FROM Reviews AS T1 INNER JOIN Business_categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id GROUP BY T2.business_id ORDER BY COUNT(T1.user_id) DESC LIMIT 10"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in Arizona having an average review less than 3 stars?",
        "question_ar": "",
        "evidence_en": "businesses in Arizona refer to business_id where state = 'Arizona'; average review less than 3 stars refers to AVG(review_stars) < 3.0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE business_id IN ( SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'AZ' GROUP BY T1.business_id HAVING SUM(T2.review_stars) / COUNT(T2.user_id) < 3 )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the percentage of user not becoming an elite user?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUBTRACT(COUNT(user_id), COUNT(Elite.user_id)), COUNT(user_id)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST((( SELECT COUNT(user_id) FROM Users ) - ( SELECT COUNT(DISTINCT user_id) FROM Elite )) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the most common compliments types received by user with uber number of fans?",
        "question_ar": "",
        "evidence_en": "the most common compliments types refer to MAX(COUNT(compliment_id)); user_fans = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.compliment_type FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_fans = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average year needed by a user with uber fans to become an elite user?",
        "question_ar": "",
        "evidence_en": "AVG(user_yelping_since_year) where user_fans = 'uber';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_fans = 'Uber'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average year for a user to be upgraded to elite user?",
        "question_ar": "",
        "evidence_en": "AVG(user_yelping_since_year) where user_id from Elite;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many business are opened for more than 8 hour in Mesa and what is the percentage of the active businesses?",
        "question_ar": "",
        "evidence_en": "business are opened for more than 8 hours refer to business_id where SUBTRACT(closing_time, opening_time) > 8; DIVIDE(COUNT(business_id where active = 'true' and city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8), COUNT(business_id where city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.",
        "question_ar": "",
        "evidence_en": "opened during late afternoon refers to Business_Hours where opening_time ≥ '5PM'; active businesses refer to business_id where active = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.category_name FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.city = 'Phoenix' AND T1.opening_time >= '5PM' LIMIT 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which user has done the most review on a business attributed to delivery?",
        "question_ar": "",
        "evidence_en": "the most reviews refer to MAX(business_id) where attribute_name = 'Delivery';",
        "evidence_ar": "",
        "SQL": "SELECT T3.user_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Reviews AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Delivery' GROUP BY T3.user_id ORDER BY COUNT(T2.business_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average number of reviews written for active businesses that operate not more than 30 hours a week?",
        "question_ar": "",
        "evidence_en": "avg(user_id) where active = 'true' and SUM(SUBTRACT(closing_time, opening_time)) < 30;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T3.user_id) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Reviews AS T3 ON T1.business_id = T3.business_id WHERE T1.active = 'true' GROUP BY T2.closing_time - T2.opening_time HAVING SUM(T2.closing_time - T2.opening_time) < 30"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many business ids have opening hours from 8AM to 6PM?",
        "question_ar": "",
        "evidence_en": "opening hours from 8AM to 6PM refer to Business_Hours where opening_time = '8AM' and closing_time = '6PM';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT business_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Provide business ids with opening hours 10AM on Saturday.",
        "question_ar": "",
        "evidence_en": "opening hours 10AM on Saturday refer to Business_Hours where opening_time = '10AM' and day_id = 6;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id = 6 AND opening_time = '10AM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Indicate the business id and days which are opened from 8AM to 6PM.",
        "question_ar": "",
        "evidence_en": "opened from 8AM to 6PM refers to Business_Hours where opening_time = '8AM' and closing_time = '6PM'; days refer to day_id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT day_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses id are rated more than 4?",
        "question_ar": "",
        "evidence_en": "rated more than 4 refers to stars > 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE stars > 4"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the categories of businesses that have opening time on Sunday?",
        "question_ar": "",
        "evidence_en": "categories of businesses refer to category_name; Sunday refers to day_of_week where day_id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T4.day_of_week = 'Sunday' AND T3.opening_time <> ''"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please indicate the opening day of businesses whose category is pets.",
        "question_ar": "",
        "evidence_en": "category is pets refers to category_name = 'Pets'; opening day refers to day_id from Business_Hours and opening_time;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.day_of_week FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Pets'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please indicate the closing hours and business days of the businesses with the category named Doctors.",
        "question_ar": "",
        "evidence_en": "closing hours refer to closing_time; business days refer to day_id from Business_Hours;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.opening_time, T3.day_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Doctors'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the working days from Monday to Saturday, which businesses with the category names work the most days?",
        "question_ar": "",
        "evidence_en": "days from Monday to Saturday refer to day_id between 2 and 7; work the most days can be computed as MAX(COUNT(category_name where day_id between 2 and 7));",
        "evidence_ar": "",
        "SQL": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.",
        "question_ar": "",
        "evidence_en": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In businesses with a category of \"DJs\", how many businesses are rated less than 5?",
        "question_ar": "",
        "evidence_en": "category of \"DJs\" refers to category_name = 'DJs'; rated less than 5 refers to stars < 5; businesses refer to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'DJs' AND T1.stars < 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List active business ids with opening times of 7AM and closing times of 8PM.",
        "question_ar": "",
        "evidence_en": "opening times of 7AM and closing times of 8PM refer to Business_Hours where opening_time = '7AM' and closing_time = '8PM'; active business refers to business_id where active = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T4.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Business AS T4 ON T3.business_id = T4.business_id WHERE T4.active = 'true' AND T3.opening_time = '7AM' AND T3.closing_time = '8PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses with the category named Stadiums & Arenas are rated highest?",
        "question_ar": "",
        "evidence_en": "rated highest refers to MAX(stars); category_name = 'Stadiums & Arenas';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Stadiums & Arenas' AND T3.stars = ( SELECT MAX(stars) FROM Business )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many category id have low review count and rating more than 2?",
        "question_ar": "",
        "evidence_en": "rating more than 2 refers to stars > 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.review_count = 'Low' AND T3.stars > 2"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which businesses with the category name Accessories have opening hours before 7AM?",
        "question_ar": "",
        "evidence_en": "opening hours before 7AM refer to opening_time < '7AM'; businesses refer to business_id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Accessories' AND SUBSTR(T1.opening_time, -4, 2) * 1 < 7 AND T1.opening_time LIKE '%AM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the active businesses in Arizona, how many businesses work after 12PM?",
        "question_ar": "",
        "evidence_en": "active businesses in Arizona refer to business_id where state = 'Arizona' and active = 'true'; work after 12PM refer to opening_time > '12PM';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Please provide the name of businesses with user id \"16328\".",
        "question_ar": "",
        "evidence_en": "name of business refers to category_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T3.user_id = 16328"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses have the category named food? List those businesses and find the percentage of businesses with less than 2 stars.",
        "question_ar": "",
        "evidence_en": "businesses have the category named food refer to business_id where category_name = 'Food'; DIVIDE(COUNT(business_id where category_name = 'Food' and stars < 2), COUNT(business_id where category_name = 'Food')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT T3.business_id, CAST((( SELECT COUNT(business_id) FROM Business WHERE stars < 2 ) - ( SELECT COUNT(business_id) FROM Business WHERE stars > 2 )) AS REAL) * 100 / ( SELECT COUNT(stars) FROM Business ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Food'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of businesses with the category name food that are open from 7AM to 8PM in the businesses with the same time.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(business_id where category_name = 'Food' and opening_time = '7AM' and closing_time = '8PM'), COUNT(business_id where opening_time = '7AM' and closing_time = '8PM')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Write down the number of running business with each review count in Cave Creek city.",
        "question_ar": "",
        "evidence_en": "number of running business refers to COUNT(business_id) where active = 'true'; each review count includes review_count = 'High', review_count = 'Medium', review_count = 'Low';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN review_count = 'High' THEN 1 ELSE 0 END) AS high , SUM(CASE WHEN review_count = 'Medium' THEN 1 ELSE 0 END) AS Medium , SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) AS low FROM Business WHERE city = 'Cave Creek' AND active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the yearly average user who started using Yelp from the year of 2005 to 2014.",
        "question_ar": "",
        "evidence_en": "avg(user_id) where user_yelping_since_year BETWEEN '2005' AND '2014';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(user_id) FROM Users WHERE user_yelping_since_year >= 2005 AND user_yelping_since_year <= 2015"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the active and inactive ratio of the business with the review count of low.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(business_id where review_count = 'Low' and active = 'true'), COUNT(business_id where review_count = 'Low' and active = 'false'));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List any five of user ID who became elite user in 2006.",
        "question_ar": "",
        "evidence_en": "year_id = '2006';",
        "evidence_ar": "",
        "SQL": "SELECT user_id FROM Elite WHERE year_id = 2006 LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Write down the any five of ID and name of category that starts with alphabet \"P\".",
        "question_ar": "",
        "evidence_en": "category that starts with alphabet \"P\" refers to category_name like 'P%';",
        "evidence_ar": "",
        "SQL": "SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Provide the list of user ID along with review star of which has the review length of medium with business ID of 35.",
        "question_ar": "",
        "evidence_en": ";",
        "evidence_ar": "",
        "SQL": "SELECT user_id, review_stars FROM Reviews WHERE business_id = 15 AND review_length = 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID and attribute value of the attribute name of \"payment_types_visa\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id, T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'payment_types_visa'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Describe ID and active status of the business under category of \"Diagnostic Imaging\".",
        "question_ar": "",
        "evidence_en": "ID refers to business_id; category of \"Diagnostic Imaging\" refers to category_name = 'Diagnostic Imaging';",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Mention the user ID and their year of joining Yelp who had great experience on business ID 143.",
        "question_ar": "",
        "evidence_en": "year of joining Yelp refers to user_yelping_since_year; great experience refers to Reviews where review_stars = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id, T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.business_id = 143 AND T1.review_stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the user ID with number in compliment of uber on profile, list any 5 user ID and the year when they join Yelp.",
        "question_ar": "",
        "evidence_en": "when join Yelp refers to user_yelping_since_year; compliment_type = 'profile'; number_of_compliments = 'Uber';",
        "evidence_ar": "",
        "SQL": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the user ID, business ID with review length of the business which received the most likes in tips.",
        "question_ar": "",
        "evidence_en": "business which received the most likes refers to business_id where MAX(likes);",
        "evidence_ar": "",
        "SQL": "SELECT T1.user_id, T1.business_id, T2.review_length FROM Tips AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ORDER BY T1.likes DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos.",
        "question_ar": "",
        "evidence_en": "from 2005 to 2014 refers to year_id BETWEEN 2005 AND 2014; compliment_type = 'photos';",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id, T2.number_of_compliments FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Elite AS T3 ON T2.user_id = T3.user_id WHERE T3.year_id BETWEEN 2005 AND 2014 AND T1.compliment_type = 'photos'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of business which opened on Sunday from 9AM to 9PM based on the number of business opened on Sunday.",
        "question_ar": "",
        "evidence_en": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; opened from 9AM to 9PM refers to Business_Hours where opening_time = '9AM' and closing_time = '9PM'; DIVIDE(COUNT(opening_time = '9AM' and closing_time = '9PM' and day_of_week = 'Sunday'), COUNT(opening_time = NOT NULL and closing_time = NOT NULL and day_of_week = 'Sunday')) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Write down the ID and opening day of a week for the business which are running in Black Canyon City.",
        "question_ar": "",
        "evidence_en": "running refers to active = 'true'; opening day of a week means days of the week when business is open;",
        "evidence_ar": "",
        "SQL": "SELECT T2.business_id, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Within the user who joined Yelp in 2004, explore the user ID with average star of 5 and it's review length on the business.",
        "question_ar": "",
        "evidence_en": "user who joined Yelp in 2004 refers to user_id where user_yelping_since_year = 2014; user_average_stars = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_id, T2.review_length FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_average_stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Which business ID received the review of 4 star and above by 65% of user? Describe their active status and city.",
        "question_ar": "",
        "evidence_en": "review of 4 star and above refers to stars > 4; DIVIDE(SUM(stars > 4), COUNT(business_id)) = 0.65;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the difference between running business in Glendale City and Mesa City.",
        "question_ar": "",
        "evidence_en": "running business refers to business where active = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN city = 'Glendale' THEN 1 ELSE 0 END) - SUM(CASE WHEN city = 'Mesa' THEN 1 ELSE 0 END) AS diff FROM Business WHERE active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many likes did short comment left by users who joined in 2010 get?",
        "question_ar": "",
        "evidence_en": "short comment refers to tip_length = 'Short'; users who joined in 2010 refer to user_id where user_yelping_since_year = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For users with average ratings of 3, what kind of tip length they mostly left?",
        "question_ar": "",
        "evidence_en": "average ratings of 3 refer to user_average_stars = 3; kind of tip length they mostly left refers to tip_length where MAX(COUNT(user_id));",
        "evidence_ar": "",
        "SQL": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Sum up the likes get by short reviews on businesses located in City Goodyear.",
        "question_ar": "",
        "evidence_en": "short reviews refer to tip_length = 'Short';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.likes) AS likes FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Goodyear'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "For businesses with long length reviews, which state are they located?",
        "question_ar": "",
        "evidence_en": "businesses with long length tips refer to business_id where tip_length = 'Long';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Long'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How much time do businesses in El Mirage City, AZ State operate in average daily?",
        "question_ar": "",
        "evidence_en": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.closing_time - T2.opening_time) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the closing day of businesses located at SC State.",
        "question_ar": "",
        "evidence_en": "closing day refers to SUBTRACT(days.day_id, business_Hours.day_id)",
        "evidence_ar": "",
        "SQL": "SELECT T3.day_id - T2.day_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.state = 'SC'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the category of businesses whose stars ratings are 5.",
        "question_ar": "",
        "evidence_en": "category of businesses refers to category_name; stars ratings are 5 refers to stars = 5",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What are the states of businesses with attribute of beer and wine located?",
        "question_ar": "",
        "evidence_en": "with attribute of beer and wine refers to attribute_value = 'beer_and_wine';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.state FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'beer_and_wine'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many user's compliment in photo has medium in number?",
        "question_ar": "",
        "evidence_en": "user's compliment in photo refers to compliment_type = 'photo'; photo has medium in number refers to number_of_compliments = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos' AND T2.number_of_compliments = 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among businesses with \"Wi-Fi\" attribute, which businesses id are located at SC State?",
        "question_ar": "",
        "evidence_en": "\"Wi-Fi\" attribute refers to attribute_name = 'Wi-Fi' AND attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT T3.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Wi-Fi' AND T2.attribute_value = 'true' AND T3.state = 'SC'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Sum up the number of business with \"ambience_romantic\" attribute.",
        "question_ar": "",
        "evidence_en": "\"ambience_romantic\" attribute refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_romantic' AND T2.attribute_value = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the percentage of businesses with \"Good for Kids\" attribute over the other attributes?",
        "question_ar": "",
        "evidence_en": "\"Good for Kids\" attribute refers to attribute_name = 'Good for Kids' AND attribute_value = 'true'; Calculation = DIVIDE(SUM(attribute_name = 'Good for Kids' AND attribute_value = 'true')), SUM(business_id) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN attribute_name = 'Good for Kids' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are not closed in the city of Mesa?",
        "question_ar": "",
        "evidence_en": "businesses are not closed refers to active = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In how many businesses have customers had a bad or terrible experience?",
        "question_ar": "",
        "evidence_en": "stars = 2 means bad experience; stars = 1 means terrible experience; customers had a bad or terrible experience refers to stars = 2 OR stars = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE stars IN (1, 2)"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List by ID the businesses with the reviews with the lowest veracity of Paradise Valley.",
        "question_ar": "",
        "evidence_en": "ID of businesses refers to business_id; reviews with the lowest veracity refers to review_count = 'Low' AND stars > 3; Paradise Valley is a city",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE stars > 3 AND city = 'Paradise Valley' AND review_count = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses have more than 1 attribute?",
        "question_ar": "",
        "evidence_en": "businesses have more than 1 attribute refers to COUNT(attribute_value) > 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value > 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses are opened the same number of hours every day of the week?",
        "question_ar": "",
        "evidence_en": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); every day of the week refers to day_id BETWEEN 1 AND 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many reviews of businesses that are still open received an uber rating on the funny vote?",
        "question_ar": "",
        "evidence_en": "businesses that still open refers to active = 'true'; business received an uber rating on the funny vote refers to review_votes_funny = 'Uber'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny = 'Uber' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many of the users who use a high number of compliments do not have any fans?",
        "question_ar": "",
        "evidence_en": "do not have fans refers to user_fans = 'None'; high number of compliment refers to number_of_compliments = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.user_id) FROM Users_Compliments AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.number_of_compliments = 'High' AND T2.user_fans = 'None'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the most common type of compliments that a user has received from other users?",
        "question_ar": "",
        "evidence_en": "the most common type of compliments refers to MAX(COUNT(compliment_type))",
        "evidence_ar": "",
        "SQL": "SELECT T2.compliment_type FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id GROUP BY T2.compliment_type ORDER BY COUNT(T2.compliment_type) DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many stars does each of the 3 top users with the most likes in their reviews have?",
        "question_ar": "",
        "evidence_en": "more likes mean this tip is more valuable; the most likes refers to MAX(likes); stars refers to users_average_stars",
        "evidence_ar": "",
        "SQL": "SELECT T2.user_average_stars FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id ORDER BY SUM(T1.likes) DESC LIMIT 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In which categories does the only business located in the city of Arcadia appear?",
        "question_ar": "",
        "evidence_en": "categories refers to category_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Arcadia'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List by their id all businesses that are open on Sunday.",
        "question_ar": "",
        "evidence_en": "day_of_week = 'Sunday'; open on Sunday refers to day_id = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.day_id = 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses with music_karaoke attribute are closed?",
        "question_ar": "",
        "evidence_en": "music_karaoke attribute refers to attribute_name = 'music_karaoke' AND attribute_value = 'true'; businesses are closed refers to active = 'false'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_karaoke' AND T3.active = 'false' AND T2.attribute_value IN ('none', 'no', 'false')"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many open businesses in the City of Phoenix have users left a long review?",
        "question_ar": "",
        "evidence_en": "open businesses refers to active = 'true'; long review refers to review_length = 'Long'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users who have received a low cool vote have also received at least 1 low cool vote for some of their reviews?",
        "question_ar": "",
        "evidence_en": "low cool vote for user refers to user_votes_cool = 'Low';  low cool vote for review refers to review_votes_cool = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_votes_cool = 'Low' AND T2.review_votes_cool = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many users with a long tip and 2 likes for their tip have a high number of fans?",
        "question_ar": "",
        "evidence_en": "long tip refers to tip_length = 'Long'; 2 likes refers to likes = 2; high number of fans refers to user_fans = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In how many businesses with the ambience_trendy attribute?",
        "question_ar": "",
        "evidence_en": "ambience_trendy attribute refers to attribute_name = 'ambience_trendy' AND attribute_value = 'false'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_trendy' AND T2.attribute_value IN ('none', 'no', 'false')"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many businesses in the city of Scottsdale open on Sunday at 12PM?",
        "question_ar": "",
        "evidence_en": "businesses that opened on Sunday refers to day_of_week = 'Sunday'; businesses that opened at 12PM refers to opening_time = '12PM'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the average number of stars for businesses in the Obstetricians & Gynecologists category?",
        "question_ar": "",
        "evidence_en": "Obstetricians & Gynecologists category refers to category_name = 'Obstetricians & Gynecologists'; calculation = AVG(stars)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Calculate the percentage of users with a high number of fans who were elite in 2011.",
        "question_ar": "",
        "evidence_en": "users with a high number of fans refers to user_fans = 'High'; 2011 refers to actual_year = 2011; Calculation = DIVIDE(Elite.user_id where user_fans = 'High' AND actual_year = 2011, Elite.user_id where actual_year = 2011) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "How many of the businesses are in Surprise?",
        "question_ar": "",
        "evidence_en": "Surprise is a city",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE city = 'Surprise'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID with a high review count in Tempe.",
        "question_ar": "",
        "evidence_en": "Tempe is a city; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE review_count = 'High' AND city = 'Tempe'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the total number of active businesses in AZ with a medium review count?",
        "question_ar": "",
        "evidence_en": "active businesses refers to active = 'true'; AZ is a state; medium review count refers to review_count = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List down the business ID with a star range from 3 to 5, located at Chandler.",
        "question_ar": "",
        "evidence_en": "businesses with a star range from 3 to 5 refers to stars BETWEEN 3 AND 5; Chandler is a city",
        "evidence_ar": "",
        "SQL": "SELECT business_id FROM Business WHERE stars >= 3 AND stars < 6 AND city = 'Chandler'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In users yelping since 2009 to 2011, how many of them have low count of fans?",
        "question_ar": "",
        "evidence_en": "users in yelping since 2009 to 2011 refers to user_yelping_since_year BETWEEN 2009 AND 2011; low count of fans refers to user_fans = 'Low'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the review length of user 11021 to business with business ID 3?",
        "question_ar": "",
        "evidence_en": "review length refers to review_length; user 11021 refers to user_id = 11021; business ID 3 refers to business_id = 3",
        "evidence_ar": "",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 11021 AND business_id = 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses in Tempe, list the attribute of the business with a medium review count.",
        "question_ar": "",
        "evidence_en": "Tempe is a city; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Tempe' AND T1.review_count = 'Medium'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "In businesses with a category of food, how many of them have a star rating below 3?",
        "question_ar": "",
        "evidence_en": "category of food refers to category_name = 'Food'; star rating below 3 refers to stars < 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the active business ID and its stars of the businesses fall under the category of Food.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the category and attributes of businesses with highest star rating?",
        "question_ar": "",
        "evidence_en": "category of the business refers to category_name; attributes of the business refers to attribute_name; the highest star rating refers to MAX(stars)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T2.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.stars = ( SELECT MAX(stars) FROM Business )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the category of the business with short review length and highest review stars within business ID from 7 to 14?",
        "question_ar": "",
        "evidence_en": "category of the business refers to category_name; short review length refers to review_length = 'Short'; the highest star rating refers to MAX(stars); business ID from 7 to 14 refers to business_id BETWEEN 7 AND 14",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Count the active businesses that has an attribute of BYOB with high review count.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'; attribute of BYOB refers to attribute_name = 'BYOB'; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name = 'BYOB' AND T1.review_count = 'High' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the closing and opening time of businesses located at Glendale with highest star rating?",
        "question_ar": "",
        "evidence_en": "Glendale is a city; the highest star rating refers to MAX(stars)",
        "evidence_ar": "",
        "SQL": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' ORDER BY T1.stars DESC LIMIT 1"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the active businesses located at Goodyear, AZ, list the category and atrributes of business with a high review count.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; Goodyear is a city; AZ is a state; high review count refers to review_count = 'High'",
        "evidence_ar": "",
        "SQL": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the categories of active businesses in Glendale, AZ.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; categories refers to category_name; Glendale is a city; AZ is a state",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.category_name FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T2.city = 'Glendale'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Find the location of businesses that has business hours from 7 am to 7 pm every Wednesday.",
        "question_ar": "",
        "evidence_en": "location of business refers to city; business hours from 7am to 7pm refers to opening_time = '7AM' AND closing_time = '7PM'; Wednesday refers to day_of_week = 'Wednesday'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '7AM' AND T2.closing_time = '7PM' AND T3.day_of_week = 'Wednesday'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ?",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; low review count refers to review_count = 'Low'; 3 stars refers to stars = 3; Goodyear is a city; AZ is a state",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "What is the opening time of the active businesses in Glendale that have a medium review count.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; Glendale is a city; medium review count refers to review_count = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Glendale' AND T1.review_count = 'Medium' AND T1.active = 'true'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "Among the businesses with a category of Food, what is the percentage of the business with greater than 3 stars?",
        "question_ar": "",
        "evidence_en": "category of food refers to category_name = 'Food'; calculation = DIVIDE(COUNT(stars > 3), SUM(stars))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food'"
    },
    {
        "db_id": "public_review_platform",
        "question_en": "List the closing time and day of week of active businesses in Goodyear with stars greater than the 80% of average age of star rating.",
        "question_ar": "",
        "evidence_en": "active business ID refers to active = 'true'; Goodyear is a city; Calculation = AVG(stars) * 0.8; businesses with stars greater than 80% of average star rating refers to stars > AVG(stars) * 0.8",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.active = 'true' AND T1.city = 'Goodyear' AND T1.stars > ( SELECT AVG(stars) * 0.8 FROM Business WHERE active = 'true' AND city = 'Goodyear' )"
    },
    {
        "db_id": "citeseer",
        "question_en": "Among all the citation, what is the percentage of paper ID under the Agents classification?",
        "question_ar": "",
        "evidence_en": "classification refers to class_label; class_label = 'Agents'; percentage = (divide(count(paper_id where class_label = 'Agents')), (count(paper_id)))*100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN class_label = 'Agents' THEN paper_id ELSE NULL END) AS REAL) * 100 / COUNT(paper_id) FROM paper"
    },
    {
        "db_id": "citeseer",
        "question_en": "What is the most cited word? How many papers was that word cited in?",
        "question_ar": "",
        "evidence_en": "most cited word refers to max(count(word_cited_id);",
        "evidence_ar": "",
        "SQL": "SELECT word_cited_id, COUNT(paper_id) FROM content GROUP BY word_cited_id ORDER BY COUNT(word_cited_id) DESC LIMIT 1"
    },
    {
        "db_id": "citeseer",
        "question_en": "What is the total number of word cited under that class labelled 'AI'?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'"
    },
    {
        "db_id": "citeseer",
        "question_en": "For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017"
    },
    {
        "db_id": "citeseer",
        "question_en": "Among all the DB class type citation, which word is the most frequently cited?",
        "question_ar": "",
        "evidence_en": "class type refers to class_label; class_label = 'DB'; word that is most frequently cited refers to max(count(word_cited_id);",
        "evidence_ar": "",
        "SQL": "SELECT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T2.word_cited_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1"
    },
    {
        "db_id": "citeseer",
        "question_en": "Calculate the percentage of words used in Agents class label.",
        "question_ar": "",
        "evidence_en": "percentage = (divide(count(word_cited_id where class_label = 'Agents')), (count(word_cited_id)))*100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.class_label = 'Agents' THEN T2.word_cited_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id"
    },
    {
        "db_id": "citeseer",
        "question_en": "Which paper ID cited the most word? In which class label does it belongs to?",
        "question_ar": "",
        "evidence_en": "most cited word refers to max(word_cited_id);",
        "evidence_ar": "",
        "SQL": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1"
    },
    {
        "db_id": "citeseer",
        "question_en": "List all the paper ID and its class type that cited the word 'word1002'.",
        "question_ar": "",
        "evidence_en": "class type refers to class_label;",
        "evidence_ar": "",
        "SQL": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1002'"
    },
    {
        "db_id": "citeseer",
        "question_en": "List all words cited in the AI class label.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'"
    },
    {
        "db_id": "citeseer",
        "question_en": "What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.class_label, COUNT(T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'chakrabarti01integrating' GROUP BY T1.class_label"
    },
    {
        "db_id": "citeseer",
        "question_en": "List all paper ID and its class type with more than 20 cited words.",
        "question_ar": "",
        "evidence_en": "class type refers to class_label; count(word_cited_id)>20",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id, T1.class_label HAVING COUNT(T2.word_cited_id) > 20"
    },
    {
        "db_id": "citeseer",
        "question_en": "List the words that are cited in both AI and IR class label.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'"
    },
    {
        "db_id": "citeseer",
        "question_en": "Name the paper which is cited most times and the paper which is cited least times? Also, find the number of times each one is cited.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT cited_paper_id, COUNT(cited_paper_id), ( SELECT cited_paper_id FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ), ( SELECT COUNT(cited_paper_id) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1"
    },
    {
        "db_id": "citeseer",
        "question_en": "On average, how many papers are under the ML class?",
        "question_ar": "",
        "evidence_en": "class refers to class_label; average = divide(count(paper_id where class_label = 'M')), (count(paper_id)));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN class_label = 'ML' THEN paper_id ELSE NULL END) AS REAL) / COUNT(paper_id) FROM paper"
    },
    {
        "db_id": "citeseer",
        "question_en": "Find the words cited in papers that are cited by sima01computational?",
        "question_ar": "",
        "evidence_en": "paper cited by refers to citing_paper_id; citing_paper_id = 'sima01computational';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'"
    },
    {
        "db_id": "citeseer",
        "question_en": "How many papers were cited by schmidt99advanced cited word3555?",
        "question_ar": "",
        "evidence_en": "paper cited by refers to citing_paper_id; citing_paper_id = 'schmidt99advanced';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'"
    },
    {
        "db_id": "citeseer",
        "question_en": "Under what classification do the papers that cited word1163 belong?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1163'"
    },
    {
        "db_id": "citeseer",
        "question_en": "Among the papers under DB classification, which paper has the highest number of words cited?",
        "question_ar": "",
        "evidence_en": "classification refers to class_label; class_label = 'DB';",
        "evidence_ar": "",
        "SQL": "SELECT T1.paper_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T1.paper_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1"
    },
    {
        "db_id": "citeseer",
        "question_en": "In the papers classified as ML, how many cited butz01algorithmic?",
        "question_ar": "",
        "evidence_en": "classification refers to class_label; paper cited by refers to citing_paper_id; citing_paper_id = 'butz01algorithmic';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which crew member of the simpson 20s is the oldest?",
        "question_ar": "",
        "evidence_en": "oldest refers to Min(birthdate)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE birthdate IS NOT NULL ORDER BY birthdate ASC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What's the nickname for Dan Castellaneta?",
        "question_ar": "",
        "evidence_en": "\"Dan Castellaneta\" is the name of Person",
        "evidence_ar": "",
        "SQL": "SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the crew members of the simpson 20s born in the New York city, how many of them were born after the year 1970?",
        "question_ar": "",
        "evidence_en": "born in New York city refers to birth_region = 'New York'; born after year 1970 refers to ('%Y', birthdate) > 1970",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND SUBSTR(birthdate, 1, 4) > '1970';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?",
        "question_ar": "",
        "evidence_en": "\"Outstanding Voice-Over Performance\" is the award; 2009 refers to year = 2009; 'Winner' is the result; country refers to birth_country",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_country FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list the names of all the awards won by the crew member whose nickname is Doofus.",
        "question_ar": "",
        "evidence_en": "award won refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T2.award FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009?",
        "question_ar": "",
        "evidence_en": "born in USA refers to birth_country = 'USA'; were nominated refers to result = 'Nominee'; 'Outstanding Animated Program (For Programming Less Than One Hour)' is the award; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which character won the Outstanding Voice-Over Performance award in 2009?",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.character FROM Character_Award AS T1 INNER JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list all the keywords of the episode Lost Verizon.",
        "question_ar": "",
        "evidence_en": "\"Lost Verizon\" is the title of episode",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many keywords does the episode that was aired on 2008/10/19 have?",
        "question_ar": "",
        "evidence_en": "aired on 2008/10/19 refers to air_date = '2008-10-19'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009?",
        "question_ar": "",
        "evidence_en": "\"Dan Castellaneta\" is the person;  2009 is year;  won refers result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many 7-star votes in star score did the episode Lost Verizon have?",
        "question_ar": "",
        "evidence_en": "7-stars vote refers to stars = 7; 'Lost Verizon' is the title of episode",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' AND T2.stars = 7;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many stars did most of the voters give in star score for the episode Lost Verizon?",
        "question_ar": "",
        "evidence_en": "\"Lost Verizon\" is the title of episode; most voters refers to Max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list the titles of the episodes that have over 200 voters voting a 10 in star score.",
        "question_ar": "",
        "evidence_en": "over 200 votes refers to votes > 200; 10 in star score refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.votes > 200 AND T2.stars = 10;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes aired in the year 2009 have over 15% of voters giving 10 stars in star score?",
        "question_ar": "",
        "evidence_en": "aired in the year 2009 refers to air_date like '2009%'; 10 stars in star score refers to stars = 10; over 15% of voters refers to Votes.percent > 15",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.stars = 10 AND T2.percent > 15;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What's the title of the episode that got the most 7-star votes in star score?",
        "question_ar": "",
        "evidence_en": "7-stars vote refers to stars = 7;  most refers to Max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many stars on average does the episode Lost Verizon have?",
        "question_ar": "",
        "evidence_en": "\"Lost Verizon\" is the title of episode; stars on average = Divide( Sum (Multiply (votes, stars)), Sum(votes))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7?",
        "question_ar": "",
        "evidence_en": "\"Primetime Emmy' is the award_category;  rating over 7 refers to rating > 7; nominated refers to result = 'Nominee'; percentage = Divide(Count(episode_id(award_category = 'Primetime Emmy')), Count (episode_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the title of the episode where Pamela Hayden voiced the character 'Ruthie.'",
        "question_ar": "",
        "evidence_en": "\"Pamela Hayden\" is the person; voice the character 'Ruthie' refers to role = 'Ruthie'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Pamela Hayden' AND T2.role = 'Ruthie';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down all the roles of Matt Groening on the episode titled 'In the Name of the Grandfather' along with the episode number and series number.",
        "question_ar": "",
        "evidence_en": "\"Matt Groening\" is the person; 'In the Name of the Grandfather' is the title of episode; episode number refers to episode; series number refers to number_in_series",
        "evidence_ar": "",
        "SQL": "SELECT T2.role, T1.episode, T1.number_in_series FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Matt Groening' AND T1.title = 'In the Name of the Grandfather';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write down the title and summary of the episode with the keyword 'eviction.'",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T1.summary FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'eviction';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the average number of stars received by the episode titled 'Wedding for Disaster.'",
        "question_ar": "",
        "evidence_en": "\"Wedding for Disaster\" is the title of episode; average number of stars = Divide(Sum(stars), Count(stars))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.stars) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Wedding for Disaster';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write the title and all the keywords of the episode that was aired on 3/22/2009.",
        "question_ar": "",
        "evidence_en": "aired on 3/22/2009 refers to air_date = '2009-03-22'",
        "evidence_ar": "",
        "SQL": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the birth name of the person who voiced 'Helen Lovejoy?'",
        "question_ar": "",
        "evidence_en": "voiced refers to role; role = 'Helen Lovejoy\"",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.birth_name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'Helen Lovejoy';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the percentage ratio between uncredited and credited roles on the episode that won the 2017 Jupiter Award for Best International TV Series? Please include the title of the episode and the names of the persons who were uncredited alongside their role in that episode.",
        "question_ar": "",
        "evidence_en": "uncredited refers to credited = ''; credited refers to credited = 'true'; won refers to result = 'Winner'; 2017 is the year; 'Jupiter Award' is the award_category; 'Best International TV Series' is the award; percentage ratio = Divide (SUM(credited = ''), SUM(credited = 'true')) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.credited = 'false' THEN 1 END) AS REAL) * 100 / SUM(CASE WHEN T2.credited = 'true' THEN 1 END), T3.title, T2.person FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award_category = 'Jupiter Award' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes have more than 1000 votes?",
        "question_ar": "",
        "evidence_en": "more than 1000 votes refers to votes > 1000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(episode_id) FROM Episode WHERE votes > 1000;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many persons were born in New York, USA?",
        "question_ar": "",
        "evidence_en": "\"New York\" is the birth_place; 'USA' is the birth_region",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE birth_place = 'New York City' AND birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the name of all awards along with the award category, nominated by Marc Wilmore.",
        "question_ar": "",
        "evidence_en": "\"Marc Wilmore\" is the name of person",
        "evidence_ar": "",
        "SQL": "SELECT award_id, award_category FROM Award WHERE person = 'Marc Wilmore';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many crew have their own nickname? List their full name along with the nickname.",
        "question_ar": "",
        "evidence_en": "crew refers to Person; full name refers to name; have nickname refers to nickname IS NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE nickname IS NOT NULL;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Find the average height for each person.",
        "question_ar": "",
        "evidence_en": "average high = Divide(Sum(height_meters), Count(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(height_meters) FROM Person;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the difference between the highest votes for episode and the lowest votes for episode.",
        "question_ar": "",
        "evidence_en": "highest vote refers to Max(votes); lowest vote refers to Min(votes); difference = Subtract(Max(votes), Min(votes))",
        "evidence_ar": "",
        "SQL": "SELECT MAX(votes) - MIN(votes) FROM Vote;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the name character awarded for the Outstanding Voice-Over Performance award in 2009.",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the person nominated for the Comedy Series Award in 2009, how many of them were born in California?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'Nominee'; born in California refers to birth_place = 'California'; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the title of episode that won the Best International TV Series Award in 2017?",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; in 2017 refers to year = 2017",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the name of persons who were not included in the credit for the 'How the Test Was Won' episode.",
        "question_ar": "",
        "evidence_en": "\"How the Test Was Won\" is the title of episode; not included in the credit refers to credited = ' '; name of person refers to person",
        "evidence_ar": "",
        "SQL": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.credited = 'false';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the title of episode that has a keyword of 'riot' and 'cake'?",
        "question_ar": "",
        "evidence_en": "\"riot\" and \"cake\" are both keyword",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('riot', 'cake');"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode has the most vote for 10 stars rating?",
        "question_ar": "",
        "evidence_en": "10 stars rating refers to stars = 10; most vote refers to Max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name all the person who involved in the making of simpson 20s episode that aired between October to November.",
        "question_ar": "",
        "evidence_en": "aired between October to November refers to strftime('%m', air_date) between '10' and '11';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 6, 2) BETWEEN '10' AND '11';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "State the name of director for the 'Treehouse of Horror XIX' episode.",
        "question_ar": "",
        "evidence_en": "\"Treehouse of Horror XIX\" is the title of episode; 'director' is the role of person; name refers to person",
        "evidence_ar": "",
        "SQL": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Based on the credits, state how many roles were played in the 5th episode of simpson 20.",
        "question_ar": "",
        "evidence_en": "5th episode refers to episode = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List all the keyword for 'Take My Life, Please' episode.",
        "question_ar": "",
        "evidence_en": "\"Take My Life,Please\" is the title of episode",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.",
        "question_ar": "",
        "evidence_en": "more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the ratio between the 5 stars votes for 'No Loan Again, Naturally' episode and 'Coming to Homerica' episode?",
        "question_ar": "",
        "evidence_en": "5 stars votes refers to stars = 5 ; 'No Loan Again, Naturally' and 'Coming to Homerica' are both the title of episode;  ratio = Divide (votes where title = 'No Loan Again, Naturally', votes where title = 'Coming to Homerica')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.title = 'No Loan Again, Naturally' THEN T1.votes ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Coming to Homerica' THEN T1.votes ELSE 0 END) AS ratio FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many times was Ian Maxtone-Graham nominated for an award in Writers Guild of America, USA?",
        "question_ar": "",
        "evidence_en": "\"Ian Maxtone-Graham\" is the person; nominated refers to result = 'Nominee'; 'Writers Guild of America, USA' is the organization",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE person = 'Ian Maxtone-Graham' AND organization = 'Writers Guild of America, USA' AND result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the name of the person that has the highest number of nominated award but didn't win?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'Nominee'; highest number of nominated award refers to Max(Count(person))",
        "evidence_ar": "",
        "SQL": "SELECT person FROM Award WHERE result = 'Nominee' GROUP BY person ORDER BY COUNT(person) DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the title of the episode that received the lowest rating?",
        "question_ar": "",
        "evidence_en": "lowest rating refers to Min(rating)",
        "evidence_ar": "",
        "SQL": "SELECT title FROM Episode ORDER BY rating LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What year did the Simpsons receive its first ever award for Favorite Animated Comedy in People's Choice Award?",
        "question_ar": "",
        "evidence_en": "\"Favorite Animated Comedy\" is the award; 'People's Choice Award' is the award_category; received award refers to result = 'Winner'; first ever award refers to Min(year)",
        "evidence_ar": "",
        "SQL": "SELECT year FROM Award WHERE result = 'Winner' AND award = 'Favorite Animated Comedy' ORDER BY year DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes was Dell Hake not included in the credit list?",
        "question_ar": "",
        "evidence_en": "\"Dell Hake\" is the person; not included in the credit list refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How old was the awardee when he/she won the first-ever award for Outstanding Voice-Over Performance in Primetime Emmy Awards?",
        "question_ar": "",
        "evidence_en": "\"Outstanding Voice-Over Performance\" is the award; 'Primetime Emmy Awards' is the organization; awardee refers to result = 'Winner'; first ever award refers to Min(year); age at the time of awarded refers to Subtract(year, SUBSTR(birthdate, 0, 5))",
        "evidence_ar": "",
        "SQL": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What character did Dan Castellaneta play that won him an award for Outstanding Voice-Over Performance in 2009 in the Primetime Emmy Awards?",
        "question_ar": "",
        "evidence_en": "\"Dan Castellaneta\" is the person; won refers to result = 'Winner'; 'Outstanding Voice-Over Performance' is the award; 'Primetime Emmy Awards' is the organization; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.person = 'Dan Castellaneta' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes aired on April of 2009, how many episodes won an award?",
        "question_ar": "",
        "evidence_en": "aired on refers to air_date, April refers to SUBSTR(air_date, 6, 2) = '04'; 2009 refers to SUBSTR (air_date, 0, 5) = '2009'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T2.air_date LIKE '2009-04%';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the birth place of the cast or crew member who won the Best Voice-Over Performance in Online Film & Television Association in 2009?",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; 'Best Voice-Over Performance' is the award; ' Online Film & Television Association' is the organization; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many 10 star votes did the top 4 episodes with the highest rating received?",
        "question_ar": "",
        "evidence_en": "10 stars votes refers to stars = 10; highest rating refers to Max(rating); number of votes refers to SUM(votes)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.rating DESC LIMIT 4;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In \"No Loan Again, Naturally\", how many stars received votes of no more than 50?",
        "question_ar": "",
        "evidence_en": "\"No Loan Again, Naturally\" is the title of episode; votes of no more than 50 refers to votes < 50; number of stars refers to SUM(stars)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T2.votes < 50;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many award winners are from the USA?",
        "question_ar": "",
        "evidence_en": "award winner refers to result = 'Winner'; 'USA' is the birth_country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In Season 20 Episode 11, how many times was Doofus included in the credit list?",
        "question_ar": "",
        "evidence_en": "in Season 20 Episode 11 refers to episode_id = 'S20-E11'; 'Doofus' is the nickname of person; include in credit list refers to credited = 'true'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.credited = 'true' AND T2.episode_id = 'S20-E11';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What was the first award won by the cast or crew member of the show? Give the name of the person who won the said award.",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; first award refers to Min(year)",
        "evidence_ar": "",
        "SQL": "SELECT T2.award, T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner' ORDER BY T2.year LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In \"Sex, Pies and Idiot Scrapes\", how many percentage of votes did the 9 star score has?",
        "question_ar": "",
        "evidence_en": "\"Sex, Pies and Idiot Scrapes\" is the title of episode; 9 star score refers to stars = 9; percentage refers to percent",
        "evidence_ar": "",
        "SQL": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes' AND T2.stars = 9;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the award name and persons who won the award in 2009.",
        "question_ar": "",
        "evidence_en": "won the award refers to result = 'Winner'; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTR(year, 1, 4) = '2009';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the casts who were born in Los Angeles, describe the name and birth date of who have 1.8 m and above in height.",
        "question_ar": "",
        "evidence_en": "\"Los Angeles\" is the birth_place; 1.8 m and above in height refers to height_meters > = 1.8",
        "evidence_ar": "",
        "SQL": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Provide the episode number, title and rating of which were aired in October, 2008.",
        "question_ar": "",
        "evidence_en": "episode number refers to episode; aired in refers to air_date; October refers to Substr(air_date, 6, 2) = '10': 2008 refers to Substr(air_date, 0, 5) = '2008'",
        "evidence_ar": "",
        "SQL": "SELECT episode, title, rating FROM Episode WHERE SUBSTR(air_date, 1, 7) LIKE '2008-10%';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write down the award ID, award name and winner for character named \"Homer simpson 20\".",
        "question_ar": "",
        "evidence_en": "\"Homer simpson 20\" is the character; \"Winner\" is the result; award name refers to award",
        "evidence_ar": "",
        "SQL": "SELECT T1.award_id, T1.award, T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer Simpson' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the award name, result, credit category and credited status of the \"Billy Kimball\".",
        "question_ar": "",
        "evidence_en": "\"Billy Kimball\" is the person; award name refers to award; credited category refers to category; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.award, T1.result, T2.category, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.person = 'Billy Kimball';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the person, award, organization, result and credited status of the assistant director in S20-E13.",
        "question_ar": "",
        "evidence_en": "\"assistant director\" is the role of person; 'S20-E13' is the episode_id; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT T1.person, T1.award, T1.organization, T1.result, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.episode_id = 'S20-E13' AND T2.role = 'assistant director';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Describe the birth country, height and person name who were not included in credit list with category of casting.",
        "question_ar": "",
        "evidence_en": "height refers to height_meters; not in credit list refers to credited = ''; category of casting refers to category = 'Casting Department'",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_country, T1.height_meters, T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Cast' AND T2.credited = 'false';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the nominee, keywords and episode ID of the title \"The Good, the Sad and the Drugly\".",
        "question_ar": "",
        "evidence_en": "nominee refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the voting numbers and percentage of the best rating scale of the episode which had keyword of \"arab stereotype\"?",
        "question_ar": "",
        "evidence_en": "best rating scale refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.votes, T2.percent FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.keyword = 'arab stereotype' AND T2.stars = 10;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode.",
        "question_ar": "",
        "evidence_en": "held by Jupiter Award refers to organization = 'Jupiter Award'; won the award refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T1.award, T2.air_date, T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Jupiter Award' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Mention the episode ID, title and any three keywords of the episode which get the most number of votes in star classification of worst.",
        "question_ar": "",
        "evidence_en": "star classification of worst refers to stars = 1; most number of votes refers to MAX(votes)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes with excellent rating which were aired in 2008, describe the title, episode's image, award name and person who were nominated.",
        "question_ar": "",
        "evidence_en": "excellent rating refers to 7 < = rating < = 10; aired in 2008 refers to SUBSTRACT(air_date, 0, 5) = '2008'; who were nominated refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T2.title, T2.episode_image, T1.award, T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating BETWEEN 7 AND 10 AND SUBSTR(T2.air_date, 1, 4) = '2008' AND T1.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Describe the award title, person and character name of the award ID 326.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.award, T1.person, T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award_id = 326;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Describe name, birth country, role in episode and age in 2022 of the oldest crew member..",
        "question_ar": "",
        "evidence_en": "age in 2022 refers to SUBTRACT(2022, substr(birthdate, 0, 5)); oldest refers to MIN(birthdate)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.birth_place, T2.role, 2022 - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birthdate IS NOT NULL ORDER BY T1.birthdate LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Provide the number of credits, category, role and birthplace of the crew member who was born in North Korea.",
        "question_ar": "",
        "evidence_en": "number of credits refers to credited; born in North Korea refers to birth_country = 'North Korea'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.credited, T2.category, T2.role, T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'North Korea';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Find the winning rate of award in 2010. Describe the winner name, award name, episode title and role of the winner in that episode.",
        "question_ar": "",
        "evidence_en": "in 2010 refers to year = 2010; winning rate refers to DIVIDE(COUNT(result = 'winner'), COUNT(*));",
        "evidence_ar": "",
        "SQL": "SELECT T3.rate, T4.person, T4.award, T5.title, T4.role FROM ( SELECT CAST(SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.result IN ('Winner', 'Nominee') THEN 1 ELSE 0 END) AS rate , T1.person, T1.award, T2.title, T1.role FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' ) AS T3 INNER JOIN Award AS T4 INNER JOIN Episode AS T5 ON T4.episode_id = T5.episode_id WHERE T4.year = 2010 AND T4.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the title of the episode that received the highest star score and the highest number of votes.",
        "question_ar": "",
        "evidence_en": "received the highest star score refers to MAX(stars); the highest number of votes refers to MAX(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id ORDER BY T2.stars DESC, T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the total number of awards won by The simpson 20s: Season 20?",
        "question_ar": "",
        "evidence_en": "total number of awards refers to COUNT(award); awards won refers to result = 'Winner';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the title of the episode that was nominated for Emmy's Outstanding Animated Program 21 times.",
        "question_ar": "",
        "evidence_en": "nominated for refers to result = 'Nominee'; Outstanding Animated Program refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)'; Emmy's refers to organization = 'Primetime Emmy Awards'; 21 times refers to COUNT(episode_id) = 21;",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee' GROUP BY T1.episode_id HAVING COUNT(T1.episode_id) = 21;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the average number of stars assigned to The simpson 20s: S20-E12? What is the said episode all about?",
        "question_ar": "",
        "evidence_en": "average number of stars refers to AVG(stars); simpson 20s: S20-E12 refers to episode_id = 'S20-E12'; episode all about refers to summary",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.stars), T1.summary FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode_id = 'S20-E12';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the performer who won Emmy Award for Outstanding Voice-Over Performance by playing Homer simpson 20.",
        "question_ar": "",
        "evidence_en": "Outstanding Voice-Over Performance refers to award = 'Outstanding Voice-Over Performance'; who won refers to result = 'Winner'; Emmy refers to organization = 'Primetime Emmy Awards'; playing Homer simpson 20 refers to character = 'Homer simpson 20'",
        "evidence_ar": "",
        "SQL": "SELECT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer simpson 20' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the birth name of Al Jean and his role in creating The simpson 20s: Season 20?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.birth_name, T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.name = 'Al Jean';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many nominations have Billy Kimball received in 2010 for The simpson 20s: Season 20?",
        "question_ar": "",
        "evidence_en": "in 2010 refers to year = 2010; nominations refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE person = 'Billy Kimball' AND SUBSTR(year, 1, 4) = '2010' AND result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List all keywords associated with the episode 'Take My Life, Please'.",
        "question_ar": "",
        "evidence_en": "episode 'Take My Life, Please' refers to title =   'Take My Life, Please'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Indicate the name and category of the most recent award received by the show.",
        "question_ar": "",
        "evidence_en": "most recent refers to MAX(year); received refers to result = 'Winner'; name of award refers to award; category refers to award_category",
        "evidence_ar": "",
        "SQL": "SELECT award, award_category FROM Award WHERE result = 'Winner' ORDER BY year DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is The simpson 20s: Season 20 average awards winning rate?",
        "question_ar": "",
        "evidence_en": "average awards winning rate refers to DIVIDE(SUM(result = 'winner'), COUNT(award));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN result = 'Winner' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(award) AS rate FROM Award;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes were aired between October and November 2008?",
        "question_ar": "",
        "evidence_en": "between October and November 2008 refers to air_date BETWEEN '2008-10-01' and '2008-11-30'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(episode_id) FROM Episode WHERE air_date LIKE '2008-10%' OR air_date LIKE '2008-11%';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among episodes aired in 2009, which episode has received the worst response based on the rating.",
        "question_ar": "",
        "evidence_en": "aired in 2009 refers to year(air_date) = 2009; received the worst response based on the rating refers to MIN(rating)",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Episode WHERE air_date LIKE '2009%' ORDER BY rating LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the categories for which Bonita Pietila was given credit and her role in creating the episodes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT category, role FROM Credit WHERE person = 'Bonita Pietila';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois?",
        "question_ar": "",
        "evidence_en": "born in October 29, 1957 refers to birthdate = '1957-10-29'; in Chicago refers to birth_place = 'Chicago'; Illinois refers to birth_region = 'Illinois'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE birthdate = '1957-10-29' AND birth_place = 'Chicago' AND birth_region = 'Illinois';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who produced The simpson 20s: Season 20?",
        "question_ar": "",
        "evidence_en": "produced refers to role = 'producer'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well.",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009; old refers to SUBTRACT(2009, birthdate); composer of the show refers to role = 'composer'; Emmy's refers to organization = 'Primetime Emmy Awards'; nominated refers to result = 'Nominee'; Outstanding Music Composition refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'",
        "evidence_ar": "",
        "SQL": "SELECT T1.year - T2.birthdate AS ageIn2009, T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'composer' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T1.result = 'Nominee' AND T1.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode of The simpson 20s: Season 20 has received the most nominations? Indicate the title.",
        "question_ar": "",
        "evidence_en": "received the most nomination refers to MAX(COUNT(episode_id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please indicate the birthplace of the crew which name is Dan Castellaneta.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT birth_place FROM Person WHERE name = 'Dan Castellaneta';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many crews were born in the USA?",
        "question_ar": "",
        "evidence_en": "born in the USA refers to birth_country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list the name of crew that were born before 1970.",
        "question_ar": "",
        "evidence_en": "born before 1970 refers to birthdate < '1970-01-01'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) < '1970';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name of the crew that were born in California, USA between 1958 and 1969.",
        "question_ar": "",
        "evidence_en": "born in California refers to birth_place = 'California'; USA refers to birth_country = 'USA'; between 1958 and 1969 refers to birthdate BETWEEN '1958-01-01' and '1958-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1958' AND birth_place = 'California' AND birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode ids are rated 5 stars and have more than 100 votes?",
        "question_ar": "",
        "evidence_en": "more than 100 votes refers to votes > 100",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please indicate the keywords of the title \"Double, Double, Boy in Trouble\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among episodes from 10 to 20, which episode has more than 200 votes?",
        "question_ar": "",
        "evidence_en": "episodes from 10 to 20 refers to episode BETWEEN 10 and 20; more than 200 votes refers to COUNT(votes) > 200",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode BETWEEN 10 AND 20 AND T2.votes > 200;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please indicate the keywords of the episode that won the Primetime Emmy Award category.",
        "question_ar": "",
        "evidence_en": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who is the recipient of the Primetime Emmy Award with the most votes?",
        "question_ar": "",
        "evidence_en": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'; the most votes refers to MAX(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T1.person FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode id did award Outstanding Animated Program (For Programming Less Than One Hour) with an episode star score of 10?",
        "question_ar": "",
        "evidence_en": "star score of 10 refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.stars = 10;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please give the name of the director who achieved the Outstanding Animated Program (For Programming Less Than One Hour) award whose episode title is \"No Loan Again, Naturally\".",
        "question_ar": "",
        "evidence_en": "the director refers to role = 'director'",
        "evidence_ar": "",
        "SQL": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please indicate which writer has an episode star score greater than 5 in 2009.",
        "question_ar": "",
        "evidence_en": "writer refers to role = 'writer'; star score greater than 5 refers to stars > 5; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010?",
        "question_ar": "",
        "evidence_en": "WGA Award (TV) award refers to award_category = 'WGA Award (TV)'; born in the USA refers to birth_country = 'USA'; from 2009 to 2010 refers to birthdate BETWEEN '2019-01-01' and '2019-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'WGA Award (TV)' AND T1.birth_country = 'USA' AND T2.year BETWEEN 2009 AND 2010;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode did the composer win for Outstanding Music Composition for a Series (Original Dramatic Score) with more than 200 votes?",
        "question_ar": "",
        "evidence_en": "more than 200 votes refer to votes > 200; composer refers to role = 'composer'; Outstanding Music Composition for a Series (Original Dramatic Score) refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Al Jean' AND T1.award_category = 'Primetime Emmy';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How much more votes for episode 1 than for episode 5?",
        "question_ar": "",
        "evidence_en": "more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.episode = 1 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T1.episode = 5 THEN T2.votes ELSE 0 END) AS diff FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What award did the character Homer simpson 20 achieve in 2009?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.award FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T2.character = 'Homer Simpson';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes have won the award for Outstanding Animated Program (Programming Under One Hour) with less than 100 votes? Calculate the percentage of episodes with less than 100 votes out of total episodes.",
        "question_ar": "",
        "evidence_en": "less than 100 votes refers to votes < 100; percentage refers to DIVIDE(COUNT(episode_id when votes < 100), COUNT(episode_id)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many recipients of the Primetime Emmy Award category that were born in the USA? Find the percentage of Americans in the total number of the country.",
        "question_ar": "",
        "evidence_en": "born in the USA refers to birth_country = 'USA'; recipients refers to person = 'recipients'; percentage refers to DIVIDE(COUNT(birth_country = 'USA'), count(award_id))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'Primetime Emmy' AND T2.person = 'Dan Castellaneta';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list two people who are the nominees for the \"Outstanding Voice-Over Performance\" award for season 20.",
        "question_ar": "",
        "evidence_en": "season 20 refers to episode_id LIKE 'S20%'",
        "evidence_ar": "",
        "SQL": "SELECT person FROM Award WHERE result = 'Nominee' AND award = 'Outstanding Voice-Over Performance' AND episode_id LIKE 'S20%' LIMIT 2;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many executive producers are the nominees for the award of \"Outstanding Animated Program (For Programming Less Than One Hour)\"?",
        "question_ar": "",
        "evidence_en": "the nominees refers to result = 'Nominee'; executive producers refers to role = 'executive producer'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In the crew, who was born in 1962 in California?",
        "question_ar": "",
        "evidence_en": "born in 1962 refers to year(birthdate) = 1962; in California refers to birth_region = 'California'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1962' AND birth_region = 'California';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many of the crew members who are taller than 1.70m were born in Canada?",
        "question_ar": "",
        "evidence_en": "taller than 1.70m refers to height_meters > 1.70; born in Canada refers to birth_country = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many people were considered as prospective recipients of the \"Animation\" award?",
        "question_ar": "",
        "evidence_en": "prospective recipients refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Award WHERE award = 'Animation' AND result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list any three episodes that have an excellent rating.",
        "question_ar": "",
        "evidence_en": "an excellent rating refers to 7 < rating < = 10",
        "evidence_ar": "",
        "SQL": "SELECT title FROM Episode WHERE rating BETWEEN 7 AND 10 LIMIT 3;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the top five most popular episodes?",
        "question_ar": "",
        "evidence_en": "most popular episodes refers to MAX(votes)",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Episode ORDER BY votes DESC LIMIT 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list the three episodes with the highest number of votes for the worst star rating.",
        "question_ar": "",
        "evidence_en": "highest number of votes refers to MAX(COUNT(votes)); worst star rating refers to stars = 1",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What was the character that Dan Castellaneta did the voice over for and was awarded?",
        "question_ar": "",
        "evidence_en": "voice over for and was awarded refers to award like '%Voice-Over%';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please list all of the episodes that aired in 2008 that have the highest number of votes for the maximum star rating.",
        "question_ar": "",
        "evidence_en": "aired in 2008 refers to air_date like '2008%'; highest number of votes refers to MAX(votes); maximum star rating refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the keywords of the episode \"Take My Life, Please\"?",
        "question_ar": "",
        "evidence_en": "episode \"Take My Life, Please\" refers to title = 'Take My Life, Please'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please provide any two episodes' names that have the same keyword of \"1930s to 2020s\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = '1930s to 2020s' LIMIT 2;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In 2010, which episode did Joel H. Cohen win an award for?",
        "question_ar": "",
        "evidence_en": "In 2010 refers to year = 2010",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many votes of 5-star did the episode \"Lisa the Drama Queen\" receive?",
        "question_ar": "",
        "evidence_en": "episode \"Lisa the Drama Queen\" refers to title = 'Lisa the Drama Queen';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the number of votes for 10-star for the episode that has the keyword \"reference to the fantastic four\"?",
        "question_ar": "",
        "evidence_en": "10-star refers to stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T2.votes FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T1.keyword = 'reference to the fantastic four';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the difference between the number of votes for 1-star vs. 10-star for the episode \"The Burns and the Bees\"?",
        "question_ar": "",
        "evidence_en": "1-star refers to stars = 1; 10-star refers to stars = 10; episode \"The Burns and the Bees\" refers to title = 'The Burns and the Bees'; difference refers to SUBTRACT(votes when stars = 1, votes when stars = 10)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.stars = 10 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T2.stars = 1 THEN T2.votes ELSE 0 END) AS Difference FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'The Burns and the Bees';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the keywords of the least popular episode?",
        "question_ar": "",
        "evidence_en": "least popular episode refers to MIN(votes)",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the episodes that have the average rating with more than 20 of 2-star votes?",
        "question_ar": "",
        "evidence_en": "2-star refers to stars = 2; average rating refers to 5 < rating < = 7; more than 20 of 2-star votes refers to votes > 20",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode has the largest number of votes?",
        "question_ar": "",
        "evidence_en": "largest number of votes refers to MAX(votes)",
        "evidence_ar": "",
        "SQL": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who is the oldest among all the casts and crews?",
        "question_ar": "",
        "evidence_en": "oldest refers to MIN(birthdate)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person ORDER BY birthdate ASC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the episodes Oscar Cervantes is credited with?",
        "question_ar": "",
        "evidence_en": "is credited refers to credited = 'true';",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Credit WHERE person = 'Oscar Cervantes' AND credited = 'true';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the roles of the cast and crew from countries other than the USA?",
        "question_ar": "",
        "evidence_en": "from countries other than the USA refers to birth_country ! = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country != 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many 1 star ratings are there in the worst rated episode of the season?",
        "question_ar": "",
        "evidence_en": "worst rated episode refers to MIN(rating)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which character did the \"Outstanding Voice-Over Performance\" winner voice?",
        "question_ar": "",
        "evidence_en": "the \"Outstanding Voice-Over Performance\" refers to award = 'Outstanding Voice-Over Performance'; winner refers to result = 'Winner';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the summary of the episode in which Emily Blunt is featured in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Emily Blunt';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who did \"The Tiny Canadian\" play as in the show?",
        "question_ar": "",
        "evidence_en": "\"The Tiny Canadian\" refers to nickname = 'The Tiny Canadian'; play as in the show refers to role\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'The Tiny Canadian';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes with an award nominee or winner, which has the highest percent of 5 star votes?",
        "question_ar": "",
        "evidence_en": "highest percent of 5 star votes refers to max(percent) where star = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5 ORDER BY T2.percent DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the credited cast for the episode \"In the Name of the Grandfather\"?",
        "question_ar": "",
        "evidence_en": "credited cast refers to category = 'Cast' and  credited = 'true'; episode \"In the Name of the Grandfather\" refers to title = 'In the Name of the Grandfather'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'In the Name of the Grandfather' AND T2.category = 'Cast' AND T2.credited = 'true';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List all of the award winners' birth dates.",
        "question_ar": "",
        "evidence_en": "award winner refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T1.birthdate FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Who is the writer for the episode with the most 10 star votes?",
        "question_ar": "",
        "evidence_en": "writer refers to role = 'Writer'; most 10 star votes refers to max(votes) where stars = 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What award did the episode that aired on 11/30/2008 win?",
        "question_ar": "",
        "evidence_en": "aired on 11/30/2008 refers to air_date = '11/30/2008'; win refers to result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T1.award FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.air_date = '2008-11-30';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List all of the information about the music department's casts and crews.",
        "question_ar": "",
        "evidence_en": "information about the music department refers to category = 'Music Department'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Music Department';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the keywords for episode 426 of the series?",
        "question_ar": "",
        "evidence_en": "episode 426 refers to number_in_series = 426",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.number_in_series = 426;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the titles of the episodes that have received more 7-star votes than the season average?",
        "question_ar": "",
        "evidence_en": "episodes that have received more 7-star votes than the season average refers to votes > DIVIDE(SUM(votes), COUNT(stars = 7))",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 AND T2.votes > 0.7 * ( SELECT CAST(COUNT(votes) AS REAL) / COUNT(CASE WHEN stars = 7 THEN 1 ELSE 0 END) FROM Vote );"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What percentage of votes are from the nominated episodes?",
        "question_ar": "",
        "evidence_en": "nominated episodes refers to result = 'Nominee'; percentage of votes = DIVIDE(SUM(result = 'Nominee), SUM(Votes)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.result = 'Nominee' THEN T2.votes ELSE 0 END) AS REAL) * 100 / SUM(T2.votes) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down person's name who has nickname.",
        "question_ar": "",
        "evidence_en": "has nickname refers to nickname is NOT NULL",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE nickname IS NOT NULL;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which country has the tallest person in the crew?",
        "question_ar": "",
        "evidence_en": "country refers to birth_country; tallest person refers to max(height_meters)",
        "evidence_ar": "",
        "SQL": "SELECT birth_country FROM Person ORDER BY height_meters DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the average height of people from USA?",
        "question_ar": "",
        "evidence_en": "people from USA refers to birth_country = 'USA'; average height = AVG(height_meters)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(height_meters) FROM Person WHERE birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the percentage of people who were born after 1970 and from California.",
        "question_ar": "",
        "evidence_en": "born after 1970 refers to birthdate > 1970; from California refers to birth_region = 'California'; percentage = divide(count(birthdate > 1970 and birth_region = 'California'), total(birthdate)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many people were not born in Connecticut, USA?",
        "question_ar": "",
        "evidence_en": "not born in Connecticut, USA refers to birth_region ! = 'Connecticut' and birth_country ! = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the title of episode S20-E1, S20-E2 & S20-E3.",
        "question_ar": "",
        "evidence_en": "episode S20-E1, S20-E2 & S20-E3 refers to episode_id = 'S20-E1' and episode_id = 'S20-E2' and episode_id = 'S20-E3'",
        "evidence_ar": "",
        "SQL": "SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write down the website address which stores the episode image of episode 5.",
        "question_ar": "",
        "evidence_en": "website address refers to episode_image",
        "evidence_ar": "",
        "SQL": "SELECT episode_image FROM Episode WHERE episode = 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "State the number of votes for episode with rating of 7 and above.",
        "question_ar": "",
        "evidence_en": "rating of 7 and above refers to rating > 7.0",
        "evidence_ar": "",
        "SQL": "SELECT votes FROM Episode WHERE rating > 7;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many title's crew members are working from Casting Department?",
        "question_ar": "",
        "evidence_en": "working from Casting Department refers to category = 'Casting Department'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many additional timers were born in USA?",
        "question_ar": "",
        "evidence_en": "additional timers refers to role = 'additional timer'; born in USA refers to birth_country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'additional timer' AND T1.birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many people who were born after 1970 are animation executive producer?",
        "question_ar": "",
        "evidence_en": "born after 1980 refers to birthdate > 1970; assistant to the producers refers to role = 'animation executive producer'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE STRFTIME(T1.birthdate) > '1970' AND T2.role = 'animation executive producer';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write down the summary of episode whereby it has crew members that are not included in the credit list.",
        "question_ar": "",
        "evidence_en": "are not included in the credit list refers to credited = ''",
        "evidence_ar": "",
        "SQL": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'false';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the rating of episodes that were produced by Jason Bikowski.",
        "question_ar": "",
        "evidence_en": "produced by Jason Bikowski refers to person = 'Jason Bikowski'",
        "evidence_ar": "",
        "SQL": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Jason Bikowski';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the average heights of crew members from Animation Department?",
        "question_ar": "",
        "evidence_en": "from Animation Department refers to category = 'Animation Department'; AVG(height_meters) where category = 'Animation Department'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height_meters) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Animation Department';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the character that won the award in Primetime Emmy 2009?",
        "question_ar": "",
        "evidence_en": "won the award in Primetime Emmy 2009 refers to award_category = 'Primetime Emmy' and year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year = 2009 AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the characters that were nominated for Primetime Emmy Award from 2009 to 2010 but did not win?",
        "question_ar": "",
        "evidence_en": "nominated for Primetime Emmy Award but did not win refers to award_category = 'Primetime Emmy' and result = 'Nominee';  from 2009 to 2010 refers to year > = '2009' and  year < = '2010'",
        "evidence_ar": "",
        "SQL": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year BETWEEN 2009 AND 2010 AND T1.result != 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the total votes of episodes that Adam Kuhlman had involved.",
        "question_ar": "",
        "evidence_en": "Adam Kuhlman had involved refers to person = 'Adam Kuhlman'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Adam Kuhlman';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the keyword and crew member's name for episode id S20-E1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the keyword for episodes with stars score of 10 at 30% and above?",
        "question_ar": "",
        "evidence_en": "stars score of 10 at 30% and above refers to stars = 10 and percent > 29",
        "evidence_ar": "",
        "SQL": "SELECT T1.keyword FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the percentage of star score 5 that was collected by title \"Sex, Pies and Idiot Scrapes\"?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUM(stars = 5), COUNT(stars)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Please check is \"limbo dancing\" the keyword for title \"Dangerous Curves\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.Keyword = 'limbo dancing' THEN 'Yes' ELSE 'No' END AS result FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which title is the winner of Best International TV Series in 2017?",
        "question_ar": "",
        "evidence_en": "winner refers to result = 'Winner'; Best International TV Series in 2017 refers to award = 'Best International TV Series' and year = '2017'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best International TV Series' AND SUBSTR(T1.year, 1, 4) = '2017';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Write down all the keywords for winner of \"WGA Award (TV)\" award.",
        "question_ar": "",
        "evidence_en": "winner of \"WGA Award (TV)\" award refers to award_category = 'WGA Award (TV)' and result = 'Winner'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "State the birth place of co-executive producer for nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award.",
        "question_ar": "",
        "evidence_en": "co-executive producer refers to role = 'co-executive producer'; nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)' and result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.role = 'co-executive producer';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Sum up the votes from star 1 to 5 for all of the contestants in Blimp Award.",
        "question_ar": "",
        "evidence_en": "contestants refers to result = 'Winner' and result = 'Nominee'; in Blimp Award refers to award = 'Blimp Award'; star 1 to 5 refers to 1 < stars < 5",
        "evidence_ar": "",
        "SQL": "SELECT T2.stars, SUM(T2.stars) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Blimp Award' AND T2.stars BETWEEN 1 AND 5 GROUP BY T2.stars;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the total rating of winners in OFTA Television Award and WGA Award (TV).",
        "question_ar": "",
        "evidence_en": "winners refers to result = 'Winner'; in OFTA Television Award and WGA Award (TV) refers to award = 'OFTA Television Award' and award = 'WGA Award (TV)'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Out of the rating of 6.8 scored by title \"No Loan Again, Naturally\", how many percent of it consists of scores 5 to 10?",
        "question_ar": "",
        "evidence_en": "scores 5 to 10 refers to TOTAL(percent) where 1 < = stars < 5",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.percent) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T1.rating = 6.8 AND T2.stars BETWEEN 5 AND 10;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes have the star score greater than 8?",
        "question_ar": "",
        "evidence_en": "star score greater than 8 refers to stars > 8",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which episode has the highest number of vote of the star score?",
        "question_ar": "",
        "evidence_en": "highest number of vote of the star score refers to max(votes)",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Vote ORDER BY votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many episodes have the keyword \"2d animation\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(episode_id) FROM Keyword WHERE keyword = '2d animation';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Name the organization which hold the award id 328.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT organization FROM Award WHERE award_id = 328;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many awards had been held in 2009?",
        "question_ar": "",
        "evidence_en": "had been held in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many awards classified as \"Primetime Emmy\" category?",
        "question_ar": "",
        "evidence_en": "category refers to award_category",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE award_category = 'Primetime Emmy';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List out the birth name of crews who are co-executive producer and higher than 1.60 meters.",
        "question_ar": "",
        "evidence_en": "co-executive producer refers to role = 'co-executive producer'; higher than 1.60 meters refers to height_meters > 1.60",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'co-executive producer' AND T1.height_meters > 1.60;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the percentage of the nominees who were born in USA.",
        "question_ar": "",
        "evidence_en": "nominees refers to result = 'Nominee'; born in USA refers to birth_country = 'USA'; percentage = divide(sum(result = 'Nominee' and birth_country = 'USA'), count(Person.name)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Calculate the percentage of the winners who are higher than 1.75 meters.",
        "question_ar": "",
        "evidence_en": "winners refers to result = 'Winner'; higher than 1.75 meters refers to height_meters > 1.75; percentage = divide(sum(result = 'Winner' and height_meters > 1.75), count(result = 'Winner' )) * 100%\n",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List out the title of episodes which have star score of 2.",
        "question_ar": "",
        "evidence_en": "star score of 2 refers to stars = 2",
        "evidence_ar": "",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List out the star scores of episode which has title of \"How the Test Was Won\".",
        "question_ar": "",
        "evidence_en": "star scores refers to stars",
        "evidence_ar": "",
        "SQL": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes which have star score greater than 5, how many episodes have air date in 2008?",
        "question_ar": "",
        "evidence_en": "star score greater than 5 refers to stars > 5; have air date in 2008 refers to air_date LIKE '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List out the names of the awarded character in the awards held in 2009.",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009; name of awarded character refers to character\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Which are the years that character Mr. Burns won an award?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the awarded category that the awarded character Lenny won?",
        "question_ar": "",
        "evidence_en": "\n\nawarded category refers to award_category",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.award_category FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Lenny';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the name of actor who took the role Smithers?",
        "question_ar": "",
        "evidence_en": "name refers to person; the role Smithers refers to character = 'Smithers'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the keywords of the episode which has title as Dangerous Curves?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What are the keywords of the episodes which have the air date in 2008?",
        "question_ar": "",
        "evidence_en": "have air date in 2008 refers to air_date LIKE '2008%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes which have star score less than 8, how many episodes were aired in 2009?",
        "question_ar": "",
        "evidence_en": "star score less than 8 refers to stars < 8; aired in 2009 refers to air_date LIKE '2009%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2009' AND T2.stars < 8;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "State the birth name of crews who are director and have birth country in South Korea.",
        "question_ar": "",
        "evidence_en": "director refers to role = 'director'",
        "evidence_ar": "",
        "SQL": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'director' AND T1.birth_country = 'South Korea';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "How many awards did simpson 20 won in 2009?",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; in 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009' AND result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the total number of episode with a rating below 7?",
        "question_ar": "",
        "evidence_en": "rating below 7 refers to rating < 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(episode_id) FROM Episode WHERE rating < 7;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the names of person born in California, USA.",
        "question_ar": "",
        "evidence_en": "California refers to birth_region = 'California'; USA refers to birth_country = 'USA'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Person WHERE birth_region = 'California' AND birth_country = 'USA';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In between the episode 5 and10 of season 2, how many of them are credited for casting?",
        "question_ar": "",
        "evidence_en": "between the episode 5 and 10 of season 20 refers to episode_id IN('S20-E5', 'S20-E6', 'S20-E7', 'S20-E8', 'S20-E9', 'S20-E10'); credited refers to credited = 'true'; for casting refers to role = 'casting'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(credited) FROM Credit WHERE episode_id IN ( 'S20-E5',  'S20-E6',  'S20-E7',  'S20-E8',  'S20-E9',  'S20-E10' ) AND credited = 'true' AND role = 'casting';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the episode ID that received 2 stars and 9 votes?",
        "question_ar": "",
        "evidence_en": "2 stars refers to stars = 2; 9 votes refers to votes = 9",
        "evidence_ar": "",
        "SQL": "SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Give the title of the episode won in Primetime Emmy Awards 2009.",
        "question_ar": "",
        "evidence_en": "won refers to result = 'Winner'; in Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; 2009 refers to year = 2009",
        "evidence_ar": "",
        "SQL": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009 AND T1.result = 'Winner';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List down the episode ID of episodes aired in 2008 with 5 stars and below.",
        "question_ar": "",
        "evidence_en": "aired in 2008 refers to air_date LIKE '2008%'; 5 stars and below refers to stars < 5",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T2.stars < 5;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episode with highest votes, what is the category credited to Carlton Batten?",
        "question_ar": "",
        "evidence_en": "highest votes refers to max(votes); to Carlton Batten refers to person = 'Carlton Batten'",
        "evidence_ar": "",
        "SQL": "SELECT T2.category FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Carlton Batten' AND T2.credited = 'true' ORDER BY T1.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the episodes aired in 2008 with votes ranges from 920 to 950, list their percent.",
        "question_ar": "",
        "evidence_en": "aired in 2008 refers to air_date LIKE '2008%'; votes ranges from 920 to 950 refers to votes BETWEEN 920 AND 950",
        "evidence_ar": "",
        "SQL": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the episode ID and title of episode where casting was credited to Bonita Pietila.",
        "question_ar": "",
        "evidence_en": "was credited refers to credited = 'true'; to Bonita Pietila refers to person = 'Bonita Pietila'",
        "evidence_ar": "",
        "SQL": "SELECT T1.episode_id, T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Bonita Pietila' AND T2.role = 'casting';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In episode nominated in Annie Awards, how many of the episodes have a percent greater than 6?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'Nominee'; Annie Awards refers to organization = 'Annie Awards'; percent greater than 6 refers to percent > 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.organization = 'Annie Awards' AND T1.result = 'Nominee' AND T2.percent > 6;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the title of episode nominated for WGA Award (TV) with votes greater than 1000?",
        "question_ar": "",
        "evidence_en": "nominated refers to result = 'Nominee'; WGA Award (TV) refers to award_category = 'WGA Award (TV)'; votes greater than 1000 refers to votes > 1000",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "Among the people in Animation Department, who are credited for additional time in the episode titled by \"How the Test Was Won\"?",
        "question_ar": "",
        "evidence_en": "Animation Department refers to category = 'Animation Department'; credited refers to credited = 'true'; for additional timer refers to role = 'additional timer'",
        "evidence_ar": "",
        "SQL": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.role = 'additional timer' AND T2.credited = 'true' AND T2.category = 'Animation Department';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the stars of episodes aired in November 2008.",
        "question_ar": "",
        "evidence_en": "in November 2008 refers to air_date LIKE '2008-11%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 7) = '2008-11';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "What is the title of episode with 5 stars and nominated for Prism Award which is aired on April 19, 2009?",
        "question_ar": "",
        "evidence_en": "5 stars refers to stars = 5; nominated refers to result = 'Nominee'; Prism Award refers to award_category = 'Prism Award'; on April 19 2009 refers to air_date = '2009-04-19'",
        "evidence_ar": "",
        "SQL": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In episode with the highest votes, list the category of awards it is nominated for.",
        "question_ar": "",
        "evidence_en": "highest votes refers to max(votes); nominated refers to result = 'Nominee'",
        "evidence_ar": "",
        "SQL": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In episodes aired in 2009, how many of them are credited to Sam Im for additional timer?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to air_date LIKE '2009%'; credited refers to credited = 'true'; Sam Im refers to person = 'Sam Im'; for additional timer refers to role = 'additional timer'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Sam Im' AND SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.role = 'additional timer';"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "List the title of the episode with stars greater than the 70% of average stars of all episodes.",
        "question_ar": "",
        "evidence_en": "stars greater than the 70% of average stars refers to stars > multiply(avg(stars), 0.7)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars > 0.7 * ( SELECT AVG(stars) FROM Vote );"
    },
    {
        "db_id": "simpson_episodes",
        "question_en": "In year 2009, what is the percentage of the episode titled by \"Gone Maggie Gone\" being nominated?",
        "question_ar": "",
        "evidence_en": "being nominated refers to result = 'Nominee'; percentage = divide(count(result = 'Nominee'), count(result)) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.result = 'Nominee' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.result) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'Gone Maggie Gone' AND T1.year = 2009;"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have never been absent from school?",
        "question_ar": "",
        "evidence_en": "have never been absent refers to `month` = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE `month` = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "For the students who have been absent from school for the longest time, how many months have they been absent?",
        "question_ar": "",
        "evidence_en": "absent from school for the longest time refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(month) FROM longest_absense_from_school"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students belong to the navy department?",
        "question_ar": "",
        "evidence_en": "belong to the navy department refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students that have been absent from school for more than 5 months, how many of them are male?",
        "question_ar": "",
        "evidence_en": "absent from school for more than 5 months refers to `month`  > = 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` >= 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please list the names of the male students that belong to the navy department.",
        "question_ar": "",
        "evidence_en": "belong to the navy department refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students that have filed for bankruptcy, how many of them have been absent from school for over 5 months?",
        "question_ar": "",
        "evidence_en": "absent from school for over 5 months refers to `month` > 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.`name` = T2.`name` WHERE T2.`month` > 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students from the navy department, how many of them have payment due?",
        "question_ar": "",
        "evidence_en": "from the navy department refers to organ = 'navy'; have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy' AND T2.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please list the male students that are disabled and have filed for bankruptcy.",
        "question_ar": "",
        "evidence_en": "male students that are disabled and have filed for bankruptcy refers to name that appeared in all three male, disabled and filed_for_bankrupcy tables.",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.name, T3.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` INNER JOIN filed_for_bankrupcy AS T3 ON T1.`name` = T3.`name`"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students are disabled?",
        "question_ar": "",
        "evidence_en": "females students are disabled refers to name that appeared in both disabled and male tables",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are unemployed and have payment due?",
        "question_ar": "",
        "evidence_en": "are unemployed and have payment due refers to",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.`name` = T2.`name`"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the longest time for a student from the navy department to be absent from school?",
        "question_ar": "",
        "evidence_en": "navy department refers to organ = 'navy'; longest time to be absent from school refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'navy' ORDER BY T1.`month` DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students have never been absent from school?",
        "question_ar": "",
        "evidence_en": "never been absent from school refers to month = 0",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please list the departments the students are absent from school for 9 months are in.",
        "question_ar": "",
        "evidence_en": "absent from school for 9 months refers to month = 9",
        "evidence_ar": "",
        "SQL": "SELECT T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` = 9"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which department has the most disabled students?",
        "question_ar": "",
        "evidence_en": "department refers to organ; most disabled students refers to MAX(disabled.name)",
        "evidence_ar": "",
        "SQL": "SELECT T2.organ, COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please list all the female students that have filed for bankruptcy.",
        "question_ar": "",
        "evidence_en": "females students have filed for bankruptcy refers to name that appeared in both filed_for_bankrupcy and male tables",
        "evidence_ar": "",
        "SQL": "SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the percentage of male students in the navy department?",
        "question_ar": "",
        "evidence_en": "in the navy department refers to organ = 'navy'; percentage refers to DIVIDE(COUNT(name where organ = 'navy'), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the average time for a disabled student to be absent from school?",
        "question_ar": "",
        "evidence_en": "average time refers to DIVIDE(SUM(`month`), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name`"
    },
    {
        "db_id": "student_loan",
        "question_en": "Name all students enlisted in the foreign legion.",
        "question_ar": "",
        "evidence_en": "in the foreign legion organ = 'foreign_legion';",
        "evidence_ar": "",
        "SQL": "SELECT name FROM enlist WHERE organ = 'foreign_legion'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Does student348 have a due payment?",
        "question_ar": "",
        "evidence_en": "payment due refers to bool = 'pos' means the student has payment due , bool = 'neg' means the student does not have payment due;",
        "evidence_ar": "",
        "SQL": "SELECT bool FROM no_payment_due WHERE name = 'student348'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which school is student829 enrolled in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT school FROM enrolled WHERE name = 'student829'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many months has student217 been absent?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT month FROM longest_absense_from_school WHERE name = 'student217'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List all students that have been absent for 6 months.",
        "question_ar": "",
        "evidence_en": "absent for 6 months `month` = 6;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM longest_absense_from_school WHERE `month` = 6"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which organization did student285 enlist?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT organ FROM enlist WHERE name = 'student285'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Is student281 disabled and which school is the student enrolled in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T1.school FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name` WHERE T1.name = 'student281'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List all students in the air force and which school they were enrolled at.",
        "question_ar": "",
        "evidence_en": "in the air force refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List 10 students that have no due payments and are not males.",
        "question_ar": "",
        "evidence_en": "no due payments refers to bool = 'neg'; not males refers to not in male table",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN person AS T2 ON T1.`name` = T2.`name` WHERE T2.`name` NOT IN ( SELECT name FROM male ) AND T1.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Name 5 students with due payments that are enlisted alongside which organization they were enlisted.",
        "question_ar": "",
        "evidence_en": "with due payments refers to bool = 'pos'; organization refers to organ",
        "evidence_ar": "",
        "SQL": "SELECT T2.organ, T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.bool = 'pos' LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "Name all disabled students that are enrolled in SMC.",
        "question_ar": "",
        "evidence_en": "enrolled in SMC refers to school = 'smc';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name` WHERE T1.school = 'smc'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which students that filed for bankruptcy are also in the foreign legion?",
        "question_ar": "",
        "evidence_en": "in the foreign legion refers to organ = 'foreign_legion';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'foreign_legion'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many male students have no due payments?",
        "question_ar": "",
        "evidence_en": "have no due payments refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which students that are in the marines have been absent for 6 months?",
        "question_ar": "",
        "evidence_en": "in the marines refers to organ = 'marines'; absent for 6 months refers to month = 6",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'marines' AND T1.`month` = 6"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students from SMC are unemployed?",
        "question_ar": "",
        "evidence_en": "from SMC refers to school = 'smc';",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.`name` = T2.`name` WHERE T1.school = 'smc'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students are there that have been absent for 6 months?",
        "question_ar": "",
        "evidence_en": "absent for 6 months refers to month = 6;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.`name` = T2.name WHERE T1.`month` = 6"
    },
    {
        "db_id": "student_loan",
        "question_en": "Count the number of students from UCSD enlisted in the peace corps.",
        "question_ar": "",
        "evidence_en": "in the peace corps refers to organ = 'peace_corps'; from UCSD refers to school = 'ucsd';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.`name` = T2.`name` WHERE T2.school = 'ucsd' AND T1.organ = 'peace_corps'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Student21 is enlisted in which organization and has the student been absent?",
        "question_ar": "",
        "evidence_en": "organization refers to organ",
        "evidence_ar": "",
        "SQL": "SELECT T2.month, T1.organ FROM enlist AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.`name` = T2.`name` WHERE T1.name = 'student21'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the percentage ratio of students who are enlisted in foreign legions that have a due payment?",
        "question_ar": "",
        "evidence_en": "have a due payment refers to bool = 'pos'; in foreign legions refers to organ = 'foreign_legion'; ratio refers to DIVIDE(COUNT(bool = 'pos'), COUNT(bool = 'neg'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.bool = 'pos', 1, 0)) AS REAL) * 100 / SUM(IIF(T1.bool = 'neg', 1, 0)) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'foreign_legion'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What percentage of students who enlisted in the navy make up the number of students enrolled in OCC?",
        "question_ar": "",
        "evidence_en": "in the navy refers to organ = 'navy'; enrolled in OCC refers to school = 'occ'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.school = 'occ', 1.0, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out student IDs that have the longest absence duration from school.",
        "question_ar": "",
        "evidence_en": "longest absence duration refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM longest_absense_from_school WHERE `month` = ( SELECT MAX(month) FROM longest_absense_from_school )"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the total number of students in the school?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM person"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the longest students absence duration from school?",
        "question_ar": "",
        "evidence_en": "longest students absence duration MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT name, month FROM longest_absense_from_school WHERE `month` = ( SELECT MAX(month) FROM longest_absense_from_school )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students were absence for 4 month?",
        "question_ar": "",
        "evidence_en": "absence for 4 month refers to month = 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 4"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the number of unemployed and bankrupt students?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Does disable students join organization. If yes, please indicate the organization joined by the students.",
        "question_ar": "",
        "evidence_en": "organization refers to organ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name`"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed and bankrupt students that have payment dues?",
        "question_ar": "",
        "evidence_en": "have payment dues refers to bool = 'pos'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN no_payment_due AS T3 ON T2.name = T3.name WHERE T3.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please check if student 124 is disabled male.",
        "question_ar": "",
        "evidence_en": "if student name appear in disabled then student is disabled and vice versa; if student name appear in male then student is male and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the employment, disability, gender and school debt status for student180 and student117?",
        "question_ar": "",
        "evidence_en": "school debt status refers to bool; bool = 'pos' means has payment due; bool = 'neg' means doesn't has payment due; student appear in male.name means he is a male; student does not appear in male.name means she is a female;",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students joined a marines and air force organization?",
        "question_ar": "",
        "evidence_en": "joined a marines refers to organ = 'marines'; air force organization refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out the organization joined and school enrolled by student27, student17 and student101?",
        "question_ar": "",
        "evidence_en": "organization joined refers to organ",
        "evidence_ar": "",
        "SQL": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.`name` IN ('student27,student17,studetn101')"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the ratio of disable female to male students?",
        "question_ar": "",
        "evidence_en": "ratio refers to DIVIDE(COUNT(name not from male), COUNT(name from male))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.`name` = T2.`name`"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students are not joining any of the organization?",
        "question_ar": "",
        "evidence_en": "female students refers to enlist.name who are NOT in male.name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM person WHERE name NOT IN ( SELECT name FROM male ) AND name NOT IN ( SELECT name FROM enrolled )"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out all bankrupt students that are able to make payment before due?",
        "question_ar": "",
        "evidence_en": "make payment before due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the average absence period of a student?",
        "question_ar": "",
        "evidence_en": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(month) FROM longest_absense_from_school"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the average of absence for an employed students?",
        "question_ar": "",
        "evidence_en": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the average absence period of a disabled student?",
        "question_ar": "",
        "evidence_en": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which organization does student 313 belong to?",
        "question_ar": "",
        "evidence_en": "organization refers to organ",
        "evidence_ar": "",
        "SQL": "SELECT organ FROM enlist WHERE name = 'studenT113'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students enlisted in the fire-department?",
        "question_ar": "",
        "evidence_en": "enlisted in the fire-department refers to organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students who have never been absent from school?",
        "question_ar": "",
        "evidence_en": "have never been absent refers to `month` = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have been absent above 2 months?",
        "question_ar": "",
        "evidence_en": "absent above 2 months refers to month > 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 2"
    },
    {
        "db_id": "student_loan",
        "question_en": "State the number of students do not have payment due.",
        "question_ar": "",
        "evidence_en": "do not have payment due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Give the number of students who have payment due.",
        "question_ar": "",
        "evidence_en": "who have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Mention the name of disabled students who have never been absent from school.",
        "question_ar": "",
        "evidence_en": "never been absent from school refers to month = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students are enlisted in the navy organization?",
        "question_ar": "",
        "evidence_en": "enlisted in the navy organization refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Count the number of male students who belong to foreign legion.",
        "question_ar": "",
        "evidence_en": "belong to foreign legion refers to organ = 'foreign_legion';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out the number of female students who enlisted in the air force.",
        "question_ar": "",
        "evidence_en": "enlisted in the air force refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force' AND name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of disabled students who have the longest duration of absense from school.",
        "question_ar": "",
        "evidence_en": "longest duration of absense refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "State the unemployed students who enlisted in marines.",
        "question_ar": "",
        "evidence_en": "enlisted in marines refers to organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average duration of absense of disabled students.",
        "question_ar": "",
        "evidence_en": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the percentage of unemployed students who have been absent for 5 months from school?",
        "question_ar": "",
        "evidence_en": "percentage refers to DIVIDE(COUNT(month > 5), COUNT(month))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed disabled students have been absent for 8 months from school?",
        "question_ar": "",
        "evidence_en": "absent for 8 months refers to month = 8;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T2.name = T3.name WHERE T1.month = 8"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of unemployed students who have the longest duration of absense from school.",
        "question_ar": "",
        "evidence_en": "longest duration of absense refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "Mention the name of unemployed students who have never been absent from school.",
        "question_ar": "",
        "evidence_en": "have never been absent from school refers to month = 0",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students have been absent for 3 months from school?",
        "question_ar": "",
        "evidence_en": "have been absent for 3 months from school refers to month = 3",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month = 3"
    },
    {
        "db_id": "student_loan",
        "question_en": "Mention the name of students who filed for bankruptcy and have never been absent from school.",
        "question_ar": "",
        "evidence_en": "have never been absent refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of students who filed for bankruptcy and have the longest duration of absense from school.",
        "question_ar": "",
        "evidence_en": "longest duration of absense refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the gender of student1000?",
        "question_ar": "",
        "evidence_en": "student name appear in Male table means student is a male, student does not appear in Male table means student is a female",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T.result = 0, 'female', 'male') AS re FROM ( SELECT COUNT(name) AS result FROM male WHERE name = 'studenT1000' ) T"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are disabled?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM disabled"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have been absents for more than 6 months?",
        "question_ar": "",
        "evidence_en": "absents for more than 6 months refers to month > 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 6"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which students have absents the most?",
        "question_ar": "",
        "evidence_en": "absents the most refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enlisted in the army?",
        "question_ar": "",
        "evidence_en": "enlisted in the army refers to organ = 'army';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Find the average number of absences for each student.",
        "question_ar": "",
        "evidence_en": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(month) FROM longest_absense_from_school"
    },
    {
        "db_id": "student_loan",
        "question_en": "Sum up the number of students enlisted in foreign legion, peace corps and army.",
        "question_ar": "",
        "evidence_en": "enlisted in foreign legion refers to organ = 'foreign_legion'; peace corps refers to organ = 'peace_corps'; army refers to organ = 'army'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ IN ('army', 'peace_corps', 'foreign_legion')"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students enlisted in marines, how many of them are disabled?",
        "question_ar": "",
        "evidence_en": "enlisted in marines refers to organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students still have payment due?",
        "question_ar": "",
        "evidence_en": "still have payment due refers to bool = 'pos'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which female students had never been absent?",
        "question_ar": "",
        "evidence_en": "had never been absent refers to month = 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM male AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name <> T2.name WHERE T2.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which school has the highest number of disabled students?",
        "question_ar": "",
        "evidence_en": "highest number of disabled students refers to MAX(COUNT(disabled.name))",
        "evidence_ar": "",
        "SQL": "SELECT T.school FROM ( SELECT T2.school, COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "List all the organisations of students who filed for bankcrupcy.",
        "question_ar": "",
        "evidence_en": "organization refers to organ; students who filed for bankrupcy refers to file_for_bankrupcy.name",
        "evidence_ar": "",
        "SQL": "SELECT T2.organ FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many male students join more than one organization?",
        "question_ar": "",
        "evidence_en": "more than one organization refers to COUNT(organ) > 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.a) FROM ( SELECT COUNT(DISTINCT T1.name) AS a, COUNT(T2.organ) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num > 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "List all the navy students who are disabled.",
        "question_ar": "",
        "evidence_en": "navy students refers to organ = 'navy'; disabled student refers to disabled.name",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many SMC's students that absent for 7 months?",
        "question_ar": "",
        "evidence_en": "SMC's students refers to school = 'smc'; absent for 7 months refers to month = 7",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.school = 'smc' AND T2.month = 7"
    },
    {
        "db_id": "student_loan",
        "question_en": "List all the disabled female students.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.name <> T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the ratio between unemployed students and disabled students.",
        "question_ar": "",
        "evidence_en": "ratio refers to DIVIDE(COUNT(name from unemployed), COUNT(name from disabled))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(name) FROM unemployed ) AS REAL ) / ( SELECT COUNT(name) FROM disabled )"
    },
    {
        "db_id": "student_loan",
        "question_en": "Find the percentage of male students enlisted in the fire department.",
        "question_ar": "",
        "evidence_en": "percentage refers to DIVIDE(COUNT(organ = 'fire_department'), COUNT(name))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name WHERE T1.organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students has the longest absense from school for 5 months?",
        "question_ar": "",
        "evidence_en": "absense from school for 5 month refers to month = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enlisted in the Army organization?",
        "question_ar": "",
        "evidence_en": "enlisted in the army refers to organ = 'army';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enrolled in UCLA school?",
        "question_ar": "",
        "evidence_en": "enrolled in UCLA refers to school = 'ucla';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enrolled WHERE school = 'ucla'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List at least 5 students who has the longest absense from schoool?",
        "question_ar": "",
        "evidence_en": "longest absense refers to MAX(month)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM longest_absense_from_school ORDER BY month DESC LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many of the students joined two organization?",
        "question_ar": "",
        "evidence_en": "joined two organization refers to COUNT(organ) > = 2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ >= 2"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enlisted in the Navy organization?",
        "question_ar": "",
        "evidence_en": "enlisted in the navy organization refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many male stuents do not have payment due?",
        "question_ar": "",
        "evidence_en": "do not have payment due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enlisted in the Peace Corps organization are enrolled in UCSD school?",
        "question_ar": "",
        "evidence_en": "enlisted in the Peace Corps refers to organ = 'peace_corps'; enrolled in UCSD school refers to school = 'ucsd';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the unemployed students, how many of them have no payment due?",
        "question_ar": "",
        "evidence_en": "have no payment due refers to bool = 'neg';\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students have no payment due?",
        "question_ar": "",
        "evidence_en": "have no payment due refers to bool = 'neg'; female students refers to name NOT in male table",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM no_payment_due WHERE name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students have never been absent?",
        "question_ar": "",
        "evidence_en": "never been absent refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "List at least 10 students who have no payment due and are enlisted in Fire Department organization.",
        "question_ar": "",
        "evidence_en": "no payment due refers to bool = 'neg'; organization refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.bool = 'neg' AND T2.organ = 'fire_department' LIMIT 10"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students are enlisted in the Navy organization?",
        "question_ar": "",
        "evidence_en": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy' AND name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students are enlisted in the Army organization?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; organ = 'army';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students have payment due?",
        "question_ar": "",
        "evidence_en": "have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List at least 5 students who have payment due and are enlisted in Peace Corps organization?",
        "question_ar": "",
        "evidence_en": "have payment due refers to bool = 'pos'; organization refers to organ; organ = 'Peace Corps';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T2.organ = 'peace_corps' AND T1.bool = 'pos' LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students are female?",
        "question_ar": "",
        "evidence_en": "female refers to disabled.name who are NOT in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students have payment due?",
        "question_ar": "",
        "evidence_en": "have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average number of female students who are disabled and who joined Foreign Legion organization.",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(disabled.name who are not in male.name WHERE organ = 'foreign_legion'), COUNT(disabled.name)); female students who are disabled refers to disabled.name who are NOT in male.name; organization refers to organ; organ = 'Foreign Legion';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the ratio in percentage between the average number of female and male students who joined Fire Department organization.",
        "question_ar": "",
        "evidence_en": "ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is NOT in male.name), COUNT(enlist.name WHERE organ = 'fire_department),'%'))) AS FEMALE; ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is IN male.name), COUNT(enlist.name WHERE organ = 'fire_department), 100))) AS MALE; female students refers to enlist.name who are NOT in male.name; male students refers to enlist.name who are IN male.name; organization refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name), CAST(SUM(IIF(T2.name IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students enlisted in the navy?",
        "question_ar": "",
        "evidence_en": "navy refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the percentage of students who have never been absent.",
        "question_ar": "",
        "evidence_en": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(name WHERE month = 0), 100), COUNT(name)),'%'); never been absent refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(month = 0, 1, 0)) AS REAL) * 100 / COUNT(name) FROM longest_absense_from_school"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the ratio of students who have payment due and those who do not have payment due?",
        "question_ar": "",
        "evidence_en": "ratio =  DIVIDE(COUNT(name WHERE `bool` = 'pos'), COUNT(name WHERE `bool` = 'neg')); have payment due refers to `bool` = 'pos'; no payment due refers to `bool` = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(`bool` = 'pos', 1, 0)) AS REAL) / SUM(IIF(`bool` = 'neg', 1, 0)) FROM no_payment_due"
    },
    {
        "db_id": "student_loan",
        "question_en": "Provide the students' names and schools who enrolled for 15 months.",
        "question_ar": "",
        "evidence_en": "enrolled for 15 months refers to month = 15;",
        "evidence_ar": "",
        "SQL": "SELECT name, school FROM enrolled WHERE month = 15"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average enlisted students per organization.",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(FLOOR(COUNT(NAME), COUNT(DISTINCT organ)));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(NAME) AS REAL) * 100 / COUNT(DISTINCT organ) FROM enlist"
    },
    {
        "db_id": "student_loan",
        "question_en": "List down the enrolled schools and duration of student214.",
        "question_ar": "",
        "evidence_en": "enrolled schools refers to school; duration refers to month; student214 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT school, month FROM enrolled WHERE name = 'student214'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among all students, calculate the percentage of disabled students.",
        "question_ar": "",
        "evidence_en": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(disabled.name), 100), (COUNT(person.name that is not in disabled.name))),'%');",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among students who have been absent for nine months, how many of them are disabled?",
        "question_ar": "",
        "evidence_en": "absent for 9 months refers to month = 9;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN longest_absense_from_school AS T2 ON T2.name = T1.name WHERE T2.month = 9"
    },
    {
        "db_id": "student_loan",
        "question_en": "List down the student names who did not file for bankruptcy.",
        "question_ar": "",
        "evidence_en": "students name who did not file a bankruptcy refers to person.name who are NOT in filed_for_bankrupcy.name;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM person WHERE name NOT IN ( SELECT name FROM filed_for_bankrupcy )"
    },
    {
        "db_id": "student_loan",
        "question_en": "List any five female students' names who enlisted for the air force.",
        "question_ar": "",
        "evidence_en": "female students refers to enlist.name who are NOT in male.name; air force refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T2.name IS NULL AND T1.organ = 'air_force' LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the number of students who are not disabled.",
        "question_ar": "",
        "evidence_en": "students who are not disabled refers to person.name who are NOT in disabled.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Define the gender of \"student995\" and his/her enrolled schools.",
        "question_ar": "",
        "evidence_en": "male.name = 'student995' means student995's gender is male; if 'student995' can not be found in 'male.name', it means student995 is female;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gen , T1.school FROM enrolled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.name = 'student995'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students with disabilities, list any five students' names who are unemployed.",
        "question_ar": "",
        "evidence_en": "students with disabilities who are unemployed refers to disabled.name who are IN unemployed.name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many unemployed students filed for bankruptcy?",
        "question_ar": "",
        "evidence_en": "unemployed students who filed for bankruptcy refers to unemployed.name who are IN filed_for_bankrupcy.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students who have been absent for four months, provide any five students' names and enlisted organizations.",
        "question_ar": "",
        "evidence_en": "absent for four months refers to month = 4; enlisted organizations refers to organ;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.month = 4 LIMIT 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students with payment due, how many of them are unemployed?",
        "question_ar": "",
        "evidence_en": "with payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Provide the enlisted organizations of student160 and status of his/her payment due.",
        "question_ar": "",
        "evidence_en": "enlisted organizations refers to organ; student160 is a name of student; status of his or her payment due is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due;",
        "evidence_ar": "",
        "SQL": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List any ten male students who enlisted for foreign legion.",
        "question_ar": "",
        "evidence_en": "male students are mentioned in male.name; foreign legion refers to organ = 'foreign_legion';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'foreign_legion' LIMIT 10"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the percentage of female students.",
        "question_ar": "",
        "evidence_en": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(person.name which is not in male.name)), 100), COUNT(person.name that is IN male.name),'%'); female students refers to person.name who are NOT in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are filed for bankruptcy?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM filed_for_bankrupcy"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enrolled in smc during month 1?",
        "question_ar": "",
        "evidence_en": "smc refers to school = 'smc';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enrolled WHERE school = 'smc' AND month = 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students enlist in the air force organization?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the organization enlisted by student168?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; student168 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT organ FROM enlist WHERE name = 'student168'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled male students joined an organization?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; disabled male students refers to disabled.name who are IN male.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name INNER JOIN enlist AS T3 ON T3.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please provide a disability breakdown for each school.",
        "question_ar": "",
        "evidence_en": "disability breakdown refers to the number of disabled students;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school"
    },
    {
        "db_id": "student_loan",
        "question_en": "Please provide a gender breakdown for each organization.",
        "question_ar": "",
        "evidence_en": "gender breakdown refers to the number of male and female; male are mentioned in male.name; female refers to enlist.name who are NOT in male.name; organization refers to organ;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out student names that enrolled in two schools and two organizations?",
        "question_ar": "",
        "evidence_en": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the percentage difference between month 0 absence and month 9 absence?",
        "question_ar": "",
        "evidence_en": "percentage difference = CONCAT(DIVIDE(MULTIPLY(SUBTRACT(COUNT(name WHERE month = 0), COUNT(name WHERE month = 9)), 100), COUNT(name WHERE month = 0)),'%');",
        "evidence_ar": "",
        "SQL": "SELECT CAST(((SUM(IIF(month = 0, 1, 0)) - SUM(IIF(month = 9, 1, 0)))) AS REAL) * 100 / SUM(IIF(month = 0, 1, 0)) FROM longest_absense_from_school"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which school have the highest student enrollment? How many of those students are filed for bankruptcy?",
        "question_ar": "",
        "evidence_en": "highest student enrollment refers to MAX(COUNT(school));",
        "evidence_ar": "",
        "SQL": "SELECT T.school, num FROM ( SELECT T1.school, COUNT(T2.name) AS num FROM enrolled AS T1 LEFT JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name GROUP BY T1.school ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students is disabled and unemployed at the same time?",
        "question_ar": "",
        "evidence_en": "students who are disabled and unemployed at the same time refers to disabled.name = unemployed.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out students that enrolled in occ school and enlisted in a fire department.",
        "question_ar": "",
        "evidence_en": "occ school refers to school = 'occ'; department refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T2.school = 'occ' AND T1.organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which male students are unemployed, disable and were absent for 5 month?",
        "question_ar": "",
        "evidence_en": "male students are mentioned in male.name; unemployed and disabled refers to unemployed.name = disabled.name; absent for 5 month refers to month = 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN longest_absense_from_school AS T3 ON T3.name = T2.name WHERE T3.month = 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out female students that enrolled in occ school and ulca?",
        "question_ar": "",
        "evidence_en": "female students refers to enrolled.name who are NOT in male.name; occ school and ulca refers to school IN('occ', 'ulca');",
        "evidence_ar": "",
        "SQL": "SELECT name FROM enrolled WHERE school IN ('occ', 'ulca') AND name NOT IN ( SELECT name FROM male )"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the school and organization enrolled by student211?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; student211 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT T2.school, T1.organ FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T1.name = 'student211'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many male students filed for bankruptcy as compare to female students?",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(COUNT(filed_for_bankrupcy.name who are In male.name), COUNT(filed_for_bankrupcy.name who are NOT in male.name)); male students are mentioned in male.name; female students refers to filed_for_bankrupy.name who are NOT in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.name) - SUM(IIF(T2.name IS NULL, 1, 0)) AS num FROM filed_for_bankrupcy AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the average absent month for a unemployed male students?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(month), COUNT(unemployed.name who are in male.name)); unemployed male students refers to unemployed.name who are IN male.name;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.month) AS avg FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the percentage difference between the attendence of disabled and non-disable students? Do the disable students show better attendance than non-disable students?",
        "question_ar": "",
        "evidence_en": "difference = MULTIPLY(DIVIDE(SUBTRACT(COUNT(longest_absense_from_school.name that is in disabled.name), COUNT(longest _absense_from_school.name that is NOT in disabled.name), longest _absense_from_school.name), 100)); IF COUNT(longest_absense_from_school.name that is in disabled.name) < COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means, the disabled students have better attendance than non-disabled students; IF COUNT(longest_absense_from_school.name that is in disabled.name) > COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means the disabled students do not have a better attendance than non-disabled students;",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average duration of absense of disabled male students.",
        "question_ar": "",
        "evidence_en": "average duration = DIVIDE(SUM(month), COUNT(month)); duration of absence refers to month; disabled male students refers to disabled.name who are IN male.name;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the ratio of unemployed students who have never been absent from school.",
        "question_ar": "",
        "evidence_en": "ratio = CONCAT(DIVIDE(MULTIPLY(COUNT(unemployed.name WHERE month = 0), 100), COUNT(month)),'%'); unemployed students who have never been absent from school refers to (unemployed.name WHERE month = 0);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.month = 0, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "State the number of male students who do not have payment due.",
        "question_ar": "",
        "evidence_en": "do not have payment due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "State the number of students who filed for bankruptcy and have payment due.",
        "question_ar": "",
        "evidence_en": "have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the status of payment of student 124?",
        "question_ar": "",
        "evidence_en": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student124 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT `bool` FROM no_payment_due WHERE name = 'student124'"
    },
    {
        "db_id": "student_loan",
        "question_en": "State the number of disabled students who have payment due.",
        "question_ar": "",
        "evidence_en": "have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of students who have the longest duration of absense from school and do not have payment due.",
        "question_ar": "",
        "evidence_en": "longest duration of absence from school refers to MAX(month); do not have payment due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg' ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of students who have been absent for 5 months from school and do not have payment due.",
        "question_ar": "",
        "evidence_en": "absent for 5 months refers to month = 5; do not have payment due refers to bool = 'neg';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out the number of disabled students who enlisted in marines.",
        "question_ar": "",
        "evidence_en": "marines refers to organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out the number of students who have the longest duration of absense from school and enlisted in the peace corps.",
        "question_ar": "",
        "evidence_en": "longest duration of absence refers to MAX(month); peace corps refers to organ = 'peace_corps';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.NAME) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'peace_corps' ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "List out the number of students who filed for bankruptcy and enlisted in navy.",
        "question_ar": "",
        "evidence_en": "navy refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Give the number of students who enlisted in marines and have payment due.",
        "question_ar": "",
        "evidence_en": "marines refers to organ = 'marines'; have payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos' AND T2.organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the ratio of disabled students who have never been absent from school.",
        "question_ar": "",
        "evidence_en": "ratio = MULTIPLY(DIVIDE(SUM(month = 0), COUNT(disabled.name)), 100); never been absent from school refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT 100 * SUM(IIF(T2.month = 0, 1, 0)) AS num FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students in the Air Force?",
        "question_ar": "",
        "evidence_en": "Air Force refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have been absent less than 4 months?",
        "question_ar": "",
        "evidence_en": "absent less than 4 months refers to month < 4;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4"
    },
    {
        "db_id": "student_loan",
        "question_en": "Count the number of female students who belong to marines organization.",
        "question_ar": "",
        "evidence_en": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM person AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T2.organ = 'marines' AND T3.name IS NULL"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average duration of absense of female students.",
        "question_ar": "",
        "evidence_en": "average duration = DIVIDE(SUM(month), COUNT(longest_absence_from_school.name which are NOT in male.name)); female students refers to longest_absence_from_school.name who are NOT in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.month) FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL"
    },
    {
        "db_id": "student_loan",
        "question_en": "State name of female students who filed for bankruptcy.",
        "question_ar": "",
        "evidence_en": "female students refers to filed_for_bankrupcy.name who are NOT in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM person AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL"
    },
    {
        "db_id": "student_loan",
        "question_en": "Mention the status of payment of student 299.",
        "question_ar": "",
        "evidence_en": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student299 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT bool FROM no_payment_due WHERE name = 'student299'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students are enlisted to the air force?",
        "question_ar": "",
        "evidence_en": "Air Force refers to organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have absent from school?",
        "question_ar": "",
        "evidence_en": "have absent from school refers to month > 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "Provide the names of the students enlisted in the fire department.",
        "question_ar": "",
        "evidence_en": "department refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT name FROM enlist WHERE organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students have payment due?",
        "question_ar": "",
        "evidence_en": "payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students that filed for bankruptcy, how many of them have been enrolled in OCC?",
        "question_ar": "",
        "evidence_en": "OCC refers to school = 'occ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T2.school = 'occ'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students are male?",
        "question_ar": "",
        "evidence_en": "male students are mentioned in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "List the names of disabled students enlisted in the navy.",
        "question_ar": "",
        "evidence_en": "navy refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the male students, list down the names of students with payment due.",
        "question_ar": "",
        "evidence_en": "male students are mentioned in male.name; with payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the employment and payment status of student110?",
        "question_ar": "",
        "evidence_en": "employment status is mentioned in unemployment; unemployed.name = 'student110' means the student is unemployed; if 'student110' can not be found in unemployed.name, it means the student is employed; payment status is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student110 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT T1.bool FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.name = 'student110'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among all students, calculate the percentage of male students.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the school and gender of student34?",
        "question_ar": "",
        "evidence_en": "male.name = 'student34' means student34's gender is male; if 'student34' can't be found in 'male.name', it means student34 is female; student34 is a name of student;",
        "evidence_ar": "",
        "SQL": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'"
    },
    {
        "db_id": "student_loan",
        "question_en": "List the longest duration of absense for a student enlisted in the fire department.",
        "question_ar": "",
        "evidence_en": "longest duration of absence refers to MAX(month); department refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'fire_department' ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among students with 1 month of absenses, how many of them are enlisted in the air force department?",
        "question_ar": "",
        "evidence_en": "1 month of absences refers to month = 1; department refers to organ; organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.month = 1 AND T2.organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Provide the name of disabled male students that are unemployed.",
        "question_ar": "",
        "evidence_en": "disabled male students that are unemployed refers to unemployed.name = male.name = disabled.name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.NAME FROM unemployed AS T1 INNER JOIN male AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T3.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many male students are enrolled at OCC?",
        "question_ar": "",
        "evidence_en": "male students are mentioned in male.name; OCC refers to school = 'occ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.school = 'occ'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students enrolled in UCLA, what is the percentage of male students in the air force department?",
        "question_ar": "",
        "evidence_en": "UCLA refers to school = 'ucla'; percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name; department refers to organ; organ = 'air_force';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T4.name) AS REAL) * 100 / COUNT(T2.name) FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN enrolled AS T3 ON T3.name = T2.name LEFT JOIN male AS T4 ON T2.name = T4.name WHERE T3.school = 'ucla' AND T1.organ = 'air_force'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Calculate the average number of disabled female students enrolled in UCI.",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have never been absent in school?",
        "question_ar": "",
        "evidence_en": "never been absent in school refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "What are the names of the students who joined the Marines?",
        "question_ar": "",
        "evidence_en": "Marines refers to organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT name FROM enlist WHERE organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students enlisted in the Navy?",
        "question_ar": "",
        "evidence_en": "Navy refers to organ = 'navy';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the name of the student with the longest duration of absence?",
        "question_ar": "",
        "evidence_en": "longest duration of absence refers to MAX(month);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )"
    },
    {
        "db_id": "student_loan",
        "question_en": "What is the name of the organization which most of the students are enlisted in?",
        "question_ar": "",
        "evidence_en": "name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));",
        "evidence_ar": "",
        "SQL": "SELECT organ FROM ( SELECT organ, COUNT(organ) AS num FROM enlist GROUP BY organ ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many students have absences of no more than 3 months?",
        "question_ar": "",
        "evidence_en": "absences of no more than 3 months refers to month < 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 3"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students that have a payment due, how many students are unemployed?",
        "question_ar": "",
        "evidence_en": "students that have a payment due refers to bool = 'pos';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many female students have enlisted for the Army?",
        "question_ar": "",
        "evidence_en": "female students refers to enlist.name who are NOT in male.name; Army refers to organ = 'army';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T3.name IS NULL, 1, 0)) AS \"result\" FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T1.organ = 'army'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which organization has the least number of male students?",
        "question_ar": "",
        "evidence_en": "organization refers to organ; male students are mentioned in male.name; least number of male students refers to MIN(male.name);",
        "evidence_ar": "",
        "SQL": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many disabled students have zero absences?",
        "question_ar": "",
        "evidence_en": "zero absences refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many of the unemployed students are disabled?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "List the names of the disabled students who were absent from school for more than 5 months.",
        "question_ar": "",
        "evidence_en": "absent for more than 5 months refers to month > 5;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month > 5"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many bankrupt students are there in the Marines?",
        "question_ar": "",
        "evidence_en": "Marines refers to organ = 'marines';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students who filed for bankruptcy, how many students are disabled?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many months did a student in the Air Force miss school the most?",
        "question_ar": "",
        "evidence_en": "Air Force refers to organ = 'air_force'; number of months a student miss school the most refers to MAX(COUNT(month));",
        "evidence_ar": "",
        "SQL": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "db_id": "student_loan",
        "question_en": "Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department?",
        "question_ar": "",
        "evidence_en": "absence of no more than 6 months refers to month < 6; department refers to organ; organ = 'fire_department';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN enlist AS T3 ON T3.name = T2.name WHERE T3.organ = 'fire_department'"
    },
    {
        "db_id": "student_loan",
        "question_en": "How many employed disabled students have zero absences?",
        "question_ar": "",
        "evidence_en": "employed students refers to disabled.name who are NOT in unemployed.name; zero absences refers to month = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN unemployed AS T3 ON T3.name = T2.name WHERE T1.month = 0"
    },
    {
        "db_id": "student_loan",
        "question_en": "Which organization has the highest number of male students? Calculate for the percentage of the male students in the said organization.",
        "question_ar": "",
        "evidence_en": "organization refers to organ; highest number of male students refers to MAX(COUNT(male.name)); percentage = DIVIDE(COUNT(male.name), COUNT(person.name)), 1.0;",
        "evidence_ar": "",
        "SQL": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users answered \"No\" to question 19?",
        "question_ar": "",
        "evidence_en": "Question 19 refer to QuestionID = 19; No refer to AnswerText = 'No'\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(QuestionID) FROM Answer WHERE QuestionID = 19 AND AnswerText LIKE 'No'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "From 2016 to 2019, how many users each year were asked the question 13?",
        "question_ar": "",
        "evidence_en": "From 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; Question 13 refer to QuestionID",
        "evidence_ar": "",
        "SQL": "SELECT SurveyID, COUNT(UserID) FROM Answer WHERE QuestionID = 13 AND SurveyID BETWEEN 2016 AND 2019 GROUP BY SurveyID"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users, between the age 27 to 35, were surveyed in 2018?",
        "question_ar": "",
        "evidence_en": "Age 27 to 35 refer to AnswerText 27 BETWEEN 35 where questionid = 1; 2018 refer to SurveyID\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2018 AND T2.questionid = 1 AND T1.AnswerText BETWEEN '27' AND '35'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "In 2019, how many users in the United States have a family history of mental illness?",
        "question_ar": "",
        "evidence_en": "2019 refer to SurveyID; Users in the United States refers to AnswerText = 'United States' where questionid = 3; have a family history of mental illness refers to AnswerText = 'Yes' where questionid = 6",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T2.questionid FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 6 AND T1.AnswerText LIKE 'Yes' ) AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 3 AND T1.AnswerText LIKE 'United States'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Betweeen 2016 to 2019, which year recorded the highest number of people with mental illness?",
        "question_ar": "",
        "evidence_en": "Between 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; People with mental illness refers to AnswerText = 'Yes' where questionid = 34",
        "evidence_ar": "",
        "SQL": "SELECT T1.SurveyID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID BETWEEN 2016 AND 2019 AND T2.questionid = 34 AND T1.AnswerText LIKE 'Yes' GROUP BY T1.SurveyID ORDER BY COUNT(T1.UserID) DESC LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska?",
        "question_ar": "",
        "evidence_en": "AnswerText = 'Yes' where questiontext = 'Do you have a family history of mental illness?'; AnswerText = 'Female' where questionid = 2; AnswerText = 'Nebraska' where questionid = 4",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T3.Description = 'mental health survey for 2017' AND T1.questionid = 2 AND T2.AnswerText = 'Female' UNION SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T1.questionid = 4 AND T2.AnswerText = 'Nebraska' AND T3.Description = 'mental health survey for 2017' )"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users believed that their productivity is ever affected by a mental health issue overall?",
        "question_ar": "",
        "evidence_en": "Users who believed that their productivity is affected by a mental health issues overall refers to AnswerText = 'Yes' where questionid = 54",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 54 AND T1.AnswerText LIKE 'Yes'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What are the ages of the oldest and youngest user that were surveyed? Indicate their user id.",
        "question_ar": "",
        "evidence_en": "Oldest user refer to MAX(AnswerText) where questionid = 1; Youngest user refer to MIN(AnswerText) where questionid = 1\n",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.AnswerText), MIN(T1.AnswerText) , ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1 ORDER BY T1.AnswerText LIMIT 1 ) AS \"youngest id\" FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Which country have the least number of users being surveyed? Indicate the name of the country. If there are multiple countries having the same number of users, indicate all of their names.",
        "question_ar": "",
        "evidence_en": "Country with least number of users being surveyed refers to MIN(COUNT(AnswerText)) where questionid = 3",
        "evidence_ar": "",
        "SQL": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 GROUP BY T1.AnswerText ORDER BY COUNT(T1.UserID) DESC LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the average age of the survey respondents in the United States?",
        "question_ar": "",
        "evidence_en": "Average age refer to AVG(AnswerText) where questionid = 1; respondents in the United States refers to AnswerText = 'United States' where questionid = 3",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.AnswerText) AS REAL) / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 AND T1.AnswerText = 'United States' ) AS T2 ON T1.UserID = T2.UserID INNER JOIN Question AS T3 ON T1.QuestionID = T3.questionid WHERE T3.questionid = 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview?",
        "question_ar": "",
        "evidence_en": "Percentage = DIVIDE(SUM(AnswerText = 'Yes' Or AnswerText = 'Maybe'), COUNT(QuestionID = 12))* 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many questions in 2014's survey had more than 200 answers?",
        "question_ar": "",
        "evidence_en": "2014 refer to SurveyID; COUNT(QuestionID) where COUNT(AnswerText) > 200",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(QuestionID) FROM Answer WHERE SurveyID LIKE 2014 GROUP BY QuestionID ORDER BY COUNT(QuestionID) > 200 LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the oldest age of the users in 2014's survey?",
        "question_ar": "",
        "evidence_en": "what is your age? refer to QuestionText; 2014 refer to SurveyID; oldest age refers to MAX(AnswerText)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'What is your age?' AND T2.SurveyID = 2014 ORDER BY T2.AnswerText DESC LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users answered \"No\" to the question \"Would you bring up a mental health issue with a potential employer in an interview?\" in 2014's survey?",
        "question_ar": "",
        "evidence_en": "2014 refer to SurveyID; Answered No refer to AnswerText = 'No'; Question refer to questiontext\n\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Please list the IDs of the users who answered \"Yes\" to the question \"Do you think that discussing a physical health issue with your employer would have negative consequences?\" in 2014's survey.",
        "question_ar": "",
        "evidence_en": "2014 refer to SurveyID; Question refer to questiontext; yes refer to AnswerText = 'Yes'\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' AND T2.AnswerText LIKE 'Yes' AND T2.SurveyID = 2014"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users participated in the mental health survey for 2014?",
        "question_ar": "",
        "evidence_en": "mental health survey for 2014 refers to SurveyID = 2014",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2014'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Please list all the answers to the question \"Any additional notes or comments\" that are not null in 2014's survey.",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; the answers that are not null refers to AnswerText ! = -1\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Please list all the common questions in 2014's survey and 2016's survey.",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; all the common questions in 2014's survey and 2016's survey refers to QuestionID(SurveyID(2014)) = QuestionID(SurveyID(2016))\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users lived in Canada according to 2018's survey?",
        "question_ar": "",
        "evidence_en": "lived in Canada refers to AnswerText(QuestionID(3)) = 'Canada'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2018 AND T1.questiontext = 'What country do you live in?' AND T2.AnswerText = 'Canada'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Please list all the questions in the mental health survey for 2014.",
        "question_ar": "",
        "evidence_en": "mental health survey for 2014 refers to SurveyID = 2014",
        "evidence_ar": "",
        "SQL": "SELECT T2.questiontext FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T3.Description LIKE 'mental health survey for 2014' GROUP BY T2.questiontext"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "According to 2016's survey, what is the number of users with a mental health disorder in the past?",
        "question_ar": "",
        "evidence_en": "users with a mental health disorder in the past refers to AnswerText(QuestionID(32)) = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users answered \"Yes\" to the question \"Have you had a mental health disorder in the past?\" in 3 consecutive years starting from 2016?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; answered 'Yes' to question refers to AnswerText = 'Yes'; 3 consecutive years starting from 2016 refers to SurveyID = 2016 and SurveyID = 2017 and SurveyID = 2018",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the average result of the question \"What is your age?\" in 2014's survey?",
        "question_ar": "",
        "evidence_en": "average result refers to avg(AnswerText(SurveyID = 2014& QuestionID = 1))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.AnswerText) AS REAL) / COUNT(T2.UserID) AS \"avg\" FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2014 AND T1.questiontext LIKE 'What is your age?'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the rate of increase of users with a current mental disorder from 2019's survey to 2016's survey?",
        "question_ar": "",
        "evidence_en": "rate of increase = subtract(divide(count(SurveyID = 2019& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2019& QuestionID = 33)), divide(count(SurveyID = 2016& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 33)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2019 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) - ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) AS REAL) * 100 / ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' )"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Tell the question ID for \"Would you bring up a physical health issue with a potential employer in an interview?\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT questionid FROM Question WHERE questiontext LIKE 'Would you bring up a physical health issue with a potential employer in an interview?'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users answered the question No.20?",
        "question_ar": "",
        "evidence_en": "question No.20 refers to QuestionID = 20",
        "evidence_ar": "",
        "SQL": "SELECT MAX(UserID) - MIN(UserID) + 1 FROM Answer WHERE QuestionID = 20"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many questions did user No.5 answer?",
        "question_ar": "",
        "evidence_en": "user No.5 refers to userID = 5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(QuestionID) FROM Answer WHERE UserID = 5"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users participated in the Survey No.2016?",
        "question_ar": "",
        "evidence_en": "Survey No.2016 refers to SurveyID = 2016",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID LIKE 2016"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "State the number of questions that were asked in the \"mental health survey for 2018\".",
        "question_ar": "",
        "evidence_en": "mental health survey for 2018 refers to SurveyID = 2018",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.QuestionID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Tell the number of surveys that contained the question “What country do you work in?”.",
        "question_ar": "",
        "evidence_en": "question refers to questiontext",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What answer did user No. 2681 give to the question \"Do you currently have a mental health disorder?\"?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; user No. 2681 refers to UserID = 2681\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'Do you currently have a mental health disorder?' AND T1.UserID = 2681"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Provide the number of users who took part in the \"mental health survey for 2016\".",
        "question_ar": "",
        "evidence_en": "mental health survey for 2016 refers to SurveyID = 2016",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What was the most common answer for the question \"What country do you work in?\"?",
        "question_ar": "",
        "evidence_en": "most common answer refers to AnswerText where MAX(COUNT(AnswerText(QuestionID = 3)))",
        "evidence_ar": "",
        "SQL": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many different answers did the question \"Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.\" get?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "For the question “What US state or territory do you work in?”, how many people gave \"Kansas\" as the answer?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; AnswerText = 'Kansas'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'What US state or territory do you work in?' AND T1.AnswerText = 'Kansas'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many people wrote comments for the question \"Any additional notes or comments.\"?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; wrote comments refers to AnswerText(QuestionID = 103) ! = -1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText IS NOT NULL"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "For all the users who have been asked \"Have you ever been diagnosed with a mental health disorder?\", how many of them said \"Yes\"?",
        "question_ar": "",
        "evidence_en": "have asked refers to questiontext; said 'Yes' refers to AnswerText = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Have you ever been diagnosed with a mental health disorder?' AND T1.AnswerText = 'Yes'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Give the number of users who took the \"mental health survey for 2018\".",
        "question_ar": "",
        "evidence_en": "mental health survey for 2018 refers to SurveyID = 2018",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many users answered the question \"Overall, how much importance does your employer place on physical health?\"?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "For which question did the user No.2183 gave the answer \"Mood Disorder (Depression, Bipolar Disorder, etc)\"?",
        "question_ar": "",
        "evidence_en": "question refers to questiontext; user No.2183 refers to userID = 2183",
        "evidence_ar": "",
        "SQL": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 2183 AND T1.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What was the percentage for the answer of \"Yes\" was given to the question \"Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?\"?",
        "question_ar": "",
        "evidence_en": "percentage = divide(count(QuestionID = 15& AnswerText = 'Yes'), count(QuestionID = 15))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many times more for the number of users who took the \"mental health survey for 2017\" than \"mental health survey for 2018\"?",
        "question_ar": "",
        "evidence_en": "How many times more = subtract(count(UserID(SurveyID = 2017)), count(UserID(SurveyID = 2018)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "Among respondents who participated in the survey in 2016, what percentage had a mental health disorder in the past?",
        "question_ar": "",
        "evidence_en": "respondents and 'users' are synonyms; percentage = divide(count(SurveyID = 2016& QuestionID = 32 & AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 32))*100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many respondents younger than 25 years old did participate in the survey in 2016?",
        "question_ar": "",
        "evidence_en": "respondents' and 'users' are synonyms; younger than 25 years old refers to AnswerText(SurveyID = 2016& QuestionID = 1)< 25",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 1 AND T1.SurveyID = 2016 AND T1.AnswerText <= 25"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "What is the average number of respondents per survey between 2014 and 2019?",
        "question_ar": "",
        "evidence_en": "respondents and 'users' are synonyms; average number = avg(count(userID(SurveyID = 2014)), count(userID(SurveyID = 2019)))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(SurveyID) AS REAL) / 5 FROM Answer WHERE SurveyID BETWEEN 2014 AND 2019"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many respondents who participated in the survey in 2019 have ever sought treatment for a mental health disorder from a mental health professional?",
        "question_ar": "",
        "evidence_en": "respondents' and 'users' are synonyms, have ever sought treatment for a mental health disorder from a mental health professional refers to AnswerText(SurveyID = 2019& QuestionID = 7) = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 7 AND T1.SurveyID = 2019 AND T1.AnswerText = 1"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many respondents who participated in the survey in 2014 work remotely at least 50% of the time?",
        "question_ar": "",
        "evidence_en": "respondents' and 'users' are synonyms; work remotely at least 50% of the time refers to AnswerText(SurveyID = 2014& QuestionID = 93) = 'Yes'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 93 AND T1.SurveyID = 2014 AND T1.AnswerText = 'Yes'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many questions were asked in the questionary for the mental health survey?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(questiontext) FROM Question"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "How many respondents of the mental health survey were diagnosed with 'Substance Use Disorder'?",
        "question_ar": "",
        "evidence_en": "respondents' and 'users' are synonyms",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'"
    },
    {
        "db_id": "mental_health_survey",
        "question_en": "List the top three popular responses to the question of the survey in 2017 with the question ID no.85.",
        "question_ar": "",
        "evidence_en": "\n\nsurvey in 2017 refers to SurveyID = 2017; questionID = 85; MAX(COUNT(AnswerText))",
        "evidence_ar": "",
        "SQL": "SELECT AnswerText FROM Answer WHERE QuestionID = 85 AND SurveyID = 2017 GROUP BY AnswerText ORDER BY COUNT(AnswerText) DESC LIMIT 3"
    },
    {
        "db_id": "disney",
        "question_en": "How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997?",
        "question_ar": "",
        "evidence_en": "SUBTRACT(SUM(Year = 1998), SUM(Year = 1997))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN `Year` = 1998 THEN Total ELSE 0 END) - SUM(CASE WHEN `Year` = 1997 THEN Total ELSE 0 END) FROM revenue"
    },
    {
        "db_id": "disney",
        "question_en": "In which segment did the Walt Disney Company earned a bigger revenue in 1998, Studio Entertainment or Disney Media Networks?",
        "question_ar": "",
        "evidence_en": "Studio Entertainment[NI 1]' > 'Disney Media Networks' where Year = 1998;",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN 'Studio Entertainment[NI 1]' > 'Disney Media Networks' THEN 'Studio Entertainment[NI 1]' ELSE 'Disney Media Networks' END FROM revenue WHERE `Year` = 1998"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the director of the movie Pinocchio?",
        "question_ar": "",
        "evidence_en": "Pinocchio is the name of the movie;",
        "evidence_ar": "",
        "SQL": "SELECT director FROM director WHERE name = 'Pinocchio'"
    },
    {
        "db_id": "disney",
        "question_en": "Please list the villains of all the movies directed by Wolfgang Reitherman.",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';",
        "evidence_ar": "",
        "SQL": "SELECT T2.villian FROM director AS T1 INNER JOIN characters AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' AND T2.villian IS NOT NULL"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies directed by Wolfgang Reitherman, how many of them were released in December?",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; released in December refers to (release_date, instr(release_date, '-') + 1, 3) = 'Dec';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(release_date, INSTR(release_date, '-') + 1, 3) = 'Dec' AND T2.director = 'Wolfgang Reitherman'"
    },
    {
        "db_id": "disney",
        "question_en": "The song \"Once Upon a Dream\" is associated with the movie directed by whom?",
        "question_ar": "",
        "evidence_en": "directed by whom refers to director; movie refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song = 'Once Upon a Dream'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the voice actor for the villain of the movie \"Alice in Wonderland\"?",
        "question_ar": "",
        "evidence_en": "Alice in Wonderland refers to movie_title = 'Alice in Wonderland'; villain refers to character like '%'||T1.villian||'%';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'"
    },
    {
        "db_id": "disney",
        "question_en": "Please list the release dates of all the movies in which Alan Tudyk is a voice actor.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.release_date FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.`voice-actor` = 'Alan Tudyk'"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies in which Alan Tudyk is a voice actor, how many of them were released after 2012?",
        "question_ar": "",
        "evidence_en": "released after 2012 refers to (release_date, instr(release_date, '-') + 5) > 12;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.movie) FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Alan Tudyk' AND SUBSTR(release_date, INSTR(release_date, '-') + 5) > 12"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?",
        "question_ar": "",
        "evidence_en": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; comedies refers to genre = 'Comedy'; movies refer to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.name) FROM ( SELECT T2.name FROM `movies_total_gross` AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.genre = 'Comedy' GROUP BY T2.name ) T3"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies directed by Wolfgang Reitherman, which one of them was the most popular?",
        "question_ar": "",
        "evidence_en": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the most popular movie refers to MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' ORDER BY T2.total_gross DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Please list the movies directed by Wolfgang Reitherman that can be watched by the general audience.",
        "question_ar": "",
        "evidence_en": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; movies refer to movie_title; general audience refers to MPAA_rating = 'G';",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM `movies_total_gross` AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.MPAA_rating = 'G' AND T2.director = 'Wolfgang Reitherman'"
    },
    {
        "db_id": "disney",
        "question_en": "Which character is the villain of the most popular movie?",
        "question_ar": "",
        "evidence_en": "the most popular movie refers to movie_title where MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.villian FROM `movies_total_gross` AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "What is the genre of the movie whose villain is Commander Rourke?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.genre FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T1.villian = 'Commander Rourke'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the villain of the movie \"Beauty and the Beast\"?",
        "question_ar": "",
        "evidence_en": "Beauty and the Beast refers to movie_title = 'Beauty and the Beast';",
        "evidence_ar": "",
        "SQL": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast'"
    },
    {
        "db_id": "disney",
        "question_en": "Which movie is the character Robin Hood in?",
        "question_ar": "",
        "evidence_en": "Robin Hood is the main character of the movie which refers to hero = 'Robin Hood'; movie refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood'"
    },
    {
        "db_id": "disney",
        "question_en": "Give the name of the movie which the song \"I Thought I Lost You\" is associated with.",
        "question_ar": "",
        "evidence_en": "name of the movie refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the voice actor of the character \"Binkie Muddlefoot\"?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT `voice-actor` FROM `voice-actors` WHERE character = 'Binkie Muddlefoot'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the hero character of the movie whose total gross was $222,527,828?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.total_gross = '$222,527,828'"
    },
    {
        "db_id": "disney",
        "question_en": "Which song is associated with the most popular Disney movie in 1970s?",
        "question_ar": "",
        "evidence_en": "the most popular movie refers to movie_title where MAX(total_gross); in 1970s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1970 and 1979);",
        "evidence_ar": "",
        "SQL": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE CAST(SUBSTR(T1.release_date, INSTR(T1.release_date, ', ') + 1) AS int) BETWEEN 1970 AND 1979 ORDER BY CAST(REPLACE(SUBSTR(T1.total_gross, 2), ',', '') AS float) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the hero character of the Disney movie directed by Will Finn?",
        "question_ar": "",
        "evidence_en": "Will Finn refers to director = 'Will Finn';",
        "evidence_ar": "",
        "SQL": "SELECT T1.hero FROM characters AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Will Finn'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the voice actor of the hero character from the movie The Little Mermaid?",
        "question_ar": "",
        "evidence_en": "The Little Mermaid refers to movie_title = 'The Little Mermaid';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`voice-actor` FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T2.movie = T1.movie_title WHERE T1.movie_title = 'The Little Mermaid' AND T2.character = T1.hero"
    },
    {
        "db_id": "disney",
        "question_en": "Give the name of the director of the movie in which Verna Felton was the voice actor for its character \"Aunt Sarah\".",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.director FROM director AS T1 INNER JOIN `voice-actors` AS T2 ON T2.movie = T1.name WHERE T2.character = 'Aunt Sarah' AND T2.`voice-actor` = 'Verna Felton'"
    },
    {
        "db_id": "disney",
        "question_en": "For the movie in which Tress MacNeille was the voice actor for its character \"Hyacinth Hippo\", what was the release date of that movie?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_date FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T2.movie = T1.movie_title WHERE T2.character = 'Hyacinth Hippo' AND T2.`voice-actor` = 'Tress MacNeille'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the director of the adventure movie which was released on 2007/3/30?",
        "question_ar": "",
        "evidence_en": "released on 2007/3/30 refers to release_date = 'Mar 30, 2007'; adventure movie refers to genre = 'Adventure' ;",
        "evidence_ar": "",
        "SQL": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'"
    },
    {
        "db_id": "disney",
        "question_en": "Wolfgang Reitherman has directed several Disney movies, which one has the highest grossing after accounting for inflation?",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the highest grossing after accounting for inflation refers to MAX(inflation_adjusted_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the hero character of the adventure movie which was released on 2016/3/4?",
        "question_ar": "",
        "evidence_en": "released on 2016/3/4 refers to release_date = '4-Mar-16'; adventure movie refers to genre = 'Adventure' ;",
        "evidence_ar": "",
        "SQL": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.genre = 'Adventure' AND T1.release_date = '4-Mar-16'"
    },
    {
        "db_id": "disney",
        "question_en": "The character Donald Duck has appeared in two Disney movies, which one has more grossing?",
        "question_ar": "",
        "evidence_en": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; which one has more grossing refers to movie_title where MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Donald Duck' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "How many movies did Wolfgang Reitherman direct?",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers director = 'Wolfgang Reitherman';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the most productive director?",
        "question_ar": "",
        "evidence_en": "Most productive director refers to director where MAX(COUNT(name));",
        "evidence_ar": "",
        "SQL": "SELECT director FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "How many restricted horror movies were released between 1/1/1990 to 12/31/2015?",
        "question_ar": "",
        "evidence_en": "Restricted refers to MPAA_rating = 'R'; horror refers to genre = 'Horror'; released between 1/1/1990 to 12/31/2015 refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2015);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2015"
    },
    {
        "db_id": "disney",
        "question_en": "What are the names of the characters voiced by Frank Welker?",
        "question_ar": "",
        "evidence_en": "Frank Welker refers to voice-actor = 'Frank Welker';",
        "evidence_ar": "",
        "SQL": "SELECT character FROM `voice-actors` WHERE 'voice-actor' = 'Frank Welker'"
    },
    {
        "db_id": "disney",
        "question_en": "How much is the total gross of the movie with a song titled \"Little Wonders\"?",
        "question_ar": "",
        "evidence_en": "song = 'Little Wonders'",
        "evidence_ar": "",
        "SQL": "SELECT T1.total_gross FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song = 'Little Wonders'"
    },
    {
        "db_id": "disney",
        "question_en": "What is the Motion Picture Association of America rating for the movie featuring a villain named Turbo?",
        "question_ar": "",
        "evidence_en": "The Motion Picture Association of America rating refers to MPAA_rating; villian = 'Turbo';",
        "evidence_ar": "",
        "SQL": "SELECT T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.villian = 'Turbo'"
    },
    {
        "db_id": "disney",
        "question_en": "How many movies for mature audiences or parental guidance suggested did Bill Thompson work as a voice actor?",
        "question_ar": "",
        "evidence_en": "movies for mature audiences or parental guidance refer to movie_title where MPAA_rating = 'PG';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.movie) FROM ( SELECT T1.movie FROM `voice-actors` AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE MPAA_rating = 'PG' AND `voice-actor` = 'Bill Thompson' GROUP BY T1.movie ) AS T"
    },
    {
        "db_id": "disney",
        "question_en": "How many of Gary Trousdale's movies are adventure movies?",
        "question_ar": "",
        "evidence_en": "Gary Trousdale refers director = 'Gary Trousdale'; the adventure movie refers to genre = 'Adventure';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.name) FROM ( SELECT T1.name FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Gary Trousdale' AND T2.genre = 'Adventure' GROUP BY T1.name ) T"
    },
    {
        "db_id": "disney",
        "question_en": "Which director did Bill Thompson work the most with?",
        "question_ar": "",
        "evidence_en": "Bill Thompson refers to voice-actor = 'Bill Thompson'; worked the most refers to MAX(COUNT(name));",
        "evidence_ar": "",
        "SQL": "SELECT director FROM director AS T1 INNER JOIN `voice-actors` AS T2 ON T1.name = T2.movie WHERE T2.`voice-actor` = 'Bill Thompson' GROUP BY director ORDER BY COUNT(director) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "What is the most popular movie directed by Ron Clements?",
        "question_ar": "",
        "evidence_en": "Ron Clements refers to director = 'Ron Clements'; the most popular movie refers to movie_title where MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Ron Clements' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS int) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "List all the voice actors in the movie directed by Ben Sharpsteen which was released on February 9, 1940.",
        "question_ar": "",
        "evidence_en": "Ben Sharpsteen refers to director = 'Ben Sharpsteen'; released on February 9, 1940 refers to release_date = 'Feb 9, 1940';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`voice-actor` FROM director AS T1 INNER JOIN `voice-actors` AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.`voice-actor` != 'None' GROUP BY T2.`voice-actor`"
    },
    {
        "db_id": "disney",
        "question_en": "How many PG adventure movies did Ron Clements direct?",
        "question_ar": "",
        "evidence_en": "Ron Clements refers to director = 'Ron Clements'; PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG'; adventure movie refers to genre = 'Adventure';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' AND T2.MPAA_rating = 'PG' AND T2.genre = 'Adventure'"
    },
    {
        "db_id": "disney",
        "question_en": "How many horror movies are there?",
        "question_ar": "",
        "evidence_en": "Horror refers to genre = 'Horror';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM `movies_total_gross` WHERE genre = 'Horror'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the villain in the movie \"The Great Mouse Detective\"?",
        "question_ar": "",
        "evidence_en": "The Great Mouse Detective refers to movie_title = 'The Great Mouse Detective';",
        "evidence_ar": "",
        "SQL": "SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective'"
    },
    {
        "db_id": "disney",
        "question_en": "List the voice actors from the movie \"Meet the Robinsons\".",
        "question_ar": "",
        "evidence_en": "Meet the Robinsons refers to movie_title = 'Meet the Robinsons';",
        "evidence_ar": "",
        "SQL": "SELECT 'voice-actor' FROM `voice-actors` WHERE movie = 'Meet the Robinsons'"
    },
    {
        "db_id": "disney",
        "question_en": "Which director has made the most movies?",
        "question_ar": "",
        "evidence_en": "the most movies refers to MAX(COUNT(name));",
        "evidence_ar": "",
        "SQL": "SELECT director, COUNT(name) FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "From 2000 to 2010, in which year did the studio entertainment segment make the most revenue?",
        "question_ar": "",
        "evidence_en": "From 2000 to 2010 refers to Year between 2000 and 2010; the most revenue refers to MAX(\"Studio Entertainment[NI 1]\");",
        "evidence_ar": "",
        "SQL": "SELECT `Year` FROM revenue WHERE `Year` BETWEEN 2000 AND 2010 ORDER BY `Studio Entertainment[NI 1]` DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "List all the songs associated with drama movies.",
        "question_ar": "",
        "evidence_en": "drama refers to genre = 'Drama';",
        "evidence_ar": "",
        "SQL": "SELECT song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Drama' GROUP BY song"
    },
    {
        "db_id": "disney",
        "question_en": "Who are the voice actors for all the heroes?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.`voice-actor` FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T2.character = T1.hero WHERE T2.movie = T1.movie_title"
    },
    {
        "db_id": "disney",
        "question_en": "Provide a list of directors from the 1990s.",
        "question_ar": "",
        "evidence_en": "the 1990s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2000);",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2000 GROUP BY T2.director"
    },
    {
        "db_id": "disney",
        "question_en": "Who voiced the villain in \"The Rescuers\"?",
        "question_ar": "",
        "evidence_en": "The Rescuers refers to movie_title = 'The Rescuers'; who voiced refers to voice-actor;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian"
    },
    {
        "db_id": "disney",
        "question_en": "List all of Wolfgang Reitherman's movies and their voice actors.",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.`voice-actor` FROM director AS T1 INNER JOIN `voice-actors` AS T2 ON T1.name = T2.movie WHERE T1.director = 'Wolfgang Reitherman'"
    },
    {
        "db_id": "disney",
        "question_en": "What are the characters in the PG movies?",
        "question_ar": "",
        "evidence_en": "PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.character FROM movies_total_gross AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T1.MPAA_rating = 'PG'"
    },
    {
        "db_id": "disney",
        "question_en": "What is the highest grossing movie without a song?",
        "question_ar": "",
        "evidence_en": "the highest grossing movie without song refers to movie_title where MAX(total_gross) and song = 'null';",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song IS NULL ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Who directed the movie with the most voice actors?",
        "question_ar": "",
        "evidence_en": "who directed refers director;",
        "evidence_ar": "",
        "SQL": "SELECT T2.director, COUNT(DISTINCT T1.`voice-actor`) FROM `voice-actors` AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.`voice-actor`) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Who are the voice actors in the movie that came out on 11/24/2010?",
        "question_ar": "",
        "evidence_en": "Came out on 11/24/2010 refers to release_date = 'Nov 24, 2010';",
        "evidence_ar": "",
        "SQL": "SELECT T2.`voice-actor` FROM movies_total_gross AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T1.release_date = 'Nov 24, 2010'"
    },
    {
        "db_id": "disney",
        "question_en": "List the directors of movies that feature a song.",
        "question_ar": "",
        "evidence_en": "movies that feature a song refer to movie_title where song is not NULL;",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song IS NOT NULL GROUP BY T2.director"
    },
    {
        "db_id": "disney",
        "question_en": "What are the total grosses for the movies with Jim Cummings as the voice actor?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM `voice-actors` AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie WHERE T1.`voice-actor` = 'Jim Cummings' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Which of the movies directed by Ron Clements has the highest total gross?",
        "question_ar": "",
        "evidence_en": "Ron Clements refer to director = 'Ron Clements'; the highest total gross refers to MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "What is the average total gross for the movies featuring Sterling Holloway?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(total_gross where voice-actor = 'Sterling Holloway'); COUNT(movie_title where voice-actor = 'Sterling Holloway'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM `voice-actors` AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.`voice-actor` = 'Sterling Holloway'"
    },
    {
        "db_id": "disney",
        "question_en": "What proportion of the total gross of all movies is from movies with songs?",
        "question_ar": "",
        "evidence_en": "Movies with songs refer song = 'not null'; DIVIDE(SUM(total_gross where song = 'not null'), sum(total_gross)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.song IS NOT NULL THEN T2.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T2.movie_title) FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title"
    },
    {
        "db_id": "disney",
        "question_en": "List the movies and genres released in 2016.",
        "question_ar": "",
        "evidence_en": "released in 2016 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '2016'; movies refer to the movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, genre FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '2016'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the villain in Little Mermaid?",
        "question_ar": "",
        "evidence_en": "Little Mermaid refers to movie_title = 'Little Mermaid';",
        "evidence_ar": "",
        "SQL": "SELECT villian FROM characters WHERE movie_title = 'Little Mermaid'"
    },
    {
        "db_id": "disney",
        "question_en": "List the movie titles directed by Jack Kinney.",
        "question_ar": "",
        "evidence_en": "Jack Kinney refers to director = 'Jack Kinney';",
        "evidence_ar": "",
        "SQL": "SELECT name FROM director WHERE director = 'Jack Kinney'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the movie titles and the estimated inflation rate of the highest total grossed movie.",
        "question_ar": "",
        "evidence_en": "The highest grossed movie refers to MAX(total_gross); DIVIDE(inflation_adjusted_gross, total_gross) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) / CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) FROM movies_total_gross ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "List the PG-13 romantic comedy movie titles and their release dates.",
        "question_ar": "",
        "evidence_en": "PG-13 refers to MPAA_rating = 'PG-13'; romantic comedy refers to genre = 'Romantic Comedy';",
        "evidence_ar": "",
        "SQL": "SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy'"
    },
    {
        "db_id": "disney",
        "question_en": "List the movie titles and character names by Bill Thompson.",
        "question_ar": "",
        "evidence_en": "Bill Thompson refers to voice-actor = 'Bill Thompson';",
        "evidence_ar": "",
        "SQL": "SELECT movie, character FROM `voice-actors` WHERE 'voice-actor' = 'Bill Thompson'"
    },
    {
        "db_id": "disney",
        "question_en": "List the movie titles and associated songs directed by Ron Clements.",
        "question_ar": "",
        "evidence_en": "Ron Clements refers director = 'Ron Clements';",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the titles, main characters, and associated songs of the movies directed by Wolfgang Reitherman in 1977.",
        "question_ar": "",
        "evidence_en": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; 1997 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1977'; the titles refer to movie_title; main characters refer to hero;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'"
    },
    {
        "db_id": "disney",
        "question_en": "Which movies had the main character named Donald Duck and who directed them?",
        "question_ar": "",
        "evidence_en": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; movies refer to movie_title; who directed refers director;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.hero = 'Donald Duck'"
    },
    {
        "db_id": "disney",
        "question_en": "Describe the hero, director, and the release date of Mulan.",
        "question_ar": "",
        "evidence_en": "Mulan refers to movie_title = 'Mulan';",
        "evidence_ar": "",
        "SQL": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the title, total gross, and MPAA rating of the movie which has a hero named Elsa.",
        "question_ar": "",
        "evidence_en": "Elsa is the main character of the movie which refers to hero = 'Elsa'; title refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, T1.total_gross, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T3.name = T1.movie_title WHERE T2.hero = 'Elsa'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the title, director, and release date of the movie voice-acted by Freddie Jones.",
        "question_ar": "",
        "evidence_en": "Freddie Jones refers to voice-actor = 'Freddie Jones'; title refers to movie_title;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie, T3.director, T2.release_date FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.`voice-actor` = 'Freddie Jones'"
    },
    {
        "db_id": "disney",
        "question_en": "Among Frank Welker's voice-acted movies, list the movie titles and the total gross when the estimated inflation rate was less than 2.",
        "question_ar": "",
        "evidence_en": "Frank Welker refers to voice-actor = 'Frank Welker'; estimated inflation rate was less than 2 can be computed as follows DIVIDE(inflation_adjusted_gross, total_gross) as percentage < 2;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title, T1.total_gross FROM movies_total_gross AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Frank Welker' AND CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) * 1.0 / CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) * 1.0 < 2"
    },
    {
        "db_id": "disney",
        "question_en": "Who directed the most popular movie?",
        "question_ar": "",
        "evidence_en": "The most popular movie refers MAX(total_gross); who directed refers to director;",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Describe the voice actors and villains in Cinderella.",
        "question_ar": "",
        "evidence_en": "Cinderella refers to movie_title = ' Cinderella';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`voice-actor`, T2.villian FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Cinderella'"
    },
    {
        "db_id": "disney",
        "question_en": "Who is the voice actor of the hero in Lion King?",
        "question_ar": "",
        "evidence_en": "Lion King refers to movie_title = 'Lion King';",
        "evidence_ar": "",
        "SQL": "SELECT T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Lion King' AND T1.character = 'Lion King'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the directors and MPAA ratings of the musical movies released in 1993.",
        "question_ar": "",
        "evidence_en": "Musical movies refer to genre = 'Musical'; released in 1993 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1993';",
        "evidence_ar": "",
        "SQL": "SELECT T2.director, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.genre = 'Musical' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1993'"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies released from 1991 to 2000, calculate the percentage of comedy movies. Provide any five movie titles and directors.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(movie_title where genre = 'Comedy'), COUNT(movie_title)) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) between '1991' and '2000';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Comedy' THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title), group_concat(T1.movie_title), group_concat(T2.director) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '1991' AND '2000'"
    },
    {
        "db_id": "disney",
        "question_en": "Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average.",
        "question_ar": "",
        "evidence_en": "Released from 2001 to 2005 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '2001' and '2005'; DIVIDE(SUM(total_gross), COUNT(movie_title));",
        "evidence_ar": "",
        "SQL": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1"
    },
    {
        "db_id": "disney",
        "question_en": "Name the voice actor of the character Calliope in the movie Hercules.",
        "question_ar": "",
        "evidence_en": "Hercules refers to movie = 'Hercules';",
        "evidence_ar": "",
        "SQL": "SELECT `voice-actor` FROM `voice-actors` WHERE movie = 'Hercules' AND character = 'Calliope'"
    },
    {
        "db_id": "disney",
        "question_en": "How many voice actors for the movie Aladdin?",
        "question_ar": "",
        "evidence_en": "Aladdin is the name of the movie which refers to movie = 'Aladdin';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT('voice-actor') FROM `voice-actors` WHERE movie = 'Aladdin'"
    },
    {
        "db_id": "disney",
        "question_en": "List the movie titles with the voice actor Jeff Bennet",
        "question_ar": "",
        "evidence_en": "Jeff Bennett refers to voice-actor = 'Jeff Bennett';",
        "evidence_ar": "",
        "SQL": "SELECT movie FROM `voice-actors` WHERE 'voice-actor' = 'Jeff Bennett'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the director's name of Wreck-It Ralph movie.",
        "question_ar": "",
        "evidence_en": "Wreck-It Ralph is the name of the movies which refers to name = 'Wreck-It Ralph';",
        "evidence_ar": "",
        "SQL": "SELECT director FROM director WHERE name = 'Wreck-It Ralph'"
    },
    {
        "db_id": "disney",
        "question_en": "What movies did director Jack Kinney direct?",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM director WHERE director = 'Jack Kinney'"
    },
    {
        "db_id": "disney",
        "question_en": "How many movies were released between 1937 and 1950?",
        "question_ar": "",
        "evidence_en": "released between 1937 and 1950 refers to substr(release_date, length(release_date) - 1,length(release_date)) between '37' and '50';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '37' AND '50'"
    },
    {
        "db_id": "disney",
        "question_en": "Provide the name of the song from the movie directed by Ben Sharpsteen.",
        "question_ar": "",
        "evidence_en": "Ben Sharpsteen refers to director = 'Ben Sharpsteen';",
        "evidence_ar": "",
        "SQL": "SELECT T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ben Sharpsteen'"
    },
    {
        "db_id": "disney",
        "question_en": "Indicate the release date of the film The Lion King directed by Roger Allers.",
        "question_ar": "",
        "evidence_en": "The Lion King refers to movie_title = 'The Lion King'; Roger Allers refers to director = 'Roger Allers';",
        "evidence_ar": "",
        "SQL": "SELECT T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Roger Allers' AND T1.movie_title = 'The Lion King'"
    },
    {
        "db_id": "disney",
        "question_en": "Name the villain of the movie with Scott Weinger and Brad Kane as voice actors.",
        "question_ar": "",
        "evidence_en": "FALSE;",
        "evidence_ar": "",
        "SQL": "SELECT T1.villian FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Scott Weinger Brad Kane'"
    },
    {
        "db_id": "disney",
        "question_en": "Which movies of director Wolfgang Reitherman do not have villain?",
        "question_ar": "",
        "evidence_en": "which movies do not have villain refer to movie_title where villian is null;",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL"
    },
    {
        "db_id": "disney",
        "question_en": "List the titles of movies directed by Jack Kinney that were released before 1947.",
        "question_ar": "",
        "evidence_en": "Jack Kinney refers to director = 'Jack Kinney'; released before 1947 refers to substr(release_date, length(release_date) - 1, length(release_date)) < '47';",
        "evidence_ar": "",
        "SQL": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Jack Kinney' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 1, LENGTH(T1.release_date)) < '47'"
    },
    {
        "db_id": "disney",
        "question_en": "List the names of the directors whose films grossed over $100 million.",
        "question_ar": "",
        "evidence_en": "films grossed over $100 million refer to movie_title where total_gross > 100000000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T1.movie_title = T3.movie_title WHERE CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) > 100000000"
    },
    {
        "db_id": "disney",
        "question_en": "Which movie's song title has the highest total gross?",
        "question_ar": "",
        "evidence_en": "The highest total gross refers to MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "Which director had the most popular film from 1937 to 1990?",
        "question_ar": "",
        "evidence_en": "from 1937 to 1990 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '1937' and '1990'; the most popular film refers to movie_title where MAX(total_gross);",
        "evidence_ar": "",
        "SQL": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T3.movie_title = T1.movie_title WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '1937' AND '1990' ORDER BY CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "db_id": "disney",
        "question_en": "List all the main characters of the movie that are comedy genre.",
        "question_ar": "",
        "evidence_en": "Comedy refers to genre = 'Comedy'; the main character of the movie refers to hero;",
        "evidence_ar": "",
        "SQL": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Comedy'"
    }
]