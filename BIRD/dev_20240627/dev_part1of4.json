[
    {
        "question_id": 0,
        "db_id": "california_schools",
        "question_en": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "question_ar": "",
        "evidence_en": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "evidence_ar": "",
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1,
        "db_id": "california_schools",
        "question_en": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "question_ar": "",
        "evidence_en": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question_id": 2,
        "db_id": "california_schools",
        "question_en": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
        "question_ar": "",
        "evidence_en": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
        "evidence_ar": "",
        "SQL": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 3,
        "db_id": "california_schools",
        "question_en": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 4,
        "db_id": "california_schools",
        "question_en": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
        "question_ar": "",
        "evidence_en": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
        "difficulty": "moderate"
    },
    {
        "question_id": 5,
        "db_id": "california_schools",
        "question_en": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
        "question_ar": "",
        "evidence_en": "Exclusively virtual refers to Virtual = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
        "difficulty": "simple"
    },
    {
        "question_id": 6,
        "db_id": "california_schools",
        "question_en": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
        "question_ar": "",
        "evidence_en": "Magnet schools or offer a magnet program means that Magnet = 1",
        "evidence_ar": "",
        "SQL": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
        "difficulty": "simple"
    },
    {
        "question_id": 7,
        "db_id": "california_schools",
        "question_en": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 8,
        "db_id": "california_schools",
        "question_en": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 9,
        "db_id": "california_schools",
        "question_en": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
        "difficulty": "simple"
    },
    {
        "question_id": 10,
        "db_id": "california_schools",
        "question_en": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 11,
        "db_id": "california_schools",
        "question_en": "Please list the codes of the schools with a total enrollment of over 500.",
        "question_ar": "",
        "evidence_en": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
        "difficulty": "simple"
    },
    {
        "question_id": 12,
        "db_id": "california_schools",
        "question_en": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "question_ar": "",
        "evidence_en": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "difficulty": "moderate"
    },
    {
        "question_id": 13,
        "db_id": "california_schools",
        "question_en": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
        "question_ar": "",
        "evidence_en": "Excellence rate = NumGE1500 / NumTstTakr",
        "evidence_ar": "",
        "SQL": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 14,
        "db_id": "california_schools",
        "question_en": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 15,
        "db_id": "california_schools",
        "question_en": "Which active district has the highest average score in Reading?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 16,
        "db_id": "california_schools",
        "question_en": "How many schools in merged Alameda have number of test takers less than 100?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
        "difficulty": "simple"
    },
    {
        "question_id": 17,
        "db_id": "california_schools",
        "question_en": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "question_ar": "",
        "evidence_en": "Valid charter number means the number is not null",
        "evidence_ar": "",
        "SQL": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "difficulty": "simple"
    },
    {
        "question_id": 18,
        "db_id": "california_schools",
        "question_en": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
        "difficulty": "simple"
    },
    {
        "question_id": 19,
        "db_id": "california_schools",
        "question_en": "What is the phone number of the school that has the highest average score in Math?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 20,
        "db_id": "california_schools",
        "question_en": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
        "difficulty": "simple"
    },
    {
        "question_id": 21,
        "db_id": "california_schools",
        "question_en": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
        "difficulty": "simple"
    },
    {
        "question_id": 22,
        "db_id": "california_schools",
        "question_en": "Which school in Contra Costa has the highest number of test takers?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 23,
        "db_id": "california_schools",
        "question_en": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "question_ar": "",
        "evidence_en": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
        "difficulty": "moderate"
    },
    {
        "question_id": 24,
        "db_id": "california_schools",
        "question_en": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
        "question_ar": "",
        "evidence_en": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 25,
        "db_id": "california_schools",
        "question_en": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "question_ar": "",
        "evidence_en": "Average of average math = sum(average math scores) / count(schools).",
        "evidence_ar": "",
        "SQL": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "difficulty": "moderate"
    },
    {
        "question_id": 26,
        "db_id": "california_schools",
        "question_en": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "question_ar": "",
        "evidence_en": "Full communication address should include Street, City, State and zip code if any.",
        "evidence_ar": "",
        "SQL": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "difficulty": "moderate"
    },
    {
        "question_id": 27,
        "db_id": "california_schools",
        "question_en": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "question_ar": "",
        "evidence_en": "Communication number refers to phone number.",
        "evidence_ar": "",
        "SQL": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question_id": 28,
        "db_id": "california_schools",
        "question_en": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "question_ar": "",
        "evidence_en": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "difficulty": "challenging"
    },
    {
        "question_id": 29,
        "db_id": "california_schools",
        "question_en": "When did the first-through-twelfth-grade school with the largest enrollment open?",
        "question_ar": "",
        "evidence_en": "K-12 means First-through-twelfth-grade",
        "evidence_ar": "",
        "SQL": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 30,
        "db_id": "california_schools",
        "question_en": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
        "question_ar": "",
        "evidence_en": "K-12 refers to students in grades 1 through 12.",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 31,
        "db_id": "california_schools",
        "question_en": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
        "question_ar": "",
        "evidence_en": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "evidence_ar": "",
        "SQL": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
        "difficulty": "moderate"
    },
    {
        "question_id": 32,
        "db_id": "california_schools",
        "question_en": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "question_ar": "",
        "evidence_en": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 33,
        "db_id": "california_schools",
        "question_en": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 34,
        "db_id": "california_schools",
        "question_en": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
        "question_ar": "",
        "evidence_en": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "evidence_ar": "",
        "SQL": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
        "difficulty": "moderate"
    },
    {
        "question_id": 35,
        "db_id": "california_schools",
        "question_en": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
        "question_ar": "",
        "evidence_en": "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`",
        "evidence_ar": "",
        "SQL": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 36,
        "db_id": "california_schools",
        "question_en": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
        "question_ar": "",
        "evidence_en": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
        "evidence_ar": "",
        "SQL": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 37,
        "db_id": "california_schools",
        "question_en": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "question_ar": "",
        "evidence_en": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
        "evidence_ar": "",
        "SQL": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 38,
        "db_id": "california_schools",
        "question_en": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
        "difficulty": "simple"
    },
    {
        "question_id": 39,
        "db_id": "california_schools",
        "question_en": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
        "question_ar": "",
        "evidence_en": "between 1/1/1980 and 12/31/1980 means the year = 1980",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
        "difficulty": "simple"
    },
    {
        "question_id": 40,
        "db_id": "california_schools",
        "question_en": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "question_ar": "",
        "evidence_en": "Fresno Unified is a name of district;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 41,
        "db_id": "california_schools",
        "question_en": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "question_ar": "",
        "evidence_en": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
        "evidence_ar": "",
        "SQL": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "difficulty": "simple"
    },
    {
        "question_id": 42,
        "db_id": "california_schools",
        "question_en": "What is the type of education offered in the school who scored the highest average in Math?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 43,
        "db_id": "california_schools",
        "question_en": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
        "question_ar": "",
        "evidence_en": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite",
        "evidence_ar": "",
        "SQL": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 44,
        "db_id": "california_schools",
        "question_en": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 45,
        "db_id": "california_schools",
        "question_en": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "question_ar": "",
        "evidence_en": "Usually, administrators manage the school stuff.",
        "evidence_ar": "",
        "SQL": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "difficulty": "moderate"
    },
    {
        "question_id": 46,
        "db_id": "california_schools",
        "question_en": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "question_ar": "",
        "evidence_en": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
        "evidence_ar": "",
        "SQL": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 47,
        "db_id": "california_schools",
        "question_en": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "question_ar": "",
        "evidence_en": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "difficulty": "moderate"
    },
    {
        "question_id": 48,
        "db_id": "california_schools",
        "question_en": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "question_ar": "",
        "evidence_en": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "difficulty": "moderate"
    },
    {
        "question_id": 49,
        "db_id": "california_schools",
        "question_en": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "question_ar": "",
        "evidence_en": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 50,
        "db_id": "california_schools",
        "question_en": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
        "question_ar": "",
        "evidence_en": "Postal street and mailing street are synonyms.",
        "evidence_ar": "",
        "SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
        "difficulty": "simple"
    },
    {
        "question_id": 51,
        "db_id": "california_schools",
        "question_en": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 52,
        "db_id": "california_schools",
        "question_en": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
        "question_ar": "",
        "evidence_en": "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
        "difficulty": "simple"
    },
    {
        "question_id": 53,
        "db_id": "california_schools",
        "question_en": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
        "difficulty": "simple"
    },
    {
        "question_id": 54,
        "db_id": "california_schools",
        "question_en": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "difficulty": "simple"
    },
    {
        "question_id": 55,
        "db_id": "california_schools",
        "question_en": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
        "question_ar": "",
        "evidence_en": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "difficulty": "moderate"
    },
    {
        "question_id": 56,
        "db_id": "california_schools",
        "question_en": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
        "difficulty": "simple"
    },
    {
        "question_id": 57,
        "db_id": "california_schools",
        "question_en": "What is the phone number and extension number for the school that had the 333rd highest average writing score?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1",
        "difficulty": "simple"
    },
    {
        "question_id": 58,
        "db_id": "california_schools",
        "question_en": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "difficulty": "simple"
    },
    {
        "question_id": 59,
        "db_id": "california_schools",
        "question_en": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "difficulty": "simple"
    },
    {
        "question_id": 60,
        "db_id": "california_schools",
        "question_en": "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
        "question_ar": "",
        "evidence_en": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools",
        "evidence_ar": "",
        "SQL": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 61,
        "db_id": "california_schools",
        "question_en": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
        "question_ar": "",
        "evidence_en": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
        "difficulty": "simple"
    },
    {
        "question_id": 62,
        "db_id": "california_schools",
        "question_en": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
        "question_ar": "",
        "evidence_en": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "difficulty": "challenging"
    },
    {
        "question_id": 63,
        "db_id": "california_schools",
        "question_en": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
        "question_ar": "",
        "evidence_en": "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name",
        "evidence_ar": "",
        "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
        "difficulty": "simple"
    },
    {
        "question_id": 64,
        "db_id": "california_schools",
        "question_en": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
        "difficulty": "simple"
    },
    {
        "question_id": 65,
        "db_id": "california_schools",
        "question_en": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
        "question_ar": "",
        "evidence_en": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 66,
        "db_id": "california_schools",
        "question_en": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
        "question_ar": "",
        "evidence_en": "Directly funded schools refers to FundingType = 'Directly Funded'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
        "difficulty": "simple"
    },
    {
        "question_id": 67,
        "db_id": "california_schools",
        "question_en": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
        "difficulty": "simple"
    },
    {
        "question_id": 68,
        "db_id": "california_schools",
        "question_en": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?",
        "question_ar": "",
        "evidence_en": "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989",
        "evidence_ar": "",
        "SQL": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 69,
        "db_id": "california_schools",
        "question_en": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
        "question_ar": "",
        "evidence_en": "State Special Schools means that SOC = 31.",
        "evidence_ar": "",
        "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31",
        "difficulty": "simple"
    },
    {
        "question_id": 70,
        "db_id": "california_schools",
        "question_en": "How many active and closed District Community Day Schools are there in the county of Alpine?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
        "difficulty": "simple"
    },
    {
        "question_id": 71,
        "db_id": "california_schools",
        "question_en": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
        "question_ar": "",
        "evidence_en": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.",
        "evidence_ar": "",
        "SQL": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 72,
        "db_id": "california_schools",
        "question_en": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
        "question_ar": "",
        "evidence_en": "State Special School means EdOpsCode = 'SSS'",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
        "difficulty": "moderate"
    },
    {
        "question_id": 73,
        "db_id": "california_schools",
        "question_en": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
        "difficulty": "simple"
    },
    {
        "question_id": 74,
        "db_id": "california_schools",
        "question_en": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?",
        "question_ar": "",
        "evidence_en": "District Special Education Consortia School refers to EdOpsCode = 'SPECON'.",
        "evidence_ar": "",
        "SQL": "SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'",
        "difficulty": "moderate"
    },
    {
        "question_id": 75,
        "db_id": "california_schools",
        "question_en": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
        "difficulty": "simple"
    },
    {
        "question_id": 76,
        "db_id": "california_schools",
        "question_en": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
        "question_ar": "",
        "evidence_en": "High school can be represented as EILCode = 'HS'",
        "evidence_ar": "",
        "SQL": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'",
        "difficulty": "moderate"
    },
    {
        "question_id": 77,
        "db_id": "california_schools",
        "question_en": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
        "question_ar": "",
        "evidence_en": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
        "evidence_ar": "",
        "SQL": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "difficulty": "moderate"
    },
    {
        "question_id": 78,
        "db_id": "california_schools",
        "question_en": "What is the most common type of grade span served in the city of Adelanto?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 79,
        "db_id": "california_schools",
        "question_en": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
        "question_ar": "",
        "evidence_en": "'Does not offer physical building' means Virtual = F in the database.",
        "evidence_ar": "",
        "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 80,
        "db_id": "california_schools",
        "question_en": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 81,
        "db_id": "california_schools",
        "question_en": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
        "question_ar": "",
        "evidence_en": "State of California refers to state = 'CA'",
        "evidence_ar": "",
        "SQL": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 82,
        "db_id": "california_schools",
        "question_en": "What is the grade span offered in the school with the highest longitude?",
        "question_ar": "",
        "evidence_en": "the highest longitude refers to the school with the maximum absolute longitude value.",
        "evidence_ar": "",
        "SQL": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 83,
        "db_id": "california_schools",
        "question_en": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "question_ar": "",
        "evidence_en": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "evidence_ar": "",
        "SQL": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "difficulty": "challenging"
    },
    {
        "question_id": 84,
        "db_id": "california_schools",
        "question_en": "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1",
        "difficulty": "simple"
    },
    {
        "question_id": 85,
        "db_id": "california_schools",
        "question_en": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "question_ar": "",
        "evidence_en": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "difficulty": "moderate"
    },
    {
        "question_id": 86,
        "db_id": "california_schools",
        "question_en": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "difficulty": "simple"
    },
    {
        "question_id": 87,
        "db_id": "california_schools",
        "question_en": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
        "question_ar": "",
        "evidence_en": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
        "evidence_ar": "",
        "SQL": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
        "difficulty": "challenging"
    },
    {
        "question_id": 88,
        "db_id": "california_schools",
        "question_en": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 89,
        "db_id": "financial",
        "question_en": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "question_ar": "",
        "evidence_en": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 90,
        "db_id": "financial",
        "question_en": "How many accounts who have region in Prague are eligible for loans?",
        "question_ar": "",
        "evidence_en": "A3 contains the data of region",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "difficulty": "simple"
    },
    {
        "question_id": 91,
        "db_id": "financial",
        "question_en": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "question_ar": "",
        "evidence_en": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "difficulty": "simple"
    },
    {
        "question_id": 92,
        "db_id": "financial",
        "question_en": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "question_ar": "",
        "evidence_en": "A11 refers to average salary; Female mapps to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "difficulty": "simple"
    },
    {
        "question_id": 93,
        "db_id": "financial",
        "question_en": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "question_ar": "",
        "evidence_en": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate"
    },
    {
        "question_id": 94,
        "db_id": "financial",
        "question_en": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "question_ar": "",
        "evidence_en": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 95,
        "db_id": "financial",
        "question_en": "List out the account numbers of clients who are youngest and have highest average salary?",
        "question_ar": "",
        "evidence_en": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 96,
        "db_id": "financial",
        "question_en": "How many customers who choose statement of weekly issuance are Owner?",
        "question_ar": "",
        "evidence_en": "'POPLATEK TYDNE' stands for weekly issuance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 97,
        "db_id": "financial",
        "question_en": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "question_ar": "",
        "evidence_en": "'POPLATEK PO OBRATU' stands for issuance after transaction",
        "evidence_ar": "",
        "SQL": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "difficulty": "simple"
    },
    {
        "question_id": 98,
        "db_id": "financial",
        "question_en": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "question_ar": "",
        "evidence_en": "'POPLATEK TYDNE' stands for weekly issuance",
        "evidence_ar": "",
        "SQL": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 99,
        "db_id": "financial",
        "question_en": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "question_ar": "",
        "evidence_en": "Loan validity more than 12 months refers to duration > 12",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 100,
        "db_id": "financial",
        "question_en": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "question_ar": "",
        "evidence_en": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "difficulty": "moderate"
    },
    {
        "question_id": 101,
        "db_id": "financial",
        "question_en": "List out the accounts who have the earliest trading date in 1995 ?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 102,
        "db_id": "financial",
        "question_en": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
        "difficulty": "simple"
    },
    {
        "question_id": 103,
        "db_id": "financial",
        "question_en": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "difficulty": "simple"
    },
    {
        "question_id": 104,
        "db_id": "financial",
        "question_en": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "difficulty": "simple"
    },
    {
        "question_id": 105,
        "db_id": "financial",
        "question_en": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "difficulty": "simple"
    },
    {
        "question_id": 106,
        "db_id": "financial",
        "question_en": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 107,
        "db_id": "financial",
        "question_en": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
        "question_ar": "",
        "evidence_en": "Earlier birthdate refers to older age; A11 refers to average salary",
        "evidence_ar": "",
        "SQL": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 108,
        "db_id": "financial",
        "question_en": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 109,
        "db_id": "financial",
        "question_en": "How many clients opened their accounts in Jesenik branch were women?",
        "question_ar": "",
        "evidence_en": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question_id": 110,
        "db_id": "financial",
        "question_en": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "difficulty": "simple"
    },
    {
        "question_id": 111,
        "db_id": "financial",
        "question_en": "How many accounts were opened in Litomerice in 1996?",
        "question_ar": "",
        "evidence_en": "A2 refers to district name; Litomerice is one of district names.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "difficulty": "simple"
    },
    {
        "question_id": 112,
        "db_id": "financial",
        "question_en": "For the female client who was born in 1976/1/29, which district did she opened her account?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'; A2 refers to district names",
        "evidence_ar": "",
        "SQL": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 113,
        "db_id": "financial",
        "question_en": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "difficulty": "simple"
    },
    {
        "question_id": 114,
        "db_id": "financial",
        "question_en": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "question_ar": "",
        "evidence_en": "A3 stands for region names",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 115,
        "db_id": "financial",
        "question_en": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "question_ar": "",
        "evidence_en": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 116,
        "db_id": "financial",
        "question_en": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "question_ar": "",
        "evidence_en": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "question_en": "What is the percentage of loan amount that has been fully paid with no issue.",
        "question_ar": "",
        "evidence_en": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "difficulty": "moderate"
    },
    {
        "question_id": 118,
        "db_id": "financial",
        "question_en": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "question_ar": "",
        "evidence_en": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "difficulty": "moderate"
    },
    {
        "question_id": 119,
        "db_id": "financial",
        "question_en": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "question_ar": "",
        "evidence_en": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
        "difficulty": "moderate"
    },
    {
        "question_id": 120,
        "db_id": "financial",
        "question_en": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "question_ar": "",
        "evidence_en": "Accounts holder refers to the person who own this account.",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "difficulty": "moderate"
    },
    {
        "question_id": 121,
        "db_id": "financial",
        "question_en": "List account ID and account opening date for accounts from 'Prachatice'.",
        "question_ar": "",
        "evidence_en": "A2 refers to the names of districts.",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "difficulty": "simple"
    },
    {
        "question_id": 122,
        "db_id": "financial",
        "question_en": "State the district and region for loan ID '4990'.",
        "question_ar": "",
        "evidence_en": "A2, A3 contains the information about district and region respectively.",
        "evidence_ar": "",
        "SQL": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "difficulty": "simple"
    },
    {
        "question_id": 123,
        "db_id": "financial",
        "question_en": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "question_ar": "",
        "evidence_en": "A2 contains district names and A3 contains region names.",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "difficulty": "simple"
    },
    {
        "question_id": 124,
        "db_id": "financial",
        "question_en": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "question_ar": "",
        "evidence_en": "A3 refers to regions; A11 refers to average salary",
        "evidence_ar": "",
        "SQL": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "difficulty": "simple"
    },
    {
        "question_id": 125,
        "db_id": "financial",
        "question_en": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "question_ar": "",
        "evidence_en": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "evidence_ar": "",
        "SQL": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging"
    },
    {
        "question_id": 126,
        "db_id": "financial",
        "question_en": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "question_ar": "",
        "evidence_en": "A2 contains the information about district.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
        "difficulty": "simple"
    },
    {
        "question_id": 127,
        "db_id": "financial",
        "question_en": "List the account IDs with monthly issuance of statements.",
        "question_ar": "",
        "evidence_en": "'POPLATEK MESICNE' stands for monthly issuance",
        "evidence_ar": "",
        "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 128,
        "db_id": "financial",
        "question_en": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "question_ar": "",
        "evidence_en": "A2 refers to districts; Female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "difficulty": "moderate"
    },
    {
        "question_id": 129,
        "db_id": "financial",
        "question_en": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "question_ar": "",
        "evidence_en": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 130,
        "db_id": "financial",
        "question_en": "How many of the account holders in South Bohemia still do not own credit cards?",
        "question_ar": "",
        "evidence_en": "A3 contains the region names; South Bohemia is one of region names.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question_id": 131,
        "db_id": "financial",
        "question_en": "Which district has highest active loan?",
        "question_ar": "",
        "evidence_en": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "evidence_ar": "",
        "SQL": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 132,
        "db_id": "financial",
        "question_en": "What is the average loan amount by male borrowers?",
        "question_ar": "",
        "evidence_en": "Male refers to gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 133,
        "db_id": "financial",
        "question_en": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "question_ar": "",
        "evidence_en": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "evidence_ar": "",
        "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 134,
        "db_id": "financial",
        "question_en": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "question_ar": "",
        "evidence_en": "A16 stands for no. of committed crimes 1996",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 135,
        "db_id": "financial",
        "question_en": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "question_ar": "",
        "evidence_en": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 136,
        "db_id": "financial",
        "question_en": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "question_ar": "",
        "evidence_en": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "difficulty": "moderate"
    },
    {
        "question_id": 137,
        "db_id": "financial",
        "question_en": "How many accounts have running contracts in Branch location 1?",
        "question_ar": "",
        "evidence_en": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "difficulty": "moderate"
    },
    {
        "question_id": 138,
        "db_id": "financial",
        "question_en": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "question_ar": "",
        "evidence_en": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "difficulty": "moderate"
    },
    {
        "question_id": 139,
        "db_id": "financial",
        "question_en": "How many high-level credit cards have \"OWNER\" type of disposition?",
        "question_ar": "",
        "evidence_en": "High-level credit cards refers to the cards with the gold type.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "difficulty": "simple"
    },
    {
        "question_id": 140,
        "db_id": "financial",
        "question_en": "How many accounts are there in the district of \"Pisek\"?",
        "question_ar": "",
        "evidence_en": "A2 refers to district name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question_id": 141,
        "db_id": "financial",
        "question_en": "Which districts have transactions greater than USS$10,000 in 1997?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "difficulty": "simple"
    },
    {
        "question_id": 142,
        "db_id": "financial",
        "question_en": "Which accounts placed orders for household payment in Pisek?",
        "question_ar": "",
        "evidence_en": "k_symbol = 'SIPO' refers to household payment",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question_id": 143,
        "db_id": "financial",
        "question_en": "What are the accounts that have gold credit cards?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "difficulty": "simple"
    },
    {
        "question_id": 144,
        "db_id": "financial",
        "question_en": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
        "question_ar": "",
        "evidence_en": "Operation = 'VYBER KARTOU' refers to credit card withdrawn",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 145,
        "db_id": "financial",
        "question_en": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
        "question_ar": "",
        "evidence_en": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "difficulty": "moderate"
    },
    {
        "question_id": 146,
        "db_id": "financial",
        "question_en": "Who are the female account holders who own credit cards and also have loans?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 147,
        "db_id": "financial",
        "question_en": "How many female clients' accounts are in the region of South Bohemia?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 148,
        "db_id": "financial",
        "question_en": "Please list the accounts whose district is Tabor that are eligible for loans.",
        "question_ar": "",
        "evidence_en": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "evidence_ar": "",
        "SQL": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "difficulty": "moderate"
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "question_en": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
        "question_ar": "",
        "evidence_en": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
        "evidence_ar": "",
        "SQL": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
        "difficulty": "challenging"
    },
    {
        "question_id": 150,
        "db_id": "financial",
        "question_en": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
        "question_ar": "",
        "evidence_en": "A3 contains the region names; North Bohemia is a region.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
        "difficulty": "moderate"
    },
    {
        "question_id": 151,
        "db_id": "financial",
        "question_en": "Please list the name of the districts with accounts that made withdrawal transactions.",
        "question_ar": "",
        "evidence_en": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
        "difficulty": "moderate"
    },
    {
        "question_id": 152,
        "db_id": "financial",
        "question_en": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
        "question_ar": "",
        "evidence_en": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
        "difficulty": "moderate"
    },
    {
        "question_id": 153,
        "db_id": "financial",
        "question_en": "How many 'classic' cards are eligible for loan?",
        "question_ar": "",
        "evidence_en": "when the account type = 'OWNER', it's eligible for loan",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
        "difficulty": "simple"
    },
    {
        "question_id": 154,
        "db_id": "financial",
        "question_en": "How many male clients in 'Hl.m. Praha' district?",
        "question_ar": "",
        "evidence_en": "District data appears in the A2; Male means that gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "difficulty": "simple"
    },
    {
        "question_id": 155,
        "db_id": "financial",
        "question_en": "How many percent of 'Gold' cards were issued prior to 1998?",
        "question_ar": "",
        "evidence_en": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
        "difficulty": "simple"
    },
    {
        "question_id": 156,
        "db_id": "financial",
        "question_en": "Who is the owner of the account with the largest loan amount?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 157,
        "db_id": "financial",
        "question_en": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
        "question_ar": "",
        "evidence_en": "A15 contains information about number of committed crimes in 1995",
        "evidence_ar": "",
        "SQL": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "difficulty": "simple"
    },
    {
        "question_id": 158,
        "db_id": "financial",
        "question_en": "What is the district Id of the account that placed the order with the id 33333?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "difficulty": "simple"
    },
    {
        "question_id": 159,
        "db_id": "financial",
        "question_en": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "question_ar": "",
        "evidence_en": "operation = 'VYBER' refers to withdrawal in cash",
        "evidence_ar": "",
        "SQL": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "difficulty": "simple"
    },
    {
        "question_id": 160,
        "db_id": "financial",
        "question_en": "Among the weekly issuance accounts, how many have a loan of under 200000?",
        "question_ar": "",
        "evidence_en": "frequency = 'POPLATEK TYDNE' stands for weekly issuance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
        "difficulty": "simple"
    },
    {
        "question_id": 161,
        "db_id": "financial",
        "question_en": "What type of credit card does the client with the id 13539 own?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
        "difficulty": "simple"
    },
    {
        "question_id": 162,
        "db_id": "financial",
        "question_en": "What is the region of the client with the id 3541 from?",
        "question_ar": "",
        "evidence_en": "A3 refers to region",
        "evidence_ar": "",
        "SQL": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
        "difficulty": "simple"
    },
    {
        "question_id": 163,
        "db_id": "financial",
        "question_en": "Which district has the most accounts with loan contracts finished with no problems?",
        "question_ar": "",
        "evidence_en": "status = 'A' refers to loan contracts finished with no problems",
        "evidence_ar": "",
        "SQL": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 164,
        "db_id": "financial",
        "question_en": "Who placed the order with the id 32423?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423",
        "difficulty": "simple"
    },
    {
        "question_id": 165,
        "db_id": "financial",
        "question_en": "Please list all the transactions made by accounts from district 5.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 166,
        "db_id": "financial",
        "question_en": "How many of the accounts are from Jesenik district?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question_id": 167,
        "db_id": "financial",
        "question_en": "List all the clients' IDs whose junior credit cards were issued after 1996.",
        "question_ar": "",
        "evidence_en": "After 1996 means date > = '1997-01-01",
        "evidence_ar": "",
        "SQL": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 168,
        "db_id": "financial",
        "question_en": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "difficulty": "moderate"
    },
    {
        "question_id": 169,
        "db_id": "financial",
        "question_en": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "question_ar": "",
        "evidence_en": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question_id": 170,
        "db_id": "financial",
        "question_en": "How many credit card withdrawals were recorded after 1995?",
        "question_ar": "",
        "evidence_en": "Operation = 'VYBER KARTOU' means credit card withdrawals",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
        "difficulty": "simple"
    },
    {
        "question_id": 171,
        "db_id": "financial",
        "question_en": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
        "question_ar": "",
        "evidence_en": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
        "difficulty": "moderate"
    },
    {
        "question_id": 172,
        "db_id": "financial",
        "question_en": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "difficulty": "simple"
    },
    {
        "question_id": 173,
        "db_id": "financial",
        "question_en": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "question_ar": "",
        "evidence_en": "k_symbol refers to the purpose of payments",
        "evidence_ar": "",
        "SQL": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "difficulty": "challenging"
    },
    {
        "question_id": 174,
        "db_id": "financial",
        "question_en": "What year was account owner number 130 born?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "difficulty": "simple"
    },
    {
        "question_id": 175,
        "db_id": "financial",
        "question_en": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
        "question_ar": "",
        "evidence_en": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 176,
        "db_id": "financial",
        "question_en": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
        "difficulty": "simple"
    },
    {
        "question_id": 177,
        "db_id": "financial",
        "question_en": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
        "difficulty": "simple"
    },
    {
        "question_id": 178,
        "db_id": "financial",
        "question_en": "Which kind of credit card does client number 9 possess?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
        "difficulty": "simple"
    },
    {
        "question_id": 179,
        "db_id": "financial",
        "question_en": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
        "difficulty": "simple"
    },
    {
        "question_id": 180,
        "db_id": "financial",
        "question_en": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "difficulty": "moderate"
    },
    {
        "question_id": 181,
        "db_id": "financial",
        "question_en": "Please provide the IDs of the 3 female clients with the largest loans.",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 182,
        "db_id": "financial",
        "question_en": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "question_ar": "",
        "evidence_en": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "difficulty": "moderate"
    },
    {
        "question_id": 183,
        "db_id": "financial",
        "question_en": "How many accounts in Beroun were opened after 1996?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "difficulty": "simple"
    },
    {
        "question_id": 184,
        "db_id": "financial",
        "question_en": "How many female customers have a junior credit card?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
        "difficulty": "simple"
    },
    {
        "question_id": 185,
        "db_id": "financial",
        "question_en": "What proportion of customers who have accounts at the Prague branch are female?",
        "question_ar": "",
        "evidence_en": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "difficulty": "moderate"
    },
    {
        "question_id": 186,
        "db_id": "financial",
        "question_en": "What percentage of male clients request for weekly statements to be issued?",
        "question_ar": "",
        "evidence_en": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 187,
        "db_id": "financial",
        "question_en": "How many clients who choose statement of weekly issuance are Owner?",
        "question_ar": "",
        "evidence_en": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
        "difficulty": "simple"
    },
    {
        "question_id": 188,
        "db_id": "financial",
        "question_en": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 189,
        "db_id": "financial",
        "question_en": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "question_ar": "",
        "evidence_en": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "evidence_ar": "",
        "SQL": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 190,
        "db_id": "financial",
        "question_en": "How many clients who were born in 1920 stay in east Bohemia?",
        "question_ar": "",
        "evidence_en": "East Bohemia appears in the column A3, which refers to the region.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 191,
        "db_id": "financial",
        "question_en": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "question_ar": "",
        "evidence_en": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 192,
        "db_id": "financial",
        "question_en": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "question_ar": "",
        "evidence_en": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 193,
        "db_id": "financial",
        "question_en": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
        "question_ar": "",
        "evidence_en": "Only the owner accounts have the right to issue permanent orders or apply for loans",
        "evidence_ar": "",
        "SQL": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question_id": 194,
        "db_id": "financial",
        "question_en": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "question_ar": "",
        "evidence_en": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
        "evidence_ar": "",
        "SQL": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question_id": 195,
        "db_id": "toxicology",
        "question_en": "What is the most common bond type?",
        "question_ar": "",
        "evidence_en": "most common bond type refers MAX(COUNT(bond_type))",
        "evidence_ar": "",
        "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
        "difficulty": "simple"
    },
    {
        "question_id": 196,
        "db_id": "toxicology",
        "question_en": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
        "question_ar": "",
        "evidence_en": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 197,
        "db_id": "toxicology",
        "question_en": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "question_ar": "",
        "evidence_en": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "evidence_ar": "",
        "SQL": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "difficulty": "moderate"
    },
    {
        "question_id": 198,
        "db_id": "toxicology",
        "question_en": "On average how many carcinogenic molecules are single bonded?",
        "question_ar": "",
        "evidence_en": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "difficulty": "challenging"
    },
    {
        "question_id": 199,
        "db_id": "toxicology",
        "question_en": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "question_ar": "",
        "evidence_en": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 200,
        "db_id": "toxicology",
        "question_en": "Find the triple-bonded molecules which are carcinogenic.",
        "question_ar": "",
        "evidence_en": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 201,
        "db_id": "toxicology",
        "question_en": "What is the percentage of carbon in double-bond molecules?",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question_id": 202,
        "db_id": "toxicology",
        "question_en": "How many triple type bonds are there?",
        "question_ar": "",
        "evidence_en": "triple type bonds refers to bond_type = '#'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "difficulty": "simple"
    },
    {
        "question_id": 203,
        "db_id": "toxicology",
        "question_en": "In how many atoms is there no bromine?",
        "question_ar": "",
        "evidence_en": "atoms with no bromine refers to element ! = 'br'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "difficulty": "simple"
    },
    {
        "question_id": 204,
        "db_id": "toxicology",
        "question_en": "Of the first 100 molecules in number order, how many are carcinogenic?",
        "question_ar": "",
        "evidence_en": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 205,
        "db_id": "toxicology",
        "question_en": "Identify by their ID the molecules in which there is carbon.",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c';",
        "evidence_ar": "",
        "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
        "difficulty": "simple"
    },
    {
        "question_id": 206,
        "db_id": "toxicology",
        "question_en": "What elements are in the TR004_8_9 bond atoms?",
        "question_ar": "",
        "evidence_en": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "difficulty": "challenging"
    },
    {
        "question_id": 207,
        "db_id": "toxicology",
        "question_en": "What elements are in a double type bond?",
        "question_ar": "",
        "evidence_en": "double type bond refers to bond_type = '=';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question_id": 208,
        "db_id": "toxicology",
        "question_en": "Which type of label is the most numerous in atoms with hydrogen?",
        "question_ar": "",
        "evidence_en": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
        "evidence_ar": "",
        "SQL": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 209,
        "db_id": "toxicology",
        "question_en": "Chlorine is in what type of bond?",
        "question_ar": "",
        "evidence_en": "type of bond refers to bond_type; chlorine refers to element = 'cl'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
        "difficulty": "simple"
    },
    {
        "question_id": 210,
        "db_id": "toxicology",
        "question_en": "What atoms are connected in single type bonds?",
        "question_ar": "",
        "evidence_en": "single type bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 211,
        "db_id": "toxicology",
        "question_en": "Indicate which atoms are connected in non-carcinogenic type molecules.",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 212,
        "db_id": "toxicology",
        "question_en": "Which element is the least numerous in non-carcinogenic molecules?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
        "evidence_ar": "",
        "SQL": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
        "difficulty": "challenging"
    },
    {
        "question_id": 213,
        "db_id": "toxicology",
        "question_en": "What type of bond is there between the atoms TR004_8 and TR004_20?",
        "question_ar": "",
        "evidence_en": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "difficulty": "moderate"
    },
    {
        "question_id": 214,
        "db_id": "toxicology",
        "question_en": "What type of label is not on molecules with atoms with tin?",
        "question_ar": "",
        "evidence_en": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "difficulty": "simple"
    },
    {
        "question_id": 215,
        "db_id": "toxicology",
        "question_en": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "question_ar": "",
        "evidence_en": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 216,
        "db_id": "toxicology",
        "question_en": "Identify all connected atoms with a triple bond.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "difficulty": "simple"
    },
    {
        "question_id": 217,
        "db_id": "toxicology",
        "question_en": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "question_ar": "",
        "evidence_en": "TR181 molecule refers to molecule_id = 'TR181'",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "difficulty": "simple"
    },
    {
        "question_id": 218,
        "db_id": "toxicology",
        "question_en": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "challenging"
    },
    {
        "question_id": 219,
        "db_id": "toxicology",
        "question_en": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 220,
        "db_id": "toxicology",
        "question_en": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
        "question_ar": "",
        "evidence_en": "TR000 is the molecule id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 221,
        "db_id": "toxicology",
        "question_en": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
        "question_ar": "",
        "evidence_en": "TR001 is the molecule id; TR001_2_6 is the bond id",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "difficulty": "simple"
    },
    {
        "question_id": 222,
        "db_id": "toxicology",
        "question_en": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
        "question_ar": "",
        "evidence_en": "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
        "difficulty": "moderate"
    },
    {
        "question_id": 223,
        "db_id": "toxicology",
        "question_en": "What are the atom IDs of the bond TR000_2_5?",
        "question_ar": "",
        "evidence_en": "TR000_2_5 is the bond id",
        "evidence_ar": "",
        "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "difficulty": "simple"
    },
    {
        "question_id": 224,
        "db_id": "toxicology",
        "question_en": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
        "question_ar": "",
        "evidence_en": "TR000_2 is the atom id; atom ID 2 refers to atom_id2",
        "evidence_ar": "",
        "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "difficulty": "simple"
    },
    {
        "question_id": 225,
        "db_id": "toxicology",
        "question_en": "Please list top five molecules that have double bonds in alphabetical order.",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 226,
        "db_id": "toxicology",
        "question_en": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
        "evidence_ar": "",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "difficulty": "moderate"
    },
    {
        "question_id": 227,
        "db_id": "toxicology",
        "question_en": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
        "evidence_ar": "",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "difficulty": "simple"
    },
    {
        "question_id": 228,
        "db_id": "toxicology",
        "question_en": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "question_ar": "",
        "evidence_en": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
        "evidence_ar": "",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "difficulty": "moderate"
    },
    {
        "question_id": 229,
        "db_id": "toxicology",
        "question_en": "What is the type of bond that molecule TR000 has when involved in any bonds?",
        "question_ar": "",
        "evidence_en": "type of bond refers to bond_type; TR000 is the molecule id",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "difficulty": "simple"
    },
    {
        "question_id": 230,
        "db_id": "toxicology",
        "question_en": "What are the elements of the toxicology and label of molecule TR060?",
        "question_ar": "",
        "evidence_en": "TR060 is the molecule id; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "difficulty": "challenging"
    },
    {
        "question_id": 231,
        "db_id": "toxicology",
        "question_en": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "question_ar": "",
        "evidence_en": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "evidence_ar": "",
        "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "difficulty": "challenging"
    },
    {
        "question_id": 232,
        "db_id": "toxicology",
        "question_en": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question_id": 233,
        "db_id": "toxicology",
        "question_en": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
        "question_ar": "",
        "evidence_en": "TR006 is the molecule id",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
        "difficulty": "simple"
    },
    {
        "question_id": 234,
        "db_id": "toxicology",
        "question_en": "How many bonds which involved atom 12 does molecule TR009 have?",
        "question_ar": "",
        "evidence_en": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
        "difficulty": "moderate"
    },
    {
        "question_id": 235,
        "db_id": "toxicology",
        "question_en": "How many molecules are carcinogenic and have the bromine element?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
        "difficulty": "simple"
    },
    {
        "question_id": 236,
        "db_id": "toxicology",
        "question_en": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
        "question_ar": "",
        "evidence_en": "atoms refer to atom_id or atom_id2",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
        "difficulty": "moderate"
    },
    {
        "question_id": 237,
        "db_id": "toxicology",
        "question_en": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
        "question_ar": "",
        "evidence_en": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "difficulty": "moderate"
    },
    {
        "question_id": 238,
        "db_id": "toxicology",
        "question_en": "How many molecules have a triple bond type?",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "difficulty": "simple"
    },
    {
        "question_id": 239,
        "db_id": "toxicology",
        "question_en": "How many connections does the atom 19 have?",
        "question_ar": "",
        "evidence_en": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "difficulty": "simple"
    },
    {
        "question_id": 240,
        "db_id": "toxicology",
        "question_en": "List all the elements of the toxicology of the molecule \"TR004\".",
        "question_ar": "",
        "evidence_en": "TR004 is the molecule id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "difficulty": "challenging"
    },
    {
        "question_id": 241,
        "db_id": "toxicology",
        "question_en": "How many of the molecules are not carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 242,
        "db_id": "toxicology",
        "question_en": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
        "question_ar": "",
        "evidence_en": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 243,
        "db_id": "toxicology",
        "question_en": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "question_ar": "",
        "evidence_en": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
        "evidence_ar": "",
        "SQL": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "difficulty": "moderate"
    },
    {
        "question_id": 244,
        "db_id": "toxicology",
        "question_en": "Is the molecule with the most double bonds carcinogenic?",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 245,
        "db_id": "toxicology",
        "question_en": "What is the average number of bonds the atoms with the element iodine have?",
        "question_ar": "",
        "evidence_en": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "difficulty": "moderate"
    },
    {
        "question_id": 246,
        "db_id": "toxicology",
        "question_en": "List the bond type and the bond ID of the atom 45.",
        "question_ar": "",
        "evidence_en": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'",
        "difficulty": "moderate"
    },
    {
        "question_id": 247,
        "db_id": "toxicology",
        "question_en": "List all the elements of atoms that can not bond with any other atoms.",
        "question_ar": "",
        "evidence_en": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
        "difficulty": "challenging"
    },
    {
        "question_id": 248,
        "db_id": "toxicology",
        "question_en": "What are the atoms of the triple bond with the molecule \"TR041\"?",
        "question_ar": "",
        "evidence_en": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
        "difficulty": "simple"
    },
    {
        "question_id": 249,
        "db_id": "toxicology",
        "question_en": "What are the elements of the atoms of TR144_8_19?",
        "question_ar": "",
        "evidence_en": "TR144_8_19 is the bond id; ",
        "evidence_ar": "",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
        "difficulty": "challenging"
    },
    {
        "question_id": 250,
        "db_id": "toxicology",
        "question_en": "Of all the carcinogenic molecules, which one has the most double bonds?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T",
        "difficulty": "moderate"
    },
    {
        "question_id": 251,
        "db_id": "toxicology",
        "question_en": "What is the least common element of all carcinogenic molecules?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 252,
        "db_id": "toxicology",
        "question_en": "What are the atoms that can bond with the atom that has the element lead?",
        "question_ar": "",
        "evidence_en": "atom that has the element lead refers to atom_id where element = 'pb'",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
        "difficulty": "simple"
    },
    {
        "question_id": 253,
        "db_id": "toxicology",
        "question_en": "List the elements of all the triple bonds.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 254,
        "db_id": "toxicology",
        "question_en": "What percentage of bonds have the most common combination of atoms' elements?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )",
        "difficulty": "moderate"
    },
    {
        "question_id": 255,
        "db_id": "toxicology",
        "question_en": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
        "evidence_ar": "",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 256,
        "db_id": "toxicology",
        "question_en": "Calculate the total atoms consisting of the element carbon and hydrogen.",
        "question_ar": "",
        "evidence_en": "consisting of element carbon and hydrogen refers to element in('c', 'h')",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
        "difficulty": "simple"
    },
    {
        "question_id": 257,
        "db_id": "toxicology",
        "question_en": "List down atom id2 for atoms with element sulfur.",
        "question_ar": "",
        "evidence_en": "element sulfur refers to element = 's'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
        "difficulty": "simple"
    },
    {
        "question_id": 258,
        "db_id": "toxicology",
        "question_en": "What are the bond type for atoms with element Tin?",
        "question_ar": "",
        "evidence_en": "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'",
        "difficulty": "moderate"
    },
    {
        "question_id": 259,
        "db_id": "toxicology",
        "question_en": "How many elements are there for single bond molecules?",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "simple"
    },
    {
        "question_id": 260,
        "db_id": "toxicology",
        "question_en": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
        "difficulty": "moderate"
    },
    {
        "question_id": 261,
        "db_id": "toxicology",
        "question_en": "Write down bond id for molecules that are carcinogenic.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 262,
        "db_id": "toxicology",
        "question_en": "Among the single bond molecule id, which molecules are not carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 263,
        "db_id": "toxicology",
        "question_en": "What is the composition of element chlorine in percentage among the single bond molecules?",
        "question_ar": "",
        "evidence_en": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "challenging"
    },
    {
        "question_id": 264,
        "db_id": "toxicology",
        "question_en": "What are the labels for TR000, TR001 and TR002?",
        "question_ar": "",
        "evidence_en": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "difficulty": "simple"
    },
    {
        "question_id": 265,
        "db_id": "toxicology",
        "question_en": "List down the molecule id for non carcinogenic molecules.",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 266,
        "db_id": "toxicology",
        "question_en": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 267,
        "db_id": "toxicology",
        "question_en": "List down the bond type for molecules from molecule id TR000 to TR050.",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "difficulty": "moderate"
    },
    {
        "question_id": 268,
        "db_id": "toxicology",
        "question_en": "What are the elements for bond id TR001_10_11?",
        "question_ar": "",
        "evidence_en": "TR001_10_11 is the bond id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
        "difficulty": "challenging"
    },
    {
        "question_id": 269,
        "db_id": "toxicology",
        "question_en": "How many bond id have element iodine?",
        "question_ar": "",
        "evidence_en": "iodine refers to element = 'i'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
        "difficulty": "simple"
    },
    {
        "question_id": 270,
        "db_id": "toxicology",
        "question_en": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
        "question_ar": "",
        "evidence_en": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 271,
        "db_id": "toxicology",
        "question_en": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
        "question_ar": "",
        "evidence_en": "chlorine refers to element = 'cl'; carbon refers to element = 'c'",
        "evidence_ar": "",
        "SQL": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
        "difficulty": "simple"
    },
    {
        "question_id": 272,
        "db_id": "toxicology",
        "question_en": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 273,
        "db_id": "toxicology",
        "question_en": "What is the percentage of element chlorine in carcinogenic molecules?",
        "question_ar": "",
        "evidence_en": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 274,
        "db_id": "toxicology",
        "question_en": "List the toxicology elements associated with molecule TR001.",
        "question_ar": "",
        "evidence_en": "TR001 is the molecule id",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "difficulty": "simple"
    },
    {
        "question_id": 275,
        "db_id": "toxicology",
        "question_en": "Give me the molecule ID of the double bond type.",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
        "difficulty": "simple"
    },
    {
        "question_id": 276,
        "db_id": "toxicology",
        "question_en": "Write down the atom IDs of the first and second atoms of triple bond type molecules.",
        "question_ar": "",
        "evidence_en": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "difficulty": "simple"
    },
    {
        "question_id": 277,
        "db_id": "toxicology",
        "question_en": "What are the toxicology elements associated with bond ID TR000_1_2?",
        "question_ar": "",
        "evidence_en": "TR000_1_2 is the bond id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
        "difficulty": "challenging"
    },
    {
        "question_id": 278,
        "db_id": "toxicology",
        "question_en": "How many of the single bond type molecules are non-carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 279,
        "db_id": "toxicology",
        "question_en": "What is the label for bond ID TR001_10_11?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
        "difficulty": "simple"
    },
    {
        "question_id": 280,
        "db_id": "toxicology",
        "question_en": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "difficulty": "moderate"
    },
    {
        "question_id": 281,
        "db_id": "toxicology",
        "question_en": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
        "question_ar": "",
        "evidence_en": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
        "difficulty": "challenging"
    },
    {
        "question_id": 282,
        "db_id": "toxicology",
        "question_en": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
        "question_ar": "",
        "evidence_en": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
        "difficulty": "challenging"
    },
    {
        "question_id": 283,
        "db_id": "toxicology",
        "question_en": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
        "question_ar": "",
        "evidence_en": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "difficulty": "moderate"
    },
    {
        "question_id": 284,
        "db_id": "toxicology",
        "question_en": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
        "question_ar": "",
        "evidence_en": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
        "difficulty": "moderate"
    },
    {
        "question_id": 285,
        "db_id": "toxicology",
        "question_en": "Name chemical elements that form a bond TR001_10_11.",
        "question_ar": "",
        "evidence_en": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)",
        "evidence_ar": "",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
        "difficulty": "challenging"
    },
    {
        "question_id": 286,
        "db_id": "toxicology",
        "question_en": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
        "difficulty": "simple"
    },
    {
        "question_id": 287,
        "db_id": "toxicology",
        "question_en": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
        "question_ar": "",
        "evidence_en": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "difficulty": "moderate"
    },
    {
        "question_id": 288,
        "db_id": "toxicology",
        "question_en": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "difficulty": "simple"
    },
    {
        "question_id": 289,
        "db_id": "toxicology",
        "question_en": "Is molecule TR151 carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
        "difficulty": "simple"
    },
    {
        "question_id": 290,
        "db_id": "toxicology",
        "question_en": "Which toxic element can be found in the molecule TR151?",
        "question_ar": "",
        "evidence_en": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "difficulty": "challenging"
    },
    {
        "question_id": 291,
        "db_id": "toxicology",
        "question_en": "How many chemical compounds in the database are identified as carcinogenic.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 292,
        "db_id": "toxicology",
        "question_en": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50",
        "evidence_ar": "",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
        "difficulty": "simple"
    },
    {
        "question_id": 293,
        "db_id": "toxicology",
        "question_en": "How many atoms belong to the molecule labeled with carcinogenic compounds?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 294,
        "db_id": "toxicology",
        "question_en": "Which bond ids are double-bond with carcinogenic compound?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
        "difficulty": "simple"
    },
    {
        "question_id": 295,
        "db_id": "toxicology",
        "question_en": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'",
        "difficulty": "simple"
    },
    {
        "question_id": 296,
        "db_id": "toxicology",
        "question_en": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
        "difficulty": "simple"
    },
    {
        "question_id": 297,
        "db_id": "toxicology",
        "question_en": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'",
        "evidence_ar": "",
        "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 298,
        "db_id": "toxicology",
        "question_en": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
        "question_ar": "",
        "evidence_en": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 299,
        "db_id": "toxicology",
        "question_en": "Is molecule TR124 carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
        "difficulty": "simple"
    },
    {
        "question_id": 300,
        "db_id": "toxicology",
        "question_en": "What atoms comprise TR186?",
        "question_ar": "",
        "evidence_en": "TR186 is a molecule id",
        "evidence_ar": "",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
        "difficulty": "simple"
    },
    {
        "question_id": 301,
        "db_id": "toxicology",
        "question_en": "What is the bond type of TR007_4_19?",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
        "difficulty": "simple"
    },
    {
        "question_id": 302,
        "db_id": "toxicology",
        "question_en": "Name the elements that comprise the atoms of bond TR001_2_4.",
        "question_ar": "",
        "evidence_en": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
        "difficulty": "challenging"
    },
    {
        "question_id": 303,
        "db_id": "toxicology",
        "question_en": "How many double bonds does TR006 have and is it carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label",
        "difficulty": "moderate"
    },
    {
        "question_id": 304,
        "db_id": "toxicology",
        "question_en": "List all carcinogenic molecules and their elements.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "challenging"
    },
    {
        "question_id": 305,
        "db_id": "toxicology",
        "question_en": "Name all bonds with single bond types and what atoms are connected to the molecules.",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 306,
        "db_id": "toxicology",
        "question_en": "Which molecules have triple bonds and list all the elements they contain.",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 307,
        "db_id": "toxicology",
        "question_en": "Name the atoms' elements that form bond TR000_2_3.",
        "question_ar": "",
        "evidence_en": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'",
        "difficulty": "challenging"
    },
    {
        "question_id": 308,
        "db_id": "toxicology",
        "question_en": "How many bonds are created by bonding atoms with chlorine element?",
        "question_ar": "",
        "evidence_en": "chlorine refers to element = 'cl'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
        "difficulty": "simple"
    },
    {
        "question_id": 309,
        "db_id": "toxicology",
        "question_en": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
        "difficulty": "simple"
    },
    {
        "question_id": 310,
        "db_id": "toxicology",
        "question_en": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question_id": 311,
        "db_id": "toxicology",
        "question_en": "How many molecules without sulphur element is not having double bond?",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='",
        "difficulty": "simple"
    },
    {
        "question_id": 312,
        "db_id": "toxicology",
        "question_en": "What is the carcinogenic label for bond TR001_2_4?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'",
        "difficulty": "simple"
    },
    {
        "question_id": 313,
        "db_id": "toxicology",
        "question_en": "How many atoms belong to molecule id TR001?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "difficulty": "simple"
    },
    {
        "question_id": 314,
        "db_id": "toxicology",
        "question_en": "How many single bonds are there in the list?",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 315,
        "db_id": "toxicology",
        "question_en": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 316,
        "db_id": "toxicology",
        "question_en": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 317,
        "db_id": "toxicology",
        "question_en": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 318,
        "db_id": "toxicology",
        "question_en": "What is the molecule id of bond id TR001_1_7?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
        "difficulty": "simple"
    },
    {
        "question_id": 319,
        "db_id": "toxicology",
        "question_en": "How many elements are contained in bond_id TR001_3_4?",
        "question_ar": "",
        "evidence_en": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
        "difficulty": "challenging"
    },
    {
        "question_id": 320,
        "db_id": "toxicology",
        "question_en": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
        "question_ar": "",
        "evidence_en": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
        "difficulty": "moderate"
    },
    {
        "question_id": 321,
        "db_id": "toxicology",
        "question_en": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
        "difficulty": "simple"
    },
    {
        "question_id": 322,
        "db_id": "toxicology",
        "question_en": "What is the element of toxicology for the atom with the ID of TR000_1?",
        "question_ar": "",
        "evidence_en": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "difficulty": "challenging"
    },
    {
        "question_id": 323,
        "db_id": "toxicology",
        "question_en": "Is molecule TR000 is carcinogenic or not?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
        "difficulty": "simple"
    },
    {
        "question_id": 324,
        "db_id": "toxicology",
        "question_en": "Find the percentage of atoms with single bond.",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
        "difficulty": "simple"
    },
    {
        "question_id": 325,
        "db_id": "toxicology",
        "question_en": "How many carcinogenic molecules that consisted of Nitrogen?",
        "question_ar": "",
        "evidence_en": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 326,
        "db_id": "toxicology",
        "question_en": "Which molecule consisted of Sulphur atom with double bond?",
        "question_ar": "",
        "evidence_en": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
        "difficulty": "simple"
    },
    {
        "question_id": 327,
        "db_id": "toxicology",
        "question_en": "Which non-carcinogenic molecules consisted more than 5 atoms?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
        "evidence_ar": "",
        "SQL": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 328,
        "db_id": "toxicology",
        "question_en": "List all the elements with double bond, consisted in molecule TR024.",
        "question_ar": "",
        "evidence_en": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question_id": 329,
        "db_id": "toxicology",
        "question_en": "Which carcinogenic molecule have the highest number of atoms consisted in it?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))",
        "evidence_ar": "",
        "SQL": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 330,
        "db_id": "toxicology",
        "question_en": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
        "question_ar": "",
        "evidence_en": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
        "difficulty": "challenging"
    },
    {
        "question_id": 331,
        "db_id": "toxicology",
        "question_en": "How many of the molecules are carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 332,
        "db_id": "toxicology",
        "question_en": "Among the molecules between TR004 to TR010, how many of them has single bonds?",
        "question_ar": "",
        "evidence_en": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 333,
        "db_id": "toxicology",
        "question_en": "In the molecule TR008, how many carbons are present?",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
        "difficulty": "simple"
    },
    {
        "question_id": 334,
        "db_id": "toxicology",
        "question_en": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
        "question_ar": "",
        "evidence_en": "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence_ar": "",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 335,
        "db_id": "toxicology",
        "question_en": "What is the total number of molecules with double bonded oxygen?",
        "question_ar": "",
        "evidence_en": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'",
        "difficulty": "simple"
    },
    {
        "question_id": 336,
        "db_id": "toxicology",
        "question_en": "in molecules with triple bonds, how many of them are not carcinogenic?",
        "question_ar": "",
        "evidence_en": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 337,
        "db_id": "toxicology",
        "question_en": "List the element and bond type included in the molecule with molecule ID of TR002.",
        "question_ar": "",
        "evidence_en": "TR002 is the molecule id",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "difficulty": "challenging"
    },
    {
        "question_id": 338,
        "db_id": "toxicology",
        "question_en": "What is the atom ID of double bonded carbon in TR012 molecule?",
        "question_ar": "",
        "evidence_en": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';",
        "evidence_ar": "",
        "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'",
        "difficulty": "moderate"
    },
    {
        "question_id": 339,
        "db_id": "toxicology",
        "question_en": "List the atom ID of the carcinogenic molecule that contains oxygen?",
        "question_ar": "",
        "evidence_en": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
        "evidence_ar": "",
        "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 340,
        "db_id": "card_games",
        "question_en": "Which are the cards that have incredibly powerful foils.",
        "question_ar": "",
        "evidence_en": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 341,
        "db_id": "card_games",
        "question_en": "What are the borderless cards available without powerful foils?",
        "question_ar": "",
        "evidence_en": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "difficulty": "simple"
    },
    {
        "question_id": 342,
        "db_id": "card_games",
        "question_en": "List the card names with value that cost more converted mana for the face.",
        "question_ar": "",
        "evidence_en": "more converted mana for the face refers to Max(faceConvertedManaCost);",
        "evidence_ar": "",
        "SQL": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 343,
        "db_id": "card_games",
        "question_en": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "question_ar": "",
        "evidence_en": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
        "difficulty": "simple"
    },
    {
        "question_id": 344,
        "db_id": "card_games",
        "question_en": "List all the mythic rarity print cards banned in gladiator format.",
        "question_ar": "",
        "evidence_en": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "moderate"
    },
    {
        "question_id": 345,
        "db_id": "card_games",
        "question_en": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "question_ar": "",
        "evidence_en": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 346,
        "db_id": "card_games",
        "question_en": "List all the card id and artist with unknown power which are legal for commander play format.",
        "question_ar": "",
        "evidence_en": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
        "difficulty": "moderate"
    },
    {
        "question_id": 347,
        "db_id": "card_games",
        "question_en": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
        "question_ar": "",
        "evidence_en": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
        "difficulty": "moderate"
    },
    {
        "question_id": 348,
        "db_id": "card_games",
        "question_en": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "question_ar": "",
        "evidence_en": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "difficulty": "simple"
    },
    {
        "question_id": 349,
        "db_id": "card_games",
        "question_en": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "question_ar": "",
        "evidence_en": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 350,
        "db_id": "card_games",
        "question_en": "State the alternative languages available for card named Annul numbered 29.",
        "question_ar": "",
        "evidence_en": "annul refers to name = 'annul'; numbered 29 refers to number = '29';",
        "evidence_ar": "",
        "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "difficulty": "simple"
    },
    {
        "question_id": 351,
        "db_id": "card_games",
        "question_en": "Name all the cards which have alternative language in Japanese.",
        "question_ar": "",
        "evidence_en": "Japanese' is the language;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "difficulty": "simple"
    },
    {
        "question_id": 352,
        "db_id": "card_games",
        "question_en": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "question_ar": "",
        "evidence_en": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "difficulty": "moderate"
    },
    {
        "question_id": 353,
        "db_id": "card_games",
        "question_en": "List all the sets available in Italian translation. State the total number of cards per set.",
        "question_ar": "",
        "evidence_en": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "difficulty": "simple"
    },
    {
        "question_id": 354,
        "db_id": "card_games",
        "question_en": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "question_ar": "",
        "evidence_en": "Aaron Boyd' is artist;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "difficulty": "simple"
    },
    {
        "question_id": 355,
        "db_id": "card_games",
        "question_en": "What is the keyword found on card 'Angel of Mercy'?",
        "question_ar": "",
        "evidence_en": "Angel of Mercy' is the name of card;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "difficulty": "simple"
    },
    {
        "question_id": 356,
        "db_id": "card_games",
        "question_en": "How many cards have infinite power?",
        "question_ar": "",
        "evidence_en": "infinite power refers to power = '*';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "difficulty": "simple"
    },
    {
        "question_id": 357,
        "db_id": "card_games",
        "question_en": "What type of promotion is of card 'Duress'?",
        "question_ar": "",
        "evidence_en": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "evidence_ar": "",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 358,
        "db_id": "card_games",
        "question_en": "What is the border color of card \"Ancestor's Chosen\"?",
        "question_ar": "",
        "evidence_en": "name of card  = 'Ancestor''s Chosen' ;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "difficulty": "simple"
    },
    {
        "question_id": 359,
        "db_id": "card_games",
        "question_en": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
        "question_ar": "",
        "evidence_en": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
        "evidence_ar": "",
        "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 360,
        "db_id": "card_games",
        "question_en": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "question_ar": "",
        "evidence_en": "Angel of Mercy' is the name of card;",
        "evidence_ar": "",
        "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "difficulty": "moderate"
    },
    {
        "question_id": 361,
        "db_id": "card_games",
        "question_en": "How many cards of legalities whose status is restricted have text boxes?",
        "question_ar": "",
        "evidence_en": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 362,
        "db_id": "card_games",
        "question_en": "What is the description about the ruling of card \"Condemn\"?",
        "question_ar": "",
        "evidence_en": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "difficulty": "simple"
    },
    {
        "question_id": 363,
        "db_id": "card_games",
        "question_en": "How many cards of legalities whose status is restricted are found in a starter deck?",
        "question_ar": "",
        "evidence_en": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 364,
        "db_id": "card_games",
        "question_en": "What is the status of card \"Cloudchaser Eagle\"?",
        "question_ar": "",
        "evidence_en": "Cloudchaser Eagle is the name of card;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "difficulty": "simple"
    },
    {
        "question_id": 365,
        "db_id": "card_games",
        "question_en": "What is the type of card \"Benalish Knight\"?",
        "question_ar": "",
        "evidence_en": "Benalish Knight' is the name of card;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "difficulty": "simple"
    },
    {
        "question_id": 366,
        "db_id": "card_games",
        "question_en": "What is the rule of playing card \"Benalish Knight\"?",
        "question_ar": "",
        "evidence_en": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence_ar": "",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "difficulty": "simple"
    },
    {
        "question_id": 367,
        "db_id": "card_games",
        "question_en": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "question_ar": "",
        "evidence_en": "Phyrexian' is the language; name of artists refers to artist;",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "difficulty": "simple"
    },
    {
        "question_id": 368,
        "db_id": "card_games",
        "question_en": "What is the percentage of borderless cards?",
        "question_ar": "",
        "evidence_en": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "difficulty": "simple"
    },
    {
        "question_id": 369,
        "db_id": "card_games",
        "question_en": "How many cards that illusrtated in German have been reprinted?",
        "question_ar": "",
        "evidence_en": "German' is the language; reprinted refers to isReprint = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 370,
        "db_id": "card_games",
        "question_en": "How many borderless cards are illustrated in Russian?",
        "question_ar": "",
        "evidence_en": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "difficulty": "simple"
    },
    {
        "question_id": 371,
        "db_id": "card_games",
        "question_en": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
        "question_ar": "",
        "evidence_en": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 372,
        "db_id": "card_games",
        "question_en": "How many cards are there with toughness of 99?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE toughness = 99",
        "difficulty": "simple"
    },
    {
        "question_id": 373,
        "db_id": "card_games",
        "question_en": "Name the cards that were illustrated by Aaron Boyd.",
        "question_ar": "",
        "evidence_en": "Aaron Boyd' is artist;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "difficulty": "simple"
    },
    {
        "question_id": 374,
        "db_id": "card_games",
        "question_en": "How many black border cards are only available on mtgo?",
        "question_ar": "",
        "evidence_en": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
        "difficulty": "simple"
    },
    {
        "question_id": 375,
        "db_id": "card_games",
        "question_en": "List down all the card IDs with converted mana cost of 0.",
        "question_ar": "",
        "evidence_en": "converted mana cost of 0 refers to covertedManaCost = 0;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE convertedManaCost = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 376,
        "db_id": "card_games",
        "question_en": "What are the card layout of cards with keyword of flying?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "difficulty": "simple"
    },
    {
        "question_id": 377,
        "db_id": "card_games",
        "question_en": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
        "question_ar": "",
        "evidence_en": "subtype other than Angel refers to subtypes is not 'Angel';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "difficulty": "simple"
    },
    {
        "question_id": 378,
        "db_id": "card_games",
        "question_en": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
        "question_ar": "",
        "evidence_en": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 379,
        "db_id": "card_games",
        "question_en": "What are the cards belong to duel deck a? List the ID.",
        "question_ar": "",
        "evidence_en": "duel deck a refers to duelDeck = a;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "difficulty": "simple"
    },
    {
        "question_id": 380,
        "db_id": "card_games",
        "question_en": "List the edhrecRank for cards with frame version 2015.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
        "difficulty": "simple"
    },
    {
        "question_id": 381,
        "db_id": "card_games",
        "question_en": "List down the name of artists for cards in Chinese Simplified.",
        "question_ar": "",
        "evidence_en": "Chinese Simplified' is the language;",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "difficulty": "simple"
    },
    {
        "question_id": 382,
        "db_id": "card_games",
        "question_en": "What are the cards that only available in paper and Japanese language?",
        "question_ar": "",
        "evidence_en": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "difficulty": "simple"
    },
    {
        "question_id": 383,
        "db_id": "card_games",
        "question_en": "How many of the banned cards are white border?",
        "question_ar": "",
        "evidence_en": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "difficulty": "simple"
    }
]