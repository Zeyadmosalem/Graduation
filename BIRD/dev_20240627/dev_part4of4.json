[
    {
        "question_id": 1151,
        "db_id": "thrombosis_prediction",
        "question_en": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
        "question_ar": "",
        "evidence_en": "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1152,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
        "question_ar": "",
        "evidence_en": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1153,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
        "question_ar": "",
        "evidence_en": "'30609' is the Patient ID; disease means Diagnosis",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
        "difficulty": "simple"
    },
    {
        "question_id": 1154,
        "db_id": "thrombosis_prediction",
        "question_en": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
        "question_ar": "",
        "evidence_en": "When was the examination taken refers to `Examination Date`",
        "evidence_ar": "",
        "SQL": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
        "difficulty": "simple"
    },
    {
        "question_id": 1155,
        "db_id": "thrombosis_prediction",
        "question_en": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
        "question_ar": "",
        "evidence_en": "LDH beyond normal range refers to LDH > '500';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
        "difficulty": "simple"
    },
    {
        "question_id": 1156,
        "db_id": "thrombosis_prediction",
        "question_en": "State the ID and age of patient with positive degree of coagulation.",
        "question_ar": "",
        "evidence_en": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1157,
        "db_id": "thrombosis_prediction",
        "question_en": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
        "question_ar": "",
        "evidence_en": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 1158,
        "db_id": "thrombosis_prediction",
        "question_en": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
        "question_ar": "",
        "evidence_en": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
        "difficulty": "moderate"
    },
    {
        "question_id": 1159,
        "db_id": "thrombosis_prediction",
        "question_en": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
        "question_ar": "",
        "evidence_en": "albumin level lower than 3.5 refers to ALB < 3.5;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
        "difficulty": "simple"
    },
    {
        "question_id": 1160,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the percentage of female patient had total protein not within the normal range?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1161,
        "db_id": "thrombosis_prediction",
        "question_en": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
        "question_ar": "",
        "evidence_en": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1162,
        "db_id": "thrombosis_prediction",
        "question_en": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
        "question_ar": "",
        "evidence_en": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1163,
        "db_id": "thrombosis_prediction",
        "question_en": "What was the age of the youngest patient when they initially arrived at the hospital?",
        "question_ar": "",
        "evidence_en": "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))",
        "evidence_ar": "",
        "SQL": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
        "difficulty": "simple"
    },
    {
        "question_id": 1164,
        "db_id": "thrombosis_prediction",
        "question_en": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
        "question_ar": "",
        "evidence_en": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1165,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
        "question_ar": "",
        "evidence_en": "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
        "difficulty": "moderate"
    },
    {
        "question_id": 1166,
        "db_id": "thrombosis_prediction",
        "question_en": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "question_ar": "",
        "evidence_en": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
        "evidence_ar": "",
        "SQL": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1167,
        "db_id": "thrombosis_prediction",
        "question_en": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
        "question_ar": "",
        "evidence_en": "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1168,
        "db_id": "thrombosis_prediction",
        "question_en": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "question_ar": "",
        "evidence_en": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1169,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "difficulty": "challenging"
    },
    {
        "question_id": 1170,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
        "question_ar": "",
        "evidence_en": "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1171,
        "db_id": "thrombosis_prediction",
        "question_en": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "question_ar": "",
        "evidence_en": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
        "difficulty": "challenging"
    },
    {
        "question_id": 1172,
        "db_id": "thrombosis_prediction",
        "question_en": "How many male patients have elevated total bilirubin count?",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 1173,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
        "question_ar": "",
        "evidence_en": "the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '",
        "evidence_ar": "",
        "SQL": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1174,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
        "question_ar": "",
        "evidence_en": "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "evidence_ar": "",
        "SQL": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1175,
        "db_id": "thrombosis_prediction",
        "question_en": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "question_ar": "",
        "evidence_en": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1176,
        "db_id": "thrombosis_prediction",
        "question_en": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
        "question_ar": "",
        "evidence_en": "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'",
        "evidence_ar": "",
        "SQL": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
        "difficulty": "simple"
    },
    {
        "question_id": 1177,
        "db_id": "thrombosis_prediction",
        "question_en": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
        "question_ar": "",
        "evidence_en": "total cholesterol normal level refers to N < 250",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
        "difficulty": "simple"
    },
    {
        "question_id": 1178,
        "db_id": "thrombosis_prediction",
        "question_en": "What was the gender of the first AORTITIS diagnosed patient?",
        "question_ar": "",
        "evidence_en": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "evidence_ar": "",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1179,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "question_ar": "",
        "evidence_en": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
        "evidence_ar": "",
        "SQL": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1180,
        "db_id": "thrombosis_prediction",
        "question_en": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
        "question_ar": "",
        "evidence_en": "man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'",
        "evidence_ar": "",
        "SQL": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1181,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
        "question_ar": "",
        "evidence_en": "how old at that time refers to SUBTRACT(year(test date), year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1182,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
        "question_ar": "",
        "evidence_en": "1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1183,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
        "question_ar": "",
        "evidence_en": "'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.`Examination Date` = T1.`First Date`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1184,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
        "difficulty": "simple"
    },
    {
        "question_id": 1185,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
        "question_ar": "",
        "evidence_en": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1186,
        "db_id": "thrombosis_prediction",
        "question_en": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "question_ar": "",
        "evidence_en": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "evidence_ar": "",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1187,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
        "question_ar": "",
        "evidence_en": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 1188,
        "db_id": "thrombosis_prediction",
        "question_en": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
        "question_ar": "",
        "evidence_en": "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'",
        "evidence_ar": "",
        "SQL": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 1189,
        "db_id": "thrombosis_prediction",
        "question_en": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "question_ar": "",
        "evidence_en": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "difficulty": "challenging"
    },
    {
        "question_id": 1190,
        "db_id": "thrombosis_prediction",
        "question_en": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
        "question_ar": "",
        "evidence_en": "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)，100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
        "difficulty": "challenging"
    },
    {
        "question_id": 1191,
        "db_id": "thrombosis_prediction",
        "question_en": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1192,
        "db_id": "thrombosis_prediction",
        "question_en": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "question_ar": "",
        "evidence_en": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1193,
        "db_id": "thrombosis_prediction",
        "question_en": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
        "question_ar": "",
        "evidence_en": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1194,
        "db_id": "thrombosis_prediction",
        "question_en": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
        "question_ar": "",
        "evidence_en": "PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123",
        "evidence_ar": "",
        "SQL": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123",
        "difficulty": "challenging"
    },
    {
        "question_id": 1195,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
        "question_ar": "",
        "evidence_en": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1196,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the most common sign of patients with SLE disease?",
        "question_ar": "",
        "evidence_en": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence_ar": "",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1197,
        "db_id": "thrombosis_prediction",
        "question_en": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
        "question_ar": "",
        "evidence_en": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id",
        "evidence_ar": "",
        "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
        "difficulty": "simple"
    },
    {
        "question_id": 1198,
        "db_id": "thrombosis_prediction",
        "question_en": "How many female patients were given an APS diagnosis?",
        "question_ar": "",
        "evidence_en": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "difficulty": "simple"
    },
    {
        "question_id": 1199,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
        "question_ar": "",
        "evidence_en": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
        "difficulty": "simple"
    },
    {
        "question_id": 1200,
        "db_id": "thrombosis_prediction",
        "question_en": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
        "question_ar": "",
        "evidence_en": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1201,
        "db_id": "thrombosis_prediction",
        "question_en": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
        "question_ar": "",
        "evidence_en": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1202,
        "db_id": "thrombosis_prediction",
        "question_en": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; Behcet refers to diagnosis; did not stay in the hospital refers to Admission = '-'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1203,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients who were female got white blood cells that were below 3.5?",
        "question_ar": "",
        "evidence_en": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 1204,
        "db_id": "thrombosis_prediction",
        "question_en": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
        "question_ar": "",
        "evidence_en": "DATEDIFF(`Examination Date`, `First Date`)",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
        "difficulty": "simple"
    },
    {
        "question_id": 1205,
        "db_id": "thrombosis_prediction",
        "question_en": "Was the patient with the number 57266's uric acid within a normal range?",
        "question_ar": "",
        "evidence_en": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "difficulty": "moderate"
    },
    {
        "question_id": 1206,
        "db_id": "thrombosis_prediction",
        "question_en": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
        "question_ar": "",
        "evidence_en": "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE",
        "evidence_ar": "",
        "SQL": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
        "difficulty": "simple"
    },
    {
        "question_id": 1207,
        "db_id": "thrombosis_prediction",
        "question_en": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
        "question_ar": "",
        "evidence_en": "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1208,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
        "difficulty": "moderate"
    },
    {
        "question_id": 1209,
        "db_id": "thrombosis_prediction",
        "question_en": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
        "question_ar": "",
        "evidence_en": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
        "difficulty": "moderate"
    },
    {
        "question_id": 1210,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
        "question_ar": "",
        "evidence_en": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500",
        "evidence_ar": "",
        "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "difficulty": "simple"
    },
    {
        "question_id": 1211,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
        "question_ar": "",
        "evidence_en": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
        "difficulty": "moderate"
    },
    {
        "question_id": 1212,
        "db_id": "thrombosis_prediction",
        "question_en": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
        "question_ar": "",
        "evidence_en": "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
        "difficulty": "moderate"
    },
    {
        "question_id": 1213,
        "db_id": "thrombosis_prediction",
        "question_en": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
        "question_ar": "",
        "evidence_en": "alkaliphophatase (ALP) within normal range refers to ALP < 300",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1214,
        "db_id": "thrombosis_prediction",
        "question_en": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
        "question_ar": "",
        "evidence_en": "total protein (TP) below the lower range of the normal index refers to TP < 6.0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "difficulty": "simple"
    },
    {
        "question_id": 1215,
        "db_id": "thrombosis_prediction",
        "question_en": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
        "question_ar": "",
        "evidence_en": "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)",
        "evidence_ar": "",
        "SQL": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1216,
        "db_id": "thrombosis_prediction",
        "question_en": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
        "question_ar": "",
        "evidence_en": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
        "difficulty": "simple"
    },
    {
        "question_id": 1217,
        "db_id": "thrombosis_prediction",
        "question_en": "For all patient born in 1982, state if their albumin is within normal range.",
        "question_ar": "",
        "evidence_en": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1218,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
        "question_ar": "",
        "evidence_en": "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1219,
        "db_id": "thrombosis_prediction",
        "question_en": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
        "question_ar": "",
        "evidence_en": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
        "difficulty": "moderate"
    },
    {
        "question_id": 1220,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
        "question_ar": "",
        "evidence_en": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
        "difficulty": "simple"
    },
    {
        "question_id": 1221,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.",
        "question_ar": "",
        "evidence_en": "within the UN normal index refers to UN < 30; Diagnosis = 'RA'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'",
        "difficulty": "simple"
    },
    {
        "question_id": 1222,
        "db_id": "thrombosis_prediction",
        "question_en": "How many male patients are are with creatinine index out of the normal range?",
        "question_ar": "",
        "evidence_en": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 1223,
        "db_id": "thrombosis_prediction",
        "question_en": "Are there more male patients with creatinine not within the normal range than female? True or False?",
        "question_ar": "",
        "evidence_en": "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
        "difficulty": "challenging"
    },
    {
        "question_id": 1224,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
        "question_ar": "",
        "evidence_en": "the highest total bilirubin refers to MAX(T-BIL)",
        "evidence_ar": "",
        "SQL": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1225,
        "db_id": "thrombosis_prediction",
        "question_en": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
        "question_ar": "",
        "evidence_en": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
        "difficulty": "moderate"
    },
    {
        "question_id": 1226,
        "db_id": "thrombosis_prediction",
        "question_en": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
        "question_ar": "",
        "evidence_en": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1227,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the average age of the male patient with high cholesterol?",
        "question_ar": "",
        "evidence_en": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1228,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
        "question_ar": "",
        "evidence_en": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
        "difficulty": "simple"
    },
    {
        "question_id": 1229,
        "db_id": "thrombosis_prediction",
        "question_en": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
        "question_ar": "",
        "evidence_en": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
        "difficulty": "moderate"
    },
    {
        "question_id": 1230,
        "db_id": "thrombosis_prediction",
        "question_en": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
        "question_ar": "",
        "evidence_en": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 1231,
        "db_id": "thrombosis_prediction",
        "question_en": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
        "question_ar": "",
        "evidence_en": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
        "difficulty": "challenging"
    },
    {
        "question_id": 1232,
        "db_id": "thrombosis_prediction",
        "question_en": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
        "question_ar": "",
        "evidence_en": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
        "difficulty": "challenging"
    },
    {
        "question_id": 1233,
        "db_id": "thrombosis_prediction",
        "question_en": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
        "question_ar": "",
        "evidence_en": "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180",
        "difficulty": "moderate"
    },
    {
        "question_id": 1234,
        "db_id": "thrombosis_prediction",
        "question_en": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.",
        "question_ar": "",
        "evidence_en": "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC",
        "difficulty": "moderate"
    },
    {
        "question_id": 1235,
        "db_id": "thrombosis_prediction",
        "question_en": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
        "question_ar": "",
        "evidence_en": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1236,
        "db_id": "thrombosis_prediction",
        "question_en": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
        "question_ar": "",
        "evidence_en": "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50",
        "difficulty": "challenging"
    },
    {
        "question_id": 1237,
        "db_id": "thrombosis_prediction",
        "question_en": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
        "question_ar": "",
        "evidence_en": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 1238,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
        "question_ar": "",
        "evidence_en": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1239,
        "db_id": "thrombosis_prediction",
        "question_en": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
        "question_ar": "",
        "evidence_en": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1240,
        "db_id": "thrombosis_prediction",
        "question_en": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
        "question_ar": "",
        "evidence_en": "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1241,
        "db_id": "thrombosis_prediction",
        "question_en": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
        "question_ar": "",
        "evidence_en": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "difficulty": "challenging"
    },
    {
        "question_id": 1242,
        "db_id": "thrombosis_prediction",
        "question_en": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
        "question_ar": "",
        "evidence_en": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1243,
        "db_id": "thrombosis_prediction",
        "question_en": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
        "question_ar": "",
        "evidence_en": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
        "difficulty": "challenging"
    },
    {
        "question_id": 1244,
        "db_id": "thrombosis_prediction",
        "question_en": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
        "question_ar": "",
        "evidence_en": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
        "difficulty": "moderate"
    },
    {
        "question_id": 1245,
        "db_id": "thrombosis_prediction",
        "question_en": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
        "question_ar": "",
        "evidence_en": "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45",
        "difficulty": "moderate"
    },
    {
        "question_id": 1246,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
        "question_ar": "",
        "evidence_en": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
        "difficulty": "moderate"
    },
    {
        "question_id": 1247,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
        "question_ar": "",
        "evidence_en": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1248,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
        "question_ar": "",
        "evidence_en": "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1249,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
        "question_ar": "",
        "evidence_en": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
        "difficulty": "simple"
    },
    {
        "question_id": 1250,
        "db_id": "thrombosis_prediction",
        "question_en": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
        "question_ar": "",
        "evidence_en": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1251,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with an Ig G higher than normal?",
        "question_ar": "",
        "evidence_en": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
        "difficulty": "simple"
    },
    {
        "question_id": 1252,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients with a normal Ig G level, how many of them have symptoms?",
        "question_ar": "",
        "evidence_en": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 1253,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
        "question_ar": "",
        "evidence_en": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);",
        "evidence_ar": "",
        "SQL": "SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1254,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
        "question_ar": "",
        "evidence_en": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1255,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
        "question_ar": "",
        "evidence_en": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1256,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
        "question_ar": "",
        "evidence_en": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 1257,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
        "question_ar": "",
        "evidence_en": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
        "difficulty": "challenging"
    },
    {
        "question_id": 1258,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?",
        "question_ar": "",
        "evidence_en": "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1259,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.",
        "question_ar": "",
        "evidence_en": "diseases refers to Diagnosis; born after 1985/1/1 refers to YEAR(Birthday) > = 1985; normal Rhuematoid Factor refers to RA IN('-', '+-');",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1260,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the ID of the patient whose RF is normal and who is older than 60.",
        "question_ar": "",
        "evidence_en": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60",
        "difficulty": "simple"
    },
    {
        "question_id": 1261,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a normal RF don't have thrombosis?",
        "question_ar": "",
        "evidence_en": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 1262,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?",
        "question_ar": "",
        "evidence_en": "normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1263,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.",
        "question_ar": "",
        "evidence_en": "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1264,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?",
        "question_ar": "",
        "evidence_en": "APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1265,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
        "question_ar": "",
        "evidence_en": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1266,
        "db_id": "thrombosis_prediction",
        "question_en": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.",
        "question_ar": "",
        "evidence_en": "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1267,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
        "question_ar": "",
        "evidence_en": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 1268,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
        "question_ar": "",
        "evidence_en": "abnormal anti-SM refers to SM NOT IN ('negative', '0'); youngest refers to MAX(Birthday);",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 1269,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
        "question_ar": "",
        "evidence_en": "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01",
        "difficulty": "moderate"
    },
    {
        "question_id": 1270,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
        "question_ar": "",
        "evidence_en": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 1271,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with a normal anti-SSA came to the hospital before 2000?",
        "question_ar": "",
        "evidence_en": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1272,
        "db_id": "thrombosis_prediction",
        "question_en": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.",
        "question_ar": "",
        "evidence_en": "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('negative', '0');",
        "evidence_ar": "",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1273,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
        "question_ar": "",
        "evidence_en": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1274,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
        "question_ar": "",
        "evidence_en": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 1275,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
        "question_ar": "",
        "evidence_en": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1276,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.",
        "question_ar": "",
        "evidence_en": "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8",
        "difficulty": "simple"
    },
    {
        "question_id": 1277,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients have a normal anti-DNA level, yet their data are not recorded.",
        "question_ar": "",
        "evidence_en": "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 1278,
        "db_id": "thrombosis_prediction",
        "question_en": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?",
        "question_ar": "",
        "evidence_en": "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 1279,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
        "question_ar": "",
        "evidence_en": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
        "difficulty": "moderate"
    },
    {
        "question_id": 1280,
        "db_id": "thrombosis_prediction",
        "question_en": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
        "question_ar": "",
        "evidence_en": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 1281,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
        "question_ar": "",
        "evidence_en": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1282,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
        "question_ar": "",
        "evidence_en": "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 1283,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
        "question_ar": "",
        "evidence_en": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 1284,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
        "question_ar": "",
        "evidence_en": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);",
        "evidence_ar": "",
        "SQL": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1285,
        "db_id": "thrombosis_prediction",
        "question_en": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
        "question_ar": "",
        "evidence_en": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;",
        "evidence_ar": "",
        "SQL": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1286,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?",
        "question_ar": "",
        "evidence_en": "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 1287,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
        "question_ar": "",
        "evidence_en": "followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1288,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the diagnosis of the patients whose total protein is lower than normal.",
        "question_ar": "",
        "evidence_en": "total protein is lower than normal refers to TP < 6.0;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "difficulty": "simple"
    },
    {
        "question_id": 1289,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
        "question_ar": "",
        "evidence_en": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1290,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the examination date of the patient whose albumin is the highest in the normal range?",
        "question_ar": "",
        "evidence_en": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);",
        "evidence_ar": "",
        "SQL": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1291,
        "db_id": "thrombosis_prediction",
        "question_en": "How many male patients have a normal level of both albumin and total protein?",
        "question_ar": "",
        "evidence_en": "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1292,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?",
        "question_ar": "",
        "evidence_en": "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);",
        "evidence_ar": "",
        "SQL": "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1293,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
        "question_ar": "",
        "evidence_en": "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;",
        "evidence_ar": "",
        "SQL": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1294,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.",
        "question_ar": "",
        "evidence_en": "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);",
        "evidence_ar": "",
        "SQL": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1295,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
        "question_ar": "",
        "evidence_en": "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1296,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
        "question_ar": "",
        "evidence_en": "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);",
        "evidence_ar": "",
        "SQL": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1297,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
        "question_ar": "",
        "evidence_en": "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1298,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
        "question_ar": "",
        "evidence_en": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
        "difficulty": "moderate"
    },
    {
        "question_id": 1299,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?",
        "question_ar": "",
        "evidence_en": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 1300,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
        "question_ar": "",
        "evidence_en": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1301,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.",
        "question_ar": "",
        "evidence_en": "no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250",
        "difficulty": "simple"
    },
    {
        "question_id": 1302,
        "db_id": "thrombosis_prediction",
        "question_en": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
        "question_ar": "",
        "evidence_en": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "difficulty": "challenging"
    },
    {
        "question_id": 1303,
        "db_id": "thrombosis_prediction",
        "question_en": "When is the birthday of the oldest patient whose blood glucose is abnormal?",
        "question_ar": "",
        "evidence_en": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1304,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
        "question_ar": "",
        "evidence_en": "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 1305,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients accepted to the hospital have a normal level of white blood cells?",
        "question_ar": "",
        "evidence_en": "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1306,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients diagnosed with SLE have a normal white blood cell level?",
        "question_ar": "",
        "evidence_en": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
        "difficulty": "simple"
    },
    {
        "question_id": 1307,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.",
        "question_ar": "",
        "evidence_en": "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1308,
        "db_id": "thrombosis_prediction",
        "question_en": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
        "question_ar": "",
        "evidence_en": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 1309,
        "db_id": "thrombosis_prediction",
        "question_en": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
        "question_ar": "",
        "evidence_en": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
        "difficulty": "moderate"
    },
    {
        "question_id": 1310,
        "db_id": "thrombosis_prediction",
        "question_en": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
        "question_ar": "",
        "evidence_en": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 1311,
        "db_id": "thrombosis_prediction",
        "question_en": "How many patients with severe thrombosis have a normal prothrombin time?",
        "question_ar": "",
        "evidence_en": "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 1312,
        "db_id": "student_club",
        "question_en": "What's Angela Sanders's major?",
        "question_ar": "",
        "evidence_en": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name.",
        "evidence_ar": "",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "difficulty": "simple"
    },
    {
        "question_id": 1313,
        "db_id": "student_club",
        "question_en": "How many students in the Student_Club are from the College of Engineering?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "difficulty": "simple"
    },
    {
        "question_id": 1314,
        "db_id": "student_club",
        "question_en": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "difficulty": "simple"
    },
    {
        "question_id": 1315,
        "db_id": "student_club",
        "question_en": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
        "question_ar": "",
        "evidence_en": "Women's Soccer is an event name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "difficulty": "simple"
    },
    {
        "question_id": 1316,
        "db_id": "student_club",
        "question_en": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
        "question_ar": "",
        "evidence_en": "Women's Soccer is an event name; phone numbers refers to phone",
        "evidence_ar": "",
        "SQL": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1317,
        "db_id": "student_club",
        "question_en": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
        "question_ar": "",
        "evidence_en": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1318,
        "db_id": "student_club",
        "question_en": "What is the event that has the highest attendance of the students from the Student_Club?",
        "question_ar": "",
        "evidence_en": "event with highest attendance refers to MAX(COUNT(link_to_event))",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1319,
        "db_id": "student_club",
        "question_en": "Which college is the vice president of the Student_Club from?",
        "question_ar": "",
        "evidence_en": "Vice President is a position of the Student Club",
        "evidence_ar": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "difficulty": "simple"
    },
    {
        "question_id": 1320,
        "db_id": "student_club",
        "question_en": "Please list the event names of all the events attended by Maya Mclean.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "difficulty": "simple"
    },
    {
        "question_id": 1321,
        "db_id": "student_club",
        "question_en": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "question_ar": "",
        "evidence_en": "events attended in 2019 refers to YEAR(event_date) = 2019",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1322,
        "db_id": "student_club",
        "question_en": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "question_ar": "",
        "evidence_en": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1323,
        "db_id": "student_club",
        "question_en": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
        "question_ar": "",
        "evidence_en": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1324,
        "db_id": "student_club",
        "question_en": "What is the average attendance of meetings in 2020?",
        "question_ar": "",
        "evidence_en": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1325,
        "db_id": "student_club",
        "question_en": "What is the most expensive item that was spent in support of club events?",
        "question_ar": "",
        "evidence_en": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)",
        "evidence_ar": "",
        "SQL": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1326,
        "db_id": "student_club",
        "question_en": "How many members of the Student_Club have majored Environmental Engineering?\n",
        "question_ar": "",
        "evidence_en": "'Environmental Engineering' is the major name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "difficulty": "simple"
    },
    {
        "question_id": 1327,
        "db_id": "student_club",
        "question_en": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "question_ar": "",
        "evidence_en": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1328,
        "db_id": "student_club",
        "question_en": "List the last name of all the students who majored Law and Constitutional Studies. \n",
        "question_ar": "",
        "evidence_en": "'Law and Constitutional Studies' is the major name",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "difficulty": "simple"
    },
    {
        "question_id": 1329,
        "db_id": "student_club",
        "question_en": "What county did Sherri Ramsey grew up?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "difficulty": "simple"
    },
    {
        "question_id": 1330,
        "db_id": "student_club",
        "question_en": "What college offers the major that Tyler Hewitt took?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "difficulty": "simple"
    },
    {
        "question_id": 1331,
        "db_id": "student_club",
        "question_en": "What is the amount of the funds that the Vice President received?",
        "question_ar": "",
        "evidence_en": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "evidence_ar": "",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1332,
        "db_id": "student_club",
        "question_en": "How much did the Student_Club members spend on food in September Meeting?",
        "question_ar": "",
        "evidence_en": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
        "evidence_ar": "",
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1333,
        "db_id": "student_club",
        "question_en": "What city and state did the President of the Student_Club grow up?",
        "question_ar": "",
        "evidence_en": "'President' is a position of Student Club;",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1334,
        "db_id": "student_club",
        "question_en": "List the full name of the Student_Club members that grew up in Illinois state.",
        "question_ar": "",
        "evidence_en": "full name of member refers to first_name, last_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "difficulty": "simple"
    },
    {
        "question_id": 1335,
        "db_id": "student_club",
        "question_en": "How much did the Student_Club members spend on advertisement in September Meeting?",
        "question_ar": "",
        "evidence_en": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
        "evidence_ar": "",
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1336,
        "db_id": "student_club",
        "question_en": "What department offers the major that Pierce and Guidi took?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
        "difficulty": "simple"
    },
    {
        "question_id": 1337,
        "db_id": "student_club",
        "question_en": "What is the total budgeted amount for all category in \"October Speaker\" event?",
        "question_ar": "",
        "evidence_en": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
        "difficulty": "simple"
    },
    {
        "question_id": 1338,
        "db_id": "student_club",
        "question_en": "Was each expense in October Meeting on October 8, 2019 approved?",
        "question_ar": "",
        "evidence_en": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
        "evidence_ar": "",
        "SQL": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1339,
        "db_id": "student_club",
        "question_en": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "question_ar": "",
        "evidence_en": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "difficulty": "challenging"
    },
    {
        "question_id": 1340,
        "db_id": "student_club",
        "question_en": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "question_ar": "",
        "evidence_en": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "difficulty": "moderate"
    },
    {
        "question_id": 1341,
        "db_id": "student_club",
        "question_en": "Give the location for \"Spring Budget Review\".",
        "question_ar": "",
        "evidence_en": "'Spring Budget Review' is an event name;",
        "evidence_ar": "",
        "SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "difficulty": "simple"
    },
    {
        "question_id": 1342,
        "db_id": "student_club",
        "question_en": "What was the cost for the \"Posters\" on 2019/9/4?",
        "question_ar": "",
        "evidence_en": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'",
        "evidence_ar": "",
        "SQL": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "difficulty": "simple"
    },
    {
        "question_id": 1343,
        "db_id": "student_club",
        "question_en": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "question_ar": "",
        "evidence_en": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "difficulty": "simple"
    },
    {
        "question_id": 1344,
        "db_id": "student_club",
        "question_en": "What was the notes of the fundraising on 2019/9/14?",
        "question_ar": "",
        "evidence_en": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
        "evidence_ar": "",
        "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "difficulty": "simple"
    },
    {
        "question_id": 1345,
        "db_id": "student_club",
        "question_en": "How many majors are there in \"College of Humanities and Social Sciences\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "difficulty": "simple"
    },
    {
        "question_id": 1346,
        "db_id": "student_club",
        "question_en": "Tell the phone number of \"Carlo Jacobs\".",
        "question_ar": "",
        "evidence_en": "Carlo Jacobs is the full name; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
        "difficulty": "simple"
    },
    {
        "question_id": 1347,
        "db_id": "student_club",
        "question_en": "Tell the hometown county for \"Adela O'Gallagher\".",
        "question_ar": "",
        "evidence_en": "hometown county refers to county",
        "evidence_ar": "",
        "SQL": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
        "difficulty": "simple"
    },
    {
        "question_id": 1348,
        "db_id": "student_club",
        "question_en": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
        "question_ar": "",
        "evidence_en": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
        "difficulty": "simple"
    },
    {
        "question_id": 1349,
        "db_id": "student_club",
        "question_en": "Provide the total number of the budget amount for \"September Speaker\" event.",
        "question_ar": "",
        "evidence_en": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
        "difficulty": "simple"
    },
    {
        "question_id": 1350,
        "db_id": "student_club",
        "question_en": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
        "question_ar": "",
        "evidence_en": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1351,
        "db_id": "student_club",
        "question_en": "What was Brent Thomason's major?",
        "question_ar": "",
        "evidence_en": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "difficulty": "simple"
    },
    {
        "question_id": 1352,
        "db_id": "student_club",
        "question_en": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
        "question_ar": "",
        "evidence_en": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1353,
        "db_id": "student_club",
        "question_en": "What's Christof Nielson's zip code type?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
        "difficulty": "simple"
    },
    {
        "question_id": 1354,
        "db_id": "student_club",
        "question_en": "State the major name for the Vice President of the club.",
        "question_ar": "",
        "evidence_en": "'Vice President' is a position of Student Club",
        "evidence_ar": "",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1355,
        "db_id": "student_club",
        "question_en": "Where is the hometown state for \"Sacha Harrison\"?",
        "question_ar": "",
        "evidence_en": "hometown state refers to state;",
        "evidence_ar": "",
        "SQL": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "difficulty": "simple"
    },
    {
        "question_id": 1356,
        "db_id": "student_club",
        "question_en": "Which department was the President of the club in?",
        "question_ar": "",
        "evidence_en": "'President' is a position of Student Club",
        "evidence_ar": "",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1357,
        "db_id": "student_club",
        "question_en": "State the date Connor Hilton paid his/her dues.",
        "question_ar": "",
        "evidence_en": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
        "evidence_ar": "",
        "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
        "difficulty": "simple"
    },
    {
        "question_id": 1358,
        "db_id": "student_club",
        "question_en": "Who was the first one paid his/her dues? Tell the full name.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1359,
        "db_id": "student_club",
        "question_en": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "question_ar": "",
        "evidence_en": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1360,
        "db_id": "student_club",
        "question_en": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
        "question_ar": "",
        "evidence_en": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1361,
        "db_id": "student_club",
        "question_en": "What is the total cost of the pizzas for all the events?",
        "question_ar": "",
        "evidence_en": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "difficulty": "simple"
    },
    {
        "question_id": 1362,
        "db_id": "student_club",
        "question_en": "How many cities are there in Orange County, Virginia?",
        "question_ar": "",
        "evidence_en": "Orange County is the county name, Virginia is the state name",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "difficulty": "simple"
    },
    {
        "question_id": 1363,
        "db_id": "student_club",
        "question_en": "List all of the College of Humanities and Social Sciences' departments.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "difficulty": "simple"
    },
    {
        "question_id": 1364,
        "db_id": "student_club",
        "question_en": "Where is Amy Firth's hometown?",
        "question_ar": "",
        "evidence_en": "hometown refers to city, county, state",
        "evidence_ar": "",
        "SQL": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
        "difficulty": "simple"
    },
    {
        "question_id": 1365,
        "db_id": "student_club",
        "question_en": "What are the expenses of the budget with the lowest remaining?",
        "question_ar": "",
        "evidence_en": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)",
        "evidence_ar": "",
        "SQL": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1366,
        "db_id": "student_club",
        "question_en": "List all the members who attended the event \"October Meeting\".",
        "question_ar": "",
        "evidence_en": "'October Meeting' is an event name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "difficulty": "simple"
    },
    {
        "question_id": 1367,
        "db_id": "student_club",
        "question_en": "Which college do most of the members go to?",
        "question_ar": "",
        "evidence_en": "college most members go refers to MAX(COUNT(major.college))",
        "evidence_ar": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1368,
        "db_id": "student_club",
        "question_en": "What does the person with the phone number \"809-555-3360\" major in?",
        "question_ar": "",
        "evidence_en": "major in refers to major_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
        "difficulty": "simple"
    },
    {
        "question_id": 1369,
        "db_id": "student_club",
        "question_en": "Which event has the highest budget amount?",
        "question_ar": "",
        "evidence_en": "event refers to event_name; highest budget amount refers to MAX(amount)",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1370,
        "db_id": "student_club",
        "question_en": "List all the expenses incurred by the vice president.",
        "question_ar": "",
        "evidence_en": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "evidence_ar": "",
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1371,
        "db_id": "student_club",
        "question_en": "How many members attended the \"Women's Soccer\" event?",
        "question_ar": "",
        "evidence_en": "'Women's Soccer' is the event name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "difficulty": "simple"
    },
    {
        "question_id": 1372,
        "db_id": "student_club",
        "question_en": "When did the member, Casey Mason, received the income?",
        "question_ar": "",
        "evidence_en": "when the income was received refers to date_received",
        "evidence_ar": "",
        "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
        "difficulty": "simple"
    },
    {
        "question_id": 1373,
        "db_id": "student_club",
        "question_en": "How many of the members' hometowns are from Maryland state?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "difficulty": "simple"
    },
    {
        "question_id": 1374,
        "db_id": "student_club",
        "question_en": "How many events did the member with the phone number \"954-555-6240\" attend?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'",
        "difficulty": "simple"
    },
    {
        "question_id": 1375,
        "db_id": "student_club",
        "question_en": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
        "question_ar": "",
        "evidence_en": "list all members means to list all the full name; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1376,
        "db_id": "student_club",
        "question_en": "Among all the closed events, which event has the highest spend-to-budget ratio?",
        "question_ar": "",
        "evidence_en": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1377,
        "db_id": "student_club",
        "question_en": "How many student have the position of president?",
        "question_ar": "",
        "evidence_en": "'President' is a position of Student Club",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1378,
        "db_id": "student_club",
        "question_en": "What is the highest amount of budget spend for an event?",
        "question_ar": "",
        "evidence_en": "highest amount of budget spend refers to MAX(spent)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(spent) FROM budget",
        "difficulty": "simple"
    },
    {
        "question_id": 1379,
        "db_id": "student_club",
        "question_en": "How many meeting events were held in 2020?",
        "question_ar": "",
        "evidence_en": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "difficulty": "simple"
    },
    {
        "question_id": 1380,
        "db_id": "student_club",
        "question_en": "What is the total amount of money spent for food?",
        "question_ar": "",
        "evidence_en": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "difficulty": "simple"
    },
    {
        "question_id": 1381,
        "db_id": "student_club",
        "question_en": "List the name of students that have attended more than 7 events.",
        "question_ar": "",
        "evidence_en": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
        "difficulty": "moderate"
    },
    {
        "question_id": 1382,
        "db_id": "student_club",
        "question_en": "Among the students majored in interior design, who have attended the Community Theater event?",
        "question_ar": "",
        "evidence_en": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1383,
        "db_id": "student_club",
        "question_en": "State the name of students from Georgetown, South Carolina.",
        "question_ar": "",
        "evidence_en": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "difficulty": "simple"
    },
    {
        "question_id": 1384,
        "db_id": "student_club",
        "question_en": "How many income generated by Grant Gilmour?",
        "question_ar": "",
        "evidence_en": "income generated refers to income.amount",
        "evidence_ar": "",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
        "difficulty": "simple"
    },
    {
        "question_id": 1385,
        "db_id": "student_club",
        "question_en": "Which student was able to generate income more than $40?",
        "question_ar": "",
        "evidence_en": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "difficulty": "simple"
    },
    {
        "question_id": 1386,
        "db_id": "student_club",
        "question_en": "What is the total expense for the Yearly Kickoff?",
        "question_ar": "",
        "evidence_en": "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "simple"
    },
    {
        "question_id": 1387,
        "db_id": "student_club",
        "question_en": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "question_ar": "",
        "evidence_en": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1388,
        "db_id": "student_club",
        "question_en": "Which students manage to generate the highest income. State his/her full name along with the income source.",
        "question_ar": "",
        "evidence_en": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1389,
        "db_id": "student_club",
        "question_en": "Which event has the lowest cost?",
        "question_ar": "",
        "evidence_en": "event refers to event_name; lowest cost means MIN(cost)",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1390,
        "db_id": "student_club",
        "question_en": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "difficulty": "moderate"
    },
    {
        "question_id": 1391,
        "db_id": "student_club",
        "question_en": "What is the ratio between students majored in finance and physics?",
        "question_ar": "",
        "evidence_en": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
        "difficulty": "simple"
    },
    {
        "question_id": 1392,
        "db_id": "student_club",
        "question_en": "Indicate the top source of funds received in September 2019 based on their amount.",
        "question_ar": "",
        "evidence_en": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'",
        "evidence_ar": "",
        "SQL": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1393,
        "db_id": "student_club",
        "question_en": "Provide the full name and email address of the Student_Club's Secretary.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "difficulty": "simple"
    },
    {
        "question_id": 1394,
        "db_id": "student_club",
        "question_en": "How many members of the Student_Club have major in 'Physics Teaching'?",
        "question_ar": "",
        "evidence_en": "'Physics Teaching' is the major_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
        "difficulty": "simple"
    },
    {
        "question_id": 1395,
        "db_id": "student_club",
        "question_en": "How many members did attend the event 'Community Theater' in 2019?",
        "question_ar": "",
        "evidence_en": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1396,
        "db_id": "student_club",
        "question_en": "Provide the number of events attended by Luisa Guidi. What is her major?",
        "question_ar": "",
        "evidence_en": "major refers to major_name;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
        "difficulty": "simple"
    },
    {
        "question_id": 1397,
        "db_id": "student_club",
        "question_en": "On average, how much did the Student_Club spend on food for the typical event in the past?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
        "difficulty": "simple"
    },
    {
        "question_id": 1398,
        "db_id": "student_club",
        "question_en": "Name the event with the highest amount spent on advertisement.",
        "question_ar": "",
        "evidence_en": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1399,
        "db_id": "student_club",
        "question_en": "Did Maya Mclean attend the 'Women's Soccer' event?",
        "question_ar": "",
        "evidence_en": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
        "evidence_ar": "",
        "SQL": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1400,
        "db_id": "student_club",
        "question_en": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1401,
        "db_id": "student_club",
        "question_en": "Indicate the cost of posters for 'September Speaker' event.",
        "question_ar": "",
        "evidence_en": "'Posters' is the expense description; 'September Speaker' is an event name",
        "evidence_ar": "",
        "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1402,
        "db_id": "student_club",
        "question_en": "What is the most popular size of t-shirt ordered by the club members?",
        "question_ar": "",
        "evidence_en": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))",
        "evidence_ar": "",
        "SQL": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1403,
        "db_id": "student_club",
        "question_en": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
        "question_ar": "",
        "evidence_en": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1404,
        "db_id": "student_club",
        "question_en": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "question_ar": "",
        "evidence_en": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1405,
        "db_id": "student_club",
        "question_en": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "question_ar": "",
        "evidence_en": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence_ar": "",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "moderate"
    },
    {
        "question_id": 1406,
        "db_id": "student_club",
        "question_en": "Among the budgets for Food, which one has the highest budgeted amount?",
        "question_ar": "",
        "evidence_en": "MAX(amount) where category = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
        "difficulty": "simple"
    },
    {
        "question_id": 1407,
        "db_id": "student_club",
        "question_en": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
        "question_ar": "",
        "evidence_en": "MAX(amount) where category = 'Advertisement'",
        "evidence_ar": "",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 1408,
        "db_id": "student_club",
        "question_en": "Calculate the total cost spent for Parking in the list.",
        "question_ar": "",
        "evidence_en": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
        "difficulty": "simple"
    },
    {
        "question_id": 1409,
        "db_id": "student_club",
        "question_en": "Mention the total expense used on 8/20/2019.",
        "question_ar": "",
        "evidence_en": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
        "difficulty": "simple"
    },
    {
        "question_id": 1410,
        "db_id": "student_club",
        "question_en": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "difficulty": "simple"
    },
    {
        "question_id": 1411,
        "db_id": "student_club",
        "question_en": "State what kind of expenses that Sacha Harrison incurred?",
        "question_ar": "",
        "evidence_en": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "difficulty": "simple"
    },
    {
        "question_id": 1412,
        "db_id": "student_club",
        "question_en": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
        "question_ar": "",
        "evidence_en": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "evidence_ar": "",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
        "difficulty": "simple"
    },
    {
        "question_id": 1413,
        "db_id": "student_club",
        "question_en": "Mention the zip code of member who incurred less than 50USD.",
        "question_ar": "",
        "evidence_en": "incurred less than 50USD refers to cost < 50",
        "evidence_ar": "",
        "SQL": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
        "difficulty": "simple"
    },
    {
        "question_id": 1414,
        "db_id": "student_club",
        "question_en": "State the name of major that Phillip Cullen has joined.",
        "question_ar": "",
        "evidence_en": "name of major refers to major_name",
        "evidence_ar": "",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
        "difficulty": "simple"
    },
    {
        "question_id": 1415,
        "db_id": "student_club",
        "question_en": "List out the position of members who joined major of Business.",
        "question_ar": "",
        "evidence_en": "'Business' is the major name",
        "evidence_ar": "",
        "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
        "difficulty": "simple"
    },
    {
        "question_id": 1416,
        "db_id": "student_club",
        "question_en": "How many members of Business have the Medium size of tee shirt?",
        "question_ar": "",
        "evidence_en": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
        "difficulty": "simple"
    },
    {
        "question_id": 1417,
        "db_id": "student_club",
        "question_en": "List out the type of events which have remaining budget more than 30 USD.",
        "question_ar": "",
        "evidence_en": "remaining budget more than 30 USD refers to remaining > 30",
        "evidence_ar": "",
        "SQL": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
        "difficulty": "simple"
    },
    {
        "question_id": 1418,
        "db_id": "student_club",
        "question_en": "Mention the category of events which were held at MU 215.",
        "question_ar": "",
        "evidence_en": "held at MU 215 refers to location = 'MU 215'",
        "evidence_ar": "",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "difficulty": "simple"
    },
    {
        "question_id": 1419,
        "db_id": "student_club",
        "question_en": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
        "question_ar": "",
        "evidence_en": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 1420,
        "db_id": "student_club",
        "question_en": "State the name of major that Vice President has joined.",
        "question_ar": "",
        "evidence_en": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "evidence_ar": "",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "difficulty": "simple"
    },
    {
        "question_id": 1421,
        "db_id": "student_club",
        "question_en": "Calculate the percentage of members who are major Business in the list?",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1422,
        "db_id": "student_club",
        "question_en": "State the category of events were held at MU 215.",
        "question_ar": "",
        "evidence_en": "'MU 215' is the location of event; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "difficulty": "simple"
    },
    {
        "question_id": 1423,
        "db_id": "student_club",
        "question_en": "How many income are received with an amount of 50?",
        "question_ar": "",
        "evidence_en": "amount of 50 refers to amount = 50",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
        "difficulty": "simple"
    },
    {
        "question_id": 1424,
        "db_id": "student_club",
        "question_en": "Among the members, how many of them have an extra large t-shirt size?",
        "question_ar": "",
        "evidence_en": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "difficulty": "simple"
    },
    {
        "question_id": 1425,
        "db_id": "student_club",
        "question_en": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
        "difficulty": "simple"
    },
    {
        "question_id": 1426,
        "db_id": "student_club",
        "question_en": "List the last name of members with a major in environmental engineering and include its department and college name.",
        "question_ar": "",
        "evidence_en": "'Environmental Engineering' is the major_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1427,
        "db_id": "student_club",
        "question_en": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "question_ar": "",
        "evidence_en": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1428,
        "db_id": "student_club",
        "question_en": "List the city and state of members enrolled under electrical and computer engineering department.",
        "question_ar": "",
        "evidence_en": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
        "evidence_ar": "",
        "SQL": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1429,
        "db_id": "student_club",
        "question_en": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
        "question_ar": "",
        "evidence_en": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "evidence_ar": "",
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1430,
        "db_id": "student_club",
        "question_en": "What is the last name and position of the student that bought pizza on 09/10/2019?",
        "question_ar": "",
        "evidence_en": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1431,
        "db_id": "student_club",
        "question_en": "List the last name of the members of the club that attended the women's soccer event.",
        "question_ar": "",
        "evidence_en": "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1432,
        "db_id": "student_club",
        "question_en": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
        "question_ar": "",
        "evidence_en": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1433,
        "db_id": "student_club",
        "question_en": "Which countries have zip codes with post office boxes?",
        "question_ar": "",
        "evidence_en": "zip codes that have post office boxes refers to type = 'PO Box'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 1434,
        "db_id": "student_club",
        "question_en": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
        "question_ar": "",
        "evidence_en": "zip codes that have post office boxes refers to type = 'PO Box'",
        "evidence_ar": "",
        "SQL": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
        "difficulty": "simple"
    },
    {
        "question_id": 1435,
        "db_id": "student_club",
        "question_en": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
        "question_ar": "",
        "evidence_en": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1436,
        "db_id": "student_club",
        "question_en": "Please provide links to events for members who have paid more than 50 dollar.",
        "question_ar": "",
        "evidence_en": "have paid more than 50 dollar refers to cost > 50",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
        "difficulty": "simple"
    },
    {
        "question_id": 1437,
        "db_id": "student_club",
        "question_en": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
        "question_ar": "",
        "evidence_en": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1438,
        "db_id": "student_club",
        "question_en": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "difficulty": "simple"
    },
    {
        "question_id": 1439,
        "db_id": "student_club",
        "question_en": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
        "question_ar": "",
        "evidence_en": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "evidence_ar": "",
        "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1440,
        "db_id": "student_club",
        "question_en": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
        "question_ar": "",
        "evidence_en": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
        "difficulty": "moderate"
    },
    {
        "question_id": 1441,
        "db_id": "student_club",
        "question_en": "How many members have education major in the College of Education & Human Services?",
        "question_ar": "",
        "evidence_en": "'education' is the major name; 'Member' is a position of club;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1442,
        "db_id": "student_club",
        "question_en": "What is the percentage of the events that went over budget?",
        "question_ar": "",
        "evidence_en": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
        "difficulty": "simple"
    },
    {
        "question_id": 1443,
        "db_id": "student_club",
        "question_en": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
        "question_ar": "",
        "evidence_en": "event_date BETWEEN '2019-11-01' and '2020-03-31'",
        "evidence_ar": "",
        "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
        "difficulty": "simple"
    },
    {
        "question_id": 1444,
        "db_id": "student_club",
        "question_en": "List the expenses that spend more than fifty dollars on average.",
        "question_ar": "",
        "evidence_en": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50",
        "evidence_ar": "",
        "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
        "difficulty": "simple"
    },
    {
        "question_id": 1445,
        "db_id": "student_club",
        "question_en": "Find the full name of members whose t-shirt size is extra large.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'",
        "evidence_ar": "",
        "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
        "difficulty": "simple"
    },
    {
        "question_id": 1446,
        "db_id": "student_club",
        "question_en": "Calculate the percentage of zip codes that are PO boxes.",
        "question_ar": "",
        "evidence_en": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
        "difficulty": "simple"
    },
    {
        "question_id": 1447,
        "db_id": "student_club",
        "question_en": "List the name and location of events that underspend its budget.",
        "question_ar": "",
        "evidence_en": "name of event refers to event_name; underspend its budget refers to remaining > 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
        "difficulty": "simple"
    },
    {
        "question_id": 1448,
        "db_id": "student_club",
        "question_en": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
        "question_ar": "",
        "evidence_en": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
        "difficulty": "challenging"
    },
    {
        "question_id": 1449,
        "db_id": "student_club",
        "question_en": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 1450,
        "db_id": "student_club",
        "question_en": "In the events with more than forty incomes, list the city and country in which the event is happening.",
        "question_ar": "",
        "evidence_en": "more than fifty incomes refers to income > 40",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
        "difficulty": "simple"
    },
    {
        "question_id": 1451,
        "db_id": "student_club",
        "question_en": "Among the members who incurred expenses in more than one event, who paid the most amount?",
        "question_ar": "",
        "evidence_en": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)",
        "evidence_ar": "",
        "SQL": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1452,
        "db_id": "student_club",
        "question_en": "What is the average amount paid by students in a position other than a member?",
        "question_ar": "",
        "evidence_en": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1453,
        "db_id": "student_club",
        "question_en": "List the name of events with less than average parking cost.",
        "question_ar": "",
        "evidence_en": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "moderate"
    },
    {
        "question_id": 1454,
        "db_id": "student_club",
        "question_en": "What is the percentage of the cost for the meeting events?",
        "question_ar": "",
        "evidence_en": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "difficulty": "moderate"
    },
    {
        "question_id": 1455,
        "db_id": "student_club",
        "question_en": "Which budget allowed the most money for water, chips, and cookies?",
        "question_ar": "",
        "evidence_en": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)",
        "evidence_ar": "",
        "SQL": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1456,
        "db_id": "student_club",
        "question_en": "List the full name of the top five members who spend the most money in the descending order of spending.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
        "evidence_ar": "",
        "SQL": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1457,
        "db_id": "student_club",
        "question_en": "Give the full name and contact number of members who had to spend more than average on each expense.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1458,
        "db_id": "student_club",
        "question_en": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
        "question_ar": "",
        "evidence_en": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
        "difficulty": "moderate"
    },
    {
        "question_id": 1459,
        "db_id": "student_club",
        "question_en": "What is the major of Garrett Gerke and which department does it belong to?",
        "question_ar": "",
        "evidence_en": "major refers to major name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "difficulty": "simple"
    },
    {
        "question_id": 1460,
        "db_id": "student_club",
        "question_en": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "evidence_ar": "",
        "SQL": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1461,
        "db_id": "student_club",
        "question_en": "List the last names of students under the Elementary Education major and include their phone numbers.",
        "question_ar": "",
        "evidence_en": "'Elementary Education' is the major name; phone numbers refers to phone",
        "evidence_ar": "",
        "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
        "difficulty": "simple"
    },
    {
        "question_id": 1462,
        "db_id": "student_club",
        "question_en": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
        "question_ar": "",
        "evidence_en": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
        "difficulty": "simple"
    },
    {
        "question_id": 1463,
        "db_id": "student_club",
        "question_en": "List the event names which were budgeted for the food.",
        "question_ar": "",
        "evidence_en": "budgeted for food refers to category = 'Food'",
        "evidence_ar": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
        "difficulty": "simple"
    },
    {
        "question_id": 1464,
        "db_id": "student_club",
        "question_en": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1465,
        "db_id": "student_club",
        "question_en": "Which budget category does the expense 'Posters' fall to?",
        "question_ar": "",
        "evidence_en": "'Posters' refers to expense description",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
        "difficulty": "simple"
    },
    {
        "question_id": 1466,
        "db_id": "student_club",
        "question_en": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last name",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
        "difficulty": "simple"
    },
    {
        "question_id": 1467,
        "db_id": "student_club",
        "question_en": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
        "question_ar": "",
        "evidence_en": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "difficulty": "simple"
    },
    {
        "question_id": 1468,
        "db_id": "student_club",
        "question_en": "Where is the hometown of Garrett Gerke?",
        "question_ar": "",
        "evidence_en": "hometown refers to city",
        "evidence_ar": "",
        "SQL": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "difficulty": "simple"
    },
    {
        "question_id": 1469,
        "db_id": "student_club",
        "question_en": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
        "question_ar": "",
        "evidence_en": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'",
        "evidence_ar": "",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
        "difficulty": "moderate"
    },
    {
        "question_id": 1470,
        "db_id": "debit_card_specializing",
        "question_en": "How many gas stations in CZE has Premium gas?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "difficulty": "simple"
    },
    {
        "question_id": 1471,
        "db_id": "debit_card_specializing",
        "question_en": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "question_ar": "",
        "evidence_en": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "difficulty": "simple"
    },
    {
        "question_id": 1472,
        "db_id": "debit_card_specializing",
        "question_en": "In 2012, who had the least consumption in LAM?",
        "question_ar": "",
        "evidence_en": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1473,
        "db_id": "debit_card_specializing",
        "question_en": "What was the average monthly consumption of customers in SME for the year 2013?",
        "question_ar": "",
        "evidence_en": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1474,
        "db_id": "debit_card_specializing",
        "question_en": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "question_ar": "",
        "evidence_en": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1475,
        "db_id": "debit_card_specializing",
        "question_en": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "question_ar": "",
        "evidence_en": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1476,
        "db_id": "debit_card_specializing",
        "question_en": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "question_ar": "",
        "evidence_en": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1477,
        "db_id": "debit_card_specializing",
        "question_en": "Which year recorded the most gas use paid in EUR?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1478,
        "db_id": "debit_card_specializing",
        "question_en": "Which segment had the least consumption?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1479,
        "db_id": "debit_card_specializing",
        "question_en": "Which year recorded the most consumption of gas paid in CZK?",
        "question_ar": "",
        "evidence_en": "The first 4 strings of the Date values in the yearmonth table can represent year.",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1480,
        "db_id": "debit_card_specializing",
        "question_en": "What was the gas consumption peak month for SME customers in 2013?",
        "question_ar": "",
        "evidence_en": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "evidence_ar": "",
        "SQL": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1481,
        "db_id": "debit_card_specializing",
        "question_en": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "question_ar": "",
        "evidence_en": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question_id": 1482,
        "db_id": "debit_card_specializing",
        "question_en": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "question_ar": "",
        "evidence_en": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "evidence_ar": "",
        "SQL": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "difficulty": "challenging"
    },
    {
        "question_id": 1483,
        "db_id": "debit_card_specializing",
        "question_en": "How much did customer 6 consume in total between August and November 2013?",
        "question_ar": "",
        "evidence_en": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "difficulty": "simple"
    },
    {
        "question_id": 1484,
        "db_id": "debit_card_specializing",
        "question_en": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "question_ar": "",
        "evidence_en": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "difficulty": "simple"
    },
    {
        "question_id": 1485,
        "db_id": "debit_card_specializing",
        "question_en": "How much more was customer 7 consuming in April 2013 than customer 5?",
        "question_ar": "",
        "evidence_en": "April 2013 refers to 201304 in the yearmonth.date",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'",
        "difficulty": "simple"
    },
    {
        "question_id": 1486,
        "db_id": "debit_card_specializing",
        "question_en": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "question_ar": "",
        "evidence_en": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
        "difficulty": "simple"
    },
    {
        "question_id": 1487,
        "db_id": "debit_card_specializing",
        "question_en": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
        "question_ar": "",
        "evidence_en": "October 2013 refers to 201310 in the yearmonth.date",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1488,
        "db_id": "debit_card_specializing",
        "question_en": "Who among KAM's customers consumed the most? How much did it consume?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1489,
        "db_id": "debit_card_specializing",
        "question_en": "How much did the KAM customers consume in total in May 2013?",
        "question_ar": "",
        "evidence_en": "May 2013 refers to yearmonth.date = 201305",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
        "difficulty": "simple"
    },
    {
        "question_id": 1490,
        "db_id": "debit_card_specializing",
        "question_en": "How many percent of LAM customer consumed more than 46.73?",
        "question_ar": "",
        "evidence_en": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1491,
        "db_id": "debit_card_specializing",
        "question_en": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1492,
        "db_id": "debit_card_specializing",
        "question_en": "What percentage of KAM customers pay in euros?",
        "question_ar": "",
        "evidence_en": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
        "difficulty": "simple"
    },
    {
        "question_id": 1493,
        "db_id": "debit_card_specializing",
        "question_en": "In February 2012, what percentage of customers consumed more than 528.3?",
        "question_ar": "",
        "evidence_en": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
        "difficulty": "simple"
    },
    {
        "question_id": 1494,
        "db_id": "debit_card_specializing",
        "question_en": "What percentage of Slovakian gas stations are premium?",
        "question_ar": "",
        "evidence_en": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
        "difficulty": "simple"
    },
    {
        "question_id": 1495,
        "db_id": "debit_card_specializing",
        "question_en": "Which client ID consumed the most in September 2013?",
        "question_ar": "",
        "evidence_en": "September 2013 refers to yearmonth.date = '201309'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1496,
        "db_id": "debit_card_specializing",
        "question_en": "Which client segment consumed the least in September 2013?",
        "question_ar": "",
        "evidence_en": "September 2013 refers to yearmonth.date = '201309'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1497,
        "db_id": "debit_card_specializing",
        "question_en": "Which SME customer consumed the least in June 2012?",
        "question_ar": "",
        "evidence_en": "June 2012 refers to yearmonth.date = '201206'",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1498,
        "db_id": "debit_card_specializing",
        "question_en": "What is the highest monthly consumption in the year 2012?",
        "question_ar": "",
        "evidence_en": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1499,
        "db_id": "debit_card_specializing",
        "question_en": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "question_ar": "",
        "evidence_en": "Monthly consumption = SUM(consumption) / 12",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1500,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the product description of the products consumed in September, 2013.",
        "question_ar": "",
        "evidence_en": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "evidence_ar": "",
        "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
        "difficulty": "simple"
    },
    {
        "question_id": 1501,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
        "question_ar": "",
        "evidence_en": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1502,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the chains of the gas stations with transactions in euro.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
        "difficulty": "simple"
    },
    {
        "question_id": 1503,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the product description of the products bought in transactions in euro.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
        "difficulty": "simple"
    },
    {
        "question_id": 1504,
        "db_id": "debit_card_specializing",
        "question_en": "What is the average total price of the transactions taken place in January, 2012?",
        "question_ar": "",
        "evidence_en": "In January, 2012 means Date contains '2012-01'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "difficulty": "simple"
    },
    {
        "question_id": 1505,
        "db_id": "debit_card_specializing",
        "question_en": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "question_ar": "",
        "evidence_en": "Pays in euro = Currency = 'EUR'.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "difficulty": "simple"
    },
    {
        "question_id": 1506,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "question_ar": "",
        "evidence_en": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1507,
        "db_id": "debit_card_specializing",
        "question_en": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
        "difficulty": "simple"
    },
    {
        "question_id": 1508,
        "db_id": "debit_card_specializing",
        "question_en": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
        "question_ar": "",
        "evidence_en": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
        "difficulty": "simple"
    },
    {
        "question_id": 1509,
        "db_id": "debit_card_specializing",
        "question_en": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "question_ar": "",
        "evidence_en": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1510,
        "db_id": "debit_card_specializing",
        "question_en": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "question_ar": "",
        "evidence_en": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "difficulty": "simple"
    },
    {
        "question_id": 1511,
        "db_id": "debit_card_specializing",
        "question_en": "For the customers who paid in the euro, what is their average total price of the transactions?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
        "difficulty": "simple"
    },
    {
        "question_id": 1512,
        "db_id": "debit_card_specializing",
        "question_en": "Which customer paid the most in 2012/8/25?",
        "question_ar": "",
        "evidence_en": "'2012/8/25' can be represented by '2012-08-25'",
        "evidence_ar": "",
        "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1513,
        "db_id": "debit_card_specializing",
        "question_en": "Which country's gas station had the first paid cusomer in 2012/8/25?",
        "question_ar": "",
        "evidence_en": "'2012/8/25' can be represented by '2012-08-25'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1514,
        "db_id": "debit_card_specializing",
        "question_en": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "question_ar": "",
        "evidence_en": "'2012/8/24' can be represented by '2012-08-24'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 1515,
        "db_id": "debit_card_specializing",
        "question_en": "What segment did the customer have at 2012/8/23 21:20:00?",
        "question_ar": "",
        "evidence_en": "'2012/8/23' can be represented by '2012-08-23'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 1516,
        "db_id": "debit_card_specializing",
        "question_en": "How many transactions were paid in CZK in the morning of 2012/8/26?",
        "question_ar": "",
        "evidence_en": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1517,
        "db_id": "debit_card_specializing",
        "question_en": "For the earliest customer, what segment did he/she have?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1518,
        "db_id": "debit_card_specializing",
        "question_en": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
        "question_ar": "",
        "evidence_en": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 1519,
        "db_id": "debit_card_specializing",
        "question_en": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "question_ar": "",
        "evidence_en": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
        "evidence_ar": "",
        "SQL": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 1520,
        "db_id": "debit_card_specializing",
        "question_en": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
        "question_ar": "",
        "evidence_en": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning.",
        "evidence_ar": "",
        "SQL": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1521,
        "db_id": "debit_card_specializing",
        "question_en": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
        "question_ar": "",
        "evidence_en": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1522,
        "db_id": "debit_card_specializing",
        "question_en": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
        "question_ar": "",
        "evidence_en": "June of 2013 means Date contains '201306' in the yearmonth.date of the database",
        "evidence_ar": "",
        "SQL": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17",
        "difficulty": "simple"
    },
    {
        "question_id": 1523,
        "db_id": "debit_card_specializing",
        "question_en": "Which country was the card owner of No.667467 in?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
        "difficulty": "simple"
    },
    {
        "question_id": 1524,
        "db_id": "debit_card_specializing",
        "question_en": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "question_ar": "",
        "evidence_en": "'2012/8/24' can be represented by '2012-08-24'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
        "difficulty": "simple"
    },
    {
        "question_id": 1525,
        "db_id": "debit_card_specializing",
        "question_en": "What is the percentage of the customers who used EUR in 2012/8/25?",
        "question_ar": "",
        "evidence_en": "'2012/8/25' can be represented by '2012-08-25'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "difficulty": "simple"
    },
    {
        "question_id": 1526,
        "db_id": "debit_card_specializing",
        "question_en": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
        "question_ar": "",
        "evidence_en": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1527,
        "db_id": "debit_card_specializing",
        "question_en": "Which gas station has the highest amount of revenue?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1528,
        "db_id": "debit_card_specializing",
        "question_en": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "difficulty": "simple"
    },
    {
        "question_id": 1529,
        "db_id": "debit_card_specializing",
        "question_en": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
        "question_ar": "",
        "evidence_en": "January 2012 refers to the Date value = '201201'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1530,
        "db_id": "debit_card_specializing",
        "question_en": "Which are the top five best selling products? Please state the full name of them.",
        "question_ar": "",
        "evidence_en": "Description of products contains full name",
        "evidence_ar": "",
        "SQL": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 1531,
        "db_id": "debit_card_specializing",
        "question_en": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "question_ar": "",
        "evidence_en": "average price per single item = Total(price) / Total(amount)",
        "evidence_ar": "",
        "SQL": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "difficulty": "moderate"
    },
    {
        "question_id": 1532,
        "db_id": "debit_card_specializing",
        "question_en": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1533,
        "db_id": "debit_card_specializing",
        "question_en": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
        "question_ar": "",
        "evidence_en": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
        "difficulty": "moderate"
    }
]