[
    {
        "question_id": 768,
        "db_id": "superhero",
        "question_en": "How many superheroes were published by Dark Horse Comics?",
        "question_ar": "",
        "evidence_en": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "difficulty": "simple"
    },
    {
        "question_id": 769,
        "db_id": "superhero",
        "question_en": "Which superhero has the most durability published by Dark Horse Comics?",
        "question_ar": "",
        "evidence_en": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 770,
        "db_id": "superhero",
        "question_en": "What is the eyes colour of Abraham Sapien?",
        "question_ar": "",
        "evidence_en": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "difficulty": "simple"
    },
    {
        "question_id": 771,
        "db_id": "superhero",
        "question_en": "List the name of superheroes with flight power.",
        "question_ar": "",
        "evidence_en": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "difficulty": "simple"
    },
    {
        "question_id": 772,
        "db_id": "superhero",
        "question_en": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "question_ar": "",
        "evidence_en": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence_ar": "",
        "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 773,
        "db_id": "superhero",
        "question_en": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
        "question_ar": "",
        "evidence_en": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 774,
        "db_id": "superhero",
        "question_en": "Which group does superhero A-Bomb belong to?",
        "question_ar": "",
        "evidence_en": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence_ar": "",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple"
    },
    {
        "question_id": 775,
        "db_id": "superhero",
        "question_en": "What is the percentage of blue female superheroes among all female superheroes?",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 776,
        "db_id": "superhero",
        "question_en": "Provide the hero name and race of Charles Chandler.",
        "question_ar": "",
        "evidence_en": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "difficulty": "simple"
    },
    {
        "question_id": 777,
        "db_id": "superhero",
        "question_en": "What is the gender of Agent 13 hero?",
        "question_ar": "",
        "evidence_en": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence_ar": "",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "difficulty": "simple"
    },
    {
        "question_id": 778,
        "db_id": "superhero",
        "question_en": "Provide superheroes' names who have the adaptation power.",
        "question_ar": "",
        "evidence_en": "adaptation power refers to power_name = 'Adaptation';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "difficulty": "simple"
    },
    {
        "question_id": 779,
        "db_id": "superhero",
        "question_en": "How many powers does Amazo hero have?",
        "question_ar": "",
        "evidence_en": "Amazo hero refers to superhero_name = 'Amazo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "difficulty": "simple"
    },
    {
        "question_id": 780,
        "db_id": "superhero",
        "question_en": "List the powers of Hunter Zolomon.",
        "question_ar": "",
        "evidence_en": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "difficulty": "simple"
    },
    {
        "question_id": 781,
        "db_id": "superhero",
        "question_en": "Provide the heights of the heroes whose eye colours are amber.",
        "question_ar": "",
        "evidence_en": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "difficulty": "simple"
    },
    {
        "question_id": 782,
        "db_id": "superhero",
        "question_en": "List the heroes' names whose eyes and hair colours are both black.",
        "question_ar": "",
        "evidence_en": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
        "difficulty": "moderate"
    },
    {
        "question_id": 783,
        "db_id": "superhero",
        "question_en": "Provide the eye colours of the heroes whose skin colours are gold.",
        "question_ar": "",
        "evidence_en": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
        "difficulty": "simple"
    },
    {
        "question_id": 784,
        "db_id": "superhero",
        "question_en": "Provide the full names of vampire heroes.",
        "question_ar": "",
        "evidence_en": "vampire heroes refers to race = 'Vampire';",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "difficulty": "simple"
    },
    {
        "question_id": 785,
        "db_id": "superhero",
        "question_en": "Describe the names of neutral alignment superheroes.",
        "question_ar": "",
        "evidence_en": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "difficulty": "simple"
    },
    {
        "question_id": 786,
        "db_id": "superhero",
        "question_en": "How many heroes have the highest attribute value in strength?",
        "question_ar": "",
        "evidence_en": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
        "difficulty": "moderate"
    },
    {
        "question_id": 787,
        "db_id": "superhero",
        "question_en": "What are the race and alignment of Cameron Hicks?",
        "question_ar": "",
        "evidence_en": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence_ar": "",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "difficulty": "simple"
    },
    {
        "question_id": 788,
        "db_id": "superhero",
        "question_en": "How many percent of female heroes were published by Marvel Comics?",
        "question_ar": "",
        "evidence_en": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 789,
        "db_id": "superhero",
        "question_en": "Find the average weight of the heroes who are aliens.",
        "question_ar": "",
        "evidence_en": "average = AVG(weight_kg); aliens refers to race = 'Alien';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "difficulty": "simple"
    },
    {
        "question_id": 790,
        "db_id": "superhero",
        "question_en": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
        "question_ar": "",
        "evidence_en": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
        "difficulty": "moderate"
    },
    {
        "question_id": 791,
        "db_id": "superhero",
        "question_en": "Calculate the average height for each superhero.",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
        "difficulty": "simple"
    },
    {
        "question_id": 792,
        "db_id": "superhero",
        "question_en": "What is Abomination's superpower?",
        "question_ar": "",
        "evidence_en": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "difficulty": "simple"
    },
    {
        "question_id": 793,
        "db_id": "superhero",
        "question_en": "Among the superheroes with the race of god/eternal, how many of them are male",
        "question_ar": "",
        "evidence_en": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 794,
        "db_id": "superhero",
        "question_en": "Which hero was the fastest?",
        "question_ar": "",
        "evidence_en": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 795,
        "db_id": "superhero",
        "question_en": "How many superheroes have a neutral alignment?",
        "question_ar": "",
        "evidence_en": "neutral alignment refers to alignment_id = 3;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "difficulty": "simple"
    },
    {
        "question_id": 796,
        "db_id": "superhero",
        "question_en": "State all of 3-D Man's attributes along with their values.",
        "question_ar": "",
        "evidence_en": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence_ar": "",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "difficulty": "moderate"
    },
    {
        "question_id": 797,
        "db_id": "superhero",
        "question_en": "Which superheroes have blue eyes with brown hair?",
        "question_ar": "",
        "evidence_en": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "difficulty": "moderate"
    },
    {
        "question_id": 798,
        "db_id": "superhero",
        "question_en": "What is the publisher for Hawkman, Karate Kid and Speedy?",
        "question_ar": "",
        "evidence_en": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "difficulty": "moderate"
    },
    {
        "question_id": 799,
        "db_id": "superhero",
        "question_en": "How many superheroes didn't have any publisher?",
        "question_ar": "",
        "evidence_en": "didn't have any publisher refers to publisher.id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 800,
        "db_id": "superhero",
        "question_en": "Calculate the percentage of superheroes with blue eyes.",
        "question_ar": "",
        "evidence_en": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
        "difficulty": "moderate"
    },
    {
        "question_id": 801,
        "db_id": "superhero",
        "question_en": "Find the ratio between male superheroes and female superheroes.",
        "question_ar": "",
        "evidence_en": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
        "difficulty": "moderate"
    },
    {
        "question_id": 802,
        "db_id": "superhero",
        "question_en": "Who is the tallest superhero?",
        "question_ar": "",
        "evidence_en": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 803,
        "db_id": "superhero",
        "question_en": "What is the power ID of cryokinesis?",
        "question_ar": "",
        "evidence_en": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence_ar": "",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "difficulty": "simple"
    },
    {
        "question_id": 804,
        "db_id": "superhero",
        "question_en": "Provide the name of superhero with superhero ID 294.",
        "question_ar": "",
        "evidence_en": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero WHERE id = 294",
        "difficulty": "simple"
    },
    {
        "question_id": 805,
        "db_id": "superhero",
        "question_en": "List the full names of superheroes with missing weight.",
        "question_ar": "",
        "evidence_en": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
        "difficulty": "simple"
    },
    {
        "question_id": 806,
        "db_id": "superhero",
        "question_en": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
        "question_ar": "",
        "evidence_en": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "difficulty": "simple"
    },
    {
        "question_id": 807,
        "db_id": "superhero",
        "question_en": "What is the superpowers of the superhero has Helen Parr as their full name?",
        "question_ar": "",
        "evidence_en": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "difficulty": "simple"
    },
    {
        "question_id": 808,
        "db_id": "superhero",
        "question_en": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
        "question_ar": "",
        "evidence_en": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "difficulty": "simple"
    },
    {
        "question_id": 809,
        "db_id": "superhero",
        "question_en": "What is the publisher name of the superhero ID 38?",
        "question_ar": "",
        "evidence_en": "superhero ID 38 refers to superhero.id = 38;",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "difficulty": "simple"
    },
    {
        "question_id": 810,
        "db_id": "superhero",
        "question_en": "What is the race of the superhero with maximum attribute value?",
        "question_ar": "",
        "evidence_en": "maximum attribute value refers to MAX(attribute_value);",
        "evidence_ar": "",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 811,
        "db_id": "superhero",
        "question_en": "Give the alignment and superpowers of the superhero named Atom IV.",
        "question_ar": "",
        "evidence_en": "superpowers refers to power_name;",
        "evidence_ar": "",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
        "difficulty": "simple"
    },
    {
        "question_id": 812,
        "db_id": "superhero",
        "question_en": "List down at least five full names of superheroes with blue eyes.",
        "question_ar": "",
        "evidence_en": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 813,
        "db_id": "superhero",
        "question_en": "Calculate the average attribute value of all neutral superheroes.",
        "question_ar": "",
        "evidence_en": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'",
        "difficulty": "simple"
    },
    {
        "question_id": 814,
        "db_id": "superhero",
        "question_en": "List the skin colour of the superheroes with 100 attribute value.",
        "question_ar": "",
        "evidence_en": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 815,
        "db_id": "superhero",
        "question_en": "Count the good female superheroes.",
        "question_ar": "",
        "evidence_en": "good refers to alignment.id = 1; female refers to gender.id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
        "difficulty": "simple"
    },
    {
        "question_id": 816,
        "db_id": "superhero",
        "question_en": "Provide the names of superheroes with attribute value between 75 to 80.",
        "question_ar": "",
        "evidence_en": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "difficulty": "simple"
    },
    {
        "question_id": 817,
        "db_id": "superhero",
        "question_en": "Give the race of the blue-haired male superhero.",
        "question_ar": "",
        "evidence_en": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "evidence_ar": "",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "difficulty": "moderate"
    },
    {
        "question_id": 818,
        "db_id": "superhero",
        "question_en": "Among the bad superheroes, what is the percentage of female superheroes?",
        "question_ar": "",
        "evidence_en": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question_id": 819,
        "db_id": "superhero",
        "question_en": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
        "question_ar": "",
        "evidence_en": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 820,
        "db_id": "superhero",
        "question_en": "How strong is the Hulk?",
        "question_ar": "",
        "evidence_en": "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
        "difficulty": "moderate"
    },
    {
        "question_id": 821,
        "db_id": "superhero",
        "question_en": "List down Ajax's superpowers.",
        "question_ar": "",
        "evidence_en": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "difficulty": "simple"
    },
    {
        "question_id": 822,
        "db_id": "superhero",
        "question_en": "How many green-skinned villains are there in the superhero universe?",
        "question_ar": "",
        "evidence_en": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
        "difficulty": "moderate"
    },
    {
        "question_id": 823,
        "db_id": "superhero",
        "question_en": "How many female superheroes are in Marvel Comics?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "difficulty": "moderate"
    },
    {
        "question_id": 824,
        "db_id": "superhero",
        "question_en": "Identify superheroes who can control wind and list their names in alphabetical order.",
        "question_ar": "",
        "evidence_en": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
        "difficulty": "moderate"
    },
    {
        "question_id": 825,
        "db_id": "superhero",
        "question_en": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "question_ar": "",
        "evidence_en": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence_ar": "",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "difficulty": "moderate"
    },
    {
        "question_id": 826,
        "db_id": "superhero",
        "question_en": "Identify the heaviest superhero in DC Comics.",
        "question_ar": "",
        "evidence_en": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 827,
        "db_id": "superhero",
        "question_en": "What is the average height of a non-human superhero in Dark Horse Comics?",
        "question_ar": "",
        "evidence_en": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
        "difficulty": "moderate"
    },
    {
        "question_id": 828,
        "db_id": "superhero",
        "question_en": "Count the fastest superheroes.",
        "question_ar": "",
        "evidence_en": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
        "difficulty": "simple"
    },
    {
        "question_id": 829,
        "db_id": "superhero",
        "question_en": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
        "question_ar": "",
        "evidence_en": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "difficulty": "challenging"
    },
    {
        "question_id": 830,
        "db_id": "superhero",
        "question_en": "Identify the weakest attribute of the Black Panther.",
        "question_ar": "",
        "evidence_en": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence_ar": "",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 831,
        "db_id": "superhero",
        "question_en": "What is Abomination's eye colour?",
        "question_ar": "",
        "evidence_en": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "difficulty": "simple"
    },
    {
        "question_id": 832,
        "db_id": "superhero",
        "question_en": "Name the tallest superhero.",
        "question_ar": "",
        "evidence_en": "tallest superhero refers to MAX(height_cm);",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 833,
        "db_id": "superhero",
        "question_en": "Name the superhero, otherwise known as Charles Chandler.",
        "question_ar": "",
        "evidence_en": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "difficulty": "simple"
    },
    {
        "question_id": 834,
        "db_id": "superhero",
        "question_en": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
        "question_ar": "",
        "evidence_en": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
        "difficulty": "challenging"
    },
    {
        "question_id": 835,
        "db_id": "superhero",
        "question_en": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
        "question_ar": "",
        "evidence_en": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
        "difficulty": "challenging"
    },
    {
        "question_id": 836,
        "db_id": "superhero",
        "question_en": "What is the total number of superheroes that have John as their first name?",
        "question_ar": "",
        "evidence_en": "have John as their first name refers to full_name LIKE 'John%';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
        "difficulty": "simple"
    },
    {
        "question_id": 837,
        "db_id": "superhero",
        "question_en": "Give the hero ID of superhero with the lowest attribute value.",
        "question_ar": "",
        "evidence_en": "lowest attribute value refers to MIN(attribute_value);",
        "evidence_ar": "",
        "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
        "difficulty": "simple"
    },
    {
        "question_id": 838,
        "db_id": "superhero",
        "question_en": "Provide the full name of the superhero named Alien.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "difficulty": "simple"
    },
    {
        "question_id": 839,
        "db_id": "superhero",
        "question_en": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
        "question_ar": "",
        "evidence_en": "weight less than 100 refers to weight_kg < 100",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "difficulty": "simple"
    },
    {
        "question_id": 840,
        "db_id": "superhero",
        "question_en": "List the attribute value of the superhero named Aquababy.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "difficulty": "simple"
    },
    {
        "question_id": 841,
        "db_id": "superhero",
        "question_en": "Provide the weight and race of the superhero with superhero ID 40.",
        "question_ar": "",
        "evidence_en": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;",
        "evidence_ar": "",
        "SQL": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
        "difficulty": "simple"
    },
    {
        "question_id": 842,
        "db_id": "superhero",
        "question_en": "Calculate the average height of all neutral superheroes.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "difficulty": "simple"
    },
    {
        "question_id": 843,
        "db_id": "superhero",
        "question_en": "List the hero ID of superheroes have intellegence as their power.",
        "question_ar": "",
        "evidence_en": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';",
        "evidence_ar": "",
        "SQL": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
        "difficulty": "simple"
    },
    {
        "question_id": 844,
        "db_id": "superhero",
        "question_en": "Give the eye colour of Blackwulf.",
        "question_ar": "",
        "evidence_en": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "difficulty": "simple"
    },
    {
        "question_id": 845,
        "db_id": "superhero",
        "question_en": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
        "question_ar": "",
        "evidence_en": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
        "difficulty": "moderate"
    },
    {
        "question_id": 846,
        "db_id": "formula_1",
        "question_en": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "question_ar": "",
        "evidence_en": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 847,
        "db_id": "formula_1",
        "question_en": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
        "evidence_ar": "",
        "SQL": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 848,
        "db_id": "formula_1",
        "question_en": "Please list the year during which the race is held on circuits in Shanghai.",
        "question_ar": "",
        "evidence_en": "Shanghai is a name of location;",
        "evidence_ar": "",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "difficulty": "simple"
    },
    {
        "question_id": 849,
        "db_id": "formula_1",
        "question_en": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "question_ar": "",
        "evidence_en": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple"
    },
    {
        "question_id": 850,
        "db_id": "formula_1",
        "question_en": "Please give the name of the race held on the circuits in Germany.",
        "question_ar": "",
        "evidence_en": "Germany is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "difficulty": "simple"
    },
    {
        "question_id": 851,
        "db_id": "formula_1",
        "question_en": "Please list the positions of the circuits built by the constructor Renault.",
        "question_ar": "",
        "evidence_en": "Renault is a name of constructor;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "difficulty": "simple"
    },
    {
        "question_id": 852,
        "db_id": "formula_1",
        "question_en": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
        "difficulty": "moderate"
    },
    {
        "question_id": 853,
        "db_id": "formula_1",
        "question_en": "Please give the names of the races held on the circuits in Spain.",
        "question_ar": "",
        "evidence_en": "Spain is a name of country;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
        "difficulty": "simple"
    },
    {
        "question_id": 854,
        "db_id": "formula_1",
        "question_en": "What is the coordinates location of the circuits for Australian grand prix?",
        "question_ar": "",
        "evidence_en": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 855,
        "db_id": "formula_1",
        "question_en": "Where can I find the information about the races held on Sepang International Circuit?",
        "question_ar": "",
        "evidence_en": "information about races refers to url;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 856,
        "db_id": "formula_1",
        "question_en": "Please list the time of the races held on Sepang International Circuit.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 857,
        "db_id": "formula_1",
        "question_en": "Give the coordinate position for Abu Dhabi Grand Prix.",
        "question_ar": "",
        "evidence_en": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 858,
        "db_id": "formula_1",
        "question_en": "Which country is the constructor which got 1 point in the race No. 24 from?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 859,
        "db_id": "formula_1",
        "question_en": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "evidence_ar": "",
        "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "difficulty": "simple"
    },
    {
        "question_id": 860,
        "db_id": "formula_1",
        "question_en": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
        "difficulty": "simple"
    },
    {
        "question_id": 861,
        "db_id": "formula_1",
        "question_en": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "difficulty": "simple"
    },
    {
        "question_id": 862,
        "db_id": "formula_1",
        "question_en": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "question_ar": "",
        "evidence_en": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 863,
        "db_id": "formula_1",
        "question_en": "Show me the season page of year when the race No. 901 took place.",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "difficulty": "simple"
    },
    {
        "question_id": 864,
        "db_id": "formula_1",
        "question_en": "For the race happened on 2015/11/29, how many drivers finished the game?",
        "question_ar": "",
        "evidence_en": "game and race are synonyms; drivers who finished the race should have record in time;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 865,
        "db_id": "formula_1",
        "question_en": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "question_ar": "",
        "evidence_en": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 866,
        "db_id": "formula_1",
        "question_en": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "question_ar": "",
        "evidence_en": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 867,
        "db_id": "formula_1",
        "question_en": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
        "question_ar": "",
        "evidence_en": "fastest lap speed refers to MAX(fastestLapSpeed);",
        "evidence_ar": "",
        "SQL": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 868,
        "db_id": "formula_1",
        "question_en": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 869,
        "db_id": "formula_1",
        "question_en": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
        "evidence_ar": "",
        "SQL": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 870,
        "db_id": "formula_1",
        "question_en": "What's Lucas di Grassi's Q1 result in the race No. 345?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "difficulty": "simple"
    },
    {
        "question_id": 871,
        "db_id": "formula_1",
        "question_en": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
        "difficulty": "simple"
    },
    {
        "question_id": 872,
        "db_id": "formula_1",
        "question_en": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
        "evidence_ar": "",
        "SQL": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
        "difficulty": "simple"
    },
    {
        "question_id": 873,
        "db_id": "formula_1",
        "question_en": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "difficulty": "simple"
    },
    {
        "question_id": 874,
        "db_id": "formula_1",
        "question_en": "Who finished second in the San Marino Grand Prix in 2006?",
        "question_ar": "",
        "evidence_en": "finished second refers to position = 2;",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 875,
        "db_id": "formula_1",
        "question_en": "Show me the season page of year when the race No. 901 took place.",
        "question_ar": "",
        "evidence_en": "the season page refers to url; race number refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "difficulty": "simple"
    },
    {
        "question_id": 876,
        "db_id": "formula_1",
        "question_en": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
        "question_ar": "",
        "evidence_en": "game and race are synonyms; drivers who didn't finish the race should have record in time;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 877,
        "db_id": "formula_1",
        "question_en": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 878,
        "db_id": "formula_1",
        "question_en": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
        "question_ar": "",
        "evidence_en": "race number refers to raceId; the best lap time refers to MIN(time)",
        "evidence_ar": "",
        "SQL": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 879,
        "db_id": "formula_1",
        "question_en": "For the driver who set the fastest lap speed, what is his nationality?",
        "question_ar": "",
        "evidence_en": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
        "evidence_ar": "",
        "SQL": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 880,
        "db_id": "formula_1",
        "question_en": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "question_ar": "",
        "evidence_en": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "difficulty": "challenging"
    },
    {
        "question_id": 881,
        "db_id": "formula_1",
        "question_en": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
        "difficulty": "moderate"
    },
    {
        "question_id": 882,
        "db_id": "formula_1",
        "question_en": "Which year was the first Singapore Grand Prix?",
        "question_ar": "",
        "evidence_en": "the first race refers to race happened in min(year);",
        "evidence_ar": "",
        "SQL": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 883,
        "db_id": "formula_1",
        "question_en": "How many races were there in 2005? Name all the races in descending order.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "difficulty": "simple"
    },
    {
        "question_id": 884,
        "db_id": "formula_1",
        "question_en": "List the names of all races that occurred in the earliest recorded year and month.",
        "question_ar": "",
        "evidence_en": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));",
        "evidence_ar": "",
        "SQL": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 885,
        "db_id": "formula_1",
        "question_en": "State the name and date of the last round of race in year 1999.",
        "question_ar": "",
        "evidence_en": "the last round refers to max(round);",
        "evidence_ar": "",
        "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 886,
        "db_id": "formula_1",
        "question_en": "Which year has the most number of races?",
        "question_ar": "",
        "evidence_en": "the most number of races refers to max(round);",
        "evidence_ar": "",
        "SQL": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 887,
        "db_id": "formula_1",
        "question_en": "Name the races in year 2017 that are not hosted in year 2000.",
        "question_ar": "",
        "evidence_en": "not hosted means not in;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "difficulty": "simple"
    },
    {
        "question_id": 888,
        "db_id": "formula_1",
        "question_en": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "question_ar": "",
        "evidence_en": "the first refers to min(year);",
        "evidence_ar": "",
        "SQL": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 889,
        "db_id": "formula_1",
        "question_en": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "question_ar": "",
        "evidence_en": "the last refers to max(year);",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 890,
        "db_id": "formula_1",
        "question_en": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
        "question_ar": "",
        "evidence_en": "British Grand Prix is the name of race; British refers to the United Kindom",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 891,
        "db_id": "formula_1",
        "question_en": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
        "difficulty": "simple"
    },
    {
        "question_id": 892,
        "db_id": "formula_1",
        "question_en": "State the driver with the most points scored. Find his full name with that points.",
        "question_ar": "",
        "evidence_en": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 893,
        "db_id": "formula_1",
        "question_en": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 894,
        "db_id": "formula_1",
        "question_en": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "question_ar": "",
        "evidence_en": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
        "evidence_ar": "",
        "SQL": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 895,
        "db_id": "formula_1",
        "question_en": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "question_ar": "",
        "evidence_en": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 896,
        "db_id": "formula_1",
        "question_en": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "difficulty": "challenging"
    },
    {
        "question_id": 897,
        "db_id": "formula_1",
        "question_en": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
        "question_ar": "",
        "evidence_en": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 898,
        "db_id": "formula_1",
        "question_en": "How old is the youngest Japanese driver? What is his name?",
        "question_ar": "",
        "evidence_en": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence_ar": "",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 899,
        "db_id": "formula_1",
        "question_en": "List circuits which host 4 f1 races from year 1990 to 2000.",
        "question_ar": "",
        "evidence_en": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 900,
        "db_id": "formula_1",
        "question_en": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "difficulty": "simple"
    },
    {
        "question_id": 901,
        "db_id": "formula_1",
        "question_en": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
        "question_ar": "",
        "evidence_en": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
        "difficulty": "simple"
    },
    {
        "question_id": 902,
        "db_id": "formula_1",
        "question_en": "Which race was Alex Yoong in when he was in track number less than 20?",
        "question_ar": "",
        "evidence_en": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "difficulty": "simple"
    },
    {
        "question_id": 903,
        "db_id": "formula_1",
        "question_en": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
        "question_ar": "",
        "evidence_en": "win from races refers to max(points)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
        "difficulty": "moderate"
    },
    {
        "question_id": 904,
        "db_id": "formula_1",
        "question_en": "State the race and year of race in which Michael Schumacher had his fastest lap.",
        "question_ar": "",
        "evidence_en": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 905,
        "db_id": "formula_1",
        "question_en": "What is Eddie Irvine's average points scored in year 2000?",
        "question_ar": "",
        "evidence_en": "average points = AVG(points where year = 2000)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
        "difficulty": "simple"
    },
    {
        "question_id": 906,
        "db_id": "formula_1",
        "question_en": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "question_ar": "",
        "evidence_en": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 907,
        "db_id": "formula_1",
        "question_en": "List all races in 2017 and the hosting country order by date of the event.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
        "difficulty": "simple"
    },
    {
        "question_id": 908,
        "db_id": "formula_1",
        "question_en": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 909,
        "db_id": "formula_1",
        "question_en": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
        "question_ar": "",
        "evidence_en": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 910,
        "db_id": "formula_1",
        "question_en": "What's the location coordinates of Silverstone Circuit?",
        "question_ar": "",
        "evidence_en": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence_ar": "",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 911,
        "db_id": "formula_1",
        "question_en": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
        "question_ar": "",
        "evidence_en": "higher latitude refers to max(lat)",
        "evidence_ar": "",
        "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 912,
        "db_id": "formula_1",
        "question_en": "What's the reference name of Marina Bay Street Circuit?",
        "question_ar": "",
        "evidence_en": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence_ar": "",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 913,
        "db_id": "formula_1",
        "question_en": "In which country can I find the circuit with the highest altitude?",
        "question_ar": "",
        "evidence_en": "highest altitude refers to max(alt)",
        "evidence_ar": "",
        "SQL": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 914,
        "db_id": "formula_1",
        "question_en": "How many drivers don't have a code?",
        "question_ar": "",
        "evidence_en": "don't have a code refers to code is null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
        "difficulty": "simple"
    },
    {
        "question_id": 915,
        "db_id": "formula_1",
        "question_en": "Which country is the oldest driver from?",
        "question_ar": "",
        "evidence_en": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 916,
        "db_id": "formula_1",
        "question_en": "Please list the surnames of all the Italian drivers.",
        "question_ar": "",
        "evidence_en": "Italian refers to nationality = 'italian'",
        "evidence_ar": "",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "difficulty": "simple"
    },
    {
        "question_id": 917,
        "db_id": "formula_1",
        "question_en": "Which website should I go to if I want to know more about Anthony Davidson?",
        "question_ar": "",
        "evidence_en": "website refers to url",
        "evidence_ar": "",
        "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "difficulty": "simple"
    },
    {
        "question_id": 918,
        "db_id": "formula_1",
        "question_en": "What's Lewis Hamilton's reference name?",
        "question_ar": "",
        "evidence_en": "reference name refers to driverRef",
        "evidence_ar": "",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 919,
        "db_id": "formula_1",
        "question_en": "Which circuit did the 2009 Spanish Grand Prix use?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 920,
        "db_id": "formula_1",
        "question_en": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 921,
        "db_id": "formula_1",
        "question_en": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "question_ar": "",
        "evidence_en": "more information refers to url",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 922,
        "db_id": "formula_1",
        "question_en": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 923,
        "db_id": "formula_1",
        "question_en": "How many Formula_1 races took place on the circuits in Italy?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
        "difficulty": "simple"
    },
    {
        "question_id": 924,
        "db_id": "formula_1",
        "question_en": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple"
    },
    {
        "question_id": 925,
        "db_id": "formula_1",
        "question_en": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
        "question_ar": "",
        "evidence_en": "link of the website refers to url",
        "evidence_ar": "",
        "SQL": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 926,
        "db_id": "formula_1",
        "question_en": "What's the fastest lap time ever in a race for Lewis Hamilton?",
        "question_ar": "",
        "evidence_en": "fastest lap time ever refers to min(fastestLapTime)",
        "evidence_ar": "",
        "SQL": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 927,
        "db_id": "formula_1",
        "question_en": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 928,
        "db_id": "formula_1",
        "question_en": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
        "question_ar": "",
        "evidence_en": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "difficulty": "moderate"
    },
    {
        "question_id": 929,
        "db_id": "formula_1",
        "question_en": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 930,
        "db_id": "formula_1",
        "question_en": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "question_ar": "",
        "evidence_en": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "evidence_ar": "",
        "SQL": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "difficulty": "simple"
    },
    {
        "question_id": 931,
        "db_id": "formula_1",
        "question_en": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
        "question_ar": "",
        "evidence_en": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
        "evidence_ar": "",
        "SQL": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 932,
        "db_id": "formula_1",
        "question_en": "In which years did Lewis Hamilton participate in a Formula_1 race?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 933,
        "db_id": "formula_1",
        "question_en": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
        "question_ar": "",
        "evidence_en": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "evidence_ar": "",
        "SQL": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
        "difficulty": "moderate"
    },
    {
        "question_id": 934,
        "db_id": "formula_1",
        "question_en": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
        "question_ar": "",
        "evidence_en": "the no. 4 grid formation refers to grid = 4",
        "evidence_ar": "",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
        "difficulty": "moderate"
    },
    {
        "question_id": 935,
        "db_id": "formula_1",
        "question_en": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "managed to finish the race refers to time is not null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 936,
        "db_id": "formula_1",
        "question_en": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 937,
        "db_id": "formula_1",
        "question_en": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
        "question_ar": "",
        "evidence_en": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "evidence_ar": "",
        "SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "difficulty": "simple"
    },
    {
        "question_id": 938,
        "db_id": "formula_1",
        "question_en": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
        "question_ar": "",
        "evidence_en": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
        "difficulty": "moderate"
    },
    {
        "question_id": 939,
        "db_id": "formula_1",
        "question_en": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "from the UN refers to nationality = 'British'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
        "difficulty": "moderate"
    },
    {
        "question_id": 940,
        "db_id": "formula_1",
        "question_en": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
        "question_ar": "",
        "evidence_en": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 941,
        "db_id": "formula_1",
        "question_en": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 942,
        "db_id": "formula_1",
        "question_en": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
        "question_ar": "",
        "evidence_en": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
        "evidence_ar": "",
        "SQL": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
        "difficulty": "moderate"
    },
    {
        "question_id": 943,
        "db_id": "formula_1",
        "question_en": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "difficulty": "moderate"
    },
    {
        "question_id": 944,
        "db_id": "formula_1",
        "question_en": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "evidence_ar": "",
        "SQL": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "difficulty": "challenging"
    },
    {
        "question_id": 945,
        "db_id": "formula_1",
        "question_en": "How many circuits are there in Adelaide, Australia?",
        "question_ar": "",
        "evidence_en": "Australia is the country; Melbourne is the location of circuit;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
        "difficulty": "simple"
    },
    {
        "question_id": 946,
        "db_id": "formula_1",
        "question_en": "Please list the location coordinates of the US circuits.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to (lat, lng); the US refers to country = 'USA';",
        "evidence_ar": "",
        "SQL": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "difficulty": "simple"
    },
    {
        "question_id": 947,
        "db_id": "formula_1",
        "question_en": "How many British drivers were born after 1980?",
        "question_ar": "",
        "evidence_en": "born after 1980 refers to year (dob) >1980;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
        "difficulty": "simple"
    },
    {
        "question_id": 948,
        "db_id": "formula_1",
        "question_en": "What are the maximum points of British constructors?",
        "question_ar": "",
        "evidence_en": "maximum points = MAX(points); British is a nationality",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "difficulty": "simple"
    },
    {
        "question_id": 949,
        "db_id": "formula_1",
        "question_en": "Which constructor has the highest point?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 950,
        "db_id": "formula_1",
        "question_en": "Please list the constructor names with 0 points at race 291.",
        "question_ar": "",
        "evidence_en": "race at 291 refers to raceID = 291;",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "difficulty": "simple"
    },
    {
        "question_id": 951,
        "db_id": "formula_1",
        "question_en": "How many Japanese constructors have 0 points in 2 races?",
        "question_ar": "",
        "evidence_en": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 952,
        "db_id": "formula_1",
        "question_en": "Which constructors have been ranked 1?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 953,
        "db_id": "formula_1",
        "question_en": "How many French constructors have a lap number of over 50?",
        "question_ar": "",
        "evidence_en": "lap numbers of over 50 refers to laps > 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
        "difficulty": "simple"
    },
    {
        "question_id": 954,
        "db_id": "formula_1",
        "question_en": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
        "question_ar": "",
        "evidence_en": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
        "difficulty": "challenging"
    },
    {
        "question_id": 955,
        "db_id": "formula_1",
        "question_en": "What is the average time in seconds of champion for each year, before year 1975?",
        "question_ar": "",
        "evidence_en": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "evidence_ar": "",
        "SQL": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 956,
        "db_id": "formula_1",
        "question_en": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
        "question_ar": "",
        "evidence_en": "born after 1975 refers to year(dob) >1975;",
        "evidence_ar": "",
        "SQL": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 957,
        "db_id": "formula_1",
        "question_en": "How many Italian drivers haven't finished the race?",
        "question_ar": "",
        "evidence_en": "haven't finished the race refers to time is null;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 958,
        "db_id": "formula_1",
        "question_en": "Which driver has the fastest lap time? Please give their forenames and surnames.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 959,
        "db_id": "formula_1",
        "question_en": "What is the fastest lap number of the champion in 2009?",
        "question_ar": "",
        "evidence_en": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
        "evidence_ar": "",
        "SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "simple"
    },
    {
        "question_id": 960,
        "db_id": "formula_1",
        "question_en": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
        "question_ar": "",
        "evidence_en": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 961,
        "db_id": "formula_1",
        "question_en": "Which race has the shortest actual finishing time? Please give the name and year.",
        "question_ar": "",
        "evidence_en": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 962,
        "db_id": "formula_1",
        "question_en": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "question_ar": "",
        "evidence_en": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "difficulty": "challenging"
    },
    {
        "question_id": 963,
        "db_id": "formula_1",
        "question_en": "How many French drivers who obtain the laptime less than 02:00.00?",
        "question_ar": "",
        "evidence_en": "lap time less than 02:00.00 refers to seconds < 120;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "difficulty": "moderate"
    },
    {
        "question_id": 964,
        "db_id": "formula_1",
        "question_en": "List out the code for drivers who have nationality in America.",
        "question_ar": "",
        "evidence_en": "nationality = 'America'",
        "evidence_ar": "",
        "SQL": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "difficulty": "simple"
    },
    {
        "question_id": 965,
        "db_id": "formula_1",
        "question_en": "List out the Id number of races which were hold in 2009.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT raceId FROM races WHERE year = 2009",
        "difficulty": "simple"
    },
    {
        "question_id": 966,
        "db_id": "formula_1",
        "question_en": "How many driver participated in race ID number 18?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "difficulty": "simple"
    },
    {
        "question_id": 967,
        "db_id": "formula_1",
        "question_en": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "question_ar": "",
        "evidence_en": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "difficulty": "simple"
    },
    {
        "question_id": 968,
        "db_id": "formula_1",
        "question_en": "What is reference name of Robert Kubica?",
        "question_ar": "",
        "evidence_en": "reference name refers to driverRef;",
        "evidence_ar": "",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "difficulty": "simple"
    },
    {
        "question_id": 969,
        "db_id": "formula_1",
        "question_en": "How many British drivers who were born in 1980?",
        "question_ar": "",
        "evidence_en": "born in 1980 refers to year(dob) = 1980;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "difficulty": "simple"
    },
    {
        "question_id": 970,
        "db_id": "formula_1",
        "question_en": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "question_ar": "",
        "evidence_en": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "evidence_ar": "",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question_id": 971,
        "db_id": "formula_1",
        "question_en": "Please state the reference name of the oldest German driver.",
        "question_ar": "",
        "evidence_en": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence_ar": "",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 972,
        "db_id": "formula_1",
        "question_en": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
        "question_ar": "",
        "evidence_en": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
        "evidence_ar": "",
        "SQL": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 973,
        "db_id": "formula_1",
        "question_en": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "question_ar": "",
        "evidence_en": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "evidence_ar": "",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 974,
        "db_id": "formula_1",
        "question_en": "State the racing year which has the fastest lap time?",
        "question_ar": "",
        "evidence_en": "'has the fastest lap time?' refers to fastestLapTime has values",
        "evidence_ar": "",
        "SQL": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 975,
        "db_id": "formula_1",
        "question_en": "Which year has the lowest speed of lap time?",
        "question_ar": "",
        "evidence_en": "lowest speed of lap time refers to Max(time);",
        "evidence_ar": "",
        "SQL": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 976,
        "db_id": "formula_1",
        "question_en": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
        "question_ar": "",
        "evidence_en": "fastest time refers to Min(time);",
        "evidence_ar": "",
        "SQL": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 977,
        "db_id": "formula_1",
        "question_en": "From race no. 50 to 100, how many finishers have been disqualified?",
        "question_ar": "",
        "evidence_en": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "difficulty": "simple"
    },
    {
        "question_id": 978,
        "db_id": "formula_1",
        "question_en": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "question_ar": "",
        "evidence_en": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "difficulty": "simple"
    },
    {
        "question_id": 979,
        "db_id": "formula_1",
        "question_en": "What race number has the most finishers?",
        "question_ar": "",
        "evidence_en": "finisher refers to time is not null;",
        "evidence_ar": "",
        "SQL": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 980,
        "db_id": "formula_1",
        "question_en": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
        "question_ar": "",
        "evidence_en": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;",
        "evidence_ar": "",
        "SQL": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 981,
        "db_id": "formula_1",
        "question_en": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "question_ar": "",
        "evidence_en": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "evidence_ar": "",
        "SQL": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 982,
        "db_id": "formula_1",
        "question_en": "How many American drivers have puncture status.",
        "question_ar": "",
        "evidence_en": "puncture status refers to status = Puncture;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
        "difficulty": "simple"
    },
    {
        "question_id": 983,
        "db_id": "formula_1",
        "question_en": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
        "question_ar": "",
        "evidence_en": "introduction website refers to url; Italian is a nationality",
        "evidence_ar": "",
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 984,
        "db_id": "formula_1",
        "question_en": "What is the website of the constructor who tallied the most total wins.",
        "question_ar": "",
        "evidence_en": "introduction website refers to url;",
        "evidence_ar": "",
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 985,
        "db_id": "formula_1",
        "question_en": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
        "question_ar": "",
        "evidence_en": "slowest time refers to Max(time);",
        "evidence_ar": "",
        "SQL": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 986,
        "db_id": "formula_1",
        "question_en": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
        "question_ar": "",
        "evidence_en": "fastest refers to Min(time);",
        "evidence_ar": "",
        "SQL": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 987,
        "db_id": "formula_1",
        "question_en": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
        "question_ar": "",
        "evidence_en": "top 10 refers to rank <11; AVG(fastestLapTime);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 988,
        "db_id": "formula_1",
        "question_en": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "question_ar": "",
        "evidence_en": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "evidence_ar": "",
        "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 989,
        "db_id": "formula_1",
        "question_en": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "question_ar": "",
        "evidence_en": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "evidence_ar": "",
        "SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "moderate"
    },
    {
        "question_id": 990,
        "db_id": "formula_1",
        "question_en": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
        "question_ar": "",
        "evidence_en": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
        "evidence_ar": "",
        "SQL": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "challenging"
    },
    {
        "question_id": 991,
        "db_id": "formula_1",
        "question_en": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "question_ar": "",
        "evidence_en": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "evidence_ar": "",
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "difficulty": "simple"
    },
    {
        "question_id": 992,
        "db_id": "formula_1",
        "question_en": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "question_ar": "",
        "evidence_en": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "evidence_ar": "",
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "difficulty": "moderate"
    },
    {
        "question_id": 993,
        "db_id": "formula_1",
        "question_en": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "question_ar": "",
        "evidence_en": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence_ar": "",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "difficulty": "simple"
    },
    {
        "question_id": 994,
        "db_id": "formula_1",
        "question_en": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "question_ar": "",
        "evidence_en": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 995,
        "db_id": "formula_1",
        "question_en": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "question_ar": "",
        "evidence_en": "Average score = AVG(points)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 996,
        "db_id": "formula_1",
        "question_en": "What is the annual average number of races held during the first 10 years of the 21st century?",
        "question_ar": "",
        "evidence_en": "races in date between '2000-01-01' and '2010-12-31'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
        "difficulty": "simple"
    },
    {
        "question_id": 997,
        "db_id": "formula_1",
        "question_en": "Which citizenship do the vast majority of the drivers hold?",
        "question_ar": "",
        "evidence_en": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n",
        "evidence_ar": "",
        "SQL": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 998,
        "db_id": "formula_1",
        "question_en": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
        "question_ar": "",
        "evidence_en": "victories refer to wins; 91st refers to points\n\n",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
        "difficulty": "simple"
    },
    {
        "question_id": 999,
        "db_id": "formula_1",
        "question_en": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
        "question_ar": "",
        "evidence_en": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1000,
        "db_id": "formula_1",
        "question_en": "Which racetrack hosted the most recent race? Indicate the full location.",
        "question_ar": "",
        "evidence_en": "full location refers to location+country; most recent race = MAX(date)\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1001,
        "db_id": "formula_1",
        "question_en": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "question_ar": "",
        "evidence_en": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "evidence_ar": "",
        "SQL": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1002,
        "db_id": "formula_1",
        "question_en": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
        "question_ar": "",
        "evidence_en": "full name refers to forename+surname; Youngest racer = MAX(dob)",
        "evidence_ar": "",
        "SQL": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1003,
        "db_id": "formula_1",
        "question_en": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
        "question_ar": "",
        "evidence_en": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1004,
        "db_id": "formula_1",
        "question_en": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
        "question_ar": "",
        "evidence_en": "oldest racer refers to MIN(dob); full name refers to forename, surname.",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1005,
        "db_id": "formula_1",
        "question_en": "What was the longest time a driver had ever spent at a pit stop?",
        "question_ar": "",
        "evidence_en": "longest time spent at pitstop refers to MAX(duration)",
        "evidence_ar": "",
        "SQL": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1006,
        "db_id": "formula_1",
        "question_en": "Among all the lap records set on various circuits, what is the time for the fastest one?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1007,
        "db_id": "formula_1",
        "question_en": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
        "question_ar": "",
        "evidence_en": "longest time refes to MAX(duration);",
        "evidence_ar": "",
        "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1008,
        "db_id": "formula_1",
        "question_en": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 1009,
        "db_id": "formula_1",
        "question_en": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
        "question_ar": "",
        "evidence_en": "time spent at pit stop refers to duration",
        "evidence_ar": "",
        "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 1010,
        "db_id": "formula_1",
        "question_en": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "question_ar": "",
        "evidence_en": "lap recod means the fastest time recorded which refers to time",
        "evidence_ar": "",
        "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 1011,
        "db_id": "formula_1",
        "question_en": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "question_ar": "",
        "evidence_en": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "evidence_ar": "",
        "SQL": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "difficulty": "challenging"
    },
    {
        "question_id": 1012,
        "db_id": "formula_1",
        "question_en": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
        "question_ar": "",
        "evidence_en": "fastest lap refers to MIN(time)",
        "evidence_ar": "",
        "SQL": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1013,
        "db_id": "formula_1",
        "question_en": "What is the lap record for the Austrian Grand Prix Circuit?",
        "question_ar": "",
        "evidence_en": "lap record means the fastest time recorded which refers to time",
        "evidence_ar": "",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 1014,
        "db_id": "formula_1",
        "question_en": "Please list the lap records for the circuits in Italy.",
        "question_ar": "",
        "evidence_en": "lap record means the fastest time recorded which refers to time",
        "evidence_ar": "",
        "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1015,
        "db_id": "formula_1",
        "question_en": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
        "question_ar": "",
        "evidence_en": "lap record means the fastest time recorded which refers to time",
        "evidence_ar": "",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1016,
        "db_id": "formula_1",
        "question_en": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
        "question_ar": "",
        "evidence_en": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
        "evidence_ar": "",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "difficulty": "challenging"
    },
    {
        "question_id": 1017,
        "db_id": "formula_1",
        "question_en": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
        "question_ar": "",
        "evidence_en": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
        "evidence_ar": "",
        "SQL": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1018,
        "db_id": "formula_1",
        "question_en": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
        "question_ar": "",
        "evidence_en": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 1019,
        "db_id": "formula_1",
        "question_en": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
        "question_ar": "",
        "evidence_en": "average = AVG(milliseconds)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1020,
        "db_id": "european_football_2",
        "question_en": "Which player has the highest overall rating? Indicate the player's api id.",
        "question_ar": "",
        "evidence_en": "highest overall rating refers to MAX(overall_rating);",
        "evidence_ar": "",
        "SQL": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1021,
        "db_id": "european_football_2",
        "question_en": "What is the height of the tallest player? Indicate his name.",
        "question_ar": "",
        "evidence_en": "tallest player refers to MAX(height);",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1022,
        "db_id": "european_football_2",
        "question_en": "What is the preferred foot when attacking of the player with the lowest potential?",
        "question_ar": "",
        "evidence_en": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);",
        "evidence_ar": "",
        "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1023,
        "db_id": "european_football_2",
        "question_en": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
        "question_ar": "",
        "evidence_en": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1024,
        "db_id": "european_football_2",
        "question_en": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
        "question_ar": "",
        "evidence_en": "perform better in crossing actions refers to MAX(crossing)",
        "evidence_ar": "",
        "SQL": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 1025,
        "db_id": "european_football_2",
        "question_en": "Give the name of the league had the most goals in the 2016 season?",
        "question_ar": "",
        "evidence_en": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
        "evidence_ar": "",
        "SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1026,
        "db_id": "european_football_2",
        "question_en": "Which home team had lost the fewest matches in the 2016 season?",
        "question_ar": "",
        "evidence_en": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';",
        "evidence_ar": "",
        "SQL": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1027,
        "db_id": "european_football_2",
        "question_en": "Indicate the full names of the top 10 players with the highest number of penalties.",
        "question_ar": "",
        "evidence_en": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
        "evidence_ar": "",
        "SQL": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 1028,
        "db_id": "european_football_2",
        "question_en": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "question_ar": "",
        "evidence_en": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));",
        "evidence_ar": "",
        "SQL": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1029,
        "db_id": "european_football_2",
        "question_en": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "question_ar": "",
        "evidence_en": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
        "evidence_ar": "",
        "SQL": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 1030,
        "db_id": "european_football_2",
        "question_en": "Give the name of the league had the most matches end as draw in the 2016 season?",
        "question_ar": "",
        "evidence_en": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
        "evidence_ar": "",
        "SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1031,
        "db_id": "european_football_2",
        "question_en": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "question_ar": "",
        "evidence_en": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
        "difficulty": "challenging"
    },
    {
        "question_id": 1032,
        "db_id": "european_football_2",
        "question_en": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "question_ar": "",
        "evidence_en": " league with highest matches of all time refers to MAX(COUNT(league_id));",
        "evidence_ar": "",
        "SQL": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
        "difficulty": "moderate"
    },
    {
        "question_id": 1033,
        "db_id": "european_football_2",
        "question_en": "What is the average height of players born between 1990 and 1995?",
        "question_ar": "",
        "evidence_en": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
        "difficulty": "simple"
    },
    {
        "question_id": 1034,
        "db_id": "european_football_2",
        "question_en": "List the players' api id who had the highest above average overall ratings in 2010.",
        "question_ar": "",
        "evidence_en": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';",
        "evidence_ar": "",
        "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1035,
        "db_id": "european_football_2",
        "question_en": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
        "question_ar": "",
        "evidence_en": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "difficulty": "simple"
    },
    {
        "question_id": 1036,
        "db_id": "european_football_2",
        "question_en": "List the long name of teams with above-average build-up play passing in 2012.",
        "question_ar": "",
        "evidence_en": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
        "difficulty": "challenging"
    },
    {
        "question_id": 1037,
        "db_id": "european_football_2",
        "question_en": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "question_ar": "",
        "evidence_en": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1038,
        "db_id": "european_football_2",
        "question_en": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
        "question_ar": "",
        "evidence_en": "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);",
        "evidence_ar": "",
        "SQL": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1039,
        "db_id": "european_football_2",
        "question_en": "Find the average number of long-shot done by Ahmed Samir Farag.",
        "question_ar": "",
        "evidence_en": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
        "difficulty": "simple"
    },
    {
        "question_id": 1040,
        "db_id": "european_football_2",
        "question_en": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
        "question_ar": "",
        "evidence_en": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
        "evidence_ar": "",
        "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 1041,
        "db_id": "european_football_2",
        "question_en": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "question_ar": "",
        "evidence_en": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
        "evidence_ar": "",
        "SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
        "difficulty": "challenging"
    },
    {
        "question_id": 1042,
        "db_id": "european_football_2",
        "question_en": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "question_ar": "",
        "evidence_en": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
        "difficulty": "challenging"
    },
    {
        "question_id": 1043,
        "db_id": "european_football_2",
        "question_en": "What is the short name of the football team Queens Park Rangers?",
        "question_ar": "",
        "evidence_en": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence_ar": "",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "difficulty": "simple"
    },
    {
        "question_id": 1044,
        "db_id": "european_football_2",
        "question_en": "List the football players with a birthyear of 1970 and a birthmonth of October.",
        "question_ar": "",
        "evidence_en": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
        "difficulty": "simple"
    },
    {
        "question_id": 1045,
        "db_id": "european_football_2",
        "question_en": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "difficulty": "simple"
    },
    {
        "question_id": 1046,
        "db_id": "european_football_2",
        "question_en": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "question_ar": "",
        "evidence_en": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1047,
        "db_id": "european_football_2",
        "question_en": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "question_ar": "",
        "evidence_en": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence_ar": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1048,
        "db_id": "european_football_2",
        "question_en": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "question_ar": "",
        "evidence_en": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence_ar": "",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple"
    },
    {
        "question_id": 1049,
        "db_id": "european_football_2",
        "question_en": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
        "question_ar": "",
        "evidence_en": "Scotland Premier League refers to League.name = 'Scotland Premier League';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
        "difficulty": "simple"
    },
    {
        "question_id": 1050,
        "db_id": "european_football_2",
        "question_en": "What is the preferred foot when attacking of the youngest football player?",
        "question_ar": "",
        "evidence_en": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;",
        "evidence_ar": "",
        "SQL": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1051,
        "db_id": "european_football_2",
        "question_en": "List all the football player with the highest potential score.",
        "question_ar": "",
        "evidence_en": "potential score refers to potential; highest potential score refers to MAX(potential);",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
        "difficulty": "simple"
    },
    {
        "question_id": 1052,
        "db_id": "european_football_2",
        "question_en": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
        "question_ar": "",
        "evidence_en": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1053,
        "db_id": "european_football_2",
        "question_en": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "question_ar": "",
        "evidence_en": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1054,
        "db_id": "european_football_2",
        "question_en": "What is the defensive work rate of the football player David Wilson\n?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "difficulty": "simple"
    },
    {
        "question_id": 1055,
        "db_id": "european_football_2",
        "question_en": "When is the birthday of the football player who has the highest overall rating?",
        "question_ar": "",
        "evidence_en": "football player who has the highest overall rating refers to MAX(overall_rating);",
        "evidence_ar": "",
        "SQL": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1056,
        "db_id": "european_football_2",
        "question_en": "What is the name of the football league in the country of Netherlands?",
        "question_ar": "",
        "evidence_en": "name of the football league refers to League.name;",
        "evidence_ar": "",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "difficulty": "simple"
    },
    {
        "question_id": 1057,
        "db_id": "european_football_2",
        "question_en": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
        "question_ar": "",
        "evidence_en": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1058,
        "db_id": "european_football_2",
        "question_en": "Who has the highest average finishing rate between the highest and shortest football player?",
        "question_ar": "",
        "evidence_en": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
        "evidence_ar": "",
        "SQL": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1059,
        "db_id": "european_football_2",
        "question_en": "Please list player names which are higher than 180.",
        "question_ar": "",
        "evidence_en": "height>180;",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player WHERE height > 180",
        "difficulty": "simple"
    },
    {
        "question_id": 1060,
        "db_id": "european_football_2",
        "question_en": "How many players were born after 1990?",
        "question_ar": "",
        "evidence_en": "born after 1990 refers to strftime('%Y', birthday) = '1990';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
        "difficulty": "simple"
    },
    {
        "question_id": 1061,
        "db_id": "european_football_2",
        "question_en": "How many players whose first names are Adam and weigh more than 170?",
        "question_ar": "",
        "evidence_en": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
        "difficulty": "simple"
    },
    {
        "question_id": 1062,
        "db_id": "european_football_2",
        "question_en": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
        "question_ar": "",
        "evidence_en": "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1063,
        "db_id": "european_football_2",
        "question_en": "What is Aaron Doran's potential score?",
        "question_ar": "",
        "evidence_en": "potential score refers to potential;",
        "evidence_ar": "",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "difficulty": "simple"
    },
    {
        "question_id": 1064,
        "db_id": "european_football_2",
        "question_en": "List out of players whose preferred foot is left.",
        "question_ar": "",
        "evidence_en": "preferred_foot = 'left';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "difficulty": "simple"
    },
    {
        "question_id": 1065,
        "db_id": "european_football_2",
        "question_en": "Please list all team names which the speed class is fast.",
        "question_ar": "",
        "evidence_en": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
        "difficulty": "simple"
    },
    {
        "question_id": 1066,
        "db_id": "european_football_2",
        "question_en": "What is the passing class of CLB team?",
        "question_ar": "",
        "evidence_en": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
        "difficulty": "simple"
    },
    {
        "question_id": 1067,
        "db_id": "european_football_2",
        "question_en": "Which teams have build up play passing more than 70? Please list their short names.",
        "question_ar": "",
        "evidence_en": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
        "difficulty": "moderate"
    },
    {
        "question_id": 1068,
        "db_id": "european_football_2",
        "question_en": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "question_ar": "",
        "evidence_en": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1069,
        "db_id": "european_football_2",
        "question_en": "Which football player has the shortest height?",
        "question_ar": "",
        "evidence_en": "shortest height refers to MIN(height);",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1070,
        "db_id": "european_football_2",
        "question_en": "Which country is the league Italy Serie A from?",
        "question_ar": "",
        "evidence_en": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
        "difficulty": "simple"
    },
    {
        "question_id": 1071,
        "db_id": "european_football_2",
        "question_en": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
        "question_ar": "",
        "evidence_en": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
        "difficulty": "challenging"
    },
    {
        "question_id": 1072,
        "db_id": "european_football_2",
        "question_en": "What is the average overall rating of the football player Aaron Doran?",
        "question_ar": "",
        "evidence_en": "average overall rating = AVG(overall_rating);",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "difficulty": "simple"
    },
    {
        "question_id": 1073,
        "db_id": "european_football_2",
        "question_en": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
        "question_ar": "",
        "evidence_en": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1074,
        "db_id": "european_football_2",
        "question_en": "List all the short name of the football team that had a home team goal of 10?",
        "question_ar": "",
        "evidence_en": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;",
        "evidence_ar": "",
        "SQL": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
        "difficulty": "simple"
    },
    {
        "question_id": 1075,
        "db_id": "european_football_2",
        "question_en": "List all the football player with the highest balance score and potential score of 61.",
        "question_ar": "",
        "evidence_en": "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;",
        "evidence_ar": "",
        "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1076,
        "db_id": "european_football_2",
        "question_en": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "question_ar": "",
        "evidence_en": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 1077,
        "db_id": "european_football_2",
        "question_en": "What's the long name for the team GEN?",
        "question_ar": "",
        "evidence_en": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
        "evidence_ar": "",
        "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "difficulty": "simple"
    },
    {
        "question_id": 1078,
        "db_id": "european_football_2",
        "question_en": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
        "question_ar": "",
        "evidence_en": "The larger the birthday value, the younger the person is, and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1079,
        "db_id": "european_football_2",
        "question_en": "Which player is the tallest?",
        "question_ar": "",
        "evidence_en": "tallest player refers to MAX(height);",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1080,
        "db_id": "european_football_2",
        "question_en": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
        "question_ar": "",
        "evidence_en": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1081,
        "db_id": "european_football_2",
        "question_en": "Which country is the Belgium Jupiler League from?",
        "question_ar": "",
        "evidence_en": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
        "difficulty": "simple"
    },
    {
        "question_id": 1082,
        "db_id": "european_football_2",
        "question_en": "Please list the leagues from Germany.",
        "question_ar": "",
        "evidence_en": "Germany refers to Country.name = 'Germany';",
        "evidence_ar": "",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
        "difficulty": "simple"
    },
    {
        "question_id": 1083,
        "db_id": "european_football_2",
        "question_en": "Which player has the strongest overall strength?",
        "question_ar": "",
        "evidence_en": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);",
        "evidence_ar": "",
        "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1084,
        "db_id": "european_football_2",
        "question_en": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
        "question_ar": "",
        "evidence_en": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1085,
        "db_id": "european_football_2",
        "question_en": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "question_ar": "",
        "evidence_en": "player who perform best in crossing actions refers to MAX(crossing);",
        "evidence_ar": "",
        "SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1086,
        "db_id": "european_football_2",
        "question_en": "What's the heading accuracy of Ariel Borysiuk?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "difficulty": "simple"
    },
    {
        "question_id": 1087,
        "db_id": "european_football_2",
        "question_en": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
        "question_ar": "",
        "evidence_en": "height > 180; volley score refers to volleys; volleys > 70;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
        "difficulty": "simple"
    },
    {
        "question_id": 1088,
        "db_id": "european_football_2",
        "question_en": "Please list the names of the players whose volley score and dribbling score are over 70.",
        "question_ar": "",
        "evidence_en": "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
        "difficulty": "moderate"
    },
    {
        "question_id": 1089,
        "db_id": "european_football_2",
        "question_en": "How many matches in the 2008/2009 season were held in Belgium?",
        "question_ar": "",
        "evidence_en": "Belgium refers to Country.name = 'Belgium';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
        "difficulty": "simple"
    },
    {
        "question_id": 1090,
        "db_id": "european_football_2",
        "question_en": "What is the long passing score of the oldest player?",
        "question_ar": "",
        "evidence_en": "long passing score refers to long_passing; oldest player refers to oldest birthday;",
        "evidence_ar": "",
        "SQL": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1091,
        "db_id": "european_football_2",
        "question_en": "How many matches were held in the Belgium Jupiler League in April, 2009?",
        "question_ar": "",
        "evidence_en": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1092,
        "db_id": "european_football_2",
        "question_en": "Give the name of the league had the most matches in the 2008/2009 season?",
        "question_ar": "",
        "evidence_en": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
        "difficulty": "simple"
    },
    {
        "question_id": 1093,
        "db_id": "european_football_2",
        "question_en": "What is the average overall rating of the players born before the year 1986?",
        "question_ar": "",
        "evidence_en": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1094,
        "db_id": "european_football_2",
        "question_en": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "question_ar": "",
        "evidence_en": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 1095,
        "db_id": "european_football_2",
        "question_en": "How much is the average build up play speed of the Heart of Midlothian team?",
        "question_ar": "",
        "evidence_en": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to  AVG(buildUpPlaySpeed)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1096,
        "db_id": "european_football_2",
        "question_en": "Calculate the average overall rating of Pietro Marino.",
        "question_ar": "",
        "evidence_en": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1097,
        "db_id": "european_football_2",
        "question_en": "What is Aaron Lennox's total crossing score?",
        "question_ar": "",
        "evidence_en": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
        "difficulty": "simple"
    },
    {
        "question_id": 1098,
        "db_id": "european_football_2",
        "question_en": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "question_ar": "",
        "evidence_en": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence_ar": "",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1099,
        "db_id": "european_football_2",
        "question_en": "Which foot is preferred by Abdou Diallo?",
        "question_ar": "",
        "evidence_en": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "difficulty": "simple"
    },
    {
        "question_id": 1100,
        "db_id": "european_football_2",
        "question_en": "What is the highest overall rating received by Dorlan Pabon?",
        "question_ar": "",
        "evidence_en": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
        "difficulty": "simple"
    },
    {
        "question_id": 1101,
        "db_id": "european_football_2",
        "question_en": "What is the average number of goals made by Parma as the away team while playing in Italy?",
        "question_ar": "",
        "evidence_en": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1102,
        "db_id": "european_football_2",
        "question_en": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
        "question_ar": "",
        "evidence_en": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;",
        "evidence_ar": "",
        "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1103,
        "db_id": "european_football_2",
        "question_en": "What was the overall rating for Aaron Mooy on 2016/2/4?",
        "question_ar": "",
        "evidence_en": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
        "evidence_ar": "",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1104,
        "db_id": "european_football_2",
        "question_en": "What was the potiential for Francesco Parravicini on 2010/8/30?",
        "question_ar": "",
        "evidence_en": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1105,
        "db_id": "european_football_2",
        "question_en": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
        "question_ar": "",
        "evidence_en": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';",
        "evidence_ar": "",
        "SQL": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1106,
        "db_id": "european_football_2",
        "question_en": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
        "question_ar": "",
        "evidence_en": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1107,
        "db_id": "european_football_2",
        "question_en": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "question_ar": "",
        "evidence_en": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence_ar": "",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1108,
        "db_id": "european_football_2",
        "question_en": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "question_ar": "",
        "evidence_en": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence_ar": "",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1109,
        "db_id": "european_football_2",
        "question_en": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
        "question_ar": "",
        "evidence_en": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to  date = '2015-09-10 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1110,
        "db_id": "european_football_2",
        "question_en": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
        "question_ar": "",
        "evidence_en": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';",
        "evidence_ar": "",
        "SQL": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1111,
        "db_id": "european_football_2",
        "question_en": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "question_ar": "",
        "evidence_en": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1112,
        "db_id": "european_football_2",
        "question_en": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "question_ar": "",
        "evidence_en": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence_ar": "",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1113,
        "db_id": "european_football_2",
        "question_en": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
        "question_ar": "",
        "evidence_en": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';",
        "evidence_ar": "",
        "SQL": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1114,
        "db_id": "european_football_2",
        "question_en": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
        "question_ar": "",
        "evidence_en": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1115,
        "db_id": "european_football_2",
        "question_en": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "question_ar": "",
        "evidence_en": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "evidence_ar": "",
        "SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1116,
        "db_id": "european_football_2",
        "question_en": "List down most tallest players' name.",
        "question_ar": "",
        "evidence_en": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1117,
        "db_id": "european_football_2",
        "question_en": "What are the player api id of 10 heaviest players?",
        "question_ar": "",
        "evidence_en": "heaviest refers to MAX(weight)",
        "evidence_ar": "",
        "SQL": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 1118,
        "db_id": "european_football_2",
        "question_en": "List down the name of players who are 35 years old and above.",
        "question_ar": "",
        "evidence_en": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
        "difficulty": "simple"
    },
    {
        "question_id": 1119,
        "db_id": "european_football_2",
        "question_en": "How many home team goal have been scored by Aaron Lennon?",
        "question_ar": "",
        "evidence_en": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
        "difficulty": "simple"
    },
    {
        "question_id": 1120,
        "db_id": "european_football_2",
        "question_en": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
        "question_ar": "",
        "evidence_en": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "difficulty": "moderate"
    },
    {
        "question_id": 1121,
        "db_id": "european_football_2",
        "question_en": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
        "question_ar": "",
        "evidence_en": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
        "difficulty": "moderate"
    },
    {
        "question_id": 1122,
        "db_id": "european_football_2",
        "question_en": "State the name of the most strongest player.",
        "question_ar": "",
        "evidence_en": "strongest players refers to player has MAX(overall_rating)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "difficulty": "simple"
    },
    {
        "question_id": 1123,
        "db_id": "european_football_2",
        "question_en": "What is the name of players with the highest potential?",
        "question_ar": "",
        "evidence_en": "highest potential refers to MAX(potential)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1124,
        "db_id": "european_football_2",
        "question_en": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
        "question_ar": "",
        "evidence_en": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1125,
        "db_id": "european_football_2",
        "question_en": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
        "question_ar": "",
        "evidence_en": "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1126,
        "db_id": "european_football_2",
        "question_en": "State the name of players who came from Belgium.",
        "question_ar": "",
        "evidence_en": "name of players refers to player_name; Belgium is name of country",
        "evidence_ar": "",
        "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "difficulty": "simple"
    },
    {
        "question_id": 1127,
        "db_id": "european_football_2",
        "question_en": "Locate players with vision scores of 90 and above, state the country of these players.",
        "question_ar": "",
        "evidence_en": "vision scores of 90 and above refers to vision > 89",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
        "difficulty": "moderate"
    },
    {
        "question_id": 1128,
        "db_id": "european_football_2",
        "question_en": "Which country's players have the heaviest average weights?",
        "question_ar": "",
        "evidence_en": "heaviest average weights refers to MAX(AVG(weight))",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1129,
        "db_id": "european_football_2",
        "question_en": "List down the long name for slow speed class team.",
        "question_ar": "",
        "evidence_en": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
        "difficulty": "simple"
    },
    {
        "question_id": 1130,
        "db_id": "european_football_2",
        "question_en": "What are the short name of team who played safe while creating chance of passing?",
        "question_ar": "",
        "evidence_en": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1131,
        "db_id": "european_football_2",
        "question_en": "What is the average heights of Italy players?",
        "question_ar": "",
        "evidence_en": "average heights refers to Avg(height); Italy is name of country",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
        "difficulty": "simple"
    },
    {
        "question_id": 1132,
        "db_id": "european_football_2",
        "question_en": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
        "question_ar": "",
        "evidence_en": "over 180 cm tall refers to height > 180; name of football player refers to player_name",
        "evidence_ar": "",
        "SQL": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 1133,
        "db_id": "european_football_2",
        "question_en": "How many football players born after the 1990s have the first name \"Aaron\"?",
        "question_ar": "",
        "evidence_en": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "difficulty": "simple"
    },
    {
        "question_id": 1134,
        "db_id": "european_football_2",
        "question_en": "What is the difference between players 6 and 23's jumping scores?",
        "question_ar": "",
        "evidence_en": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
        "difficulty": "simple"
    },
    {
        "question_id": 1135,
        "db_id": "european_football_2",
        "question_en": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
        "question_ar": "",
        "evidence_en": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
        "evidence_ar": "",
        "SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 1136,
        "db_id": "european_football_2",
        "question_en": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
        "question_ar": "",
        "evidence_en": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
        "difficulty": "moderate"
    },
    {
        "question_id": 1137,
        "db_id": "european_football_2",
        "question_en": "What percentage of players have a strength and stamina score of more than 80?",
        "question_ar": "",
        "evidence_en": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t",
        "difficulty": "simple"
    },
    {
        "question_id": 1138,
        "db_id": "european_football_2",
        "question_en": "In what country did the Poland Ekstraklasa take place?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
        "difficulty": "simple"
    },
    {
        "question_id": 1139,
        "db_id": "european_football_2",
        "question_en": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
        "question_ar": "",
        "evidence_en": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
        "evidence_ar": "",
        "SQL": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1140,
        "db_id": "european_football_2",
        "question_en": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
        "question_ar": "",
        "evidence_en": "Alexis Blin's refers to player_name = 'Alexis Blin'",
        "evidence_ar": "",
        "SQL": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
        "difficulty": "simple"
    },
    {
        "question_id": 1141,
        "db_id": "european_football_2",
        "question_en": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "question_ar": "",
        "evidence_en": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1142,
        "db_id": "european_football_2",
        "question_en": "In the 2015–2016 season, how many games were played in the Italian Serie A league?",
        "question_ar": "",
        "evidence_en": "In the 2015–2016 season refers to season = '2015/2016'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
        "difficulty": "simple"
    },
    {
        "question_id": 1143,
        "db_id": "european_football_2",
        "question_en": "What was the highest score of the home team in the Netherlands Eredivisie league?",
        "question_ar": "",
        "evidence_en": "highest score of the home team refers to MAX(home_team_goal)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
        "difficulty": "simple"
    },
    {
        "question_id": 1144,
        "db_id": "european_football_2",
        "question_en": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
        "question_ar": "",
        "evidence_en": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
        "evidence_ar": "",
        "SQL": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 1145,
        "db_id": "european_football_2",
        "question_en": "Which top 4 leagues had the most games in the 2015-2016 season?",
        "question_ar": "",
        "evidence_en": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
        "evidence_ar": "",
        "SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
        "difficulty": "simple"
    },
    {
        "question_id": 1146,
        "db_id": "european_football_2",
        "question_en": "Please provide the full name of the away team that scored the most goals.",
        "question_ar": "",
        "evidence_en": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
        "evidence_ar": "",
        "SQL": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 1147,
        "db_id": "european_football_2",
        "question_en": "Please name one player whose overall strength is the greatest.",
        "question_ar": "",
        "evidence_en": "overall strength is the greatest refers to MAX(overall_rating)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
        "difficulty": "simple"
    },
    {
        "question_id": 1148,
        "db_id": "european_football_2",
        "question_en": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
        "question_ar": "",
        "evidence_en": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
        "difficulty": "moderate"
    },
    {
        "question_id": 1149,
        "db_id": "thrombosis_prediction",
        "question_en": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
        "question_ar": "",
        "evidence_en": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 1150,
        "db_id": "thrombosis_prediction",
        "question_en": "What is the percentage of female patient were born after 1930?",
        "question_ar": "",
        "evidence_en": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
        "difficulty": "moderate"
    }
]