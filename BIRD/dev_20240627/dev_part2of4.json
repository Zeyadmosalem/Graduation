[
    {
        "question_id": 384,
        "db_id": "card_games",
        "question_en": "List down the uuid for legacy cards and the foreign language of these cards.",
        "question_ar": "",
        "evidence_en": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "evidence_ar": "",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "difficulty": "simple"
    },
    {
        "question_id": 385,
        "db_id": "card_games",
        "question_en": "Write down the ruling of Beacon of Immortality.",
        "question_ar": "",
        "evidence_en": "Beacon of Immortality' is the name of card;",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "difficulty": "simple"
    },
    {
        "question_id": 386,
        "db_id": "card_games",
        "question_en": "How many cards are having future frame version and what are the legality status of these cards?",
        "question_ar": "",
        "evidence_en": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "difficulty": "simple"
    },
    {
        "question_id": 387,
        "db_id": "card_games",
        "question_en": "What are the cards for set OGW? State the colour for these cards.",
        "question_ar": "",
        "evidence_en": "set OGW refers to setCode = 'OGW';",
        "evidence_ar": "",
        "SQL": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "difficulty": "simple"
    },
    {
        "question_id": 388,
        "db_id": "card_games",
        "question_en": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "question_ar": "",
        "evidence_en": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;",
        "evidence_ar": "",
        "SQL": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "difficulty": "simple"
    },
    {
        "question_id": 389,
        "db_id": "card_games",
        "question_en": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "question_ar": "",
        "evidence_en": "Creature - Elf is the originalType;",
        "evidence_ar": "",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "difficulty": "simple"
    },
    {
        "question_id": 390,
        "db_id": "card_games",
        "question_en": "What are the colors of cards from ID 1-20? What are the format of these cards?",
        "question_ar": "",
        "evidence_en": "ID 1-20 refers to id BETWEEN 1 and 20;",
        "evidence_ar": "",
        "SQL": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "difficulty": "simple"
    },
    {
        "question_id": 391,
        "db_id": "card_games",
        "question_en": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "question_ar": "",
        "evidence_en": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "difficulty": "moderate"
    },
    {
        "question_id": 392,
        "db_id": "card_games",
        "question_en": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
        "question_ar": "",
        "evidence_en": "uncommon refers to rarity = 'uncommon';",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 393,
        "db_id": "card_games",
        "question_en": "On how many cards designed by John Avon is its foil non-powerful?",
        "question_ar": "",
        "evidence_en": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
        "difficulty": "simple"
    },
    {
        "question_id": 394,
        "db_id": "card_games",
        "question_en": "How many white bordered cards are powerful?",
        "question_ar": "",
        "evidence_en": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 395,
        "db_id": "card_games",
        "question_en": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
        "question_ar": "",
        "evidence_en": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo' ",
        "difficulty": "simple"
    },
    {
        "question_id": 396,
        "db_id": "card_games",
        "question_en": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
        "question_ar": "",
        "evidence_en": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 397,
        "db_id": "card_games",
        "question_en": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
        "question_ar": "",
        "evidence_en": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'",
        "evidence_ar": "",
        "SQL": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
        "difficulty": "moderate"
    },
    {
        "question_id": 398,
        "db_id": "card_games",
        "question_en": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question_ar": "",
        "evidence_en": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence_ar": "",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "difficulty": "simple"
    },
    {
        "question_id": 399,
        "db_id": "card_games",
        "question_en": "Lists all types of cards available in arena.",
        "question_ar": "",
        "evidence_en": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 400,
        "db_id": "card_games",
        "question_en": "Lists the set code of all cards translated into Spanish.",
        "question_ar": "",
        "evidence_en": "Spanish refer to language; set code refers to setCode",
        "evidence_ar": "",
        "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "difficulty": "simple"
    },
    {
        "question_id": 401,
        "db_id": "card_games",
        "question_en": "What percentage of legendary frame effect cards that are only available in online game variations?",
        "question_ar": "",
        "evidence_en": "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
        "difficulty": "moderate"
    },
    {
        "question_id": 402,
        "db_id": "card_games",
        "question_en": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
        "question_ar": "",
        "evidence_en": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 403,
        "db_id": "card_games",
        "question_en": "Calculate the percentage of cards in Spanish. List them by name.",
        "question_ar": "",
        "evidence_en": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "evidence_ar": "",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "difficulty": "simple"
    },
    {
        "question_id": 404,
        "db_id": "card_games",
        "question_en": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.",
        "question_ar": "",
        "evidence_en": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n",
        "evidence_ar": "",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309",
        "difficulty": "simple"
    },
    {
        "question_id": 405,
        "db_id": "card_games",
        "question_en": "How many Brazilian Portuguese translated sets are inside the Commander block?",
        "question_ar": "",
        "evidence_en": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "difficulty": "moderate"
    },
    {
        "question_id": 406,
        "db_id": "card_games",
        "question_en": "Lists by ID all Creature-type cards with legal status.",
        "question_ar": "",
        "evidence_en": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "difficulty": "simple"
    },
    {
        "question_id": 407,
        "db_id": "card_games",
        "question_en": "Lists all types of cards in German.",
        "question_ar": "",
        "evidence_en": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "evidence_ar": "",
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 408,
        "db_id": "card_games",
        "question_en": "How many unknown power cards contain info about the triggered ability",
        "question_ar": "",
        "evidence_en": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 409,
        "db_id": "card_games",
        "question_en": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
        "question_ar": "",
        "evidence_en": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 410,
        "db_id": "card_games",
        "question_en": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question_ar": "",
        "evidence_en": "available in paper refers to availability = 'paper'",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple"
    },
    {
        "question_id": 411,
        "db_id": "card_games",
        "question_en": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
        "difficulty": "simple"
    },
    {
        "question_id": 412,
        "db_id": "card_games",
        "question_en": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "question_ar": "",
        "evidence_en": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "difficulty": "moderate"
    },
    {
        "question_id": 413,
        "db_id": "card_games",
        "question_en": "How many cards with print rarity have ruling text printed on 01/02/2007?",
        "question_ar": "",
        "evidence_en": "with print rarity refers to rarity = 'rare'; on 01/02/2007 refers to date = '2007-02-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 414,
        "db_id": "card_games",
        "question_en": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
        "question_ar": "",
        "evidence_en": "set of 180 cards refers to baseSetSize = 180",
        "evidence_ar": "",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "difficulty": "simple"
    },
    {
        "question_id": 415,
        "db_id": "card_games",
        "question_en": "What percentage of cards with format commander and legal status do not have a content warning?",
        "question_ar": "",
        "evidence_en": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "difficulty": "challenging"
    },
    {
        "question_id": 416,
        "db_id": "card_games",
        "question_en": "What percentage of cards without power are in French?",
        "question_ar": "",
        "evidence_en": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "difficulty": "challenging"
    },
    {
        "question_id": 417,
        "db_id": "card_games",
        "question_en": "What percentage of Japanese translated sets are expansion sets?",
        "question_ar": "",
        "evidence_en": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
        "difficulty": "moderate"
    },
    {
        "question_id": 418,
        "db_id": "card_games",
        "question_en": "What kind of printing is on the card that Daren Bader created?",
        "question_ar": "",
        "evidence_en": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "difficulty": "simple"
    },
    {
        "question_id": 419,
        "db_id": "card_games",
        "question_en": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?",
        "question_ar": "",
        "evidence_en": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'",
        "difficulty": "simple"
    },
    {
        "question_id": 420,
        "db_id": "card_games",
        "question_en": "How many cards are oversized, reprinted, and printed for promotions?",
        "question_ar": "",
        "evidence_en": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 421,
        "db_id": "card_games",
        "question_en": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
        "question_ar": "",
        "evidence_en": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 422,
        "db_id": "card_games",
        "question_en": "What is the language of the card with the multiverse number 149934?",
        "question_ar": "",
        "evidence_en": "multiverse number 149934 refers to multiverseid = 149934;",
        "evidence_ar": "",
        "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "difficulty": "simple"
    },
    {
        "question_id": 423,
        "db_id": "card_games",
        "question_en": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
        "question_ar": "",
        "evidence_en": "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "evidence_ar": "",
        "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 424,
        "db_id": "card_games",
        "question_en": "What proportion of cards do not have a text box with a normal layout?",
        "question_ar": "",
        "evidence_en": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
        "difficulty": "simple"
    },
    {
        "question_id": 425,
        "db_id": "card_games",
        "question_en": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
        "question_ar": "",
        "evidence_en": "don't have multiple faces on a single card side is null",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 426,
        "db_id": "card_games",
        "question_en": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
        "question_ar": "",
        "evidence_en": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''",
        "evidence_ar": "",
        "SQL": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 427,
        "db_id": "card_games",
        "question_en": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
        "question_ar": "",
        "evidence_en": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
        "evidence_ar": "",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
        "difficulty": "moderate"
    },
    {
        "question_id": 428,
        "db_id": "card_games",
        "question_en": "What is the name of set number 5 and its translation?",
        "question_ar": "",
        "evidence_en": "set number 5 refers to id = 5",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "difficulty": "simple"
    },
    {
        "question_id": 429,
        "db_id": "card_games",
        "question_en": "What is the language and expansion type of set number 206?",
        "question_ar": "",
        "evidence_en": "set number 206 refers to id = 206",
        "evidence_ar": "",
        "SQL": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "difficulty": "simple"
    },
    {
        "question_id": 430,
        "db_id": "card_games",
        "question_en": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "difficulty": "simple"
    },
    {
        "question_id": 431,
        "db_id": "card_games",
        "question_en": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
        "question_ar": "",
        "evidence_en": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "difficulty": "challenging"
    },
    {
        "question_id": 432,
        "db_id": "card_games",
        "question_en": "Which Russian set of cards contains the most cards overall?",
        "question_ar": "",
        "evidence_en": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "evidence_ar": "",
        "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 433,
        "db_id": "card_games",
        "question_en": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
        "question_ar": "",
        "evidence_en": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
        "difficulty": "moderate"
    },
    {
        "question_id": 434,
        "db_id": "card_games",
        "question_en": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
        "question_ar": "",
        "evidence_en": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "difficulty": "moderate"
    },
    {
        "question_id": 435,
        "db_id": "card_games",
        "question_en": "How many card border with black color ? List out the card id.",
        "question_ar": "",
        "evidence_en": "border with black color refers to borderColor = 'black'",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
        "difficulty": "simple"
    },
    {
        "question_id": 436,
        "db_id": "card_games",
        "question_en": "How many cards have frame effect as extendedart? List out the id of those cards.",
        "question_ar": "",
        "evidence_en": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
        "difficulty": "simple"
    },
    {
        "question_id": 437,
        "db_id": "card_games",
        "question_en": "Among black card borders, which card has full artwork?",
        "question_ar": "",
        "evidence_en": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1",
        "evidence_ar": "",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 438,
        "db_id": "card_games",
        "question_en": "Point out the language of set id \"174\"?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT language FROM set_translations WHERE id = 174",
        "difficulty": "simple"
    },
    {
        "question_id": 439,
        "db_id": "card_games",
        "question_en": "List out the set name of the set code \"ALL\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT name FROM sets WHERE code = 'ALL'",
        "difficulty": "simple"
    },
    {
        "question_id": 440,
        "db_id": "card_games",
        "question_en": "Which foreign language used by \"A Pedra Fellwar\"?",
        "question_ar": "",
        "evidence_en": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "difficulty": "simple"
    },
    {
        "question_id": 441,
        "db_id": "card_games",
        "question_en": "State the set code of the set with release date of 07/13/2007?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "difficulty": "simple"
    },
    {
        "question_id": 442,
        "db_id": "card_games",
        "question_en": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "difficulty": "simple"
    },
    {
        "question_id": 443,
        "db_id": "card_games",
        "question_en": "Give the code of sets have expansion type of 'expansion'?",
        "question_ar": "",
        "evidence_en": "code of sets refers to setCode",
        "evidence_ar": "",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
        "difficulty": "simple"
    },
    {
        "question_id": 444,
        "db_id": "card_games",
        "question_en": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "difficulty": "simple"
    },
    {
        "question_id": 445,
        "db_id": "card_games",
        "question_en": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "difficulty": "simple"
    },
    {
        "question_id": 446,
        "db_id": "card_games",
        "question_en": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
        "question_ar": "",
        "evidence_en": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
        "difficulty": "moderate"
    },
    {
        "question_id": 447,
        "db_id": "card_games",
        "question_en": "Give the code of sets have expansion commander type?",
        "question_ar": "",
        "evidence_en": "code of sets refers to setCode",
        "evidence_ar": "",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "difficulty": "simple"
    },
    {
        "question_id": 448,
        "db_id": "card_games",
        "question_en": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "difficulty": "simple"
    },
    {
        "question_id": 449,
        "db_id": "card_games",
        "question_en": "What is the language of the card that has azorius watermark? List out the type of this card.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
        "difficulty": "simple"
    },
    {
        "question_id": 450,
        "db_id": "card_games",
        "question_en": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
        "question_ar": "",
        "evidence_en": "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
        "difficulty": "moderate"
    },
    {
        "question_id": 451,
        "db_id": "card_games",
        "question_en": "How many cards available in paper have a positive starting maximum hand size?",
        "question_ar": "",
        "evidence_en": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards",
        "difficulty": "simple"
    },
    {
        "question_id": 452,
        "db_id": "card_games",
        "question_en": "Please list the names of the cards that have a text box.",
        "question_ar": "",
        "evidence_en": "have a text box refers to isTextless = 0",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 453,
        "db_id": "card_games",
        "question_en": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
        "question_ar": "",
        "evidence_en": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "difficulty": "simple"
    },
    {
        "question_id": 454,
        "db_id": "card_games",
        "question_en": "Among the cards with a white border color, how many of them have unknown power?",
        "question_ar": "",
        "evidence_en": "unknown power refers to power = '*' or power is null",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
        "difficulty": "simple"
    },
    {
        "question_id": 455,
        "db_id": "card_games",
        "question_en": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
        "question_ar": "",
        "evidence_en": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 456,
        "db_id": "card_games",
        "question_en": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question_ar": "",
        "evidence_en": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "difficulty": "simple"
    },
    {
        "question_id": 457,
        "db_id": "card_games",
        "question_en": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
        "question_ar": "",
        "evidence_en": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "difficulty": "simple"
    },
    {
        "question_id": 458,
        "db_id": "card_games",
        "question_en": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
        "question_ar": "",
        "evidence_en": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
        "difficulty": "simple"
    },
    {
        "question_id": 459,
        "db_id": "card_games",
        "question_en": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
        "question_ar": "",
        "evidence_en": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
        "evidence_ar": "",
        "SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 460,
        "db_id": "card_games",
        "question_en": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
        "question_ar": "",
        "evidence_en": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "evidence_ar": "",
        "SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "difficulty": "simple"
    },
    {
        "question_id": 461,
        "db_id": "card_games",
        "question_en": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.",
        "question_ar": "",
        "evidence_en": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 462,
        "db_id": "card_games",
        "question_en": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
        "question_ar": "",
        "evidence_en": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
        "evidence_ar": "",
        "SQL": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 463,
        "db_id": "card_games",
        "question_en": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
        "question_ar": "",
        "evidence_en": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 464,
        "db_id": "card_games",
        "question_en": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
        "question_ar": "",
        "evidence_en": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "difficulty": "simple"
    },
    {
        "question_id": 465,
        "db_id": "card_games",
        "question_en": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
        "question_ar": "",
        "evidence_en": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
        "evidence_ar": "",
        "SQL": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "moderate"
    },
    {
        "question_id": 466,
        "db_id": "card_games",
        "question_en": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
        "question_ar": "",
        "evidence_en": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "difficulty": "moderate"
    },
    {
        "question_id": 467,
        "db_id": "card_games",
        "question_en": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
        "question_ar": "",
        "evidence_en": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "evidence_ar": "",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "difficulty": "simple"
    },
    {
        "question_id": 468,
        "db_id": "card_games",
        "question_en": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
        "question_ar": "",
        "evidence_en": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation",
        "evidence_ar": "",
        "SQL": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
        "difficulty": "moderate"
    },
    {
        "question_id": 469,
        "db_id": "card_games",
        "question_en": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question_ar": "",
        "evidence_en": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 470,
        "db_id": "card_games",
        "question_en": "When was the set of cards with \"Ancestor's Chosen\" released?",
        "question_ar": "",
        "evidence_en": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "simple"
    },
    {
        "question_id": 471,
        "db_id": "card_games",
        "question_en": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
        "question_ar": "",
        "evidence_en": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "evidence_ar": "",
        "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "difficulty": "simple"
    },
    {
        "question_id": 472,
        "db_id": "card_games",
        "question_en": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
        "question_ar": "",
        "evidence_en": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 473,
        "db_id": "card_games",
        "question_en": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
        "question_ar": "",
        "evidence_en": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
        "evidence_ar": "",
        "SQL": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "difficulty": "moderate"
    },
    {
        "question_id": 474,
        "db_id": "card_games",
        "question_en": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
        "question_ar": "",
        "evidence_en": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 475,
        "db_id": "card_games",
        "question_en": "How many cards in the set Coldsnap have a black border color?",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "simple"
    },
    {
        "question_id": 476,
        "db_id": "card_games",
        "question_en": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 477,
        "db_id": "card_games",
        "question_en": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "difficulty": "challenging"
    },
    {
        "question_id": 478,
        "db_id": "card_games",
        "question_en": "What is card number 4 in the set Coldsnap?",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
        "difficulty": "simple"
    },
    {
        "question_id": 479,
        "db_id": "card_games",
        "question_en": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 480,
        "db_id": "card_games",
        "question_en": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
        "question_ar": "",
        "evidence_en": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
        "evidence_ar": "",
        "SQL": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 481,
        "db_id": "card_games",
        "question_en": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
        "question_ar": "",
        "evidence_en": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null",
        "evidence_ar": "",
        "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 482,
        "db_id": "card_games",
        "question_en": "What's the German type of the card \"Ancestor's Chosen\"?",
        "question_ar": "",
        "evidence_en": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
        "difficulty": "simple"
    },
    {
        "question_id": 483,
        "db_id": "card_games",
        "question_en": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 484,
        "db_id": "card_games",
        "question_en": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "moderate"
    },
    {
        "question_id": 485,
        "db_id": "card_games",
        "question_en": "When was the ruling for the card 'Reminisce' created?",
        "question_ar": "",
        "evidence_en": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence_ar": "",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "difficulty": "simple"
    },
    {
        "question_id": 486,
        "db_id": "card_games",
        "question_en": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
        "question_ar": "",
        "evidence_en": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "moderate"
    },
    {
        "question_id": 487,
        "db_id": "card_games",
        "question_en": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
        "question_ar": "",
        "evidence_en": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "challenging"
    },
    {
        "question_id": 488,
        "db_id": "card_games",
        "question_en": "What's the code for the set which was released on 2017/7/14?",
        "question_ar": "",
        "evidence_en": "released on 2017/7/14 refers to releaseDate = '2017-07-14'",
        "evidence_ar": "",
        "SQL": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
        "difficulty": "simple"
    },
    {
        "question_id": 489,
        "db_id": "card_games",
        "question_en": "List the keyrune code for the set whose code is 'PKHC'.",
        "question_ar": "",
        "evidence_en": "keyrune code refers to keyruneCode",
        "evidence_ar": "",
        "SQL": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "difficulty": "simple"
    },
    {
        "question_id": 490,
        "db_id": "card_games",
        "question_en": "For the set which had 'SS2' as the code, what is its magic card market id?",
        "question_ar": "",
        "evidence_en": "magic card market id refers to mcmId",
        "evidence_ar": "",
        "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "difficulty": "simple"
    },
    {
        "question_id": 491,
        "db_id": "card_games",
        "question_en": "What's the magic card market name for the set which was released on 2017/6/9?",
        "question_ar": "",
        "evidence_en": "magic card market name refers to mcmName",
        "evidence_ar": "",
        "SQL": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "difficulty": "simple"
    },
    {
        "question_id": 492,
        "db_id": "card_games",
        "question_en": "For the set \"From the Vault: Lore\", what is its expansion type?",
        "question_ar": "",
        "evidence_en": "set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type",
        "evidence_ar": "",
        "SQL": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'",
        "difficulty": "simple"
    },
    {
        "question_id": 493,
        "db_id": "card_games",
        "question_en": "For the set \"Commander 2014 Oversized\" , give its parent code.",
        "question_ar": "",
        "evidence_en": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence_ar": "",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "difficulty": "simple"
    },
    {
        "question_id": 494,
        "db_id": "card_games",
        "question_en": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
        "question_ar": "",
        "evidence_en": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;",
        "evidence_ar": "",
        "SQL": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'",
        "difficulty": "challenging"
    },
    {
        "question_id": 495,
        "db_id": "card_games",
        "question_en": "What was the release date for the set which card \"Evacuation\" in it?",
        "question_ar": "",
        "evidence_en": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence_ar": "",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "difficulty": "simple"
    },
    {
        "question_id": 496,
        "db_id": "card_games",
        "question_en": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
        "question_ar": "",
        "evidence_en": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "evidence_ar": "",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
        "difficulty": "simple"
    },
    {
        "question_id": 497,
        "db_id": "card_games",
        "question_en": "List the expansion type of the set \"Huitième édition\".",
        "question_ar": "",
        "evidence_en": "the set \"Huitième édition\" refers to translation = 'Huitième édition'; expansion type refers to type",
        "evidence_ar": "",
        "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' )",
        "difficulty": "simple"
    },
    {
        "question_id": 498,
        "db_id": "card_games",
        "question_en": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question_ar": "",
        "evidence_en": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence_ar": "",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 499,
        "db_id": "card_games",
        "question_en": "How many translations of the name of the set \"Tenth Edition\"?",
        "question_ar": "",
        "evidence_en": "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 500,
        "db_id": "card_games",
        "question_en": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question_ar": "",
        "evidence_en": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence_ar": "",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 501,
        "db_id": "card_games",
        "question_en": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
        "question_ar": "",
        "evidence_en": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'",
        "evidence_ar": "",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 502,
        "db_id": "card_games",
        "question_en": "What is the release date for the set \"Ola de frío\"?",
        "question_ar": "",
        "evidence_en": "release date is the date of card set being released; set \"Ola de frío\" refers to translation = 'Ola de frío'",
        "evidence_ar": "",
        "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de frío'",
        "difficulty": "simple"
    },
    {
        "question_id": 503,
        "db_id": "card_games",
        "question_en": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
        "question_ar": "",
        "evidence_en": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'",
        "evidence_ar": "",
        "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )",
        "difficulty": "simple"
    },
    {
        "question_id": 504,
        "db_id": "card_games",
        "question_en": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
        "question_ar": "",
        "evidence_en": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 505,
        "db_id": "card_games",
        "question_en": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
        "question_ar": "",
        "evidence_en": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'",
        "evidence_ar": "",
        "SQL": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
        "difficulty": "moderate"
    },
    {
        "question_id": 506,
        "db_id": "card_games",
        "question_en": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",
        "question_ar": "",
        "evidence_en": "Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 507,
        "db_id": "card_games",
        "question_en": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
        "question_ar": "",
        "evidence_en": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 508,
        "db_id": "card_games",
        "question_en": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
        "question_ar": "",
        "evidence_en": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 509,
        "db_id": "card_games",
        "question_en": "What is the unique id of the set that has the highest number of cards?",
        "question_ar": "",
        "evidence_en": "the highest number of cards refers to MAX(baseSetSize); unique id refers to id",
        "evidence_ar": "",
        "SQL": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 510,
        "db_id": "card_games",
        "question_en": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
        "question_ar": "",
        "evidence_en": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist",
        "evidence_ar": "",
        "SQL": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 511,
        "db_id": "card_games",
        "question_en": "What is the most common visual frame effects among the incredibly powerful foils?",
        "question_ar": "",
        "evidence_en": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)",
        "evidence_ar": "",
        "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 512,
        "db_id": "card_games",
        "question_en": "How many cards with unknown power that can't be found in foil is in duel deck A?",
        "question_ar": "",
        "evidence_en": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
        "difficulty": "simple"
    },
    {
        "question_id": 513,
        "db_id": "card_games",
        "question_en": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
        "question_ar": "",
        "evidence_en": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "evidence_ar": "",
        "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 514,
        "db_id": "card_games",
        "question_en": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
        "question_ar": "",
        "evidence_en": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
        "difficulty": "simple"
    },
    {
        "question_id": 515,
        "db_id": "card_games",
        "question_en": "When was the oldest mythic card released and what are its legal play formats?",
        "question_ar": "",
        "evidence_en": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "evidence_ar": "",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 516,
        "db_id": "card_games",
        "question_en": "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?",
        "question_ar": "",
        "evidence_en": "Volkan BaÇµa refers to artist = 'Volkan Baǵa'; foreign language is in French refers to language = 'French'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3",
        "difficulty": "moderate"
    },
    {
        "question_id": 517,
        "db_id": "card_games",
        "question_en": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
        "question_ar": "",
        "evidence_en": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "difficulty": "moderate"
    },
    {
        "question_id": 518,
        "db_id": "card_games",
        "question_en": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
        "question_ar": "",
        "evidence_en": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "evidence_ar": "",
        "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "difficulty": "moderate"
    },
    {
        "question_id": 519,
        "db_id": "card_games",
        "question_en": "What is the language of the \"Battlebond\" set?",
        "question_ar": "",
        "evidence_en": "\"Battlebond\" set refers to name = 'Battlebond'",
        "evidence_ar": "",
        "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
        "difficulty": "simple"
    },
    {
        "question_id": 520,
        "db_id": "card_games",
        "question_en": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
        "question_ar": "",
        "evidence_en": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)",
        "evidence_ar": "",
        "SQL": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 521,
        "db_id": "card_games",
        "question_en": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
        "question_ar": "",
        "evidence_en": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
        "difficulty": "challenging"
    },
    {
        "question_id": 522,
        "db_id": "card_games",
        "question_en": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
        "question_ar": "",
        "evidence_en": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "evidence_ar": "",
        "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "difficulty": "moderate"
    },
    {
        "question_id": 523,
        "db_id": "card_games",
        "question_en": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
        "question_ar": "",
        "evidence_en": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 524,
        "db_id": "card_games",
        "question_en": "List the artists who illustrated cards with black borders which are available only in arena.",
        "question_ar": "",
        "evidence_en": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "difficulty": "simple"
    },
    {
        "question_id": 525,
        "db_id": "card_games",
        "question_en": "Find the uuid of cards in which the old school format is restricted or banned.",
        "question_ar": "",
        "evidence_en": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'",
        "evidence_ar": "",
        "SQL": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
        "difficulty": "simple"
    },
    {
        "question_id": 526,
        "db_id": "card_games",
        "question_en": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
        "question_ar": "",
        "evidence_en": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "difficulty": "simple"
    },
    {
        "question_id": 527,
        "db_id": "card_games",
        "question_en": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question_ar": "",
        "evidence_en": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence_ar": "",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "difficulty": "moderate"
    },
    {
        "question_id": 528,
        "db_id": "card_games",
        "question_en": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
        "question_ar": "",
        "evidence_en": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 529,
        "db_id": "card_games",
        "question_en": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "question_ar": "",
        "evidence_en": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "evidence_ar": "",
        "SQL": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "difficulty": "moderate"
    },
    {
        "question_id": 530,
        "db_id": "card_games",
        "question_en": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question_ar": "",
        "evidence_en": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "difficulty": "moderate"
    },
    {
        "question_id": 531,
        "db_id": "codebase_community",
        "question_en": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "question_ar": "",
        "evidence_en": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "difficulty": "simple"
    },
    {
        "question_id": 532,
        "db_id": "codebase_community",
        "question_en": "Please list the display names of all the users whose accounts were created in the year 2011.",
        "question_ar": "",
        "evidence_en": "account created in the year 2011 refers to year(CreationDate) = 2011",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "difficulty": "simple"
    },
    {
        "question_id": 533,
        "db_id": "codebase_community",
        "question_en": "How many users last accessed the website after 2014/9/1?",
        "question_ar": "",
        "evidence_en": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 534,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who has the most number of views?",
        "question_ar": "",
        "evidence_en": "user who has the most number of view refers to Max(Views)",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 535,
        "db_id": "codebase_community",
        "question_en": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
        "question_ar": "",
        "evidence_en": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
        "difficulty": "simple"
    },
    {
        "question_id": 536,
        "db_id": "codebase_community",
        "question_en": "How many users with more than 10 views created their account after the year 2013?",
        "question_ar": "",
        "evidence_en": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 537,
        "db_id": "codebase_community",
        "question_en": "How many posts does the user csgillespie own?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 538,
        "db_id": "codebase_community",
        "question_en": "Please list the titles of the posts owned by the user csgillespie?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 539,
        "db_id": "codebase_community",
        "question_en": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "question_ar": "",
        "evidence_en": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "difficulty": "simple"
    },
    {
        "question_id": 540,
        "db_id": "codebase_community",
        "question_en": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 541,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who is the owner of the most valuable post?",
        "question_ar": "",
        "evidence_en": "most valuable post refers to Max(FavoriteCount)",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 542,
        "db_id": "codebase_community",
        "question_en": "What is the total number of comments of all the posts owned by csgillespie?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 543,
        "db_id": "codebase_community",
        "question_en": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)",
        "evidence_ar": "",
        "SQL": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 544,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "question_ar": "",
        "evidence_en": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "difficulty": "moderate"
    },
    {
        "question_id": 545,
        "db_id": "codebase_community",
        "question_en": "Among the posts owned by csgillespie, how many of them are root posts?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 546,
        "db_id": "codebase_community",
        "question_en": "Please list the display names of all the users who owns a post that is well-finished.",
        "question_ar": "",
        "evidence_en": "the post that is well-finished refers to ClosedDate IS NOT Null",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 547,
        "db_id": "codebase_community",
        "question_en": "Among the posts owned by an elder user, how many of them have a score of over 19?",
        "question_ar": "",
        "evidence_en": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
        "difficulty": "simple"
    },
    {
        "question_id": 548,
        "db_id": "codebase_community",
        "question_en": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "question_ar": "",
        "evidence_en": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence_ar": "",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "difficulty": "simple"
    },
    {
        "question_id": 549,
        "db_id": "codebase_community",
        "question_en": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "question_ar": "",
        "evidence_en": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "evidence_ar": "",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
        "difficulty": "simple"
    },
    {
        "question_id": 550,
        "db_id": "codebase_community",
        "question_en": "From which post is the most popular tag excerpted from? Please give the body of the post.",
        "question_ar": "",
        "evidence_en": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId",
        "evidence_ar": "",
        "SQL": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 551,
        "db_id": "codebase_community",
        "question_en": "How many badges has the user csgillespie obtained?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 552,
        "db_id": "codebase_community",
        "question_en": "Please list the names of the badges obtained by csgillespie.",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user",
        "evidence_ar": "",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 553,
        "db_id": "codebase_community",
        "question_en": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 554,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who has obtained the most number of badges?",
        "question_ar": "",
        "evidence_en": "who obtained the most number of badges refers to UserID with Max(Count(Id))",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 555,
        "db_id": "codebase_community",
        "question_en": "What is the average score of the posts owned by the user csgillespie?",
        "question_ar": "",
        "evidence_en": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 556,
        "db_id": "codebase_community",
        "question_en": "What is the average number of badges obtained by a user with over 200 views?",
        "question_ar": "",
        "evidence_en": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
        "difficulty": "simple"
    },
    {
        "question_id": 557,
        "db_id": "codebase_community",
        "question_en": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
        "question_ar": "",
        "evidence_en": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 558,
        "db_id": "codebase_community",
        "question_en": "How many votes did the user No.58 take on 2010/7/19?",
        "question_ar": "",
        "evidence_en": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "difficulty": "simple"
    },
    {
        "question_id": 559,
        "db_id": "codebase_community",
        "question_en": "Indicate the creation date of the maximum number of votes.",
        "question_ar": "",
        "evidence_en": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
        "evidence_ar": "",
        "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 560,
        "db_id": "codebase_community",
        "question_en": "Give the number of \"Revival\" badges.",
        "question_ar": "",
        "evidence_en": "number refers to Id; 'Revival' is the Name of badge",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "difficulty": "simple"
    },
    {
        "question_id": 561,
        "db_id": "codebase_community",
        "question_en": "What is the title for the post which got the highest score comment?",
        "question_ar": "",
        "evidence_en": "highest score comment refers to Max(comments.Score)",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 562,
        "db_id": "codebase_community",
        "question_en": "For the post which got 1910 view counts, how many comments does it get?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
        "difficulty": "simple"
    },
    {
        "question_id": 563,
        "db_id": "codebase_community",
        "question_en": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "question_ar": "",
        "evidence_en": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
        "evidence_ar": "",
        "SQL": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
        "difficulty": "moderate"
    },
    {
        "question_id": 564,
        "db_id": "codebase_community",
        "question_en": "Give the only one comment text of the post with parent id 107829.",
        "question_ar": "",
        "evidence_en": "one comment refers to CommentCount = '1'",
        "evidence_ar": "",
        "SQL": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 565,
        "db_id": "codebase_community",
        "question_en": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "question_ar": "",
        "evidence_en": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
        "evidence_ar": "",
        "SQL": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
        "difficulty": "moderate"
    },
    {
        "question_id": 566,
        "db_id": "codebase_community",
        "question_en": "For the owner user of post No. 65041, what is his/her reputation points?",
        "question_ar": "",
        "evidence_en": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
        "evidence_ar": "",
        "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "difficulty": "simple"
    },
    {
        "question_id": 567,
        "db_id": "codebase_community",
        "question_en": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
        "question_ar": "",
        "evidence_en": "\"Tiago Pasqualini\" is the DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
        "difficulty": "simple"
    },
    {
        "question_id": 568,
        "db_id": "codebase_community",
        "question_en": "Provide the display name of the user who made the vote No.6347.",
        "question_ar": "",
        "evidence_en": "vote no. 6347 refers to Id = '6347'",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
        "difficulty": "simple"
    },
    {
        "question_id": 569,
        "db_id": "codebase_community",
        "question_en": "Give the number of votes for the post about data visualization.",
        "question_ar": "",
        "evidence_en": "About data visualization is the Title that contains 'data visualization';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
        "difficulty": "simple"
    },
    {
        "question_id": 570,
        "db_id": "codebase_community",
        "question_en": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question_ar": "",
        "evidence_en": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "difficulty": "simple"
    },
    {
        "question_id": 571,
        "db_id": "codebase_community",
        "question_en": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "question_ar": "",
        "evidence_en": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
        "difficulty": "moderate"
    },
    {
        "question_id": 572,
        "db_id": "codebase_community",
        "question_en": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "question_ar": "",
        "evidence_en": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence_ar": "",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "difficulty": "moderate"
    },
    {
        "question_id": 573,
        "db_id": "codebase_community",
        "question_en": "Write the contents of comments with a score of 17.",
        "question_ar": "",
        "evidence_en": "score of 17 refers to Score = 17; contents of comments refers to Text",
        "evidence_ar": "",
        "SQL": "SELECT Text FROM comments WHERE Score = 17",
        "difficulty": "simple"
    },
    {
        "question_id": 574,
        "db_id": "codebase_community",
        "question_en": "Which user has the website URL listed at 'http://stackoverflow.com'",
        "question_ar": "",
        "evidence_en": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "difficulty": "simple"
    },
    {
        "question_id": 575,
        "db_id": "codebase_community",
        "question_en": "What is the badge name that user 'SilentGhost' obtained?",
        "question_ar": "",
        "evidence_en": "\"SilentGhost\" is the DisplayName of user;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "difficulty": "simple"
    },
    {
        "question_id": 576,
        "db_id": "codebase_community",
        "question_en": "Name the user that commented 'thank you user93!'",
        "question_ar": "",
        "evidence_en": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
        "difficulty": "simple"
    },
    {
        "question_id": 577,
        "db_id": "codebase_community",
        "question_en": "Write all comments made by user 'A Lion.'",
        "question_ar": "",
        "evidence_en": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "evidence_ar": "",
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
        "difficulty": "simple"
    },
    {
        "question_id": 578,
        "db_id": "codebase_community",
        "question_en": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
        "question_ar": "",
        "evidence_en": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
        "difficulty": "moderate"
    },
    {
        "question_id": 579,
        "db_id": "codebase_community",
        "question_en": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
        "question_ar": "",
        "evidence_en": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text",
        "evidence_ar": "",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
        "difficulty": "simple"
    },
    {
        "question_id": 580,
        "db_id": "codebase_community",
        "question_en": "Name 10 users with the badge name 'Necromancer.'",
        "question_ar": "",
        "evidence_en": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 581,
        "db_id": "codebase_community",
        "question_en": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
        "question_ar": "",
        "evidence_en": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "difficulty": "moderate"
    },
    {
        "question_id": 582,
        "db_id": "codebase_community",
        "question_en": "List the title of posts which were edited by Vebjorn Ljosa.",
        "question_ar": "",
        "evidence_en": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "difficulty": "simple"
    },
    {
        "question_id": 583,
        "db_id": "codebase_community",
        "question_en": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
        "question_ar": "",
        "evidence_en": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
        "difficulty": "simple"
    },
    {
        "question_id": 584,
        "db_id": "codebase_community",
        "question_en": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "question_ar": "",
        "evidence_en": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "difficulty": "moderate"
    },
    {
        "question_id": 585,
        "db_id": "codebase_community",
        "question_en": "How much is the total bounty amount of the post titled about 'data'",
        "question_ar": "",
        "evidence_en": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
        "evidence_ar": "",
        "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
        "difficulty": "simple"
    },
    {
        "question_id": 586,
        "db_id": "codebase_community",
        "question_en": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "question_ar": "",
        "evidence_en": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "evidence_ar": "",
        "SQL": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 587,
        "db_id": "codebase_community",
        "question_en": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
        "question_ar": "",
        "evidence_en": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "difficulty": "moderate"
    },
    {
        "question_id": 588,
        "db_id": "codebase_community",
        "question_en": "Give the total number of comments posted by user ID 13.",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
        "difficulty": "simple"
    },
    {
        "question_id": 589,
        "db_id": "codebase_community",
        "question_en": "Which user ID has the highest reputation?",
        "question_ar": "",
        "evidence_en": "highest reputation refers to Max(Reputation)",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 590,
        "db_id": "codebase_community",
        "question_en": "Which user ID has the lowest view?",
        "question_ar": "",
        "evidence_en": "lowest views refers to Min(Views)",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 591,
        "db_id": "codebase_community",
        "question_en": "How many users are awarded with supporter badge during year 2011?",
        "question_ar": "",
        "evidence_en": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
        "difficulty": "simple"
    },
    {
        "question_id": 592,
        "db_id": "codebase_community",
        "question_en": "How many users are awarded with more than 5 badges?",
        "question_ar": "",
        "evidence_en": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "difficulty": "simple"
    },
    {
        "question_id": 593,
        "db_id": "codebase_community",
        "question_en": "How many users from New York have a teacher and supporter badge?",
        "question_ar": "",
        "evidence_en": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
        "difficulty": "simple"
    },
    {
        "question_id": 594,
        "db_id": "codebase_community",
        "question_en": "Which user created post ID 1 and what is the reputation of this user?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 595,
        "db_id": "codebase_community",
        "question_en": "Which user have only one post history per post and having at least 1000 views?",
        "question_ar": "",
        "evidence_en": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 596,
        "db_id": "codebase_community",
        "question_en": "Which users have posted the most comments. List out the user's badge?",
        "question_ar": "",
        "evidence_en": "user with the most comments refers to UserId where Max(Count(Id)",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 597,
        "db_id": "codebase_community",
        "question_en": "How many users from India have the teacher badges?",
        "question_ar": "",
        "evidence_en": "\"India\" is the Location; \"Teacher\" is the Name of badge",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "difficulty": "simple"
    },
    {
        "question_id": 598,
        "db_id": "codebase_community",
        "question_en": "What is the percentage difference of student badges given during 2010 and 2011?",
        "question_ar": "",
        "evidence_en": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
        "difficulty": "challenging"
    },
    {
        "question_id": 599,
        "db_id": "codebase_community",
        "question_en": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
        "difficulty": "simple"
    },
    {
        "question_id": 600,
        "db_id": "codebase_community",
        "question_en": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
        "question_ar": "",
        "evidence_en": "post related refers to RelatedPostId; popularity refers to ViewCount",
        "evidence_ar": "",
        "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
        "difficulty": "simple"
    },
    {
        "question_id": 601,
        "db_id": "codebase_community",
        "question_en": "What is the score and the link type ID for post ID 395?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395",
        "difficulty": "simple"
    },
    {
        "question_id": 602,
        "db_id": "codebase_community",
        "question_en": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
        "question_ar": "",
        "evidence_en": "score more than 60 refers to Score > 60",
        "evidence_ar": "",
        "SQL": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
        "difficulty": "simple"
    },
    {
        "question_id": 603,
        "db_id": "codebase_community",
        "question_en": "What is the sum of favourite count gained by user ID 686 in 2011?",
        "question_ar": "",
        "evidence_en": "in 2011 refers to year (CreatinDate) = 2011",
        "evidence_ar": "",
        "SQL": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
        "difficulty": "simple"
    },
    {
        "question_id": 604,
        "db_id": "codebase_community",
        "question_en": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
        "question_ar": "",
        "evidence_en": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question_id": 605,
        "db_id": "codebase_community",
        "question_en": "How many users obtained the \"Announcer\" badge?",
        "question_ar": "",
        "evidence_en": "\"Announcer\" is the Name of badge; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "difficulty": "simple"
    },
    {
        "question_id": 606,
        "db_id": "codebase_community",
        "question_en": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
        "question_ar": "",
        "evidence_en": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
        "evidence_ar": "",
        "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 607,
        "db_id": "codebase_community",
        "question_en": "How many positive comments are there on the list?",
        "question_ar": "",
        "evidence_en": "Positive comment refers to score > 60",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM comments WHERE score > 60",
        "difficulty": "simple"
    },
    {
        "question_id": 608,
        "db_id": "codebase_community",
        "question_en": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
        "question_ar": "",
        "evidence_en": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
        "evidence_ar": "",
        "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 609,
        "db_id": "codebase_community",
        "question_en": "How many posts have a score of 10 on the list?",
        "question_ar": "",
        "evidence_en": "score of 10 refers to Score = 10; post refers to Id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM posts WHERE Score = 10",
        "difficulty": "simple"
    },
    {
        "question_id": 610,
        "db_id": "codebase_community",
        "question_en": "What are the name of badge that users who have the highest reputation obtained?",
        "question_ar": "",
        "evidence_en": "highest reputation refers to Max(Reputation); user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 611,
        "db_id": "codebase_community",
        "question_en": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
        "question_ar": "",
        "evidence_en": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 612,
        "db_id": "codebase_community",
        "question_en": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "difficulty": "simple"
    },
    {
        "question_id": 613,
        "db_id": "codebase_community",
        "question_en": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question_ar": "",
        "evidence_en": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "difficulty": "simple"
    },
    {
        "question_id": 614,
        "db_id": "codebase_community",
        "question_en": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
        "question_ar": "",
        "evidence_en": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
        "difficulty": "simple"
    },
    {
        "question_id": 615,
        "db_id": "codebase_community",
        "question_en": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
        "question_ar": "",
        "evidence_en": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
        "difficulty": "moderate"
    },
    {
        "question_id": 616,
        "db_id": "codebase_community",
        "question_en": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
        "question_ar": "",
        "evidence_en": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 617,
        "db_id": "codebase_community",
        "question_en": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
        "question_ar": "",
        "evidence_en": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 618,
        "db_id": "codebase_community",
        "question_en": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question_ar": "",
        "evidence_en": "\"Vienna, Austria\" is the Location",
        "evidence_ar": "",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "difficulty": "simple"
    },
    {
        "question_id": 619,
        "db_id": "codebase_community",
        "question_en": "How many adults who obtained the badge Supporter?",
        "question_ar": "",
        "evidence_en": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "difficulty": "simple"
    },
    {
        "question_id": 620,
        "db_id": "codebase_community",
        "question_en": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
        "question_ar": "",
        "evidence_en": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 621,
        "db_id": "codebase_community",
        "question_en": "What are the name of badges that users who have the lowest reputation obtained?",
        "question_ar": "",
        "evidence_en": "lowest reputation refers to Min(Reputation); user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
        "difficulty": "simple"
    },
    {
        "question_id": 622,
        "db_id": "codebase_community",
        "question_en": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question_ar": "",
        "evidence_en": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "difficulty": "simple"
    },
    {
        "question_id": 623,
        "db_id": "codebase_community",
        "question_en": "How many elders obtained the \"Supporter\" badge?",
        "question_ar": "",
        "evidence_en": "\"Supporter\" is the Name of badge;  elders refers to Age > 65",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
        "difficulty": "simple"
    },
    {
        "question_id": 624,
        "db_id": "codebase_community",
        "question_en": "What is the name of user with the ID of 30?",
        "question_ar": "",
        "evidence_en": "name of user refers to DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Id = 30",
        "difficulty": "simple"
    },
    {
        "question_id": 625,
        "db_id": "codebase_community",
        "question_en": "How many users were from New York?",
        "question_ar": "",
        "evidence_en": "New York refers to Location;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
        "difficulty": "simple"
    },
    {
        "question_id": 626,
        "db_id": "codebase_community",
        "question_en": "How many votes were made in 2010?",
        "question_ar": "",
        "evidence_en": "YEAR(CreationDate) = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
        "difficulty": "simple"
    },
    {
        "question_id": 627,
        "db_id": "codebase_community",
        "question_en": "How many users were adult?",
        "question_ar": "",
        "evidence_en": "adult refers to user where Age BETWEEN 19 and 65;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
        "difficulty": "simple"
    },
    {
        "question_id": 628,
        "db_id": "codebase_community",
        "question_en": "Which users have the highest number of views?",
        "question_ar": "",
        "evidence_en": "users have the highest number of views refer to DisplayName where MAX(Views);",
        "evidence_ar": "",
        "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 629,
        "db_id": "codebase_community",
        "question_en": "Calculate the ratio of votes in 2010 and 2011.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
        "difficulty": "simple"
    },
    {
        "question_id": 630,
        "db_id": "codebase_community",
        "question_en": "What is the name of tags used by John Salvatier's?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'John Salvatier';",
        "evidence_ar": "",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "difficulty": "simple"
    },
    {
        "question_id": 631,
        "db_id": "codebase_community",
        "question_en": "How many posts were created by Daniel Vassallo?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'Daniel Vassallo';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
        "difficulty": "simple"
    },
    {
        "question_id": 632,
        "db_id": "codebase_community",
        "question_en": "How many votes were made by Harlan?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'Harlan';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
        "difficulty": "simple"
    },
    {
        "question_id": 633,
        "db_id": "codebase_community",
        "question_en": "Which post by slashnick has the most answers count? State the post ID.",
        "question_ar": "",
        "evidence_en": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence_ar": "",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 634,
        "db_id": "codebase_community",
        "question_en": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "question_ar": "",
        "evidence_en": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 635,
        "db_id": "codebase_community",
        "question_en": "How many posts by Matt Parker have more than 4 votes?",
        "question_ar": "",
        "evidence_en": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 636,
        "db_id": "codebase_community",
        "question_en": "How many negative comments did Neil McGuigan get in his posts?",
        "question_ar": "",
        "evidence_en": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
        "difficulty": "simple"
    },
    {
        "question_id": 637,
        "db_id": "codebase_community",
        "question_en": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
        "question_ar": "",
        "evidence_en": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
        "evidence_ar": "",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 638,
        "db_id": "codebase_community",
        "question_en": "List all the name of users that obtained the Organizer Badges.",
        "question_ar": "",
        "evidence_en": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "difficulty": "simple"
    },
    {
        "question_id": 639,
        "db_id": "codebase_community",
        "question_en": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "difficulty": "challenging"
    },
    {
        "question_id": 640,
        "db_id": "codebase_community",
        "question_en": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "question_ar": "",
        "evidence_en": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "evidence_ar": "",
        "SQL": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "difficulty": "moderate"
    },
    {
        "question_id": 641,
        "db_id": "codebase_community",
        "question_en": "How many users received commentator badges in 2014?",
        "question_ar": "",
        "evidence_en": "Commentator is the name of the badge; year(Date) = 2014;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
        "difficulty": "simple"
    },
    {
        "question_id": 642,
        "db_id": "codebase_community",
        "question_en": "How many posts were created on 21st July, 2010?",
        "question_ar": "",
        "evidence_en": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
        "difficulty": "simple"
    },
    {
        "question_id": 643,
        "db_id": "codebase_community",
        "question_en": "What are the display names and ages of user who got the highest in views?",
        "question_ar": "",
        "evidence_en": "the highest in views refers to MAX(Views);",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 644,
        "db_id": "codebase_community",
        "question_en": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "question_ar": "",
        "evidence_en": "Title = 'Detecting a given face in a database of facial images';",
        "evidence_ar": "",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "difficulty": "simple"
    },
    {
        "question_id": 645,
        "db_id": "codebase_community",
        "question_en": "How many negative comments were given by user ID 13?",
        "question_ar": "",
        "evidence_en": "negative comments refer to Score < 60;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
        "difficulty": "simple"
    },
    {
        "question_id": 646,
        "db_id": "codebase_community",
        "question_en": "Describe the post title which got positive comments and display names of the users who posted those comments.",
        "question_ar": "",
        "evidence_en": "positive comments refer to Score > 60;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
        "difficulty": "simple"
    },
    {
        "question_id": 647,
        "db_id": "codebase_community",
        "question_en": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "question_ar": "",
        "evidence_en": "received in 2011 refers to year(Date) = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "difficulty": "simple"
    },
    {
        "question_id": 648,
        "db_id": "codebase_community",
        "question_en": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
        "question_ar": "",
        "evidence_en": "favorite count of more than 150 refers to FavoriteCount > 150;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
        "difficulty": "simple"
    },
    {
        "question_id": 649,
        "db_id": "codebase_community",
        "question_en": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "difficulty": "simple"
    },
    {
        "question_id": 650,
        "db_id": "codebase_community",
        "question_en": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question_ar": "",
        "evidence_en": "Outliers is the name of the badge;",
        "evidence_ar": "",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "difficulty": "simple"
    },
    {
        "question_id": 651,
        "db_id": "codebase_community",
        "question_en": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "difficulty": "simple"
    },
    {
        "question_id": 652,
        "db_id": "codebase_community",
        "question_en": "List the post IDs and badge names of the user Samuel in 2013.",
        "question_ar": "",
        "evidence_en": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
        "evidence_ar": "",
        "SQL": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
        "difficulty": "moderate"
    },
    {
        "question_id": 653,
        "db_id": "codebase_community",
        "question_en": "What is the owner's display name of the most popular post?",
        "question_ar": "",
        "evidence_en": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 654,
        "db_id": "codebase_community",
        "question_en": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
        "question_ar": "",
        "evidence_en": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "evidence_ar": "",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "difficulty": "moderate"
    },
    {
        "question_id": 655,
        "db_id": "codebase_community",
        "question_en": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
        "question_ar": "",
        "evidence_en": "Title = 'What are principal component scores?';",
        "evidence_ar": "",
        "SQL": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
        "difficulty": "simple"
    },
    {
        "question_id": 656,
        "db_id": "codebase_community",
        "question_en": "Describe the display name of the parent ID for child post with the highest score.",
        "question_ar": "",
        "evidence_en": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 657,
        "db_id": "codebase_community",
        "question_en": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
        "question_ar": "",
        "evidence_en": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 658,
        "db_id": "codebase_community",
        "question_en": "What are the titles of the top 5 posts with the highest popularity?",
        "question_ar": "",
        "evidence_en": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);",
        "evidence_ar": "",
        "SQL": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 659,
        "db_id": "codebase_community",
        "question_en": "How many tags have post count between 5,000 to 7,000?",
        "question_ar": "",
        "evidence_en": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "difficulty": "simple"
    },
    {
        "question_id": 660,
        "db_id": "codebase_community",
        "question_en": "What is the owner user id of the most valuable post?",
        "question_ar": "",
        "evidence_en": "the most valuable post refers to MAX(FavoriteCount);",
        "evidence_ar": "",
        "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
        "difficulty": "simple"
    },
    {
        "question_id": 661,
        "db_id": "codebase_community",
        "question_en": "How old is the most influential user?",
        "question_ar": "",
        "evidence_en": "How old describes age; the most influential refers to user where MAX(Reputation);",
        "evidence_ar": "",
        "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 662,
        "db_id": "codebase_community",
        "question_en": "How many posts with votes that were created in 2011 have a bounty of 50?",
        "question_ar": "",
        "evidence_en": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
        "difficulty": "simple"
    },
    {
        "question_id": 663,
        "db_id": "codebase_community",
        "question_en": "What is the id of the youngest user?",
        "question_ar": "",
        "evidence_en": "the youngest user refers to MIN(Age);",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 664,
        "db_id": "codebase_community",
        "question_en": "What is the sum of score of the post on 2010-07-19?",
        "question_ar": "",
        "evidence_en": "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';",
        "evidence_ar": "",
        "SQL": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "difficulty": "simple"
    },
    {
        "question_id": 665,
        "db_id": "codebase_community",
        "question_en": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
        "question_ar": "",
        "evidence_en": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
        "difficulty": "moderate"
    },
    {
        "question_id": 666,
        "db_id": "codebase_community",
        "question_en": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
        "question_ar": "",
        "evidence_en": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 667,
        "db_id": "codebase_community",
        "question_en": "What is the title of the post with the oldest post link?",
        "question_ar": "",
        "evidence_en": "the oldest post link refers to MIN(CreaionDate);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 668,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who acquired the highest amount of badges?",
        "question_ar": "",
        "evidence_en": "highest amount of badges refers to MAX(COUNT(Name));",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 669,
        "db_id": "codebase_community",
        "question_en": "When did 'chl' cast its first vote in a post?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 670,
        "db_id": "codebase_community",
        "question_en": "What is the date when the youngest user made his or her first post?",
        "question_ar": "",
        "evidence_en": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 671,
        "db_id": "codebase_community",
        "question_en": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question_ar": "",
        "evidence_en": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 672,
        "db_id": "codebase_community",
        "question_en": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "question_ar": "",
        "evidence_en": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 673,
        "db_id": "codebase_community",
        "question_en": "What is the average number of posts voted by the oldest users?",
        "question_ar": "",
        "evidence_en": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
        "difficulty": "simple"
    },
    {
        "question_id": 674,
        "db_id": "codebase_community",
        "question_en": "Who has the highest reputation? Please give the display name.",
        "question_ar": "",
        "evidence_en": "the highest reputation refers to MAX(Reputation);",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "difficulty": "simple"
    },
    {
        "question_id": 675,
        "db_id": "codebase_community",
        "question_en": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
        "question_ar": "",
        "evidence_en": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "difficulty": "simple"
    },
    {
        "question_id": 676,
        "db_id": "codebase_community",
        "question_en": "Please list all display names of users who are adults.",
        "question_ar": "",
        "evidence_en": "adults refer to users where Age BETWEEN 19 and 65;",
        "evidence_ar": "",
        "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "difficulty": "simple"
    },
    {
        "question_id": 677,
        "db_id": "codebase_community",
        "question_en": "How many posts did Jay Stevens have in 2010?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
        "difficulty": "simple"
    },
    {
        "question_id": 678,
        "db_id": "codebase_community",
        "question_en": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "question_ar": "",
        "evidence_en": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 679,
        "db_id": "codebase_community",
        "question_en": "Which post has the highest score? Please give its id and title's name.",
        "question_ar": "",
        "evidence_en": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
        "evidence_ar": "",
        "SQL": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 680,
        "db_id": "codebase_community",
        "question_en": "What is the average score of Stephen Turner's posts?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
        "difficulty": "simple"
    },
    {
        "question_id": 681,
        "db_id": "codebase_community",
        "question_en": "Please list the users' display names whose posts had over 20000 views in 2011.",
        "question_ar": "",
        "evidence_en": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;",
        "evidence_ar": "",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
        "difficulty": "simple"
    },
    {
        "question_id": 682,
        "db_id": "codebase_community",
        "question_en": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
        "question_ar": "",
        "evidence_en": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
        "evidence_ar": "",
        "SQL": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 683,
        "db_id": "codebase_community",
        "question_en": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question_id": 684,
        "db_id": "codebase_community",
        "question_en": "Identify the percentage of teenage users.",
        "question_ar": "",
        "evidence_en": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
        "difficulty": "simple"
    },
    {
        "question_id": 685,
        "db_id": "codebase_community",
        "question_en": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "question_ar": "",
        "evidence_en": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "evidence_ar": "",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "difficulty": "moderate"
    },
    {
        "question_id": 686,
        "db_id": "codebase_community",
        "question_en": "Identify the total number of posts with views above average.",
        "question_ar": "",
        "evidence_en": "views above average refer to ViewCount > AVG(ViewCount);",
        "evidence_ar": "",
        "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
        "difficulty": "simple"
    },
    {
        "question_id": 687,
        "db_id": "codebase_community",
        "question_en": "How many comments were added to the post with the highest score?",
        "question_ar": "",
        "evidence_en": "the highest score refers to MAX(Score);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 688,
        "db_id": "codebase_community",
        "question_en": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
        "question_ar": "",
        "evidence_en": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 689,
        "db_id": "codebase_community",
        "question_en": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
        "question_ar": "",
        "evidence_en": "last to edit refers to MAX(LastEditDate);",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 690,
        "db_id": "codebase_community",
        "question_en": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question_ar": "",
        "evidence_en": "the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence_ar": "",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 691,
        "db_id": "codebase_community",
        "question_en": "Identify the number of adult users who have cast over 5000 upvotes.",
        "question_ar": "",
        "evidence_en": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "difficulty": "simple"
    },
    {
        "question_id": 692,
        "db_id": "codebase_community",
        "question_en": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question_ar": "",
        "evidence_en": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "difficulty": "moderate"
    },
    {
        "question_id": 693,
        "db_id": "codebase_community",
        "question_en": "Identify the number of posts and comments left by the user, who has the latest created user account.",
        "question_ar": "",
        "evidence_en": "the latest created user account refers to MAX(CreationDate);",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 694,
        "db_id": "codebase_community",
        "question_en": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "question_ar": "",
        "evidence_en": "the latest comment refers to MAX(CreationDate);",
        "evidence_ar": "",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 695,
        "db_id": "codebase_community",
        "question_en": "How many users were awarded with 'Citizen Patrol' badge?",
        "question_ar": "",
        "evidence_en": "Citizen Patrol' is the name of the badge;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
        "difficulty": "simple"
    },
    {
        "question_id": 696,
        "db_id": "codebase_community",
        "question_en": "Count the number of posts with a tag specified as 'careers'.",
        "question_ar": "",
        "evidence_en": "tag specified as 'careers' refers to TagName = 'careers';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
        "difficulty": "simple"
    },
    {
        "question_id": 697,
        "db_id": "codebase_community",
        "question_en": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "difficulty": "simple"
    },
    {
        "question_id": 698,
        "db_id": "codebase_community",
        "question_en": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "difficulty": "simple"
    },
    {
        "question_id": 699,
        "db_id": "codebase_community",
        "question_en": "When did the user known as 'IrishStat' create his or her account?",
        "question_ar": "",
        "evidence_en": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence_ar": "",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "difficulty": "simple"
    },
    {
        "question_id": 700,
        "db_id": "codebase_community",
        "question_en": "Identify the number of posts that offer a bounty amount over 30.",
        "question_ar": "",
        "evidence_en": "bounty amount over 30 refers to BountyAmount > = 30;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
        "difficulty": "simple"
    },
    {
        "question_id": 701,
        "db_id": "codebase_community",
        "question_en": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "question_ar": "",
        "evidence_en": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
        "difficulty": "challenging"
    },
    {
        "question_id": 702,
        "db_id": "codebase_community",
        "question_en": "How many posts have a score less than 20?",
        "question_ar": "",
        "evidence_en": "score less than 20 refers to Score < 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20",
        "difficulty": "simple"
    },
    {
        "question_id": 703,
        "db_id": "codebase_community",
        "question_en": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
        "question_ar": "",
        "evidence_en": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
        "difficulty": "simple"
    },
    {
        "question_id": 704,
        "db_id": "codebase_community",
        "question_en": "What is the excerpt post ID and wiki post ID of the tag named sample?",
        "question_ar": "",
        "evidence_en": "tag named sample refers to TagName = 'sample';",
        "evidence_ar": "",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "difficulty": "simple"
    },
    {
        "question_id": 705,
        "db_id": "codebase_community",
        "question_en": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
        "question_ar": "",
        "evidence_en": "Text = 'fine, you win :)';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "difficulty": "simple"
    },
    {
        "question_id": 706,
        "db_id": "codebase_community",
        "question_en": "Give the texts commented on the post about linear regression.",
        "question_ar": "",
        "evidence_en": "about linear regression refers to Title contains 'linear regression'",
        "evidence_ar": "",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
        "difficulty": "simple"
    },
    {
        "question_id": 707,
        "db_id": "codebase_community",
        "question_en": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
        "question_ar": "",
        "evidence_en": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
        "evidence_ar": "",
        "SQL": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 708,
        "db_id": "codebase_community",
        "question_en": "List the creation date and age of the user that commented with webiste.",
        "question_ar": "",
        "evidence_en": "commented with webiste refers to the value contains 'http://'",
        "evidence_ar": "",
        "SQL": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 709,
        "db_id": "codebase_community",
        "question_en": "In comments with 0 score, how many of the posts have view count lower than 5?",
        "question_ar": "",
        "evidence_en": "view count lower than 5 refers to ViewCount < 5;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 710,
        "db_id": "codebase_community",
        "question_en": "In posts with 1 comment, how many of the comments have 0 score?",
        "question_ar": "",
        "evidence_en": "in posts with 1 comment refers to CommentCount = 1;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 711,
        "db_id": "codebase_community",
        "question_en": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
        "question_ar": "",
        "evidence_en": "",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
        "difficulty": "simple"
    },
    {
        "question_id": 712,
        "db_id": "codebase_community",
        "question_en": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
        "question_ar": "",
        "evidence_en": "Title = 'Group differences on a five point Likert item';",
        "evidence_ar": "",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
        "difficulty": "simple"
    },
    {
        "question_id": 713,
        "db_id": "codebase_community",
        "question_en": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
        "question_ar": "",
        "evidence_en": "commented \"R is also lazy evaluated.\" refers to Text of the comment;",
        "evidence_ar": "",
        "SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
        "difficulty": "simple"
    },
    {
        "question_id": 714,
        "db_id": "codebase_community",
        "question_en": "List the comments commented by the user with a username of Harvey Motulsky.",
        "question_ar": "",
        "evidence_en": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "evidence_ar": "",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
        "difficulty": "simple"
    },
    {
        "question_id": 715,
        "db_id": "codebase_community",
        "question_en": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
        "question_ar": "",
        "evidence_en": "DownVotes = 0; Score BETWEEN 1 and 5",
        "evidence_ar": "",
        "SQL": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 716,
        "db_id": "codebase_community",
        "question_en": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
        "question_ar": "",
        "evidence_en": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));",
        "evidence_ar": "",
        "SQL": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 717,
        "db_id": "superhero",
        "question_en": "Please list all the superpowers of 3-D Man.",
        "question_ar": "",
        "evidence_en": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "difficulty": "simple"
    },
    {
        "question_id": 718,
        "db_id": "superhero",
        "question_en": "How many superheroes have the super power of \"Super Strength\"?",
        "question_ar": "",
        "evidence_en": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "difficulty": "simple"
    },
    {
        "question_id": 719,
        "db_id": "superhero",
        "question_en": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
        "question_ar": "",
        "evidence_en": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "difficulty": "moderate"
    },
    {
        "question_id": 720,
        "db_id": "superhero",
        "question_en": "Please list the full names of all the superheroes with over 15 super powers.",
        "question_ar": "",
        "evidence_en": "15 super powers refers to COUNT(full_name) > 15",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "difficulty": "simple"
    },
    {
        "question_id": 721,
        "db_id": "superhero",
        "question_en": "How many superheroes have blue eyes?",
        "question_ar": "",
        "evidence_en": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "difficulty": "simple"
    },
    {
        "question_id": 722,
        "db_id": "superhero",
        "question_en": "What is the colour of Apocalypse's skin?",
        "question_ar": "",
        "evidence_en": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "difficulty": "simple"
    },
    {
        "question_id": 723,
        "db_id": "superhero",
        "question_en": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "question_ar": "",
        "evidence_en": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "difficulty": "moderate"
    },
    {
        "question_id": 724,
        "db_id": "superhero",
        "question_en": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "question_ar": "",
        "evidence_en": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "difficulty": "challenging"
    },
    {
        "question_id": 725,
        "db_id": "superhero",
        "question_en": "How many superheroes are published by Marvel Comics?",
        "question_ar": "",
        "evidence_en": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "difficulty": "simple"
    },
    {
        "question_id": 726,
        "db_id": "superhero",
        "question_en": "Rank heroes published by Marvel Comics by their height in descending order.",
        "question_ar": "",
        "evidence_en": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "difficulty": "moderate"
    },
    {
        "question_id": 727,
        "db_id": "superhero",
        "question_en": "Who is the publisher of Sauron?",
        "question_ar": "",
        "evidence_en": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "difficulty": "simple"
    },
    {
        "question_id": 728,
        "db_id": "superhero",
        "question_en": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "question_ar": "",
        "evidence_en": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence_ar": "",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "difficulty": "moderate"
    },
    {
        "question_id": 729,
        "db_id": "superhero",
        "question_en": "What is the average height of the superheroes from Marvel Comics?",
        "question_ar": "",
        "evidence_en": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "difficulty": "simple"
    },
    {
        "question_id": 730,
        "db_id": "superhero",
        "question_en": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question_ar": "",
        "evidence_en": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "challenging"
    },
    {
        "question_id": 731,
        "db_id": "superhero",
        "question_en": "How many superheroes did DC Comics publish?",
        "question_ar": "",
        "evidence_en": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "difficulty": "simple"
    },
    {
        "question_id": 732,
        "db_id": "superhero",
        "question_en": "Which publisher published the slowest superhero?",
        "question_ar": "",
        "evidence_en": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 733,
        "db_id": "superhero",
        "question_en": "How many gold-eyed superheroes did Marvel Comics publish?",
        "question_ar": "",
        "evidence_en": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
        "difficulty": "moderate"
    },
    {
        "question_id": 734,
        "db_id": "superhero",
        "question_en": "What is the publisher's name of Blue Beetle II?",
        "question_ar": "",
        "evidence_en": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence_ar": "",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "difficulty": "simple"
    },
    {
        "question_id": 735,
        "db_id": "superhero",
        "question_en": "How many superheroes with blonde hair are there?",
        "question_ar": "",
        "evidence_en": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "difficulty": "simple"
    },
    {
        "question_id": 736,
        "db_id": "superhero",
        "question_en": "Who is the dumbest superhero?",
        "question_ar": "",
        "evidence_en": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 737,
        "db_id": "superhero",
        "question_en": "What is Copycat's race?",
        "question_ar": "",
        "evidence_en": "Copycat is the superhero_name;",
        "evidence_ar": "",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "difficulty": "simple"
    },
    {
        "question_id": 738,
        "db_id": "superhero",
        "question_en": "Which superheroes have a durability attribute value of less than 50?",
        "question_ar": "",
        "evidence_en": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "evidence_ar": "",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "difficulty": "simple"
    },
    {
        "question_id": 739,
        "db_id": "superhero",
        "question_en": "What are the names of the superheroes with the power of death touch?",
        "question_ar": "",
        "evidence_en": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "difficulty": "moderate"
    },
    {
        "question_id": 740,
        "db_id": "superhero",
        "question_en": "How many female superheroes have a strength value of 100?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "difficulty": "moderate"
    },
    {
        "question_id": 741,
        "db_id": "superhero",
        "question_en": "What is the name of the superhero that has the most powers?",
        "question_ar": "",
        "evidence_en": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 742,
        "db_id": "superhero",
        "question_en": "How many vampire superheroes are there?",
        "question_ar": "",
        "evidence_en": "vampire superheroes refers to race = 'Vampire'",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "difficulty": "simple"
    },
    {
        "question_id": 743,
        "db_id": "superhero",
        "question_en": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "question_ar": "",
        "evidence_en": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "evidence_ar": "",
        "SQL": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question_id": 744,
        "db_id": "superhero",
        "question_en": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
        "question_ar": "",
        "evidence_en": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))",
        "evidence_ar": "",
        "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "difficulty": "challenging"
    },
    {
        "question_id": 745,
        "db_id": "superhero",
        "question_en": "Give the publisher ID of Star Trek.",
        "question_ar": "",
        "evidence_en": "Star Trek is the publisher_name;",
        "evidence_ar": "",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "difficulty": "simple"
    },
    {
        "question_id": 746,
        "db_id": "superhero",
        "question_en": "Calculate the average attribute value of all superheroes.",
        "question_ar": "",
        "evidence_en": "average attribute value of all superheroes refers to AVG(attribute_value)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(attribute_value) FROM hero_attribute",
        "difficulty": "simple"
    },
    {
        "question_id": 747,
        "db_id": "superhero",
        "question_en": "What is the total number of superheroes without full name?",
        "question_ar": "",
        "evidence_en": "superheroes without full name refers to full_name IS NULL",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 748,
        "db_id": "superhero",
        "question_en": "What is the eye colour of superhero with superhero ID 75?",
        "question_ar": "",
        "evidence_en": "eye colour refers to colour where eye_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "difficulty": "simple"
    },
    {
        "question_id": 749,
        "db_id": "superhero",
        "question_en": "Provide the superpowers of the superhero called Deathlok.",
        "question_ar": "",
        "evidence_en": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "difficulty": "simple"
    },
    {
        "question_id": 750,
        "db_id": "superhero",
        "question_en": "What is the average weight of all female superheroes?",
        "question_ar": "",
        "evidence_en": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)",
        "evidence_ar": "",
        "SQL": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "difficulty": "simple"
    },
    {
        "question_id": 751,
        "db_id": "superhero",
        "question_en": "List down at least five superpowers of male superheroes.",
        "question_ar": "",
        "evidence_en": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "evidence_ar": "",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 752,
        "db_id": "superhero",
        "question_en": "Give the name of the alien superheroes.",
        "question_ar": "",
        "evidence_en": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "difficulty": "simple"
    },
    {
        "question_id": 753,
        "db_id": "superhero",
        "question_en": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "question_ar": "",
        "evidence_en": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "difficulty": "moderate"
    },
    {
        "question_id": 754,
        "db_id": "superhero",
        "question_en": "What is the superpower of hero ID 56?",
        "question_ar": "",
        "evidence_en": "superpower refers to hero_power",
        "evidence_ar": "",
        "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
        "difficulty": "simple"
    },
    {
        "question_id": 755,
        "db_id": "superhero",
        "question_en": "List down at least five full name of Demi-God superheroes.",
        "question_ar": "",
        "evidence_en": "Demi-God superheroes refers to race = 'Demi-God'",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "difficulty": "simple"
    },
    {
        "question_id": 756,
        "db_id": "superhero",
        "question_en": "How many bad superheroes are there?",
        "question_ar": "",
        "evidence_en": "bad superheroes refers to alignment_id = Bad",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "difficulty": "simple"
    },
    {
        "question_id": 757,
        "db_id": "superhero",
        "question_en": "Identify the race of the superhero who weighed 169 kg.",
        "question_ar": "",
        "evidence_en": "weighed 169 kg refers to weight_kg = 169",
        "evidence_ar": "",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "difficulty": "simple"
    },
    {
        "question_id": 758,
        "db_id": "superhero",
        "question_en": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "question_ar": "",
        "evidence_en": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "difficulty": "moderate"
    },
    {
        "question_id": 759,
        "db_id": "superhero",
        "question_en": "What is the eye clolour of the heaviest superhero?",
        "question_ar": "",
        "evidence_en": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;",
        "evidence_ar": "",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 760,
        "db_id": "superhero",
        "question_en": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
        "question_ar": "",
        "evidence_en": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "difficulty": "challenging"
    },
    {
        "question_id": 761,
        "db_id": "superhero",
        "question_en": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
        "question_ar": "",
        "evidence_en": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
        "evidence_ar": "",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
        "difficulty": "moderate"
    },
    {
        "question_id": 762,
        "db_id": "superhero",
        "question_en": "Which power do superheroes have the most of?",
        "question_ar": "",
        "evidence_en": "power that superheroes have the most refers to MAX(COUNT(power_name))",
        "evidence_ar": "",
        "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 763,
        "db_id": "superhero",
        "question_en": "Indicate the attribute value of superhero Abomination.",
        "question_ar": "",
        "evidence_en": "Abomination refers to superhero_name = 'Abomination';",
        "evidence_ar": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "difficulty": "simple"
    },
    {
        "question_id": 764,
        "db_id": "superhero",
        "question_en": "What are the superpowers of heroes with ID 1?",
        "question_ar": "",
        "evidence_en": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 765,
        "db_id": "superhero",
        "question_en": "How many heroes have stealth power?",
        "question_ar": "",
        "evidence_en": "stealth power refers to power_name = 'stealth';",
        "evidence_ar": "",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "difficulty": "simple"
    },
    {
        "question_id": 766,
        "db_id": "superhero",
        "question_en": "What is the hero's full name with the highest attribute in strength?",
        "question_ar": "",
        "evidence_en": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "evidence_ar": "",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 767,
        "db_id": "superhero",
        "question_en": "What is the average of superheroes with no skin colour?",
        "question_ar": "",
        "evidence_en": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;",
        "evidence_ar": "",
        "SQL": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
        "difficulty": "simple"
    }
]